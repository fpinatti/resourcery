[
    {
        "title": [
            "Issue #452"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/16Si-gdZ000/"
        ],
        "pubDate": [
            "Wed, 24 Mar 2021 20:25:52 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-452/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to implement a dark mode, how to avoid the most common speed issues caused by CSS, how blending modes work, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://blog.sentry.io/2021/03/16/building-dark-mode?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Building Dark Mode</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://blog.sentry.io/2021/03/16/building-dark-mode?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/building-dark-mode.jpg\" alt=\"Building Dark Mode\" /></a>\n\t\t\t\t\t\t<p>Robin Rendle explains how implementing a dark mode can help improve your front-end design components.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://blog.sentry.io/2021/03/16/building-dark-mode?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://calibreapp.com/blog/css-performance?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">How to Improve CSS Performance</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://calibreapp.com/blog/css-performance?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/how-to-improve-css-performance.jpg\" alt=\"How to Improve CSS Performance\" /></a>\n\t\t\t\t\t\t<p>Milica Mihajlija outlines the most common speed issues caused by CSS and explains how to avoid them.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://calibreapp.com/blog/css-performance?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/spring-summit-virtually-together\">Let’s get together virtually this Spring</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/spring-summit-virtually-together\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/spring-summit-virtually-together.png\" alt=\"Let’s get together virtually this Spring\" /></a>\n\t\t\t\t\t\t<p><a href=\"https://cssw.io/spring-summit-virtually-together\" target=\"_blank\" rel=\"noopener\">Online Together: Spring Summit</a> is a three-day web design conference with an intense focus on digital design, UX, content, code, and more—featuring 15 in-depth sessions, Q&amp;A with the speakers, “After Hours” events to conclude each day, and more. You’ll get deep insights into where we are now and where things are going next. Join us online April 19–21.</p>\n<p>Save $100 on any multi-day pass with promo code <strong>AEACSSW21</strong>.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/spring-summit-virtually-together\">See the detailed three-day agenda and sign up today.</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/compat2021/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Compat2021: Eliminating Five Top Compatibility Pain Points on the Web</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Robert Nyman and Philip Jägenstedt give an overview of what are browser vendors and industry partners doing to fix the top five browser compatibility pain points for web developers.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/compat2021/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/taming-blend-modes-difference-and-exclusion/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Taming Blend Modes: difference and exclusion</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ana Tudor explains how blending works, takes a closer look at two somewhat similar blend modes — difference and exclusion — and dissects some cool use cases for blend modes.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/taming-blend-modes-difference-and-exclusion/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://letsbuildui.dev/articles/how-to-listen-for-css-events-in-javascript?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">How to Listen for CSS Events in Javascript</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ryan Finni shares a guide to working with CSS animation and transition events.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://letsbuildui.dev/articles/how-to-listen-for-css-events-in-javascript?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/03/good-better-best-untangling-complex-world-accessible-patterns/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Good, Better, Best: Untangling The Complex World Of Accessible Patterns</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Carie Fisher untangles the complex world of accessible practices and explains how to better evaluate patterns for accessibility.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/03/good-better-best-untangling-complex-world-accessible-patterns/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.sarasoueidan.com/blog/accessible-text-labels/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Accessible Text Labels For All </a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Sara Soueidan shares some advice on improving eCommerce experiences for screen reader users without breaking them for speech-input users.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.sarasoueidan.com/blog/accessible-text-labels/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"https://css-weekly.com/advertise/#job-ad\" target=\"_blank\">Promoted Link <small style=\"text-decoration:underline;\">(via ThoughtLeaders)</small></a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/dot-design-domain-name\">Get Your Free .design Domain Name!</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/dot-design-domain-name\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/02/grab-your-free-name-before-its-gone.png\" alt=\"Get Your Free .design Domain Name!\" /></a>\n\t\t\t\t\t\t<p>Thinking of building your portfolio? .design is like .com and .net, but it&#8217;s more relevant to what you do as a designer. Your .design name comes with free email, SSL, &amp; a Site Builder.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/dot-design-domain-name\">Grab Your Free Name Before It's Gone!</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://transition.style/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Transition.css</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Transition.css is a set of 46 pre-built slick CSS transitions you can quickly drop into your projects.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://transition.style/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://haikei.app/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Haikei</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Haikei is a web app to generate unique SVG shapes, backgrounds, and patterns – ready to use with your design tools and workflow.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://haikei.app/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/amit_sheen/pen/abBgWvJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Bouncing off the Walls…</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/amit_sheen/pen/abBgWvJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/bouncing-off-the-walls1.png\" alt=\"Bouncing off the Walls…\" /></a>\n\t\t\t\t\t\t<p>Amit Sheen created a stunning 3d animation using CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/amit_sheen/pen/abBgWvJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/16Si-gdZ000\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-452/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "How to Use SVG Image Sprites"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/use-svg-image-sprites/?utm_source=rss\"\n              title=\"How to Use SVG Image Sprites\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2013/10/1617930547svg-sprite.png\"\n        alt=\"How to Use SVG Image Sprites\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2013/10/1617930547svg-sprite-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2013/10/1617930547svg-sprite.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This tutorial describes two ways to create <em>sprites</em> containing many images. However, it uses SVGs rather than the more well-known bitmap techniques.</strong></p>\n<p>SVGs are ideal for logos, diagrams, and icons for several reasons:</p>\n<ul>\n<li>It&#8217;s easy to created and manipulate SVGs on the client or server.</li>\n<li>Unlike bitmaps, SVGs can be scaled to any size without losing quality.</li>\n<li>Unlike webfont icons, SVGs remain pin-sharp and can apply multiple colors, gradients, and even complex filters.</li>\n</ul>\n<h2 id=\"whatareimagesprites\">What are Image Sprites?</h2>\n<p>Image sprites have been a good-practice technique for many years. If you require a number of regularly used graphics, you place them in a single image rather than individual files. For example:</p>\n<p><img src=\"https://blogs.sitepointstatic.com/images/tech/881-svg-image-sprites-example.png\" alt=\"image sprite\" /></p>\n<p>This example contains eight 24×24 icons in a single 192px × 24px file. The file may offer slightly better compression and it only requires a single HTTP request for all icons to become visible. Loading eight separate icons is unlikely to take much longer over HTTP/2, but the images could appear at different times and would only be cached on first use.</p>\n<p>If you wanted to show the right-most printer icon, CSS can display the correct image by positioning the background:</p>\n<pre><code class=\"css language-css\">#print\r\n{\r\n  width: 24px;\r\n  height: 24px;\r\n  background: url('sprite.png') -168px 0;\r\n}\r\n</code></pre>\n<p>Various tools can be used to calculate pixel positions and generate CSS code:</p>\n<ul>\n<li><a href=\"https://www.toptal.com/developers/css/sprite-generator/\">CSS Sprites Generator</a></li>\n<li><a href=\"https://cssspritestool.com/\">cssspritestool.com</a></li>\n<li><a href=\"http://www.spritecow.com/\">Spite Cow</a></li>\n</ul>\n<h2 id=\"svgimagesprites\">SVG Image Sprites</h2>\n<p>Multiple SVG images can also be placed into a single SVG file and each can be referenced by an ID rather than a pixel position.</p>\n<p>The most common technique is to define individual images within an <a href=\"https://developer.mozilla.org/docs/Web/SVG/Element/symbol\">SVG &lt;symbol&gt;</a>. For example, this SVG contains a green circle, red square, and blue triangle:</p>\n<pre><code class=\"svg language-svg\">&lt;svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\r\n\r\n  &lt;symbol id=\"circle\"&gt;\r\n    &lt;circle cx=\"50\" cy=\"50\" r=\"45\" stroke-width=\"5\" stroke=\"#0f0\" fill=\"#0f0\" fill-opacity=\"0.5\" /&gt;\r\n  &lt;/symbol&gt;\r\n\r\n  &lt;symbol id=\"square\"&gt;\r\n    &lt;rect y=\"5\" x=\"5\" width=\"90\" height=\"90\" stroke-width=\"5\" stroke=\"#f00\" fill=\"#f00\" fill-opacity=\"0.5\" /&gt;\r\n  &lt;/symbol&gt;\r\n\r\n  &lt;symbol id=\"triangle\"&gt;\r\n    &lt;path d=\"M20,7 L92,50 L6,93 z\" stroke-width=\"5\" stroke=\"#00f\" fill=\"#00f\" fill-opacity=\"0.5\" /&gt;\r\n  &lt;/symbol&gt;\r\n\r\n&lt;/svg&gt;\r\n</code></pre>\n<p>A single sprite can be used any number of times throughout a page with <a href=\"https://developer.mozilla.org/docs/Web/SVG/Element/use\">SVG <code>&lt;use&gt;</code></a>:</p>\n<pre><code class=\"markup language-markup\">&lt;svg width=\"100\" height=\"100\"&gt;\r\n  &lt;use xlink:href=\"./spriteuse.svg#circle\" /&gt;\r\n&lt;/svg&gt;\r\n\r\n&lt;svg width=\"100\" height=\"100\"&gt;\r\n  &lt;use xlink:href=\"./spriteuse.svg#square\" /&gt;\r\n&lt;/svg&gt;\r\n\r\n&lt;svg width=\"100\" height=\"100\"&gt;\r\n  &lt;use xlink:href=\"./spriteuse.svg#triangle\" /&gt;\r\n&lt;/svg&gt;\r\n</code></pre>\n<p>Unfortunately, older browsers such as IE11 and below won&#8217;t load the external image. The best workaround is to embed the full SVG into the HTML markup and reference each sprite using its target. For example:</p>\n<pre><code class=\"markup language-markup\">&lt;svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\r\n\r\n  &lt;symbol id=\"circle\"&gt;\r\n    &lt;circle cx=\"50\" cy=\"50\" r=\"45\" stroke-width=\"5\" stroke=\"#0f0\" fill=\"#0f0\" fill-opacity=\"0.5\" /&gt;\r\n  &lt;/symbol&gt;\r\n\r\n  &lt;!-- further images --&gt;\r\n\r\n&lt;/svg&gt;\r\n\r\n&lt;!-- display circle --&gt;\r\n&lt;svg width=\"100\" height=\"100\"&gt;\r\n  &lt;use xlink:href=\"#circle\" /&gt;\r\n&lt;/svg&gt;\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/use-svg-image-sprites/?utm_source=rss\">How to Use SVG Image Sprites</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/use-svg-image-sprites/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=71662",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Browsers",
            "Canvas & SVG"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Wed, 10 Mar 2021 00:09:05 GMT"
        ],
        "metaDesc": [
            "Sprites are popular for bundling graphics into a single file. And they can even be made with SVGs! Learn how SVG sprites work and why they're so awesome."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Chapter 9: Community"
        ],
        "link": [
            "https://css-tricks.com/chapter-9-community/"
        ],
        "comments": [
            "https://css-tricks.com/chapter-9-community/#respond"
        ],
        "dc:creator": [
            "Jay Hoffmann"
        ],
        "pubDate": [
            "Thu, 24 Jun 2021 14:30:11 +0000"
        ],
        "category": [
            "Article",
            "History",
            "social"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=342818",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>In April of 2009, Yahoo! shut down GeoCities. Practically overnight, the once beloved service had its signup page replaced with a vague message announcing its closure.</p>\n<blockquote class=\"wp-block-quote\">\n<p>We have decided to discontinue the process of allowing new customers to sign up </p>\n</blockquote>\n<p>&#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/chapter-9-community/\">Chapter 9: Community</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>In April of 2009, Yahoo! shut down GeoCities. Practically overnight, the once beloved service had its signup page replaced with a vague message announcing its closure.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>We have decided to discontinue the process of allowing new customers to sign up for GeoCities accounts as we focus on helping our customers explore and build new relationships online in other ways. We will be closing GeoCities later this year.</p><p>Existing GeoCities accounts have not changed. You can continue to enjoy your web site and GeoCities services until later this year. You don’t need to change a thing right now — we just wanted you to let you know about the closure as soon as possible. We’ll provide more details about closing GeoCities and how to save your site data this summer, and we will update the help center with more details at that time.</p></blockquote>\n\n\n\n<p>In the coming months, the company would offer little more detail than that. Within a year, user homepages built with GeoCities would blink out of existence, one by one, until they were all gone.</p>\n\n\n\n<span id=\"more-342818\"></span>\n\n\n\n<p>Reactions to the news ranged from outrage to contemptful good riddance. In general, however, the web lamented about a great loss. Former GeoCities users recalled the sites that they built using the service, often hidden from public view, and often while they were very young.</p>\n\n\n\n<p>For programmer and archivist Jason Scott, nostalgic remembrances did not go far enough. He had only recently created the Archive Team, a rogue group of Internet archivists willing to lend their compute cycles to the rescue of soon departed websites. The Archive Team monitors sites on the web marked for closure. If they find one, they run scripts on their computers to download as much of the site as they could before it disappears.</p>\n\n\n\n<p>Scott did not think the question of whether or not GeoCities deserved to exist was relevant. “Please recall, if you will, that for hundreds of thousands of people, <em>this was their first website</em>,” <a href=\"http://ascii.textfiles.com/archives/1956\">he posted to his website</a> not long after Yahoo!‘s announcement. “[Y]ou could walk up to any internet-connected user, hand them the URL, and know they would be able to see your stuff. In full color.” GeoCities wasn‘t simply a service. It wasn’t just some website. It was burst of creative energy that surged from the web.</p>\n\n\n\n<p>In the weeks and months that followed, the Archive Team set to work downloading as many GeoCities sites as they could. They would end up with millions in their archive before Yahoo! pulled the plug.</p>\n\n\n\n<p>Chris Wilson recalled the promise of an early web in a talk looking back on his storied career with Mosaic, then Internet Explorer, and later Google Chrome. <a href=\"https://css-tricks.com/chapter-2-browsers/\">The first web browser</a>, developed by Sir Tim Berners-Lee, included the ability for users to create their own websites. As Wilson remembers it, that was the de-facto assumption about the web—that it would be a participatory medium.</p>\n\n\n\n<p>“Everyone can be an author. Everyone would generate content,” <a href=\"https://www.youtube.com/watch?v=KRE9S7B-DV8\">Wilson said</a>, “We had the idea that web server software should be free and everyone would run a server on their machine.” His work on Mosaic included features well ahead of their time, like built-in annotations so that users could collaborate and share thoughts on web documents together. They built server software in the hopes that groups of friends would cluster around common servers. By the time Netscape skyrocketed to popularity, however, all of those features had faded away.</p>\n\n\n\n<p>GeoCities represented the last remaining bastion of this original promise of the web. Closing the service down, abruptly and without cause, was a betrayal of that promise. For some, it was the writing on the wall: the web of tomorrow was to look nothing like the web of yesterday.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>In a story he recalls frequently, David Bohnett learned about the web on an airplane. Tens of thousands of feet up, untethered from any Internet network, he first saw mention of the web in a magazine. Soon thereafter, he fell in love.</p>\n\n\n\n<p>Bohnett is a naturally empathetic individual. The long arc of his career so far has centered on bringing people together, both as a technologist and as a committed activist. As a graduate student, he worked as a counselor answering calls on a crisis hotline and became involved in the gay rights movement at his school. In more recent years, Bohnett has <a href=\"http://www.bohnettfoundation.org\">devoted his life to philanthropy</a>.</p>\n\n\n\n<p>Finding connection through compassion has been a driving force for Bohnett for a long time. At a young age, he recognized the potential of technology to help him reach others. “I was a ham radio operator in high school. It was exciting to collect postcards from people you talked to around the world,” <a href=\"https://www.nytimes.com/1998/07/13/business/the-neighborhood-business-geocities-cyberworld-is-vibrant-but-can-it-make-money.html\">he would later say in an interview</a>. “[T]hat is a lot of what the Web is about.‘’</p>\n\n\n\n<p>Some of the earliest websites brought together radical subcultures and common interests. People felt around in the dark of cyberspace until they found something they liked.</p>\n\n\n\n<p>Riding a wave of <a href=\"https://www.nme.com/blogs/nme-blogs/brief-history-riot-grrrl-space-reclaiming-90s-punk-movement-2542166\">riot grrrl</a> ephemera in the early 1990’s, ChickClick was an early example. Featuring a mix of articles and message boards, women and young girls used ChickClick as a place to gather and swap stories from their own experience.</p>\n\n\n\n<p>Much of the site centered on its strident creators, sisters Heather and Heidi Swanson. Though they each had their own areas of responsibility—Heidi provided the text and the editorial, Heather acted as the community liaison—both were integral parts of the community they created. ChickClick would not exist without the Swanson sisters. They anchored the site to their own personalities and let it expand through like-minded individuals.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2048\" height=\"734\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?resize=2048%2C734&#038;ssl=1\" alt=\"\" class=\"wp-image-342819\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?w=2048&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?resize=300%2C108&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?resize=1024%2C367&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?resize=768%2C275&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?resize=1536%2C551&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/FF51DE98-CB4E-45B3-892E-620EA3090A68.jpeg?resize=1000%2C358&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Eventually, <a href=\"https://thehistoryoftheweb.com/hissyfit/\">ChickClick grew into a network of linked sites</a>, each focused on a narrower demographic; an interconnected universe of women on the web. The cost to expanding was virtually zero, just a few more bytes zipping around the Internet. ChickClick’s greatest innovation came when they offered their users their own homepages. Using a rudimentary website builder, visitors could create their own space on the web, for free and hosted by ChickClick. Readers were suddenly transformed into direct participants in the universe they had grown to love.</p>\n\n\n\n<p>Bohnett would arrive at a similar idea not long after. After a brief detour running a more conventional web services agency called Beverley Hills Internet, Bohnett and his business partner John Rezner tried something new. In 1994, Bohnett sent around an email to some friends inviting them to create a free homepage (up to 15MB) on their experimental service. The project was called GeoCities.</p>\n\n\n\n<p>What made GeoCities instantly iconic was that it reached for a familiar metaphor in its interface. When users created an account for the first time they had to pick an actual physical location on a virtual map—the digital “address” of their website. “This is the next wave of the net—not just information but habitation,” <a href=\"https://slate.com/technology/2009/10/how-geocities-invented-the-modern-internet.html\">Bohnett would say in a press release announcing the project</a>. Carving out a real space in cyberspace would become a trademark of the GeoCities experience. For many new users of the web, it made the confusing world of the web feel lived in and real.</p>\n\n\n\n<p>The GeoCities map was broken up into a handful of neighborhoods users could join. Each neighborhood had a theme, though there wasn‘t much rhyme or reason to what they were called. Some were based on real world locations, like Beverley Hills for fashion aficionados or Broadway for theater nerds. Others simply played to a theme, like Area51 for the sci-fi crowd or Heartland for parents and families. Themes weren’t enforced, and most were later dropped in everything but name.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1024\" height=\"486\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/9C28EB0A-39D4-4789-B607-E1A7A0A704C7.jpeg?resize=1024%2C486&#038;ssl=1\" alt=\"\" class=\"wp-image-342820\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/9C28EB0A-39D4-4789-B607-E1A7A0A704C7.jpeg?w=1024&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/9C28EB0A-39D4-4789-B607-E1A7A0A704C7.jpeg?resize=300%2C142&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/9C28EB0A-39D4-4789-B607-E1A7A0A704C7.jpeg?resize=768%2C365&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/9C28EB0A-39D4-4789-B607-E1A7A0A704C7.jpeg?resize=1000%2C475&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Credit:&nbsp;<a target=\"_blank\" href=\"https://blog.geocities.institute/archives/3297\" rel=\"noreferrer noopener\">One Terabyte of Kilobyte Age</a></figcaption></figure>\n\n\n\n<p>Neighborhoods were limited to 10,000 people. When that number was reached, the neighborhood expanded into suburbs. Everywhere you went on GeoCities there was a tether to real, physical spaces.</p>\n\n\n\n<p>Like any real-world community, no two neighborhoods were the same. And while some people weeded their digital gardens and tended to their homepages, others left their spaces abandoned and bare, gone almost as soon as they arrived. But a core group of people often gathered in their neighborhoods around common interests and established a set of ground rules.</p>\n\n\n\n<p>Historian Ian Milligan has done extensive research on the mechanics and history of GeoCities. In his digital excavation, he discovered a rich network of GeoCities users who worked hard to keep their neighborhoods orderly and constructive. Some neighborhoods assigned users as community liaisons, something akin to a dorm room RA, or neighborhood watch. Neighbors were asked to (voluntarily) follow a set of rules. Select members acted as resources, reaching out to others to teach them how to build better homepages. “These methods, grounded in the rhetoric of both place and community,” <a href=\"https://uwspace.uwaterloo.ca/bitstream/handle/10012/11859/Welcome%20to%20the%20Web%20-%20The%20Online%20Community%20of%20GeoCities%20and%20the%20Early%20Years%20of%20the%20World%20Wide%20Web.pdf?sequence=1&amp;isAllowed=y\">Milligan argues</a>, “helped make the web accessible to tens of millions of users.”</p>\n\n\n\n<p>For a large majority of users, however, GeoCities was simply a place to experiment, not a formal community. GeoCities would eventually become one of the web’s most popular destinations. As more amateurs poured in, it would become known for a certain garish aesthetic, pixelated GIFs of construction workers, or bright text on bright backgrounds. People used their homepages to host their photo albums, or make celebrity fan sites, or to write about what they had for lunch. The content of GeoCities was as varied as the entirety of human experience. And it became the grounding for a lot of what came next.</p>\n\n\n\n<p>“So was it community?” <a href=\"https://www.harpercollins.com/products/digital-hustlers-casey-kaitstephen-weiss\">Black Planet founder Omar Wasow would later ask</a>. “[I]t was community in the sense that it was user-generated content; it was self-expression.” Self-expression is a powerful ideal, and one that GeoCities proved can bring people together.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Many early communities, GeoCities in particular, offered a charming familiarity in real world connection. Other sites flipped the script entirely to create bizarre and imaginative worlds.</p>\n\n\n\n<p class=\"ticss-7bf515b2\"><img loading=\"lazy\" width=\"824\" height=\"540\" class=\"wp-image-342822 alignleft\" style=\"width: 300px;\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/707345F1-4C0F-4BF4-B71D-DC84E87E642A.jpeg?resize=824%2C540&#038;ssl=1\" align=\"“left”\" alt=\"\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/707345F1-4C0F-4BF4-B71D-DC84E87E642A.jpeg?w=824&amp;ssl=1 824w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/707345F1-4C0F-4BF4-B71D-DC84E87E642A.jpeg?resize=300%2C197&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/707345F1-4C0F-4BF4-B71D-DC84E87E642A.jpeg?resize=768%2C503&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><a href=\"http://www.neopets.com//\">Neopets</a> began as an experiment by students Donna Williams and Adam Powell in 1999. Its first version—a prototype that mixed Williams art and Powell’s tech—had many of the characteristics that would one day make it wildly popular. Users could collect and raise fictional virtual pets inside the fictional universe of Neopia. It operated like the popular handheld toy Tamagotchi, but multiplied and remixed for cyberspace.</p>\n\n\n\n<p>Beyond a loose set of guidelines, there were no concrete objectives. No way to “win” the game. There were only the pets, and pet owners. Owners could create their own profiles, which let them display an ever expanding roster of new pets. Pulled from their imagination, Williams and Powell infused the site with their own personality. They created “unique characters,” <a href=\"https://www.wired.com/2005/12/neopets/\">as Williams later would describe it</a>, “something fantasy-based that could live in this weird, wonderful world.”</p>\n\n\n\n<p>As the site grew, the universe inside it did as well. Neopoints could be earned through online games, not as much a formal objective as much as in-world currency. They could be spent on accessories or trinkets to exhibit on profiles, or be traded in the Neopian stock market (a fully operational simulation of the real one), or used to buy pets at auction. The tens and thousands of users that soon flocked to the site created an entirely new world, mapped on top of of a digital one.</p>\n\n\n\n<p>Like many community creators, Williams and Powell were fiercely protective of what they had built, and the people that used it. They worked hard to create an online environment that was safe and free from cheaters, scammers, and malevolent influence. Those who were found breaking the rules were kicked out. As a result, a younger audience, and one that was mostly young girls, were able to find their place inside of Neopia.</p>\n\n\n\n<p>Neopians—as Neopets owners would often call themselves—rewarded the effort of Powell and Williams by enriching the world however they could. Together, and without any real plan, the users of Neopets crafted a vast community teeming with activity and with its own set of legal and normative standards. The trade market flourished. Users traded tips on customizing profiles, or worked together to find Easter eggs hidden throughout the site. One of the more dramatic examples of users taking ownership of the site was <em>The Neopian Times</em>, an entirely user-run in-universe newspaper documenting the fictional going-ons of Neopia. Its editorial has spanned decades, and <a href=\"http://www.neopets.com/ntimes/\">continues to this day</a>.</p>\n\n\n\n<p>Though an outside observer might find the actions of Neopets frivolous, they were a serious endeavor undertaken by the site’s most devoted fans. It became a place for early web adventurers, mostly young girls and boys, to experience a version of the web that was fun, and predicated on an idea of user participation. Using a bit of code, Neopians could customize their profile to add graphics, colors, and personality to it. “Neopets made coding applicable and personal to people (like me),” <a href=\"https://twitter.com/nicolelzhu/status/922653827043610625\">said one former user</a>, “who otherwise thought coding was a very impersonal activity.” Many Neopets coders went on to make that their careers.</p>\n\n\n\n<p>Neopets was fun and interesting and limited only by the creativity of its users. It was what many imagined a version of the web would look like.</p>\n\n\n\n<p>The site eventually languished under its own ambition. After it was purchased and run by Doug Dohring and later, Viacom, it set its sights on a multimedia franchise. “I never thought we could be bigger than Disney,” <a href=\"https://www.wired.com/2005/12/neopets/\">Dohring once said in a profile in</a> <a href=\"https://www.wired.com/2005/12/neopets/\"><em>Wired,</em></a> <a href=\"https://www.wired.com/2005/12/neopets/\">revealing just how far that ambition went</a>, “but if we could create something <em>like</em> Disney &#8211; that would be phenomenal.” As the site began to lean harder into somewhat deceptive advertising practices and emphasize expansion into different mediums (TV, games, etc.), Neopets began to overreach. Unable to keep pace with the rapid developments of the web, it has been sold to a number of different owners. The site is still intact, and thanks to its users, thriving to this day.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2560\" height=\"1688\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=2560%2C1688&#038;ssl=1\" alt=\"\" class=\"wp-image-342823\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?w=2560&amp;ssl=1 2560w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=300%2C198&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=1024%2C675&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=768%2C506&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=1536%2C1013&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=2048%2C1350&amp;ssl=1 2048w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/0CA4EEBD-1460-49FC-A129-A9A720E89D7A-scaled.jpeg?resize=1000%2C659&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Candice Carpenter thought a village was a handy metaphor for an online community. Her business partner, and co-founder, Nancy Evans suggested adding an “i” to it, for interactive. Within a few years, iVillage would rise to the highest peak of Internet fortunes and hype. Carpenter would cultivate a reputation for being charismatic, fearless, and often divisive, a central figure in the pantheon of dot-com mythology. Her meteoric rise, however, began with a simple idea.</p>\n\n\n\n<p>By the mid-90’s, community was a bundled, repeatable, commotized product (or to some, a “totally overused buzzword,” <a href=\"https://www.harpercollins.com/products/digital-hustlers-casey-kaitstephen-weiss?variant=32128374341666\">as Omar Wasow would later put it</a>). Search portals like Yahoo! and Excite were popular, but their utility came from bouncing visitors off to other destinations. Online communities had a certain stickiness, <a href=\"https://www.newyorker.com/magazine/1999/10/11/free-money\">as one one profile in</a> <a href=\"https://www.newyorker.com/magazine/1999/10/11/free-money\"><em>The New Yorker</em></a> <a href=\"https://www.newyorker.com/magazine/1999/10/11/free-money\">put it</a>, “the intangible quality that brings individuals to a Web site and holds them for long sessions.”</p>\n\n\n\n<p>That unique quality attracted advertisers hoping to monetize the attention of a growing base of users. Waves of investment in <em>community</em>, whatever that meant at any given moment, followed. “The lesson was that users in an online community were perfectly capable of producing value all by themselves,” <a href=\"https://bookshop.org/books/how-the-internet-happened-from-netscape-to-the-iphone/9781631493072\">Internet historian Brian McCullough describes</a>. <em>The New Yorker</em> piece <a href=\"https://www.newyorker.com/magazine/1999/10/11/free-money\">framed it differently</a>. “Audience was real estate, and whoever secured the most real estate first was bound to win.”</p>\n\n\n\n<p>TheGlobe.com was set against the backdrop of this grand drama. Its rapid and spectacular rise to prominence and fall from grace is well documented. The site itself was a series of chat rooms organized by topic, created by recent Cornell alumni Stephan Paternot and Todd Krizelman. It offered a fresh take on standard chat rooms, enabling personalization and fun in-site tools.</p>\n\n\n\n<p>Backed by the notoriously aggressive Wall Street investment bank Bear Stearns, and run by green, youngish recent college grads, theGlobe rose to a heavily inflated valuation in full public view. “We launched nationwide—on cable channels, MTV, networks, the whole nine yards,” Paternot recalls <a href=\"https://bookshop.org/books/a-very-public-offering-the-story-of-theglobe-com-and-the-first-internet-revolution/9781732932401\">in his book about his experience</a>, “We were the first online community to do any type of advertising and fourth or the fifth site to launch a TV ad campaign.” Its collapse would be just as precipitous; and just as public. The site’s founders would be on the covers of magazines and the talk of late night television shows as examples of dot-com glut, with just a hint of schadenfreude.</p>\n\n\n\n<p>So too does iVillage get tucked into the annals of dot-com history. The site‘s often controversial founders were frequent features in magazine profiles and television interviews. Carpenter attracted media attention as deftly as she maneuvered her business through rounds of investment and a colossally successful IPO. Its culture was well-known in the press for being chaotic, resulting in a high rate of turnover that saw the company go through five Chief Financial Officer’s in four years.</p>\n\n\n\n<p>And yet this ignores the community that iVillage managed to build. It began as a collection of different sites, each with a mix of message boards and editorial content centered around a certain topic. The first, a community for parents known as Parent Soup which began at AOL, was their flagship property. Before long, it spanned across sixteen interconnected websites. “iVillage was built on a community model,” writer <a href=\"https://bookshop.org/books/broad-band-the-untold-story-of-the-women-who-made-the-internet/9780593329443\">Claire Evans describes in her book</a> <a href=\"https://bookshop.org/books/broad-band-the-untold-story-of-the-women-who-made-the-internet/9780593329443\"><em>Broad Band</em></a><em>,</em> “its marquee product was forums, where women shared everything from postpartum anxiety and breast cancer stories to advice for managing work stress and unruly teenage children.”</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_8D3AFD8BCEFAE2A9B28EC430F60869E4CA05AA322A697ADDC2694730C7244491_1624052514771_221A0AD7-5860-4DB4-A0F3-46B0E946AE69.jpeg\" alt=\"Candice Carpenter (left) and Nancy Evans (right). Image credit: The New Yorker\"/><figcaption>Candice Carpenter&nbsp;(left)&nbsp;and Nancy Evans&nbsp;(right).<br>Image credit:&nbsp;<a target=\"_blank\" href=\"https://www.newyorker.com/magazine/1999/10/11/free-money\" rel=\"noreferrer noopener\">The New Yorker</a></figcaption></figure>\n\n\n\n<p>Carpenter had a bold and clear vision when she began, a product that had been brewing for years. After growing tired of the slow pace of growth in positions at American Express and QVC, Carpetner was given more free rein consulting for AOL. It was her first experience with an online world. There wasn‘t a lot that impressed her about AOL, but she liked the way people gathered together in groups. “Things about people‘s lives that were just vibrant,” <a href=\"https://money.cnn.com/magazines/fsb/fsb_archive/2001/03/01/298106/\">she’d later remark in an interview</a>, “that’s what I felt the Internet would be.”</p>\n\n\n\n<p>Parent Soup began as a single channel on AOL, but it soon moved to the web along with similar sites for different topics and interests—careers, dating, health and more. What drew people to iVillage sites was their authenticity, their ability to center conversations around topics and bring together people that were passionate about spreading advice. The site was co-founded by Nancy Evans, who had years of experience as an editor in the media industry. Together, they resisted the urge to control every aspect of their community. “The emphasis is more on what visitors to the site can contribute on the particulars of parenthood, relationships and workplace issues,” <a href=\"https://www.nytimes.com/1998/08/03/business/a-focus-on-women-at-ivillagecom.html\">one writer noted</a>, “rather than on top-tier columnists spouting advice and other more traditional editorial offerings used by established media companies.”</p>\n\n\n\n<p>There was, however, something that bound all of the site‘s together: a focus that made iVillage startlingly consistent and popular. Carpenter would <a href=\"https://www.fastcompany.com/62064/ivillagecom\">later put it concisely</a>: “the vision is to help women in their lives with the stuff big and small that they need to get through.” Even as the site expanded to millions of users, and positioned itself as a network specifically for women, and went through one of the largest IPO’s in the tech industry, that simple fact would remain true.</p>\n\n\n\n<p>What’s forgotten in the history of dot-com community is the community. There were, of course, lavish stories of instant millionaires and unbounded ambition. But much of the content that was created was generated by people, people that found each other across vast distances among a shared understanding. The lasting connections that became possible through these communities would outlast the boom and bust cycle of Internet business. Sites like iVillage became benchmarks for later social experiments to aspire to.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>In February of 2002, Edgar Enyedy an active contributor to a still new Spanish version of Wikipedia <a href=\"https://www.amazon.com/Wikipedia-Revolution-Nobodies-Greatest-Encyclopedia/dp/1401303714\">posted to the Wikipedia mailing list</a> and to Wikipedia‘s founder, Jimmy Wales. “I’ve left the project,” he announced, “Good luck with your wikiPAIDia [sic].”</p>\n\n\n\n<p>As Wikipedia grew in the years after it officially launched in 2001, it began to expand to other countries. As it did, each community took on its own tenor and tone, adapting the online encyclopedia to the needs of each locale. “The organisation of topics, for example,” <a href=\"https://www.wired.co.uk/article/wikipedia-spanish-fork\">Enyedy would later explain</a>, “is not the same across languages, cultures and education systems. Historiography is also obviously not the same.”</p>\n\n\n\n<p>Enyedy‘s abrupt exit from the project, and his callous message, was prompted by a post from Wikipedia’s first editor-in-chief Larry Sanger. Sanger had been instrumental in the creation of Wikipedia, but he had recently been asked to step back as a paid employee due to lack of funds. Sanger suggested that sometime in the near future, Wikpedia may turn to ads.</p>\n\n\n\n<p>It was more wishful thinking than actual fact—Sanger hoped that ads may bring him his job back. But it was enough to spurn Enyedy into action. <a href=\"https://www.amazon.com/Wikipedia-Revolution-Nobodies-Greatest-Encyclopedia/dp/1401303714\">The Wikipedia Revolution, author Andrew Lih explains why</a>. “Advertising is the third-rail topic in the community—touch it only if you’re not afraid to get a massive shock.”</p>\n\n\n\n<p>By the end of the month, Enyedy had created an independent fork of the Spanish Wikipedia site, along with a list of demands for him to rejoin the project. The list included moving the site from <code>.com</code> to <code>.org</code> domain and moving servers to infrastructure owned by the community and, of course, a guarantee that ads would not be used. Most of these demands would eventually be met, though its hard to tell what influence Enyedy had.</p>\n\n\n\n<p>The fork of Wikipedia was both a legally and ideologically acceptable project. Wikipedia’s content is licensed under the Creative Commons license; it is freely open and distributable. The code that runs it is open source. It was never a question of whether a fork of Wikipedia was possible. It was a question of why it felt necessary. And the answer speaks to the heart of the Wikipedia community.</p>\n\n\n\n<p>Wikipedia did not begin with a community, but rather as something far more conventional. The first iteration was known as Nupedia, created by Jimmy Wales in early 2000. Wales imagined a traditional encyclopedia ported into the digital space. An encyclopedia that lived online, he reasoned, could be more adaptable than the multi-volume tomes found buried in library stacks or gathering dust on bookshelves.</p>\n\n\n\n<p>Wales was joined by then graduate student Larry Sanger, and together they recruited a team of expert writers and editors to contribute to Nupedia. To guarantee that articles were accurate, they set up a meticulous set of guidelines for entries. Each article contributed to Nupedia went through rounds of feedback and was subject to strict editorial oversight. After a year of work, Nupedia had less than a dozen finished articles and Wales was ready to shut the project down.</p>\n\n\n\n<p>However, he had recently been introduced to the concept of a wiki, a website that anybody can contribute to. As software goes, the wiki is not overly complex. Every page has a publicly accessible “Edit” button. Anyone can go in and make edits, and those edits are tracked and logged in real time.</p>\n\n\n\n<p>In order to solicit feedback on Nupedia, Wales had set up a public mailing list anyone could join. In the year since it was created, around 2,000 people had signed up. In January of 2001, he sent a message to that mailing list with a link to a wiki.</p>\n\n\n\n<p>His hope was that he could crowdsource early drafts of articles from his project’s fans. Instead, users contributed a thousand articles in the first month. Within six months, there were ten thousand. Wales renamed the project to Wikipedia, changed the license for the content so that it was freely distributable, and threw open the doors to anybody that wanted to contribute.</p>\n\n\n\n<p>The rules and operations of Wikipedia can be difficult to define. It has evolved almost in spite of itself. Most articles begin with a single, random contribution and evolve from there. “Wikipedia continues to grow, and articles continue to improve,” media theorist Clary Shirky wrote of the site in his seminal work <a href=\"https://bookshop.org/books/here-comes-everybody-the-power-of-organizing-without-organizations/9780143114949\"><em>Here Comes Everybody</em></a>, “the process is more like creating a coral reef, the sum of millions of individual actions, than creating a car. And the key to creating those individual actions is to hand as much freedom as possible to the average user.”</p>\n\n\n\n<p>From these seemingly random connections and contributions, a tight knit group of frequent editors and writers have formed at the center of Wikipedia. Programmer and famed hacktivist Aaron Swartz <a href=\"http://www.aaronsw.com/weblog/whowriteswikipedia\">described how it all came together</a>. “When you put it all together, the story become clear: an outsider makes one edit to add a chunk of information, then insiders make several edits tweaking and reformatting it,” described Swartz, adding, “as a result, insiders account for the vast majority of the edits. But it’s the outsiders who provide nearly all of the content.” And these insiders, as Swartz referes to them them, created a community.</p>\n\n\n\n<p>“One of the things I like to point out is that Wikipedia is a social innovation, not a technical innovation,” <a href=\"https://www.bigoakinc.com/blog/interview-with-wikipedia-founder-jimmy-wales/\">Wales once said</a>. In the discussion pages of articles and across mailing lists and blogs, Wikipedians have found ways to collaborate and communicate. The work is distributed and uneven—a small community is responsible for a large number of edits and refinements to articles—but it is impressively collated. Using the ethos of open source as a guide, the Wikipedia community created a shared set of expectations and norms, using the largest repository of human knowledge in existence as their anchor.</p>\n\n\n\n<p>Loosely formed and fractured into factions, the Wikipedia community nevertheless follows a set of principles that it has defined over time. Their conventions are defined and redefined on a regular basis, as the community at the core of Wikipedia grows. When it finds a violation of these principles—such as the suggestion that ads will be plastered on the article they helped they create—they sometimes react strongly.</p>\n\n\n\n<p>Wikipedia learned from the fork of Spanish Wikipedia, and set up a continuous feedback loop that has allowed its community to remain at the center of making decisions. This was a primary focus of Katherine Maher, who became exectuvie director of Wikimedia, the company behind Wikipedia, in 2016, and then CEO three years later. Wikimedia’s involvement in the community, <a href=\"https://nymag.com/intelligencer/2018/04/katherine-maher-wikimedia-executive-director-interview.html\">in Maher’s words</a>, “allows us to be honest with ourselves, and honest with our users, and accountable to our users in the spirit of continuous improvement. And I think that that is a different sort of incentive structure that is much more freeing.”</p>\n\n\n\n<p>The result is a hive mind sorting collective knowledge that thrives independently twenty years after it was created. Both Maher and Wales have referred to Wikipedia as a “part of the commons,” a piece of informational infrastructure as important as the cables that pipe bandwidth around the world, built through the work of community.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Fanfiction can be hard to define. It has been the seeds of subculture and an ideological outlet; the subject of intense academic and philosophical inquiry. Fanfiction has often been noted for its unity through anti-hegemony—it is by its very nature illegal or, at the very least, extralegal. As a practice, <a href=\"https://www.researchgate.net/publication/254963652_What_Is_Fanfiction_and_Why_Are_People_Saying_Such_Nice_Things_about_It\">Professor Brownen Thomas has put it plainly</a>: “Stories produced by fans based on plot lines and characters from either a single source text or else a ‘canon’ of works; these fan-created narratives often take the pre-existing storyworld in a new, sometimes bizarre, direction.” Fanfiction predates the Internet, but the web acted as its catalyst.</p>\n\n\n\n<p>Message boards, or forums, began as a technological experiment on the web, a way of replicating the Usenet groups and bulletin boards of the pre-web Internet. Once the technology had matured, people began to use them to gather around common interests. These often began with a niche—fans of a TV show, or a unique hobby—and then used as the beginning point for much wider conversation. Through threaded discussions, forum-goers would discuss a whole range of things in, around, and outside of the message board theme. “If urban history can be applied to virtual space and the evolution of the Web,” <a href=\"https://opinionator.blogs.nytimes.com/2011/07/10/remembrance-of-message-boards-past/\">one writer recalls</a>, “the unruly and twisted message boards are Jane Jacobs. They were built for people, and without much regard to profit.”</p>\n\n\n\n<p>Some stayed small (and some even remain so). Others grew. Fans of the TV show <em>Buffy the Vampire Slayer</em> had used the official message board of the show for years. It famously took on a life of its own when the boards where shut down, and the users funded and maintained an identical version to keep the community alive. Sites like <em>Newgrounds</em> and <em>DeviantART</em> began as places to discuss games and art, respectively. Before long they were the launching pad for the careers of an entire generation of digital creators.</p>\n\n\n\n<p>Fandom found something similar on the web. On message boards and on personal websites, writers swapped fanfiction stories, and readers flocked to boards to find them. They hid in plain sight, developing rules and conventions for how to share among one another without being noticed.</p>\n\n\n\n<p>In the fall of 1998, developer Xing Li began posting to a number of Usenet fanfiction groups. In what would come to be known as his trademark sincerity, <a href=\"https://groups.google.com/g/alt.tv.simpsons/c/zor8uZaxCEk/m/n-lHRIJIHIkJ\">his message read</a>: “I’m very happy to announce that <a href=\"http://www.fanfiction.net/\">www.fanfiction.net</a> is now officially open!!!!!! And we have done it 3 weekss ahead of projected finish date. While everyone trick-or-treated we were hard at working debugging the site.”</p>\n\n\n\n<p>Li wasn’t a fanfiction creator himself, but he thought he stumbled upon a formula for its success. What made Fanfiction.net unique was that its community tools—built-in tagging, easy subscriptions to stories, freeform message boards for discussions—was built with fandom in mind. As <a href=\"https://tvtropes.org/pmwiki/pmwiki.php/Website/FanFictionDotNet\">one writer would later describe this winning combination</a>, “its secret to success is its limited moderation and fully-automated system, meaning posting is very quick and easy and can be done by anyone.”</p>\n\n\n\n<p>Fanfiction creators found a home at Fanfiction.net, or FF.net as it was often shortened to. Throughout its early years, Li had a nerdy and steadfast devotion to the development of the site. He‘d post sometimes daily to an open changelog on the site, a mix of site-related updates and deeply personal anecdotes. “Full-text searching allows you to search for keywords/phrases within every fanfiction entry in our huge archive,” <a href=\"https://web.archive.org/web/20010410025544/http://fanfiction.net:80/index.fic?action=misc-oldnews\">one update read</a>. “I can‘t get the song out of my head and I need to find the song or I will go bonkers. Thanks a bunch. =)” read another (the song was The Cure‘s “Boys Don’t Cry”).</p>\n\n\n\n<p>Li’s cult of personality and the unique position of the site made it immensely popular. For years, the fanfiction community had stuck to the shadows. FF.net gave them a home. Members took it upon themselves to create a welcoming environment, establishing norms and procedures for tagging and discoverability, as well as feedback for writers.</p>\n\n\n\n<p>The result was a unique community on the web that attempted to lift one another up. “Sorry. It‘s just really gratifying to post your first fic and get three hits within about six seconds. It‘s pretty wild, I haven’t gotten one bad review on FF.N…” <a href=\"https://groups.google.com/g/rec.arts.tv.mst3k.misc/c/PCalHbdul_A/m/KwnZIoUsiu0J\">one fanfic writer posted in the site’s early days</a>. “That makes me pretty darn happy :)”</p>\n\n\n\n<p>The reader and writer relationship on FF.net was fluid. The stories generated by users acted as a reference for conversation among fellow writers and fanfiction readers. One idea often flows into the next, and it is only through sharing content <a href=\"https://web.archive.org/web/20120822233950/http://www.smh.com.au/articles/2002/11/01/1036027033529.html\">that it takes on meaning</a>. “Yes, they want recognition and adulation for their work, but there‘s also the very strong sense that they want to share, to be part of something bigger than themselves. There’s a simple, human urge to belong.”</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>As the dot-com era waned, community was repackaged and resold as the social web. The goals of early social communities were looser than the tight niches and imaginative worlds of early community sites. Most functioned to bring one’s real life into digital space. Classmates.com, launched in 1995, is one of the earliest examples of this type of site. Its founder, Randy Conrads, believed that the web was best suited for reconnecting people with their former schoolmates.</p>\n\n\n\n<p>Not long after, AsianAve launched from the chaotic New York apartment where the site‘s six co-founders lived and worked. Though it had a specific demographic—Asian Americans—AsianAve was modeled after a few other early social web experiences, like SixDegrees. The goal was to simulate real life friend groups, and to make the web a fun place to hang out. “Most of Asian Avenue‘s content is produced by members themselves,” <a href=\"https://www.nytimes.com/1998/04/12/nyregion/neighborhood-report-new-york-on-line-one-site-14-ethnic-groups.html\">an early article in</a> <a href=\"https://www.nytimes.com/1998/04/12/nyregion/neighborhood-report-new-york-on-line-one-site-14-ethnic-groups.html\"><em>The New York Times</em></a> <a href=\"https://www.nytimes.com/1998/04/12/nyregion/neighborhood-report-new-york-on-line-one-site-14-ethnic-groups.html\">describes</a>. “[T]he site offers tool kits to create personal home pages, chat rooms and interactive soap operas.” Eventually, one of the site‘s founders, Benjamin Sun, began to explore how he could expand his idea beyond a single demographic. That’s when he met Omar Wasow.</p>\n\n\n\n<p>Wasow was fascinated with technology from a young age. When he was a child, he fell in love first with early video games like Pong and Donkey Kong. By high school, <a href=\"https://www.complex.com/pop-culture/2011/03/interview-blackplanet-founder-talks-myspace-twitter-facebook\">he made the leap to programmer</a>. “I begged my way out of wood shop into computer science class. And it really changed my life. I went to being somebody who consumed video games to creating video games.”</p>\n\n\n\n<p>In 1993, Wasow founded New York Online, a Bulletin Board System that targeted a <a href=\"https://www.nytimes.com/2001/05/13/business/private-sector-silicon-alley-s-philosopher-prince.html\">“broad social and ethnic ‘mix’,”</a> instead of pulling from the same limited pool of upper-middle class tech nerds most networked projects focused on. To earn an actual living, Wasow developed websites for popular magazine brands like Vibe and Essence. It was through this work that he crossed paths with Benjamin Sun.</p>\n\n\n\n<p>By the mid-1990‘s, Wasow had already gathered a loyal following and public profile, featured in magazines like <em>Newsweek</em> and <em>Wired.</em> Wasow’s reputation centered on his ability to build communities thoughtfully, to explore the social ramifications of his tech before and while he built it. When Sun approached him about expanding AsianAve to an African American audience, a site that would eventually be known as BlackPlanet, he applied the same thinking.</p>\n\n\n\n<p>Wasow didn’t want to build a community from scratch. Any site that they built would need to be a continuation of the strong networks Black Americans had been building for decades. “A friend of mine once shared with me that you don’t build an online community; you join a community,” <a href=\"https://motionagency.io/episode/blackplanet-founder-omar-wasow-on-the-differences-between-offline-and-virtual-community-building/\">Wasow once put it</a>, “BlackPlanet allowed us to become part of a network that already had centuries of black churches and colleges and barbecues. It meant that we, very organically, could build on this very powerful, existing set of relationships and networks and communities.”</p>\n\n\n\n<p>BlackPlanet offered its users a number of ways to connect. A central profile—the same kind that MySpace and Facebook would later adopt—anchored a member’s digital presence. Chat rooms and message boards offered opportunities for friendly conversation or political discourse (or sometimes, fierce debate). News and email were built right into the app to make it a centralized place for living out your digital life.</p>\n\n\n\n<p>By the mid-2000’s BlackPlanet was a sensation. It captured a large part of African Americans who were coming online for the first time. Barack Obama, still a Senator running for President, <a href=\"http://voices.washingtonpost.com/44/2007/10/obama-networks-on-blackplanetc.html\">joined the site in 2007</a>. Its growth exploded into the millions; it was a seminal experience for black youth in the United States.</p>\n\n\n\n<p>After being featured on a segment on the <em>The Oprah Winfrey Show</em>, teaching Oprah how to use the Internet, Wasow‘s profile reached soaring heights. <em>The New York Times</em> dubbed him the “philosopher-prince of the digital age,” for his considered community building. “The best the Web has to offer is community-driven,” <a href=\"https://www.nytimes.com/2001/05/13/business/private-sector-silicon-alley-s-philosopher-prince.html\">Wasow would later say</a>. He never stopped building his community thoughtfully. and they in turn, became an integral part of the country’s culture.</p>\n\n\n\n<p>Before long, a group of developers would look at BlackPlanet and wonder how to adapt it to a wider audience. The result were the web’s first true social networks.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/chapter-9-community/\">Chapter 9: Community</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/chapter-9-community/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "342818",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "How to Use WordPress as a Headless CMS for Eleventy"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/wordpress-headless-cms-eleventy/?utm_source=rss\"\n              title=\"How to Use WordPress as a Headless CMS for Eleventy\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611717996wordpress-eleventy.png\"\n        alt=\"How to Use WordPress as a Headless CMS for Eleventy\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611717996wordpress-eleventy-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611717996wordpress-eleventy.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>The last few years have seen static-site generation and <a style=\"font-weight:bold\" href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a> concepts evolve from niche tools to mainstream development approaches.</strong> </p>\n<p>The benefits are appealing:</p>\n<ul>\n<li>simpler deployment and static hosting</li>\n<li>better security; there are few back-end systems to exploit</li>\n<li>easy backup and document version control using Git</li>\n<li>a great development experience, and</li>\n<li>super-fast performance</li>\n</ul>\n<p>Unfortunately, static-site generator (SSG) projects are rarely handed over to clients. SSGs such as Jekyll, Hugo, and Gatsby are designed for developers. Navigating version branches, updating Markdown documents, and running command-line build processes is frustrating for editors coming from the world of one-click publishing on a content management system.</p>\n<p>This tutorial describes one way to keep everyone happy and motivated! …</p>\n<ul>\n<li>content editors can use WordPress to edit and preview posts</li>\n<li>developers can import that content into Eleventy to build a static site</li>\n</ul>\n<h2 id=\"headlesscmssandlooselycoupledapis\">Headless CMSs and Loosely Coupled APIs</h2>\n<p>Some concepts illustrated here are shrouded in obscure jargon and terminology. I’ll endeavor to avoid it, but it&#8217;s useful to understand the general approach.</p>\n<p>Most content management systems (CMSs) provide:</p>\n<ol>\n<li>A content control panel to manage pages, posts, media, categories, tags, etc.</li>\n<li>Web page generation systems to insert content into templates. This typically occurs on demand when a user requests a page.</li>\n</ol>\n<p>This has some drawbacks:</p>\n<ul>\n<li>Sites may be constrained to the abilities of the CMS and its plugins.</li>\n<li>Content is often stored in HTML, so re-use is difficult — for example, using the same content in a mobile app.</li>\n<li>The page rendering process can be slow. CMSs usually offer caching options to improve performance, but whole sites can disappear when the database fails.</li>\n<li>Switching to an alternative/better CMS isn’t easy.</li>\n</ul>\n<p>To provide additional flexibility, a <em>headless CMS</em> has a content control panel but, instead of page templating, data can be accessed via an API. Any number of systems can then use the same content. For example:</p>\n<ul>\n<li>an SSG could fetch all content at build time and render a complete site</li>\n<li>another SSG could build a site in a different way — for example, with premium content</li>\n<li>a mobile app could fetch content on demand to show the latest updates</li>\n</ul>\n<p>Headless CMS solutions include <a href=\"https://www.sanity.io/\">Sanity.io</a> and <a href=\"https://www.contentful.com/\">Contentful</a>. These are powerful, but require editors to learn a new content management system.</p>\n<h2 id=\"thewordpressrestapi\">The WordPress REST API</h2>\n<p>Almost <a href=\"https://w3techs.com/technologies/details/cm-wordpress\">40% of all sites use WordPress</a> (including <a href=\"https://www.sitepoint.com/\">SitePoint.com</a>). Most content editors will have encountered the CMS and many will be using it daily.</p>\n<p>WordPress has provided a <a href=\"https://developer.wordpress.org/rest-api/\">REST API</a> since version 4.7 was released in 2016. The API allows developers to access and update any data stored in the CMS. For example, to fetch the ten most recent posts, you can send a request to:</p>\n<pre><code class=\"markup language-markup\">yoursite.com/wp-json/wp/v2/posts?orderby=date&amp;order=desc\r\n</code></pre>\n<p><em>Note: this REST URL will only work if pretty permalinks such as <strong>Post name</strong> are set in the WordPress <strong>Settings</strong>. If the site uses default URLs, the REST endpoint will be <yoursite .com/?rest_route=wp/v2/posts?orderby=date&#038;order=desc>.</yoursite></em></p>\n<p>This returns JSON content containing an array of large objects for every post:</p>\n<pre><code class=\"javascript language-javascript\">[\r\n  {\r\n    \"id\": 33,\r\n    \"date\": \"2020-12-31T13:03:21\",\r\n    \"date_gmt\": \"2020-12-31T13:03:21\",\r\n    \"guid\": {\r\n      \"rendered\": \"https://mysite/?p=33\"\r\n    },\r\n    \"modified\": \"2020-12-31T13:03:21\",\r\n    \"modified_gmt\": \"2020-12-31T13:03:21\",\r\n    \"slug\": \"my-post\",\r\n    \"status\": \"publish\",\r\n    \"type\": \"post\",\r\n    \"link\": \"https://mysite/my-post/\",\r\n    \"title\": {\r\n      \"rendered\": \"First post\"\r\n    },\r\n    \"content\": {\r\n      \"rendered\": \"&lt;p&gt;My first post. Nothing much to see here.&lt;/p&gt;\",\r\n      \"protected\": false\r\n    },\r\n    \"excerpt\": {\r\n      \"rendered\": \"&lt;p&gt;My first post&lt;/p&gt;\",\r\n      \"protected\": false\r\n    },\r\n    \"author\": 1,\r\n    \"featured_media\": 0,\r\n    \"comment_status\": \"closed\",\r\n    \"ping_status\": \"\",\r\n    \"sticky\": false,\r\n    \"template\": \"\",\r\n    \"format\": \"standard\",\r\n    \"meta\": [],\r\n    \"categories\": [1],\r\n    \"tags\": []\r\n   }\r\n]\r\n</code></pre>\n<p>WordPress returns ten posts by default. The HTTP header <code>x-wp-total</code> returns the total number of posts and <code>x-wp-totalpages</code> returns the total number of pages.</p>\n<p><em>Note: no WordPress authentication is required to read public data because … it&#8217;s public! <a href=\"https://developer.wordpress.org/rest-api/using-the-rest-api/authentication/\">Authentication</a> is only necessary when you attempt to add or modify content.</em></p>\n<p>It’s therefore possible to use WordPress as a headless CMS and import page data into a static site generator such as Eleventy. Your editors can continue to use the tool they know regardless of the processes you use for site publication.</p>\n<h3 id=\"wordpresswarnings\">WordPress Warnings</h3>\n<p>The sections below describe how to import WordPress posts into an Eleventy-generated site.</p>\n<p>In an ideal world, your WordPress template and Eleventy theme would be similar so page previews render identically to the final site. This may be difficult: the WordPress REST API outputs HTML and that code can be significantly altered by plugins and themes. A carousel, shop product, or contact form could end up in your static site but fail to operate because it&#8217;s missing client-side assets or Ajax requests to server-side APIs.</p>\n<p><em>My advice:</em> the simpler your WordPress setup, the easier it will be to use it as a headless CMS. Unfortunately, those 57 <em>essential</em> plugins your client installed may pose a few challenges.</p>\n<h2 id=\"installwordpress\">Install WordPress</h2>\n<p>The demonstration code below presumes you have WordPress running on your PC at <a href=\"http://localhost:8001/\">http://localhost:8001/</a>. You can install Apache, PHP, MySQL and WordPress manually, use an all-in-one installer such as <a href=\"https://www.apachefriends.org/\">XAMPP</a>, or even access a live server.</p>\n<p>Alternatively, you can use <a href=\"https://www.docker.com/\">Docker</a> to manage the installation and configuration. Create a new directory, such as <code>wpheadless</code>, containing a <code>docker-compose.yml</code> file:</p>\n<pre><code class=\"yml language-yml\">version: '3'\r\n\r\nservices:\r\n\r\n  mysql:\r\n    image: mysql:5\r\n    container_name: mysql\r\n    environment:\r\n      - MYSQL_DATABASE=wpdb\r\n      - MYSQL_USER=wpuser\r\n      - MYSQL_PASSWORD=wpsecret\r\n      - MYSQL_ROOT_PASSWORD=mysecret\r\n    volumes:\r\n      - wpdata:/var/lib/mysql\r\n    ports:\r\n      - \"3306:3306\"\r\n    networks:\r\n      - wpnet\r\n    restart: on-failure\r\n\r\n  wordpress:\r\n    image: wordpress\r\n    container_name: wordpress\r\n    depends_on:\r\n      - mysql\r\n    environment:\r\n      - WORDPRESS_DB_HOST=mysql\r\n      - WORDPRESS_DB_NAME=wpdb\r\n      - WORDPRESS_DB_USER=wpuser\r\n      - WORDPRESS_DB_PASSWORD=wpsecret\r\n    volumes:\r\n      - wpfiles:/var/www/html\r\n      - ./wp-content:/var/www/html/wp-content\r\n    ports:\r\n      - \"8001:80\"\r\n    networks:\r\n      - wpnet\r\n    restart: on-failure\r\n\r\nvolumes:\r\n  wpdata:\r\n  wpfiles:\r\n\r\nnetworks:\r\n  wpnet:\r\n</code></pre>\n<p>Run <code>docker-compose up</code> from your terminal to launch WordPress. This may take several minutes when first run since all dependencies must download and initialize.</p>\n<p>A new <code>wp-content</code> subdirectory will be created on the host which contains installed themes and plugins. If you&#8217;re using Linux, macOS, or Windows WSL2, you may find this directory has been created by the <code>root</code> user. You can run <code>sudo chmod 777 -R wp-content</code> to grant read and write privileges to all users so both you and WordPress can manage the files.</p>\n<p><em>Note: <code>chmod 777</code> is not ideal. A slightly more secure option is <code>sudo chown -R www-data:&lt;yourgroup&gt; wp-content</code> followed by <code>sudo chmod 774 -R wp-content</code>. This grants write permissions to Apache and anyone in your group.</em></p>\n<p>Navigate to <a href=\"http://localhost:8001/\">http://localhost:8001/</a> in your browser and follow the WordPress installation process:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609768322wordpress-install.png\" alt=\"install WordPress\" /></p>\n<p>Modify your site&#8217;s settings as necessary, remembering to set pretty permalinks such as <strong>Post name</strong> in <strong>Settings</strong> &gt; <strong>Permalinks</strong>. Then add or import a few posts so you have data to test in Eleventy.</p>\n<p>Keep WordPress running but, once you&#8217;re ready to shut everything down, run <code>docker-compose down</code> from the project directory.</p>\n<h2 id=\"installeleventy\">Install Eleventy</h2>\n<p><a href=\"https://www.11ty.dev/\">Eleventy</a> is a popular Node.js static-site generator. The <a href=\"https://www.sitepoint.com/getting-started-with-eleventy/\">Getting Started with Eleventy</a> tutorial describes a full setup, but the instructions below show the essential steps.</p>\n<p>Ensure you have <a href=\"https://nodejs.org/\">Node.js</a> version 8.0 or above installed, then create a project directory and initialize the <code>package.json</code> file:</p>\n<pre><code class=\"bash language-bash\">mkdir wp11ty\r\ncd wp11ty\r\nnpm init\r\n</code></pre>\n<p>Install Eleventy and the <a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a> <a href=\"https://developer.mozilla.org/Web/API/Fetch_API\">Fetch-compatible</a> library as development dependencies:</p>\n<pre><code class=\"bash language-bash\">npm install @11ty/eleventy node-fetch --save-dev\r\n</code></pre>\n<p>Then create a new <code>.eleventy.js</code> configuration file, which sets the source (<code>/content</code>) and build (<code>/build</code>) sub-directories:</p>\n<pre><code class=\"javascript language-javascript\">// .eleventy.js configuration\r\nmodule.exports = config =&gt; {\r\n\r\n  return {\r\n\r\n    dir: {\r\n      input: 'content',\r\n      output: `build`\r\n    }\r\n\r\n  };\r\n\r\n};\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/wordpress-headless-cms-eleventy/?utm_source=rss\">How to Use WordPress as a Headless CMS for Eleventy</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/wordpress-headless-cms-eleventy/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180813",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web",
            "WordPress"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Tue, 26 Jan 2021 15:00:55 GMT"
        ],
        "metaDesc": [
            "You want to offer static-site benefits to clients, but they want WordPress! Learn how to use Eleventy with WordPress to offer the best of both worlds."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Learn Snowpack: A High-Performance Frontend Build Tool"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/learn-snowpack/?utm_source=rss\"\n              title=\"Learn Snowpack: A High-Performance Frontend Build Tool\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613410586learn-snowpack.jpeg\"\n        alt=\"Learn Snowpack\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613410586learn-snowpack-300x158.jpeg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613410586learn-snowpack-768x404.jpeg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613410586learn-snowpack-1024x539.jpeg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613410586learn-snowpack.jpeg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll take a first look at <a style=\"font-weight:bold\" href=\"https://www.snowpack.dev/\">Snowpack</a> — specifically Snowpack 3, which at the time of writing has just been released. Snowpack is a front-end build tool that&#8217;s been getting a lot of attention in the community for offering a different approach from tools like webpack, and I&#8217;ve been keen to check it out for a while. Let&#8217;s dive in!</strong></p>\n<h2 id=\"ahistoryofbuildtools\">A History of Build Tools</h2>\n<p>Before we look into Snowpack, we need to take a quick moment to understand how and why bundlers like webpack came to be. JavaScript&#8217;s lack of a module system prior to ES2015&#8217;s modules meant that, in the browser, the closest we could get to modules was to split our code up into files that put code into the global scope, as this was how we shared it between files. It was common to see code like this:</p>\n<pre><code class=\"javascript language-javascript\">window.APP = {}\r\n\r\nwindow.APP.Authentication = {...}\r\nwindow.APP.ApiLoader = {...}\r\n</code></pre>\n<p>When Node.js arrived and gained popularity, it had a module system in the form of CommonJS:</p>\n<pre><code class=\"javascript language-javascript\">const Authentication = require('./Authentication.js')\r\nconst APILoader = require('./APILoader.js')\r\n</code></pre>\n<p>Once this became popular as part of Node, people wanted to be able to use it in the browser. That&#8217;s when tools started emerging that did this; they could take an application that used CommonJS modules, and bundle it into one large JavaScript file, with all the <code>require</code>s removed, that could be executed in the browser. <a href=\"http://browserify.org/\">Browserify</a> was the first such tool that I can remember using to do this, and, to be honest, it felt like magic! This was around the time that webpack came to be, and other tools also supported using CommonJS.</p>\n<p>When ES Modules were first introduced (see “<a href=\"https://www.sitepoint.com/understanding-es6-modules/\">Understanding ES6 Modules</a>” for a refresher), people were keen to use them, but there were two problems:</p>\n<ol>\n<li>Whilst the spec was done, browsers didn&#8217;t support ES Modules.</li>\n<li>Even if a browser did support ES Modules, you probably still wanted to bundle in production, because it takes time to load in all the modules if they’re defined as separate files.</li>\n</ol>\n<p>Webpack (and others) updated to support ES Modules, but they would always bundle your code into one file, both for developing and for production. This meant that a typical workflow is:</p>\n<ol>\n<li>Edit a file in your application.</li>\n<li>Webpack looks at which file changed, and rebundles your application.</li>\n<li>You can refresh the browser and see your change. Often, this is done for you by a webpack plugin such as hot module reloading.</li>\n</ol>\n<p>The problem here lies in step two as your application grows in size. The work for webpack to spot a file change and then figure out which parts of your application to rebundle into the main bundle can take time, and on large applications that can cause a serious slowdown. That’s where Snowpack comes in …</p>\n<h2 id=\"snowpacksapproach\">Snowpack&#8217;s Approach</h2>\n<p>Snowpack&#8217;s key selling point for me is this line from <a href=\"https://www.snowpack.dev/concepts/how-snowpack-works\">their documentation</a>:</p>\n<blockquote>\n<p>Snowpack serves your application unbundled during development. Each file needs to be built only once and then is cached forever. When a file changes, Snowpack rebuilds that single file.</p>\n</blockquote>\n<p>Snowpack takes full advantage of ES Modules being supported across all major browsers and doesn’t bundle your application in development, but instead serves up each module as a single file, letting the browser import your application via ES Modules. See “<a href=\"https://www.sitepoint.com/using-es-modules/\">Using ES Modules in the Browser today</a>” for more detail on browsers and their support for unbundled ES Modules.</p>\n<p><em>It&#8217;s important to note at this point that you must use ES Modules to use Snowpack. You can&#8217;t use CommonJS in your application.</em></p>\n<p>This however raises a question: what if you install a dependency from npm that does use CommonJS? Although I hope one day that the majority of npm packages are shipped as ES Modules, we&#8217;re still a fair way off that, and the reality is even if you build an application exclusively in ES Modules, it&#8217;s highly likely at some point you&#8217;ll need a dependency that&#8217;s authored in CommonJS.</p>\n<p>Luckily, Snowpack can deal with that too! When it sees a dependency (let&#8217;s say, React), in your <code>node_modules</code> folder, it can bundle <em>just that dependency</em> into its own mini-bundle, which can then be imported using ES Modules.</p>\n<p>Hopefully you can see why Snowpack caught my eye. Let&#8217;s get it up and running and see how it feels to use on an application.</p>\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<p>To start with, I create a new empty project folder and run <code>npm init -y</code> to get me up and running. This creates a basic <code>package.json</code> which I can go in and edit later if I want to. You can also run <code>npm init</code> without the <code>-y</code>, which will make npm prompt you to answer questions to fill in the details in your <code>package.json</code>. I like using <code>-y</code> to quickly get up and running; I can edit the <code>package.json</code> later.</p>\n<p>I then install Snowpack as a developer dependency:</p>\n<pre><code class=\"bash language-bash\">npm install --save-dev snowpack\r\n</code></pre>\n<p>And now I add two scripts into my <code>package.json</code>:</p>\n<pre><code class=\"javascript language-javascript\">\"scripts\": {\r\n  \"start\": \"snowpack dev\",\r\n  \"build\": \"snowpack build\"\r\n},\r\n</code></pre>\n<p>This sets us up two <code>npm run</code> commands:</p>\n<ul>\n<li><code>npm run start</code> will run Snowpack in development mode.</li>\n<li><code>npm run build</code> will run a production build of Snowpack, which we&#8217;ll talk more about later.</li>\n</ul>\n<p>When we run our application, Snowpack fires up a little development server that will run our application locally. It will look for an <code>index.html</code> file, so let&#8217;s create one of those and also create <code>app.js</code>, which for now will just log <code>hello world</code> to the console:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"UTF-8\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n  &lt;title&gt;Snowpack testing&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;script src=\"./app.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<pre><code class=\"javascript language-javascript\">console.log('hello world')\r\n</code></pre>\n<p>Now we can run <code>npm run start</code> (or <code>npm start</code> for short — <code>start</code> is one of the <a href=\"https://docs.npmjs.com/cli/v6/using-npm/scripts#npm-start\">npm lifecycle methods where you don&#8217;t need to prefix it with <code>run</code></a>).</p>\n<p>You should see your terminal output look something like this:</p>\n<pre><code class=\"bash language-bash\">snowpack\r\n\r\n  http://localhost:8080 • http://172.18.33.234:8080\r\n  Server started in 80ms.\r\n\r\n▼ Console\r\n\r\n[snowpack] Hint: run \"snowpack init\" to create a project config file. Using defaults...\r\n[snowpack] Nothing to install.\r\n</code></pre>\n<p>The first part of the output tells us that Snowpack is running on <code>localhost:8080</code>. The next line prompts us to create a Snowpack configuration file, which we&#8217;ll do shortly, but it&#8217;s the last line that I want to highlight:</p>\n<pre><code class=\"bash language-bash\">[snowpack] Nothing to install.\r\n</code></pre>\n<p>This is Snowpack telling us that it&#8217;s checked for any npm modules that need dealing with, and it hasn&#8217;t found any. In a moment, we&#8217;ll add an npm package and take a look at how Snowpack deals with it.</p>\n<h2 id=\"generatingaconfigurationfile\">Generating a Configuration File</h2>\n<p>You can run <code>npx snowpack init</code> to generate the configuration file as the command line output suggests. We won&#8217;t be needing to change Snowpack&#8217;s behavior until we come to bundling for production, but if you do you can create this file and <a href=\"https://www.snowpack.dev/reference/configuration\">configure a wide range of options</a> to get Snowpack running just how you want it to.</p>\n<h2 id=\"writinginesmodules\">Writing in ES Modules</h2>\n<p>Let&#8217;s create another JavaScript file to see how Snowpack deals with multiple files. I created <code>api.js</code>, which exports a function that takes a username and fetches some of their public repositories from GitHub:</p>\n<pre><code class=\"javascript language-javascript\">export function fetchRepositories(user) {\r\n  return fetch(`https://api.github.com/users/${user}/repos`)\r\n    .then(response=&gt; response.json());\r\n}\r\n</code></pre>\n<p>Then, in <code>app.js</code>, we can import and use this function. Feel free to replace my GitHub username with your own!</p>\n<pre><code class=\"javascript language-javascript\">import {fetchRepositories} from './api.js';\r\nfetchRepositories('jackfranklin').then(data =&gt; console.log(data));\r\n</code></pre>\n<p>Save this file, and run Snowpack again if you didn&#8217;t leave it running previously. In the browser console, you&#8217;ll see an error:</p>\n<pre><code class=\"bash language-bash\">Uncaught SyntaxError: Cannot use import statement outside a module\r\n</code></pre>\n<p>This is because of our <code>&lt;script&gt;</code> tag in our HTML file:</p>\n<pre><code class=\"markup language-markup\">&lt;script src=\"./app.js\"&gt;&lt;/script&gt;\r\n</code></pre>\n<p>Because ES Modules behave slightly differently from code that doesn&#8217;t use ES Modules, it&#8217;s not possible for browsers to just start supporting ES Modules in all scripts. Doing so would almost certainly break some existing websites, and one of the main goals of JavaScript is that any new features are backwards compatible. Otherwise, every new JS feature might break thousands of existing websites!</p>\n<p>In order to use ES Modules, all we need to do is tell the browser that by giving the <code>script</code> tag a <code>type</code> of <code>module</code>:</p>\n<pre><code class=\"markup language-markup\">&lt;script type=\"module\" src=\"./app.js\"&gt;&lt;/script&gt;\r\n</code></pre>\n<p>And when you save that, your browser should refresh automatically (another nice thing Snowpack does out of the box) and you’ll see a list of GitHub repositories logged to the console.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/learn-snowpack/?utm_source=rss\">Learn Snowpack: A High-Performance Frontend Build Tool</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/learn-snowpack/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181072",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Jack Franklin"
        ],
        "pubDate": [
            "Sun, 14 Feb 2021 23:05:19 GMT"
        ],
        "metaDesc": [
            "Webpack can get slow when you're rebuilding a large app. Enter Snowpack. Find out how Snowpack serves your app unbundled during dev, and why this matters."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Figma Prototypes: A Quick, Step-by-Step Guide to Useful Mockups"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/figma-prototyping/?utm_source=rss\"\n              title=\"Figma Prototypes: A Quick, Step-by-Step Guide to Useful Mockups\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617712891ux-proto.jpg\"\n        alt=\"UX Prototyping with Figma\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617712891ux-proto-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617712891ux-proto.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Prototyping is the process of turning a static mockup into an interactive and dynamic mockup (better known as a <em>prototype</em>). Bringing a static mockup to life is without doubt one of the most — if not <em>the</em> most — exciting step in the design workflow.</strong></p>\n<p>It’s also super important that developers understand the design’s user flow, and how it should feel and function. What better way to do that than by using <a href=\"https://figma.com/\">Figma</a>, the best design tool in the world according to the <a href=\"https://uxtools.co/survey-2020/#toolkit\">2020 Design Tools Survey</a>?</p>\n<p>Prototyping with Figma is easy and enjoyable once you know how it works. Start off by duplicating this <a href=\"https://figma.com/file/Is1EOrzFrl3lzV7upbCZlN/Series-of-interactions\">static mockup</a> (click on <strong>Series of Interactions</strong> and then <strong>Duplicate to my drafts</strong>), and then throughout the tutorial we’ll add more and more functional fidelity. Your local copy should look like this:</p>\n<p><iframe style=\"border: 1px solid rgba(0, 0, 0, 0.1);\" width=\"800\" height=\"450\" src=\"https://www.figma.com/embed?embed_host=share&#038;url=https%3A%2F%2Fwww.figma.com%2Ffile%2FIs1EOrzFrl3lzV7upbCZlN%2FSeries-of-interactions%3Fnode-id%3D254%253A0\" allowfullscreen></iframe></p>\n<p><em>Note: I&#8217;m assuming that you have at least a small amount of experience with modern UI design tools such as Figma or Sketch.</em></p>\n<h2 id=\"step1createahorizontallyscrollableframe\">Step 1: Create a Horizontally Scrollable Frame</h2>\n<p>Let’s start with <strong>Artboard 1</strong>, making the selection of cards that overflow the viewport horizontally scrollable. This is one example of how we can make our mockups dynamic without having to create what Figma calls &#8220;Connections&#8221;. Connections direct us to new Artboards, but that’s not what we’ll be doing in Step 1.</p>\n<p>Start by selecting <strong>Cards</strong> from the <strong>Layers</strong> Panel (left sidebar), and then from the <strong>Design</strong> Panel (right sidebar this time) change the <strong>Group</strong> option to <strong>Frame</strong> using the dropdown.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/16138183361.jpg\" alt=\"Figma: Convert a Group into a Frame\" /></p>\n<p>I won’t dive into this too much, but the main difference between a Group and a Frame is that Groups wrap their children tightly, whereas Frames can be any size. This means that:</p>\n<ul>\n<li>grouped children scale with the Group, whereas Framed children are a little more stubborn (a feature, not a bug)</li>\n<li>framed children become aligned relative to their Frame, whereas Grouped children are still relative to their Artboard</li>\n<li>frames can have overflowing content that can be scrolled horizontally or vertically (this is what we’ll be attempting)</li>\n</ul>\n<p><em>Wait, does this mean that Artboards are actually Frames?</em> Indeed: what other UI design tools call Artboards, Figma calls <em>Frames</em>. This is likely because, in Figma, Frames can be nested within other Frames, which is slightly different from what Artboards do in other tools like Sketch, Adobe XD, and so on.</p>\n<p>Switch to <strong>Prototype</strong> mode (<kbd>⌥</kbd> + <kbd>9</kbd>) where the <strong>Overflow behavior</strong> setting will now be available, and then change the dropdown option from <strong>No scrolling</strong> to <strong>Horizontal scrolling</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/16138183372.jpg\" alt=\"Figma: horizontal scrolling\" /></p>\n<p>Now, you’ll notice that the shadows are oddly cut off by the newly converted Frame, but this is actually standard behavior for overflowing content, and it can be fixed relatively easily.</p>\n<p>Since the shadow’s blur variable is 30 and Frames can be any size, we’ll need to resize the Frame to allow for an extra 30 spacing around its edges. It should be easy enough to Resize (<kbd>shift</kbd> + <kbd>⌘</kbd> + <kbd>↑↓←→</kbd>) and Nudge (<kbd>shift</kbd> + <kbd>↑↓←→</kbd>) the objects accordingly.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/16138183383.jpg\" alt=\"Resizing and Nudging in Figma\" /></p>\n<p>By the way, you might notice (if you click on the Frame) that the cards and their spacing can be rearranged quite easily. This isn’t relevant to the tutorial specifically, but still awesome.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/16138183394.jpg\" alt=\"Adjusting the spacing in Figma Frames\" /></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/figma-prototyping/?utm_source=rss\">Figma Prototypes: A Quick, Step-by-Step Guide to Useful Mockups</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/figma-prototyping/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182050",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Design",
            "Design & UX",
            "Web"
        ],
        "dc:creator": [
            "Daniel Schwarz"
        ],
        "pubDate": [
            "Tue, 06 Apr 2021 16:00:59 GMT"
        ],
        "metaDesc": [
            "Take your wireframes and mockups to the next level by creating interactive FIgma prototypes that are navigable and animated. Here's how!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Side-by-Side Comparison of AWS, Google Cloud and Azure"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/a-side-by-side-comparison-of-aws-google-cloud-and-azure/?utm_source=rss\"\n              title=\"A Side-by-Side Comparison of AWS, Google Cloud and Azure\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1618279068cloud-computing.jpg\"\n        alt=\"A Side-by-Side Comparison of AWS, Google Cloud and Azure\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1618279068cloud-computing-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1618279068cloud-computing.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>The three main players of business cloud services — Amazon, Google and Microsoft — have an array of products covering all you can possibly need for your online operations. But there are differences not only in pricing but also in how they name and group their services, so let’s compare one next to another and find out what they offer.</strong></p>\n<p>We&#8217;ll focus on services provided by <a href=\"https://aws.amazon.com/\">Amazon Web Services</a> (AWS), <a href=\"https://cloud.google.com/\">Google Cloud Platform</a> (GCP) and <a href=\"https://azure.microsoft.com/en-us/\">Microsoft Azure</a>. We won&#8217;t cover all of them, or get into a lot of detail about the infrastructure of cloud computing. However, we&#8217;ll survey many of the products on offer and also get familiar with some cloud concepts.</p>\n<h2 id=\"otherservicesandchangesovertime\">Other Services, and Changes over Time</h2>\n<p>There are, of course, other cloud services we could be covering here. In recent years, companies like <a href=\"https://www.digitalocean.com/\">DigitalOcean</a> and <a href=\"https://www.linode.com/\">Linode</a> have made some advances on the big three. But it&#8217;s been a new contender that has radically simplified the deployment of cloud infrastructure and is still pushing the DevOps workflow to the next level — <a href=\"https://www.netlify.com/\">Netlify</a>. Netlify also happens to be the company that coined the concept of the “Jamstack”. (See “<a href=\"https://www.sitepoint.com/learn-jamstack/\">Introduction to the Jamstack</a>” and “<a href=\"https://www.sitepoint.com/devops-by-example-tools-pros-and-cons-of-a-devops-culture/\">DevOps by Example</a>” for more information.)</p>\n<h3 id=\"allinonebutsimplergooglefirebasenetlifyawsamplify\">All-in-one, but Simpler: Google Firebase, Netlify, AWS Amplify</h3>\n<p>Amazon, Google, and Azure (in that order), are still pretty much the only companies that cover all of the spectrum of cloud services. But given how Netlify has simplified the game, they&#8217;ve all had to make significant additions to the way in which they present their tools to developers in order to remain competitive.</p>\n<p><!-- [<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/37/Firebase_Logo.svg/200px-Firebase_Logo.svg.png\" align=\"right\" />](https://firebase.google.com/) --></p>\n<p>Google and Amazon introduced <a href=\"https://firebase.google.com/\">Firebase</a> and <a href=\"https://aws.amazon.com/amplify/\">Amplify</a> respectively, both wrapping a bunch of services from the GCP and AWS to present them in a clear and easy-to-implement way to web and mobile developers. (Strangely, Microsoft just seems to make a conscious effort to leave Azure outdated.)</p>\n<p>As I said in my article on “<a href=\"https://www.sitepoint.com/jamstack-tools-services-apis/\">100 Jamstack Tools, APIs &#038; Services to Power Your Sites</a>”:</p>\n<p><!-- [<img src=\"https://docs.amplify.aws/assets/logo-dark.svg\" align=\"right\" />](https://aws.amazon.com/amplify/) --></p>\n<blockquote>\n<p>Google really made a brilliant move with the Firebase family of products by “detaching” them from the GCP, but Amazon went half-way with AWS Amplify. It sure is a dramatic improvement from the regular AWS workflow, especially for novice users, and its <a href=\"https://docs.amplify.aws/\">documentation hub</a> is superb and way more down-to-earth than the way Amazon usually documents services. But Amplify is still accessed from the same old <a href=\"https://aws.amazon.com/console/\">(horrifically bloated) console</a>. You still need a credit card to just open an account, deployments are still region-specific (no built-in CDN, seriously?), and the workflow isn’t as straightforward when compared to that of Firebase or Netlify.</p>\n</blockquote>\n<p><!-- [<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Netlify_logo.svg/200px-Netlify_logo.svg.png\" align=\"right\" />](https://www.netlify.com/) --></p>\n<p>With an incredibly <a href=\"https://firebase.google.com/docs\">well-documented framework</a>, an <a href=\"https://www.youtube.com/user/Firebase\">outstanding and fun YouTube channel</a>, and a <a href=\"https://firebase.google.com/use-cases\">wide variety of use applications</a>, <em>Google Firebase is way on top of AWS Amplify … but fairly behind Netlify in terms of simplicity</em>.</p>\n<h3 id=\"azureseriously\">Azure … Seriously?</h3>\n<p>Azure seems to be working for <em>some</em> people (particularly the enterprise sector within the US), but as <a href=\"https://www.google.com/search?q=microsoft+azure+is+site%3Areddit.com\">a Reddit search</a> or <a href=\"https://www.trustpilot.com/review/azure.microsoft.com\">a TrustPilot inquiry</a> will quickly reveal, opinions are, at best, <em>very</em> divided.</p>\n<p>Hard as AWS can be at first, users usually praise how responsive and knowledgeable their support team is. Speaking from my own experience, Azure support — or its complete lack thereof — on the other hand, can be 100% automated and totally non-existent, to the point that solving a problem as simple (and critical) as setting a credit card will become impossible and render the entire suite unusable.</p>\n<p>While an indisputable leader in several fronts, Microsoft also has a long history of being late to the party, putting a huge amount of effort into catching up, then only to  seemingly lose faith and leave things half way (such as with <a href=\"https://en.wikipedia.org/wiki/Zune\">Zune</a>, <a href=\"https://en.wikipedia.org/wiki/Groove_Music\">Groove</a>, <a href=\"https://en.wikipedia.org/wiki/Microsoft_Mobile\">Mobile</a>, <a href=\"https://en.wikipedia.org/wiki/Microsoft_Edge\">Edge</a>, and <a href=\"https://en.wikipedia.org/wiki/Skype\">Skype</a>). And the way things go with Azure, it remains to be seen if that will also be the case there.</p>\n<h2 id=\"whythecloud\">Why the Cloud</h2>\n<p>Iconic companies from both the public and the private sector — such as Netflix, Airbnb, Spotify, Expedia, PBS, and many, many more — <a href=\"https://aws.amazon.com/solutions/case-studies/\">rely on cloud services</a> for supporting their online operations. This allows them to better focus on doing what they&#8217;re known for, and let many of the technicalities be taken care of by an infrastructure that already exists and is constantly being upgraded. If they had to implement the physical infrastructure they actually need for their operations themselves, they&#8217;d need an army of technicians, lots of extra budget and time, and many startups would never get past these technical challenges.</p>\n<h3 id=\"foreveryone\">For everyone</h3>\n<p>But this isn&#8217;t limited to big names. Today, we live in a world in which both a huge business, and two youngsters at home with virtually no initial capital, can access world-class infrastructure for storage, computing, management and more, to make the next massive online service, and pay as they go — literally — by the hour.</p>\n<h3 id=\"flexibleandsometimesintricatepricing\">Flexible (and sometimes intricate) pricing</h3>\n<p>What you pay will vary a lot depending and <em>how much</em> processing power you demand, <em>how many</em> instances (that is, how many virtual servers) you deploy, and <em>where</em> you deploy them (more on this on the “<a href=\"#locations\">Locations</a>” section). There will also be significant discounts for bulk usage. In any case, you&#8217;ll have these advantages most of the time:</p>\n<ul>\n<li>no upfront costs</li>\n<li>no termination fees</li>\n<li>pay only for what you use</li>\n<li>per minute billing</li>\n</ul>\n<p>For precise details, you&#8217;ll need to read the pricing fine print of <a href=\"https://aws.amazon.com/pricing/\">AWS</a>, <a href=\"https://cloud.google.com/pricing/\">GCP</a> and <a href=\"https://azure.microsoft.com/pricing/\">Azure</a>.</p>\n<h2 id=\"productsvssolutions\">Products vs Solutions</h2>\n<p>We&#8217;ll use the terms &#8220;products&#8221; and &#8220;services&#8221; rather loosely. A <em>solution</em>, however, is a more specific concept that you&#8217;ll hear a lot about when dealing with cloud services. Simply put, a solution is a set of preconfigured products oriented to a very specific need, with plentiful documentation, use cases and testimonials that will guide you through the process of adopting the cloud infrastructure.</p>\n<p>Some typical &#8220;canned&#8221; solutions are:</p>\n<ul>\n<li><strong>big data</strong>: <a href=\"https://aws.amazon.com/big-data/datalakes-and-analytics/\">AWS</a>, <a href=\"https://cloud.google.com/solutions/smart-analytics\">GCP</a>, <a href=\"https://azure.microsoft.com/solutions/big-data/\">Azure</a></li>\n<li><strong>ecommerce and retail</strong>: <a href=\"https://aws.amazon.com/ecommerce-applications/\">AWS</a>, <a href=\"https://cloud.google.com/solutions/retail\">GCP</a>, Azure (<a href=\"https://azure.microsoft.com/solutions/ecommerce/\">e-commerce</a> and <a href=\"https://azure.microsoft.com/industries/retailers/\">retail</a>)</li>\n<li><strong>gaming</strong>: <a href=\"https://aws.amazon.com/game-hosting/\">AWS</a>, <a href=\"https://cloud.google.com/solutions/gaming/\">GCP</a>, <a href=\"https://azure.microsoft.com/solutions/gaming/\">Azure</a></li>\n<li><strong>government</strong>: AWS (<a href=\"https://aws.amazon.com/federal/\">federal</a>, <a href=\"https://aws.amazon.com/stateandlocal/\">sate and local</a>), GCP (<a href=\"https://cloud.google.com/solutions/federal-government\">federal</a>, <a href=\"https://cloud.google.com/solutions/state-and-local-government/\">state and local</a>), <a href=\"https://azure.microsoft.com/industries/government/\">Azure</a></li>\n<li><strong>Internet of Things</strong> (IoT): <a href=\"https://aws.amazon.com/iot/\">AWS</a>, <a href=\"https://cloud.google.com/solutions/iot/\">GCP</a>, <a href=\"https://azure.microsoft.com/overview/iot/\">Azure</a></li>\n<li><strong>marketing</strong>: <a href=\"https://aws.amazon.com/digital-marketing/\">AWS</a>, GCP (<a href=\"https://cloud.google.com/solutions/marketing-technology\">technology</a> and <a href=\"https://cloud.google.com/solutions/marketing-analytics\">analytics</a>), <a href=\"https://azure.microsoft.com/solutions/digital-marketing/\">Azure</a></li>\n</ul>\n<h2 id=\"letscompare\">Let&#8217;s Compare!</h2>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2016/09/1473644148CloudServices_logos-1024x150.png\" alt=\"cloud service logos\" /></p>\n<p>Amazon introduced &#8220;commoditized&#8221; cloud computing services through its first AWS service launched back in 2004, and ever since then they&#8217;ve kept innovating and adding features, which has allowed them to maintain the upper hand in this field by building the most extensive array of services and solutions for the cloud. They&#8217;re also, in many regards, the most expensive.</p>\n<p>Google, and later Microsoft, came into the game and are quickly coming up to par, bringing their own infrastructure and ideas, offering deals, and pulling the prices down.</p>\n<p>In the following video, representatives of each company discuss their cloud strategies:</p>\n<div style=\"position: relative; padding-bottom: 56.25%; overflow: hidden; margin: 32px 0;\"><iframe style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0;\"  src=\"https://www.youtube.com/embed/342KEaxFVjM?rel=0\"  frameborder=\"0\"  allowfullscreen></iframe></div>\n<h3 id=\"compute\">Compute</h3>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2016/09/1473644190CloudServices_analytics1-1024x356.png\" alt=\"cloud services analytics compute\" /></p>\n<p>This is what computers are for, after all: to calculate, to process data — to compute. If you need faster processing for graphics rendering, data analysis or what have you, you can either buy more hardware, or you can get on the cloud.</p>\n<p>Sure, if you buy the hardware you own it. It&#8217;s an asset. But you&#8217;re also paying for all of the idle time when the computers aren&#8217;t doing any actual processing, plus all of the maintenance that comes with it, which can go really high if you build a data center.</p>\n<p>When you go on the cloud, on the other hand, you just pay for what you use and you can scale to thousands of processing nodes in a few minutes (and blow your credit card while at it, if you&#8217;re not careful).</p>\n<p><a href=\"https://aws.amazon.com/ec2/\">Elastic Compute Cloud</a> (EC2) is Amazon&#8217;s flagship for <strong>scalable computing on demand</strong>, competing with Google&#8217;s <a href=\"https://cloud.google.com/compute/\">Compute Engine</a> and Azure&#8217;s <a href=\"https://azure.microsoft.com/services/virtual-machines/\">Virtual Machines</a> and <a href=\"https://azure.microsoft.com/services/virtual-machine-scale-sets/\">Virtual Machine Scale Sets</a>. Amazon&#8217;s service is the most comprehensive, but as mentioned, the <a href=\"https://aws.amazon.com/ec2/pricing/\">pricing for EC2</a> can get <em>very</em> intricate, and the same goes for Azure&#8217;s <a href=\"https://azure.microsoft.com/pricing/details/virtual-machines/\">VMs pricing</a>. Google&#8217;s offering is somewhat less flexible, but the <a href=\"https://cloud.google.com/compute/all-pricing\">pricing is a lot easier to follow</a>.</p>\n<p>There&#8217;s also the option of renting <strong>computing processes for web and mobile apps</strong>, which can offer significant savings when used instead of EC2 or Compute Engine if your apps fit in the specs of this service (see <a href=\"https://aws.amazon.com/elasticbeanstalk/\">AWS Elastic Beanstalk</a> and <a href=\"https://cloud.google.com/appengine/\">Google App Engine</a> for more details).</p>\n<p>If you want to <a href=\"https://www.sitepoint.com/docker-containers-software-delivery/\">deploy software containers with Docker</a>, you should look at Amazon&#8217;s <a href=\"https://aws.amazon.com/ecs/\">Elastic Container Service</a> (ECS) and <a href=\"https://aws.amazon.com/ecr/\">Elastic Container Registry</a> (ECR). Google&#8217;s equivalents are <a href=\"https://cloud.google.com/kubernetes-engine\">Kubernetes Engine</a> and <a href=\"https://cloud.google.com/container-registry/\">Container Registry</a>. Azure&#8217;s also on board with Docker with its <a href=\"https://azure.microsoft.com/services/kubernetes-service/\">Azure Kubernetes Service</a> (AKS), though at the moment they&#8217;re not providing a facility for private Docker registries.</p>\n<p>Azure, since it&#8217;s Microsoft&#8217;s, also allows you to <strong>deploy Windows client apps</strong> with its <a href=\"https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/remote-desktop-clients\">Remote Desktop clients</a> service.</p>\n<h3 id=\"storage\">Storage</h3>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2016/09/1473644235CloudServices_analytics2-1024x347.png\" alt=\"cloud services analytics storage\" /></p>\n<p>Alongside computing, storage is a key pillar to cloud services. In the cloud, you can store with the same ease anything from a bunch of GBs to several PBs (1 petabyte = 1,024 terabytes = 1,048,576 gigabytes). Beware, though: implementing these solutions is not so trivial, as this is not a regular hosting for which you just need a user and password to upload files via FTP. Instead, you&#8217;ll need to interact with APIs or third-party programs, and it may take some time before you&#8217;re ready to operate your storage entirely in the cloud.</p>\n<p>To <strong>store objects</strong> (that is, pretty much anything), Amazon&#8217;s <a href=\"https://aws.amazon.com/s3/\">Simple Storage Service</a> (S3) is the service that&#8217;s been running the longest, and as such it has <a href=\"https://aws.amazon.com/documentation/s3/\">extensive documentation</a>, including <a href=\"https://aws.amazon.com/events/online-tech-talks/on-demand/?ott-on-demand-all.sort-by=item.additionalFields.startDateTime&#038;ott-on-demand-all.sort-order=desc&#038;awsf.ott-on-demand-master-category=categories%23storage\">free webinars</a>, <a href=\"https://aws.amazon.com/articles/?tag=articles%23keywords%23amazon-s3\">articles and tutorials</a> and <a href=\"https://forums.aws.amazon.com/forum.jspa?forumID=24\">very active discussion forums</a> where Amazon developers provide very useful feedback on a regular basis. Of course, Google <a href=\"https://cloud.google.com/storage/\">Cloud Storage</a> and Microsoft <a href=\"https://azure.microsoft.com/services/storage/\">Azure Storage</a> provide a service that&#8217;s as reliable and robust, but the resources you&#8217;ll find don&#8217;t come even close those of Amazon. That being said, Google and Microsoft may have an edge on the price, so read the fine print.</p>\n<table>\n<thead>\n<tr>\n<th>service</th>\n<th></th>\n<th>provider</th>\n<th>GB/month</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://www.rackspace.com/cloud/block-storage\">Block Storage</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/OpenStack#Block_Storage_.28Cinder.29\">w</a></td>\n<td>Rackspace Cloud</td>\n<td>$0.12</td>\n</tr>\n<tr>\n<td><a href=\"https://www.rackspace.com/cloud/files\">Cloud Files</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/Rackspace_Cloud#Cloud_Files\">w</a></td>\n<td>Rackspace Cloud</td>\n<td>$0.1</td>\n</tr>\n<tr>\n<td><a href=\"https://cloud.google.com/storage/\">Cloud Storage</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/Google_Storage\">w</a></td>\n<td>Google Cloud Platform</td>\n<td>varies per region, see <a href=\"https://cloud.google.com/storage/pricing\">pricing</a></td>\n</tr>\n<tr>\n<td><a href=\"https://azure.microsoft.com/services/data-lake-store/\">Data Lake Store</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/Microsoft_Azure#Storage_services\">w</a></td>\n<td>Microsoft Azure</td>\n<td>varies per region, see <a href=\"https://azure.microsoft.com/pricing/details/storage/data-lake/\">pricing</a></td>\n</tr>\n<tr>\n<td><a href=\"https://aws.amazon.com/s3/\">Simple Storage Service (S3)</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/Amazon_S3\">w</a></td>\n<td>Amazon Web Services</td>\n<td>varies per region, see <a href=\"https://aws.amazon.com/s3/pricing/\">pricing</a></td>\n</tr>\n<tr>\n<td><a href=\"https://azure.microsoft.com/services/storage/\">Storage</a></td>\n<td><a href=\"https://en.wikipedia.org/wiki/Microsoft_Azure#Storage_services\">w</a></td>\n<td>Microsoft Azure</td>\n<td>varies per region, see <a href=\"https://azure.microsoft.com/pricing/details/storage/\">pricing</a></td>\n</tr>\n</tbody>\n</table>\n<p>For <strong>archiving</strong>, also sometimes called &#8220;cold storage&#8221; (like when you store objects you don&#8217;t plan to access regularly for the most part), you&#8217;ll enjoy lower rates but also lower access speeds, which shouldn&#8217;t be much of a problem in most cases. The characteristics and prices are very similar among different providers, so most probably you&#8217;ll be conditioned by which API you&#8217;ve implemented on your back end. For the specs and details, see Amazon <a href=\"https://aws.amazon.com/glacier/\">Glacier and Glacier Deep Archive</a>, <a href=\"https://cloud.google.com/storage/archival\">Cloud Storage for data archiving</a> by Google, and <a href=\"https://azure.microsoft.com/services/backup/\">Azure Backup</a>. Also check the <em>archiving solutions</em> these providers offer: <a href=\"https://aws.amazon.com/archive/\">Data Archiving</a> by AWS and <a href=\"https://azure.microsoft.com/solutions/backup-archive/\">Backup and Archive</a> by Azure.</p>\n<p>Aside from storing and archiving, they provide more specific options, such as Amazon <a href=\"https://aws.amazon.com/cloudfront/\">CloudFront</a> — targeted for building a content delivery network (CDN) — which is the same as Google&#8217;s <a href=\"https://cloud.google.com/cdn/\">Cloud CDN</a> and Azure&#8217;s <a href=\"https://azure.microsoft.com/services/cdn/\">Content Delivery Network</a>. But if you have more exotic requirements, make sure you check their sites.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/a-side-by-side-comparison-of-aws-google-cloud-and-azure/?utm_source=rss\">A Side-by-Side Comparison of AWS, Google Cloud and Azure</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/a-side-by-side-comparison-of-aws-google-cloud-and-azure/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=139150",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Cloud",
            "Web"
        ],
        "dc:creator": [
            "Lucero del Alba"
        ],
        "pubDate": [
            "Mon, 19 Apr 2021 17:00:53 GMT"
        ],
        "metaDesc": [
            "Need a cloud service but not sure where to start? Here's a broad overview of what's on offer, from big players to small, and how to choose the right one."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Drawing Graphics with the CSS Paint API"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/"
        ],
        "dc:creator": [
            "Georgi Nikolov"
        ],
        "pubDate": [
            "Fri, 18 Jun 2021 09:22:42 +0000"
        ],
        "category": [
            "Tutorials",
            "CSS Houdini",
            "CSS Paint API",
            "custom properties"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=54945",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>A practical introduction to the CSS Paint API with hands-on examples. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/\">Drawing Graphics with the CSS Paint API</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>CSS Paint is an API that allows developers to programatically generate and draw graphics where CSS expects an image.</p>\n\n\n\n<p>It is part of CSS Houdini, an umbrella term for <a href=\"https://ishoudinireadyyet.com/\">seven</a> new low-level APIs that expose different parts of the CSS engine and allows developers to extend CSS by hooking into the styling and layout process of a browser’s rendering engine. </p>\n\n\n\n<p>It enables developers to write code the browser can parse as CSS, thereby creating new CSS features without waiting for them to be implemented natively in browsers.</p>\n\n\n\n<p>Today we will explore two particular APIs, that are part of the CSS Houdini umbrella:</p>\n\n\n\n<ol><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API\">CSS Paint</a>, which at the time of writing this article, has been fully implemented in Chrome, Opera and Edge and is available in Firefox and Safari via a <a href=\"https://github.com/GoogleChromeLabs/css-paint-polyfill\">polyfill</a>.</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API\">CSS Properties and Values API</a>, that will allow us to explicitly define our CSS variables, their initial values, what type of values they support and whether these variables can be inherited.</li></ol>\n\n\n\n<p>CSS Paint provides us with ability to render graphics using a <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet\">PaintWorklet</a></code>, a stripped down version of the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\">CanvasRenderingContext2D</a></code>. The major differences are:</p>\n\n\n\n<ul><li>No support for text rendering</li><li>No direct pixel access / manipulation</li></ul>\n\n\n\n<p>With these two omissions in mind, anything you can draw using <code>canvas2d</code>, you can draw on a regular DOM element using the CSS Paint API. For those of you who have done any graphics using <code>canvas2d</code>, you should be right at home.</p>\n\n\n\n<p>Furthermore, we as developers have the ability to pass <a href=\"https://tympanus.net/codrops/css_reference/custom-properties/\">CSS variables</a> as inputs to our <code>PaintWorklet</code> and control its presentation using custom predefined attributes. </p>\n\n\n\n<p>This allows for a high degree of customisation, even by design people who may not be necessarily familiar with Javascript.</p>\n\n\n\n<p>You can see more examples <a href=\"https://css-houdini-dojo.georgi-nikolov.com/\">here</a> and <a href=\"https://houdini.how/\">here</a>. And with that out of the way, let&#8217;s get to coding!</p>\n\n\n\n<h2>Simplest example: two diagonal lines</h2>\n\n\n\n<p>Let&#8217;s create a CSS paintlet, that once loaded, will draw two diagonal lines across the surface of the DOM element we apply it to. The paintlet drawing surface size will adapt to the width and height of the DOM element and we will be able to control the diagonal line thickness by passing in a CSS variable.</p>\n\n\n\n<h3>Creating our PaintWorklet</h3>\n\n\n\n<p>In order to load a <code>PaintWorklet</code>, we will need to create it as a separate Javascript file (<code>diagonal-lines.js</code>). </p>\n\n\n\n<pre class=\"wp-block-code\"><code>const PAINTLET_NAME = 'diagonal-lines'\n\nclass CSSPaintlet {\n\n  // &#x1f449; Define the names of the input CSS variables we will support\n  static get inputProperties() {\n    return &#91;\n      `--${PAINTLET_NAME}-line-width`,\n    ]\n  }\n\n  // &#x1f449; Define names for input CSS arguments supported in paint()\n  // &#x26a0; This part of the API is still experimental and hidden\n  //    behind a flag.\n  static get inputArguments () {\n    return &#91;]\n  }\n\n  // &#x1f449; paint() will be executed every time:\n  //  - any input property changes\n  //  - the DOM element we apply our paintlet to changes its dimensions\n  paint(ctx, paintSize, props) {\n    // &#x1f449; Obtain the numeric value of our line width that is passed\n    //    as a CSS variable\n    const lineWidth = Number(props.get(`--${PAINTLET_NAME}-line-width`))\n\n    ctx.lineWidth = lineWidth\n\n    // &#x1f3a8; Draw diagonal line #1\n    ctx.beginPath()\n    ctx.moveTo(0, 0)\n    ctx.lineTo(paintSize.width, paintSize.height)\n    ctx.stroke()\n\n    // &#x1f3a8; Draw diagonal line #2\n    ctx.beginPath()\n    ctx.moveTo(0, paintSize.height)\n    ctx.lineTo(paintSize.width, 0)\n    ctx.stroke()\n  }\n}\n\n// &#x1f449; Register our CSS Paintlet with the correct name\n//    so we can reference it from our CSS\nregisterPaint(PAINTLET_NAME, CSSPaintlet)</code></pre>\n\n\n\n<p>We define our CSS paintlet as a standalone class. This class needs only one method to work &#8211; <code>paint()</code>, which will draw the graphics on top of the surface we assign our CSS paintlet to. It will be executed upon changing any of the CSS variables our paintlet relies on or when our DOM element changes it&#8217;s dimensions.</p>\n\n\n\n<p>The other static method <code>inputProperties()</code>  is optional. It tells the CSS paintlet which input CSS variables exactly does it support. In our case, that would be <code>--diagonal-lines-line-width</code>. We declare it as an input property and consume it for use in our <code>paint()</code> method. It is important we cast it to a number by putting it in a <code>Number</code> to ensure cross-browser support.</p>\n\n\n\n<p>There is yet another optional static method supported: <code>inputArguments</code>. It  exposes arguments to our <code>paint()</code> method like so:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#myImage {\n  background-image: paint(myWorklet, 30px, red, 10deg);\n}</code></pre>\n\n\n\n<p>However, this part of the CSS paintlet API is still hidden behind a flag and considered experimental. For ease of use and compatability, we will not be covering it in this article, but I encourage you to read up on it on your own. Instead, we will use CSS variables using the <code>inputProperties()</code> method to control all of the inputs to our paintlet.</p>\n\n\n\n<h3>Registering our CSS PaintWorklet</h3>\n\n\n\n<p>Afterwards we must reference our CSS paintlet and register it to our main page. It is important we conditionally load the awesome <code><a href=\"https://github.com/GoogleChromeLabs/css-paint-polyfill\">css-paint-polyfill</a></code> package, which will ensure our paintlets will work in Firefox and Safari.</p>\n\n\n\n<p>It should be noted that along our CSS paintlet, we can use the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Properties_and_Values_API\">CSS Properties and Values API</a>, also part of the Houdini umbrella, to explicitly define our CSS variables inputs via <code>CSS.registerProperty()</code>. We can control our CSS variables like so:</p>\n\n\n\n<ul><li>Their types &amp; syntax</li><li>Whether this CSS variable inherits from any parent elements</li><li>What is it&#8217;s initial value if the user does not specify one</li></ul>\n\n\n\n<p>This API is also not supported in Firefox and Safari, but we can still use it in Chromium browsers. This way we will future-proof our demos and browsers that don&#8217;t support it will simply ignore it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>;(async function() {\n  // &#x26a0; Handle Firefox and Safari by importing a polyfill for CSS Pain    \n  if (CSS&#91;'paintWorklet'] === undefined) {\n    await import('https://unpkg.com/css-paint-polyfill')\n  }\n\n  // &#x1f449; Explicitly define our custom CSS variable\n  //    This is not supported in Safari and Firefox, so they will\n  //    ignore it, but we can optionally use it in browsers that \n  //    support it. \n  //    This way we will future-proof our applications so once Safari\n  //    and Firefox support it, they will benefit from these\n  //    definitions too.\n  //\n  //    Make sure that the browser treats it as a number\n  //    It does not inherit it's value\n  //    It's initial value defaults to 1\n  if ('registerProperty' in CSS) {\n    CSS.registerProperty({\n      name: '--diagonal-lines-line-width',\n      syntax: '&lt;number>',\n      inherits: false,\n      initialValue: 1\n    })\n  }\n\n  // &#x1f449; Include our separate paintlet file\n  CSS.paintWorklet.addModule('path/to/our/external/worklet/diagonal-files.js')\n})()</code></pre>\n\n\n\n<h3>Referencing our paintlet as a CSS background</h3>\n\n\n\n<p>Once we have included our paintlet as a JS file, using it is dead simple. We select our target DOM element we want to style in CSS and apply our paintlet via the <code>paint()</code> CSS command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#myElement {\n   // &#x1f449; Reference our CSS paintlet\n   background-image: paint('--diagonal-lines');\n\n   // &#x1f449; Pass in custom CSS variable to be used in our CSS paintlet\n   --diagonal-lines-line-width: 10;\n\n   // &#x1f449; Remember - the browser treats this as a regular image\n   // referenced in CSS. We can control it's repeat, size, position\n   // and any other background related property available\n   background-repeat: no-repeat;\n   background-size: cover;\n   background-position: 50% 50%;\n\n   // Some more styles to make sure we can see our element on the page\n   border: 1px solid red;\n   width: 200px;\n   height: 200px;\n   margin: 0 auto;\n}</code></pre>\n\n\n\n<p>And with this code out of the way, here is what we will get:</p>\n\n\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Worklet Intro Example\" src=\"https://codepen.io/gbnikolov/embed/JjWeVzZ?height=300&amp;theme-id=8762&amp;default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\" theme_id=\"light\">\n  See the Pen <a href='https://codepen.io/gbnikolov/pen/JjWeVzZ'>CSS Worklet Intro Example</a> by Georgi Nikoloff\n  (<a href='https://codepen.io/gbnikolov'>@gbnikolov</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n\n<p>Remember, we can apply this CSS paintlet as a background to any DOM element with any dimensions. Let&#8217;s blow up our DOM element to fullscreen, lower it&#8217;s <code>background-size</code> x and y values and set it&#8217;s <code>background-repeat</code> to repeat. Here is our updated example:</p>\n\n\n\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Worklet Intro Example\" src=\"https://codepen.io/gbnikolov/embed/QWpJXVY?height=300&amp;theme-id=8762&amp;default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/gbnikolov/pen/QWpJXVY'>CSS Worklet Intro Example</a> by Georgi Nikoloff\n  (<a href='https://codepen.io/gbnikolov'>@gbnikolov</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n\n<p>We are using the same CSS paintlet from our previous example, but now we have expanded it to cover the whole demo page.</p>\n\n\n\n<p>So now that we covered our base example and saw how to organise our code, let&#8217;s write some nicer looking demos!</p>\n\n\n\n<h3>Particle Connections</h3>\n\n\n\n<p class=\"codepen\" data-height=\"700\" data-theme-id=\"8762\" data-default-tab=\"result\" data-user=\"gbnikolov\" data-slug-hash=\"GRWwbed\" style=\"height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"CSS Worklet Particles\">\n  <span>See the Pen <a href=\"https://codepen.io/gbnikolov/pen/GRWwbed\">\n  CSS Worklet Particles</a> by Georgi Nikoloff (<a href=\"https://codepen.io/gbnikolov\">@gbnikolov</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async=\"\" src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>This paintlet was inspired by the <a href=\"https://codepen.io/nucliweb/pen/yLJdroy\">awesome demo</a> by <a href=\"https://twitter.com/nucliweb\">@nucliweb</a>.</p>\n\n\n\n<p>Again, for those of you who have used the <code>canvas2d</code> API to draw graphics in the past, this will be pretty straightforward.</p>\n\n\n\n<p>We control how many points we are going to render via the `&#8211;dots-connections-count` CSS variable. Once we obtain its numeric value in our paintlet, we create an array with the appropriate size and fill it with objects with random <code>x</code>, <code>y</code> and <code>radius</code> properties.</p>\n\n\n\n<p>Then we loop each of our items in the array, draw a sphere at its coordinates, find the nearest neighbour to it (the minimum distance is controlled via the `&#8211;dots-connections-connection-min-dist` CSS variable) and connect them with a line.</p>\n\n\n\n<p>We will also control the spheres fill color and the lines stroke color via the `&#8211;dots-connections-fill-color` and <code>--dots-connections-stroke-color</code> CSS variables respectively.</p>\n\n\n\n<p>Here is the complete workled code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const PAINTLET_NAME = 'dots-connections'\n\nclass CSSPaintlet {\n  // &#x1f449; Define names for input CSS variables we will support\n  static get inputProperties() {\n    return &#91;\n      `--${PAINTLET_NAME}-line-width`,\n      `--${PAINTLET_NAME}-stroke-color`,\n      `--${PAINTLET_NAME}-fill-color`,\n      `--${PAINTLET_NAME}-connection-min-dist`,\n      `--${PAINTLET_NAME}-count`,\n    ]\n  }\n\n  // &#x1f449; Our paint method to be executed when CSS vars change\n  paint(ctx, paintSize, props, args) {\n    const lineWidth = Number(props.get(`--${PAINTLET_NAME}-line-width`))\n    const minDist = Number(props.get(`--${PAINTLET_NAME}-connection-min-dist`))\n    const strokeColor = props.get(`--${PAINTLET_NAME}-stroke-color`)\n    const fillColor = props.get(`--${PAINTLET_NAME}-fill-color`)\n    const numParticles = Number(props.get(`--${PAINTLET_NAME}-count`))\n    \n    // &#x1f449; Generate particles at random positions\n    //    across our DOM element surface\n    const particles = new Array(numParticles).fill(null).map(_ => ({\n      x: Math.random() * paintSize.width,\n      y: Math.random() * paintSize.height,\n      radius: 2 + Math.random() * 2,\n    }))\n    \n    // &#x1f449; Assign lineWidth coming from CSS variables and make sure\n    //    lineCap and lineWidth are round\n    ctx.lineWidth = lineWidth\n    ctx.lineJoin = 'round'\n    ctx.lineCap = 'round'\n    \n    // &#x1f449; Loop over the particles with nested loops - O(n^2)\n    for (let i = 0; i &lt; numParticles; i++) {\n      const particle = particles&#91;i]\n      // &#x1f449; Loop second time \n      for (let n = 0; n &lt; numParticles; n++) {\n        if (i === n) {\n          continue\n        }\n        const nextParticle = particles&#91;n]\n        // &#x1f449; Calculate distance between the current particle\n        //    and the particle from the previous loop iteration\n        const dx = nextParticle.x - particle.x\n        const dy = nextParticle.y - particle.y\n        const dist = Math.sqrt(dx * dx + dy * dy)\n        // &#x1f449; If the dist is smaller then the minDist specified via\n        //    CSS variable, then we will connect them with a line\n        if (dist &lt; minDist) {\n          ctx.strokeStyle = strokeColor\n          ctx.beginPath()\n          ctx.moveTo(nextParticle.x, nextParticle.y)\n          ctx.lineTo(particle.x, particle.y)\n          // &#x1f449; Draw the connecting line\n          ctx.stroke()\n        }\n      }\n      // Finally draw the particle at the right position\n      ctx.fillStyle = fillColor\n      ctx.beginPath()\n      ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2)\n      ctx.closePath()\n      ctx.fill()\n    }\n    \n  }\n}\n\n// &#x1f449; Register our CSS paintlet with a unique name\n//    so we can reference it from our CSS\nregisterPaint(PAINTLET_NAME, CSSPaintlet)</code></pre>\n\n\n\n<h3>Line Loop</h3>\n\n\n\n<p>Here is our next example. It expects the following CSS variables as inputs to our paintlet:</p>\n\n\n\n<p><code>--loop-line-width</code><br><code>--loop-stroke-color</code><br><code>--loop-sides</code><br><code>--loop-scale</code><br><code>--loop-rotation</code></p>\n\n\n\n<p>We loop around a full circle (PI * 2) and position them along it&#8217;s perimeters based on the <code>--loop-sides</code> count CSS variables. For each position, we loop again around our full circle, and connect it to all other positions via a <code>ctx.lineTo()</code> command:</p>\n\n\n\n<iframe height=\"700\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Worklet Line Loop\" src=\"https://codepen.io/gbnikolov/embed/BaWvyyv?height=300&amp;theme-id=8762&amp;default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/gbnikolov/pen/BaWvyyv'>CSS Worklet Line Loop</a> by Georgi Nikoloff\n  (<a href='https://codepen.io/gbnikolov'>@gbnikolov</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n\n<pre class=\"wp-block-code\"><code>const PAINTLET_NAME = 'loop'\n\nclass CSSPaintlet {\n  // &#x1f449; Define names for input CSS variables we will support\n  static get inputProperties() {\n    return &#91;\n      `--${PAINTLET_NAME}-line-width`,\n      `--${PAINTLET_NAME}-stroke-color`,\n      `--${PAINTLET_NAME}-sides`,\n      `--${PAINTLET_NAME}-scale`,\n      `--${PAINTLET_NAME}-rotation`,\n    ]\n  }\n  // &#x1f449; Our paint method to be executed when CSS vars change\n  paint(ctx, paintSize, props, args) {\n    const lineWidth = Number(props.get(`--${PAINTLET_NAME}-line-width`))\n    const strokeColor = props.get(`--${PAINTLET_NAME}-stroke-color`)\n    const numSides = Number(props.get(`--${PAINTLET_NAME}-sides`))\n    const scale = Number(props.get(`--${PAINTLET_NAME}-scale`))\n    const rotation = Number(props.get(`--${PAINTLET_NAME}-rotation`))\n    \n    const angle = Math.PI * 2 / numSides\n    const radius = paintSize.width / 2\n    ctx.save()\n    ctx.lineWidth = lineWidth\n    ctx.lineJoin = 'round'\n    ctx.lineCap = 'round'\n    ctx.strokeStyle = strokeColor\n    ctx.translate(paintSize.width / 2, paintSize.height / 2)\n    ctx.rotate(rotation * (Math.PI / 180))\n    ctx.scale(scale / 100, scale / 100)\n    ctx.moveTo(0, radius)\n\n    // &#x1f449; Loop over the numsides twice in nested loop - O(n^2)\n    //    Connect each corner with all other corners\n    for (let i = 0; i &lt; numSides; i++) {\n      const x = Math.sin(i * angle) * radius\n      const y = Math.cos(i * angle) * radius\n      for (let n = i; n &lt; numSides; n++) {\n        const x2 = Math.sin(n * angle) * radius\n        const y2 = Math.cos(n * angle) * radius\n        ctx.lineTo(x, y)\n        ctx.lineTo(x2, y2);\n      }\n    }\n    ctx.closePath()\n    ctx.stroke()\n    ctx.restore()\n  }   \n}\n\n// &#x1f449; Register our CSS paintlet with a unique name\n//    so we can reference it from our CSS\nregisterPaint(PAINTLET_NAME, CSSPaintlet)</code></pre>\n\n\n\n<h3>Noise Button</h3>\n\n\n\n<iframe height=\"700\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Worklet Noise Button\" src=\"https://codepen.io/gbnikolov/embed/bGqORea?height=300&amp;theme-id=8762&amp;default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/gbnikolov/pen/bGqORea'>CSS Worklet Noise Button</a> by Georgi Nikoloff\n  (<a href='https://codepen.io/gbnikolov'>@gbnikolov</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n\n<p>Here is our next example. It is inspired by <a href=\"https://codepen.io/jh3y/pen/LYRxQrQ\">this other awesome CSS Paintlet</a> by <a href=\"https://twitter.com/jh3yy\" target=\"_blank\" rel=\"noreferrer noopener\">Jhey Tompkins</a>. It expects the following CSS variables as inputs to our paintlet:</p>\n\n\n\n<p><code>--grid-size</code><br><code>--grid-color</code><br><code>--grid-noise-scale</code></p>\n\n\n\n<p>The paintlet itself uses perlin noise (code courtesy of <a href=\"https://github.com/joeiddon/perlin\">joeiddon</a>) to control the opacity of each individual cell. </p>\n\n\n\n<pre class=\"wp-block-code\"><code>const PAINTLET_NAME = 'grid'\n\nclass CSSPaintlet {\n  // &#x1f449; Define names for input CSS variables we will support\n  static get inputProperties() {\n    return &#91;\n      `--${PAINTLET_NAME}-size`,\n      `--${PAINTLET_NAME}-color`,\n      `--${PAINTLET_NAME}-noise-scale`\n    ]\n  }\n\n  // &#x1f449; Our paint method to be executed when CSS vars change\n  paint(ctx, paintSize, props, args) {\n    const gridSize = Number(props.get(`--${PAINTLET_NAME}-size`))\n    const color = props.get(`--${PAINTLET_NAME}-color`)\n    const noiseScale = Number(props.get(`--${PAINTLET_NAME}-noise-scale`))\n\n    ctx.fillStyle = color\n    for (let x = 0; x &lt; paintSize.width; x += gridSize) {\n      for (let y = 0; y &lt; paintSize.height; y += gridSize) {\n        // &#x1f449; Use perlin noise to determine the cell opacity\n        ctx.globalAlpha = mapRange(perlin.get(x * noiseScale, y * noiseScale), -1, 1, 0.5, 1)\n        ctx.fillRect(x, y, gridSize, gridSize)\n      }\n    }\n  }\n}\n\n// &#x1f449; Register our CSS paintlet with a unique name\n//    so we can reference it from our CSS\nregisterPaint(PAINTLET_NAME, CSSPaintlet)</code></pre>\n\n\n\n<h3>Curvy dividers</h3>\n\n\n\n<p>As a last example, let&#8217;s do something perhaps a bit more useful. We will programatically draw dividers to separate the text content of our page:</p>\n\n\n\n<iframe height=\"700\" style=\"width: 100%;\" scrolling=\"no\" title=\"CSS Worklet Curvy Dividers\" src=\"https://codepen.io/gbnikolov/embed/XWMoaJd?height=300&amp;theme-id=8762&amp;default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/gbnikolov/pen/XWMoaJd'>CSS Worklet Curvy Dividers</a> by Georgi Nikoloff\n  (<a href='https://codepen.io/gbnikolov'>@gbnikolov</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n\n\n<p>And as usual, here is the CSS paintlet code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const PAINTLET_NAME = 'curvy-dividor'\n\nclass CSSPaintlet {\n  // &#x1f449; Define names for input CSS variables we will support\n  static get inputProperties() {\n    return &#91;\n      `--${PAINTLET_NAME}-points-count`,\n      `--${PAINTLET_NAME}-line-width`,\n      `--${PAINTLET_NAME}-stroke-color`\n    ]\n  }\n  // &#x1f449; Our paint method to be executed when CSS vars change\n  paint(ctx, paintSize, props, args) {\n    const pointsCount = Number(props.get(`--${PAINTLET_NAME}-points-count`))\n    const lineWidth = Number(props.get(`--${PAINTLET_NAME}-line-width`))\n    const strokeColor = props.get(`--${PAINTLET_NAME}-stroke-color`)\n    \n    const stepX = paintSize.width / pointsCount\n    \n    ctx.lineWidth = lineWidth\n    ctx.lineJoin = 'round'\n    ctx.lineCap = 'round'\n    \n    ctx.strokeStyle = strokeColor\n    \n    const offsetUpBound = -paintSize.height / 2\n    const offsetDownBound = paintSize.height / 2\n    \n    // &#x1f449; Draw quadratic bezier curves across the horizontal axies\n    //    of our dividers:\n    ctx.moveTo(-stepX / 2, paintSize.height / 2)\n    for (let i = 0; i &lt; pointsCount; i++) {\n      const x = (i + 1) * stepX - stepX / 2\n      const y = paintSize.height / 2 + (i % 2 === 0 ? offsetDownBound : offsetUpBound)\n      const nextx = (i + 2) * stepX - stepX / 2\n      const nexty = paintSize.height / 2 + (i % 2 === 0 ? offsetUpBound : offsetDownBound)\n      const ctrlx = (x + nextx) / 2\n      const ctrly = (y + nexty) / 2\n      ctx.quadraticCurveTo(x, y, ctrlx, ctrly)\n    }\n    ctx.stroke()\n  }\n}\n\n// &#x1f449; Register our CSS paintlet with a unique name\n//    so we can reference it from our CSS\nregisterPaint(PAINTLET_NAME, CSSPaintlet)</code></pre>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>In this article we went through all the key components and methods of the CSS Paint API. It is pretty easy to setup and very useful if we want to draw more advanced graphics that CSS does not support out-of-the box.</p>\n\n\n\n<p>We can easily create a library out of these CSS paintlets and keep reusing them across our projects with minimum setup required.</p>\n\n\n\n<p>As a good practice, I encourage you to find cool <code>canvas2d</code> demos and port them to the new CSS Paint API.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/\">Drawing Graphics with the CSS Paint API</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "Browsing Jetpack Compose samples"
        ],
        "author": [
            "Anton Shilov"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 10:09:54 +0000"
        ],
        "link": [
            "https://dev.to/antonshilov/browsing-jetpack-compose-samples-32m6"
        ],
        "guid": [
            "https://dev.to/antonshilov/browsing-jetpack-compose-samples-32m6"
        ],
        "description": [
            "<h2>\n  <a href=\"#problem\">\n  </a>\n  Problem\n</h2>\n\n<p>While writing apps with Jetpack Compose you can always <code>Cmd+Click</code> on a library function to check their sources and comments. And often you can find a link to the sample code with an example of usages for that function. Unfortunately, sample code is not published together with the Jetpack Compose library so you cannot browse them.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ORbK3hs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3a457slucs0wzfb1t86.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ORbK3hs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3a457slucs0wzfb1t86.png\" alt=\"Sample documentation\"></a></p>\n\n<h2>\n  <a href=\"#easy-solution\">\n  </a>\n  Easy Solution\n</h2>\n\n<p>All Jetpack Compose sources are open and published as a part of the AndroidX repo. We can quickly find sample code using <a href=\"https://cs.android.com\">Android Code Search</a> website.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hRZl6OFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1oia5ix1tkb3exejbam.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hRZl6OFc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1oia5ix1tkb3exejbam.gif\" alt=\"code-search\"></a></p>\n\n<ol>\n<li>Copy sample name from the sources</li>\n<li>Open <a href=\"https://cs.android.com\">https://cs.android.com</a> in the browser</li>\n<li>Search for the sample code</li>\n</ol>\n\n<h2>\n  <a href=\"#better-solution\">\n  </a>\n  Better solution\n</h2>\n\n<p>Keeping a browser tab open and manually copying function name is quite a hassle. We can do better, we can automate it! And CodeSearch plugin can help us with that. It allows us to launch search queries right from the IDE, and we can add a custom search engine.</p>\n\n<ol>\n<li>Install Code Search plugin <a href=\"https://plugins.jetbrains.com/plugin/12578-codesearch\">https://plugins.jetbrains.com/plugin/12578-codesearch</a>\n</li>\n<li><p>Add Android Code Search engine to plugin settings(IDE restart required).<br>\n<strong>Name:</strong> Android CS<br>\n<strong>Url:</strong> <a href=\"https://cs.android.com/search?q=lang:kotlin%20usage:\">https://cs.android.com/search?q=lang:kotlin usage:</a><br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZwDcjZwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpbb90ykxzg9no061z7l.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ZwDcjZwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpbb90ykxzg9no061z7l.png\" alt=\"Search settings\"></a></p></li>\n<li><p>Select the sample name and search for it<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z-efbhJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb2m44k82irrqu91na3c.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--z-efbhJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb2m44k82irrqu91na3c.gif\" alt=\"Plugin usage\"></a>  </p></li>\n</ol>\n\n<p>Hope you found this post useful 😄. You can <a href=\"https://twitter.com/antonshilov_\">follow me</a> to get the latest news about Compose.</p>\n\n"
        ],
        "category": [
            "jetpackcompose",
            "android",
            "kotlin",
            "compose"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "7 Tips for Writing Clear, Human-friendly Microcopy"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/writing-clear-human-friendly-microcopy/?utm_source=rss\"\n              title=\"7 Tips for Writing Clear, Human-friendly Microcopy\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611803701microcopy-ux.png\"\n        alt=\"7 Tips for Writing Clear, Human-friendly Microcopy\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611803701microcopy-ux-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611803701microcopy-ux.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Words matter — and not just in books. They help you navigate a physical environment or a digital product. This article explores the words and text used in digital environments.</strong> </p>\n<p>User experience (UX) writing has become an essential part of product development. Some UX writers promote the content-first approach. Your microcopy dictates your design, rather than the design-first approach. </p>\n<p>UX writing focuses on creating clear, human, and enjoyable microcopy. For many tech startups, UX writing is strongly intertwined with their design process. Bad microcopy can have a substantial impact on a product’s sales. </p>\n<p>A single, poorly chosen word can induce fear or confusion in users. In other words, a single word can lead to successful product signup or yet another cart abandonment.</p>\n<p>This article explores seven quirky tips to enhance your UX writing. But before we start, let’s briefly define the relationship between UX writing and microcopy.</p>\n<h2 id=\"howareuxwritingandmicrocopyconnected\">How are UX Writing and Microcopy Connected?</h2>\n<p>There are different types of writing. Copywriting, for example, focuses on creating content to market a product. UX writing, however, focuses on the content embedded in products.</p>\n<p>To give you an example of UX writing, think of the text on buttons, labels for webforms, or any little textual guidance or clues when using a product. Here, the main goal of content (or text) is to guide the user, remove confusion, and provide clear directions.</p>\n<p>So, what’s the link now between UX writing and microcopy? Microcopy refers to the copy for the user interface. As mentioned above, it involves buttons, input labels, and app instructions, among other things.</p>\n<p>UX writing has become an increasingly important aspect of product development. Great microcopy can increase sales, improve user satisfaction, and lower the barrier to engaging users.</p>\n<p>Let’s now take a look at seven UX writing tips …</p>\n<h2 id=\"tip1abrandpersonalitymakesyouruxwritingsparkle\">Tip 1: A Brand Personality Makes Your UX Writing Sparkle</h2>\n<p>Everyone can write words on paper. But can these words engage the right people? It’s crucial to understand that words have different meanings for different people. For instance, word-jokes can make your brand stand out, but they can also confuse users. </p>\n<p>It’s important to identify your brand personality. A brand voice is a verbal translation of your brand personality. It determines how your brand sounds and makes it easy to recognize.</p>\n<p>Remember how we mentioned that your microcopy should sound human? Let’s compare two microcopy examples for a failed login attempt using an incorrect password.</p>\n<p><strong>Example 1:</strong></p>\n<blockquote><p>Wrong password. Try again or click “Forgot password” to reset it.</p></blockquote>\n<p><strong>Example 2:</strong></p>\n<blockquote><p>Oops! It looks as if you may have forgotten your password. Click here to reset it.</p></blockquote>\n<p>Now imagine you meet this interface in person. Which message sounds more human? The second example does sound more human. </p>\n<p>Let’s look at how Oatly, a trendy oat milk brand, handles their cookie consent popup. </p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1611802224oatly-consent.png\" alt=\"Oatly&#039;s cookie consent popup\" width=\"875\" height=\"225\" class=\"alignnone size-full wp-image-180832\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802224oatly-consent.png 875w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802224oatly-consent-300x77.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802224oatly-consent-768x197.png 768w\" sizes=\"(max-width: 875px) 100vw, 875px\" /></p>\n<p>Their cookie consent popup represents their brand personality. Oatly cares about users’ privacy and cares about the climate. Their brand&#8217;s voice is playful and friendly. Even often neglected web elements like a cookie consent popup can carry your brand’s voice.</p>\n<p>If you struggle to define your brand personality, take a look at the example of brand personality bias below to help you define the right tone.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1611802265brand-personality-bias.png\" alt=\"Brand personality bias\" width=\"892\" height=\"483\" class=\"alignnone size-full wp-image-180833\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802265brand-personality-bias.png 892w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802265brand-personality-bias-300x162.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802265brand-personality-bias-768x416.png 768w\" sizes=\"(max-width: 892px) 100vw, 892px\" /></p>\n<p><small></p>\n<p>Source: <a href=\"https://www.behance.net/gallery/101888299/Freshalian-Pasta-UX-Writing-Case-Study\">Ahmed Magdi on behance.net</a> &#8211; UX writing case study</p>\n<p></small></p>\n<h2 id=\"tip2designtoreducefearorconfusion\">Tip 2: Design to Reduce Fear or Confusion</h2>\n<p>The Internet can be a scary and confusing place. Good microcopy can take away some of those negative feelings. In the introduction, we discussed how a single, poorly chosen word could cause feelings of fear or confusion.</p>\n<p>Here are some very straightforward examples that can still spark emotions in users:</p>\n<ul>\n<li>A company asks for your phone number via their web form. Does that mean they&#8217;ll pester you with annoying calls?</li>\n<li>An online service wants you to pay for your monthly subscription. How secure is the payment connection?</li>\n<li>You&#8217;re signing up for an online streaming service. Can you opt out at any time, or is there a notice period?</li>\n</ul>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1611802306airbnb-location-field.png\" alt=\"Airbnb with and without microcopy\" width=\"590\" height=\"227\" class=\"alignnone size-full wp-image-180834\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802306airbnb-location-field.png 590w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802306airbnb-location-field-300x115.png 300w\" sizes=\"(max-width: 590px) 100vw, 590px\" /></p>\n<p>Even an elementary “location” field without supporting microcopy text on Airbnb’s website can confuse a reader.</p>\n<ul>\n<li>Do you want my current location?</li>\n<li>Do you want my preferred destination?</li>\n</ul>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1611802342airbnb-reservation.png\" alt=\"Airbnb with and without microcopy\" width=\"800\" height=\"500\" class=\"alignnone size-full wp-image-180836\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802342airbnb-reservation.png 800w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802342airbnb-reservation-300x188.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611802342airbnb-reservation-768x480.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></p>\n<p>Here, the microcopy message under the “Reserve” button explains what will happen when you click this button. Without this message, many users might feel some level of fear or confusion about what will happen next. </p>\n<p>For instance, I like reviewing my Airbnb order once more before committing to a reservation. Without a microcopy message, I’m not sure if I’m committing to a reservation or if I’ll have the chance to review the order once more.</p>\n<blockquote>\n<p>Fear is often a driven motivator to not complete an action.</p>\n</blockquote>\n<p>You might be surprised how even the smallest web element like a button can induce fear or confusion. Design an interface with this in mind. Try to read your users’ minds and preempt their questions. Fear is often the reason why users don&#8217;t complete an action. Removing fear and confusion helps users feel more confident when navigating your interface.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/writing-clear-human-friendly-microcopy/?utm_source=rss\">7 Tips for Writing Clear, Human-friendly Microcopy</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/writing-clear-human-friendly-microcopy/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180830",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Design"
        ],
        "dc:creator": [
            "Michiel Mulders"
        ],
        "pubDate": [
            "Wed, 27 Jan 2021 15:00:14 GMT"
        ],
        "metaDesc": [
            "Want to lose users? Miss out on sales? No? Learn seven easy ways to make sure the wording on your app isn't sending users and profits away!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Web3: A New Web for a New World"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/web3-new-web-new-world/?utm_source=rss\"\n              title=\"Web3: A New Web for a New World\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1623498266MarsSocial2-9900000000079e3c.jpeg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1623498266MarsSocial2-9900000000079e3c-300x209.jpeg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1623498266MarsSocial2-9900000000079e3c-768x534.jpeg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1623498266MarsSocial2-9900000000079e3c.jpeg 900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Ever since humans have stood on two legs, we&#8217;ve been unable to trust each other. We’ve always needed intermediaries — people who make sure those on both sides of an agreement honor their commitment. Intermediaries today include banks, who forward our money; lawyers, who forward our arguments and demands; and social networks, which forward our messages.</strong></p>\n<p>The reason for this high level of intermediation is a total lack of trust. It’s hard to trust someone when you can’t tell what they&#8217;re thinking. But thankfully, just as we&#8217;ve been able to innovate past seemingly impossible problems — like mastering flight, building skyscrapers, and democratizing information — we&#8217;ve also been able to develop a new technology that obliterates our trust issues. Enter Web3.</p>\n<p>To understand what Web3 is about, we first have to understand what intermediaries are. At a very basic level, intermediaries do the following:</p>\n<ul>\n<li>Accept messages from outside sources. In the case of a bank, that would be a message from customer A to send money to customer B.</li>\n<li>Act on these messages once authenticated. Once the bank has confirmed that customer A’s account has the funds and is authorized to send (it’s possible the account could be frozen), they would initiate the transfer.</li>\n<li>The results of these actions must be computed. The bank confirms whether the transfer is successful or not.</li>\n<li>The computation’s results must be stored, and potentially used as messages in another interaction. The bank keeps records of the transaction via ledgers and receipts.</li>\n</ul>\n<p>It doesn’t take much to realize that a computer is, technically speaking, a perfect intermediary. But if computers are perfect intermediaries, why haven’t they replaced our human intermediaries by now?</p>\n<p>To answer that, we must first consider authority and authorization.</p>\n<h2 id=\"authorityandauthorization\">Authority and Authorization</h2>\n<p>One key function of intermediaries is in deciding who’s right or wrong in a certain claim. Thus, if customer A were to send money to customer B and B claims they didn’t receive it, the two can settle their issue by going to the bank that stores the records. The bank can do this because it has authority, but it only has authority because the customers authorized it to act on their behalf (like recording their transactions, and so on).</p>\n<p>In the beginning, we had simple signatures on pieces of paper.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162151647601-authority-and-authorization.jpg\" alt=\"Authority and Authorization\" /></p>\n<p>But now we’ve left that and gone into the digital realm.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162151648002-services.png\" alt=\"List of services\" /></p>\n<p>We pass on authorization and give intermediaries authority over our fate with the click of a button, the scan of a fingerprint, or the input of a password. In truth, life has been great. The services at our disposal have made our lives infinitely easier.</p>\n<p>PayPal lets us send money anytime, anywhere. Twitter turns us into ruthless keyboard warriors. Facebook lets us catch up with lost friends. Medium allows us to automatically promote our writing to a global audience on a simple-to-use platform. Even things like Tinder and OkCupid have arguably improved some lives. Then there’s GitHub, which lets us work on computer code with anyone in the world, and Airbnb, which lets us earn money from our empty apartments without us having to ever meet the renter face to face. If that’s mind-blowing now, imagine how it would seem to a person from just 20 years ago!</p>\n<p>Now, if we’re sticking with the truth, then it hasn&#8217;t been all rosy. It’s no coincidence that the icon for “bank” looks like a prison.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162151648303-prison-bank.png\" alt=\"Prison bank\" /></p>\n<p>Aside from the banks, all of these services have had their gaffes.</p>\n<p>PayPal and TransferWise are both known for <a href=\"https://puntofisso.medium.com/paypal-closed-my-account-with-no-explanation-it-could-happen-to-you-6ff0ba4ea95f\">closing customer&#8217;s accounts without providing a reason</a>, cutting off revenue that people and businesses need to survive. Imagine waking up one morning to find that your $5,000/month business has been shut down with no valid reason given.</p>\n<p>Or consider the case of GitHub: <a href=\"https://techcrunch.com/2019/07/29/github-ban-sanctioned-countries/\">in July 2019, GitHub obliterated the accounts of all Iranian developers</a>. They just flat out deleted their repositories, losing them months of work and collaboration. Why? Because their authority (the US government) told them: “No Iran”. As a centralized and vulnerable company, they had no choice but to obey. (Note that, in January 2021, <a href=\"https://developer-tech.com/news/2021/jan/08/github-restored-iran-us-gov-permits-sanctions-exemption/\">GitHub obtained the US government’s permission</a> to serve Iranian devs again.)</p>\n<p>Thanks to how history has played out, we can see that in any system where there’s <em>hoardable</em> power (centralization), certain people are bound to hoard that power. There’s no way around it. There’s no problem with hoarding power, especially when it’s hoarded by someone noble and effective. Unfortunately, humanity has been dealt a bad hand by our psyche because it seems much easier for the worst of us to get this power. And by this, I don’t mean that only the worst of us rise to power. Rather, whenever we have power, the temptation to put our interests before the interests of the group is so overwhelming that only a few can succeed. This is why Uncle Ben told Peter Parker that “with great power comes great responsibility”. If only it were easy to rise to the occasion like Spider-Man.</p>\n<p>In the case of our life-changing 21st-century services, it’s not just the selling of personal data and lack of privacy that’s worrying about these powerful middlemen. It’s also the fact that third parties get access to this information and are then free to do whatever they want with it, no matter how nefarious it may be.</p>\n<p>In 2020, Ledger, a company specializing in building hardware cryptocurrency wallets, was hacked and personal information like addresses, phone numbers, and email records of hundreds of thousands of customers, dealers, and investors was leaked. This was a scammer’s heaven: a list of people who are guaranteed to own enough cryptocurrency to make it worthwhile to buy hardware wallets. Since then, many people have gotten scam emails of different kinds — from simple begging to death threats.</p>\n<p>Many more monsters lurk beneath the surface of the current digital infrastructure. There&#8217;s censorship on social media, political leanings of allegedly neutral platforms, and monopolistic bans of applications and websites. There&#8217;s also corruption at the highest levels of the “free” market in coordinated attacks on the community’s monetary freedom (like in the latest example of hedge funds and the US government banding together to order stock trading apps to prevent people from buying GME, and to bail out funds for who shorted the stock).</p>\n<p>What can we do about this intermediary situation? Is there any hope of fixing their broken practices?</p>\n<p>No, not really. Buckminister Fuller says it best:</p>\n<blockquote>\n<p>You never change things by fighting existing reality. To change something, build a new model that makes the existing model obsolete.</p>\n</blockquote>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162151648504-the-change.jpg\" alt=\"&quot;You never change things by fighting existing reality&quot;\" /></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/web3-new-web-new-world/?utm_source=rss\">Web3: A New Web for a New World</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/web3-new-web-new-world/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=190101",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Bruno Skvorc"
        ],
        "pubDate": [
            "Fri, 11 Jun 2021 23:10:12 GMT"
        ],
        "metaDesc": [
            "Trusting people is an issue as old as humankind. Learn how Web3 technology is offering a level of trust previously unknown in human history."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "An Introduction to the JavaScript Temporal API"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/javascript-temporal-api-introduction/?utm_source=rss\"\n              title=\"An Introduction to the JavaScript Temporal API\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610926620js-temporal-api.png\"\n        alt=\"An Introduction to JavaScript Temporal API\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610926620js-temporal-api-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610926620js-temporal-api.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Whatever your opinion of JavaScript, everyone thinks date handling is a mess. The <code>Date()</code> object implementation was copied directly from Java in 1995. Java scrapped it two years later but it remained in JavaScript for backward compatibility.</strong> </p>\n<p>These are the problems we face with <code>Date()</code>:</p>\n<ul>\n<li>it only supports UTC and the user&#8217;s local time</li>\n<li>there&#8217;s no support for non-Gregorian calendars</li>\n<li>daylight-saving behavior is unpredictable</li>\n<li>parsing dates from strings is unreliable</li>\n<li>the API is clunky</li>\n<li><code>Date</code> objects are mutable: a date will change as methods are applied</li>\n</ul>\n<p>The most popular alternative used to be the <a href=\"https://momentjs.com/\">moment.js</a> date library. However, this has been <a href=\"https://momentjs.com/docs/#/-project-status/\">placed in maintenance mode</a> and should not really be used in new projects. They recommend a <a href=\"https://momentjs.com/docs/#/-project-status/recommendations/\">couple of alternatives</a>, but each of these have their own pros and cons.</p>\n<p>The <code>Date()</code> object can’t be removed from JavaScript, but a new <code>Temporal</code> option is at <a href=\"https://tc39.es/proposal-temporal/docs/\">stage 2 in the TC39 standards approval process</a>. The properties and methods discussed here are subject to change, but the API should arrive in browsers and runtimes some time in 2021.</p>\n<h2 id=\"temporaltime\">Temporal Time</h2>\n<p><code>Temporal</code> is a top-level static global object (like <a href=\"https://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a>). </p>\n<p>Its main objectives are:</p>\n<ul>\n<li>a predictable cross-browser/runtime behavior</li>\n<li>easier APIs for date and time computations</li>\n<li>support for non-Gregorian calendars</li>\n<li>support for all time zones, including daylight-saving arithmetic</li>\n<li>parsing of strictly specified ISO-8601 strings</li>\n<li>making all objects immutable</li>\n</ul>\n<p>The API is comprehensive and may change, but you can look forward to the following key features at some point in the near future.</p>\n<h2 id=\"currentdateandtime\">Current Date and Time</h2>\n<p><a href=\"https://tc39.es/proposal-temporal/docs/now.html\"><code>Temporal.now</code></a> returns the current date/time, which can be passed to further methods to provide additional information. For example:</p>\n<pre><code class=\"javascript language-javascript\">// exact time since the Unix epoch on 1 Janary, 1970 UTC\r\nTemporal.now.instant();\r\nTemporal.now.instant().epochSeconds;\r\nTemporal.now.instant().epochMilliseconds;\r\n\r\n// current time zone\r\nTemporal.now.timeZone();\r\n\r\n// time in current location, e.g.\r\n// 2021-09-18T04:17:48.435068431-04:00[America/New_York]\r\nTemporal.now.zonedDateTimeISO();\r\n\r\n// time in another time zone, e.g.\r\n// 2021-09-18T09:17:48.438068435+01:00[Europe/London]\r\nTemporal.now.zonedDateTimeISO('Europe/London');\r\n</code></pre>\n<h2 id=\"creatinginstantdatetimes\">Creating Instant Date/Times</h2>\n<p>The <a href=\"https://tc39.es/proposal-temporal/docs/instant.html\"><code>Temporal.Instant</code></a> object represents a single point in time to the nearest nanosecond. It can be created from ISO 8601 formatted strings, or a number of seconds, milliseconds, or microseconds:</p>\n<pre><code class=\"javascript language-javascript\">const\r\n  t1 = Temporal.Instant.from('2021-03-30T01:45:00+01:00[Europe/Berlin]'),\r\n  t2 = Temporal.Instant.from('2021-04-01T02:00+01:00'),\r\n  t3 = Temporal.Instant.fromEpochSeconds(1.0e8),\r\n  t4 = Temporal.Instant.fromEpochMilliseconds(1.0e10),\r\n  t5 = Temporal.Instant.epochNanoseconds(1.0e12);\r\n</code></pre>\n<h2 id=\"creatingzoneawaredatetimes\">Creating Zone-aware Date/Times</h2>\n<p>The <a href=\"https://tc39.es/proposal-temporal/docs/zoneddatetime.html\"><code>Temporal.ZonedDateTime</code></a> object represents a timezone and calendar-aware date/time at the instant it occurred (or will occur) in a  particular region. A variety of different constructors can be used:</p>\n<pre><code class=\"javascript language-javascript\">new Temporal.ZonedDateTime(\r\n  1234567890000, // epoch nanoseconds\r\n  Temporal.TimeZone.from('America/Los_Angeles'), // timezone\r\n  Temporal.Calendar.from('iso8601') // default calendar\r\n);\r\n\r\nTemporal.ZonedDateTime.from('2025-12-07T03:24:30+02:00[Africa/Cairo]');\r\n\r\nTemporal.Instant('2022-08-05T20:06:13+05:45').toZonedDateTime('+05:45');\r\n\r\nTemporal.ZonedDateTime.from({\r\n  timeZone: 'America/New_York'\r\n  year: 2025,\r\n  month: 1,\r\n  day: 7,\r\n  hour: 9,\r\n  minute: 30,\r\n  second: 1,\r\n  millisecond: 2,\r\n  microsecond: 3,\r\n  nanosecond: 4\r\n});\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/javascript-temporal-api-introduction/?utm_source=rss\">An Introduction to the JavaScript Temporal API</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/javascript-temporal-api-introduction/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180694",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Sun, 17 Jan 2021 14:00:07 GMT"
        ],
        "metaDesc": [
            "Date handling in JavaScript? Ugh. It's a mess. But there's hope! Find out what the new JavaScript Temporal API will bring to a browser near you in 2021."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "High-output Project Management in Notion"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/high-output-project-management-in-notion/?utm_source=rss\"\n              title=\"High-output Project Management in Notion\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612403383notion-800.jpg\"\n        alt=\"Total WP Theme\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612403383notion-800-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612403383notion-800-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612403383notion-800.jpg 800w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>When it comes to <a style=\"font-weight:bold\" href=\"http://RadReads.co/notion\">Notion</a>, less can truly be more. With just three tables, you can create a unified and customized system that tracks and organizes all the information your team needs to succeed. Gone are the days of pulling out tasks from Asana and then searching for a corresponding standard operating procedure (SOP). Imagine never having to copy-paste awkwardly long shared Google links, instead knowing that they’ll always dynamically update themselves across your team&#8217;s internal Wikis.</strong></p>\n<p>In this article, you&#8217;ll learn how to architect, implement and maintain this minimalist setup for team-based Notion setups. (<a href=\"https://radreads.co/notion-tutorial/\">Start here</a> if you need a quick 101 on the basics.) I&#8217;m going to walk you through setting up primary tables and show you how to best leverage them using Notion&#8217;s unique superpowers.</p>\n<h2 id=\"thebeginnersnotiontrap\">The Beginner&#8217;s Notion Trap</h2>\n<p>This minimalist setup begins with the end in mind: <strong>Projects</strong>. First, you&#8217;ll organize your entire team’s projects in one table for transparency and continuity. From there, you&#8217;ll organize your two &#8220;building blocks&#8221; of work (<strong>Tasks</strong> and <strong>Notes</strong>), both also as tables. Both of these &#8220;building blocks&#8221; ultimately roll up into the <strong>Projects</strong> table.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2020/12/1608524353pyramid.png\" alt=\"Pyramid of setup\" width=\"1000\" height=\"1000\" class=\"aligncenter size-full wp-image-180425\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2020/12/1608524353pyramid.png 1000w, https://uploads.sitepoint.com/wp-content/uploads/2020/12/1608524353pyramid-150x150.png 150w, https://uploads.sitepoint.com/wp-content/uploads/2020/12/1608524353pyramid-300x300.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2020/12/1608524353pyramid-768x768.png 768w\" sizes=\"(max-width: 1000px) 100vw, 1000px\" /></p>\n<p>Seems pretty simple, right? Yet, in my experience most Notion setups overlook this primary table approach — instead creating a bunch of new pages and loosely stringing them together using hyperlinks (similar to your <em>standard fare</em> corporate intranet). This approach makes sense. It&#8217;s fast and can get you off the ground and running, but in that case you might as well just stick with Google Docs and a traditional file hierarchy.</p>\n<p>The moment you put your Notes and Tasks into individual tables, you unlock an entirely new set of possibilities and permutations thanks to Notion&#8217;s rich set of metadata. That document you created can now be assigned to a team member, tagged across multiple business units, sorted by priority and much more.</p>\n<p>But first, let&#8217;s zoom out to the overarching table that ties everything together: Projects.</p>\n<h2 id=\"itallbeginswithprojects\">It all begins with Projects</h2>\n<p>Let&#8217;s set up your first primary table, which is a snapshot of all of your team&#8217;s projects. Once they&#8217;re in a table, you can add the relevant metadata (such as <em>due dates, project status, and KPIs</em>) keeping everyone dialed in to every vital piece of information.</p>\n<p>Let&#8217;s say your team&#8217;s working on a big sales pitch to be delivered at the end of the quarter. This is a tightly scoped project with a clear timeline, outcome and series of actions. What do you need in order to deliver?</p>\n<h3 id=\"buildingblock1tasks\">Building Block 1: Tasks</h3>\n<p>First, you&#8217;ll have tasks: drafting, copy-editing, creating design assets and ultimately sending the presentation to the client. Next, you&#8217;ll have notes: sales copy, media assets, color schemes, and discarded revisions of old drafts. In this minimal setup, each Project dynamically brings together all of this information. Let&#8217;s walk through the other parts of the system to see how we get there.</p>\n<p>Now that you know where your team&#8217;s going, the next step is to organize how to get there. How do you ensure that everyone stays updated and on the same page, <em>without anything falling through the cracks</em>? With your team&#8217;s <a href=\"https://www.youtube.com/watch?v=ZlmGbujysS0&#038;t=9s\">Primary Task Table</a>. Your entire team&#8217;s tasks — all in one table. You read that right. A simple source of truth, scalable across your organization, reduces cognitive load while keeping everyone on the same page.</p>\n<p>At its core, the Primary Task Table is a simple To-Do list with three columns: the task name, due date and a checkbox (denoting its completion). But next, we&#8217;ll add metadata to really level up your tasks so that your team can identify the <em>most important information</em> to keep your projects (and ultimately your business) moving forward. If you&#8217;re a podcast production company agency, it might be a single select field indicating if you&#8217;re in preproduction, editing, or distribution. You might also want to add the estimated duration of each task, to allocate resources accordingly.</p>\n<p>For teams, two powerful fields are &#8220;Assigned To&#8221; and &#8220;Assigned By&#8221;. For time-bound tasks, you&#8217;ll want to add a due date — but be cautious of using arbitrary due dates. Our sales pitch presentation truly <em>must</em> be finished before your next meeting with the client, but assigning a date to a more flexible task is an ineffective strategy. Another option for those flexible tasks is to use a &#8220;Do&#8221; Date instead, so folks can identify which day they will actually do the work — and mapping it to the project&#8217;s timeline.</p>\n<p>Adding a field for prioritization might be helpful, but instead we recommend the <a href=\"http://radreads.co/10k\">$10K Work framework</a> for identifying your highest-value tasks. You could also borrow from David Allen&#8217;s <em><a href=\"https://youtu.be/4YspgkLRsrs\">Getting Things Done</a></em> approach and use Contexts. These are the &#8220;people, places or things&#8221; that you need in order to complete a given task. Other useful contexts can be things like energy levels, tools needed (such as computer or phone) or people who need to be involved.</p>\n<h3 id=\"buildingblock2notes\">Building Block 2: Notes</h3>\n<p>Next, you&#8217;ll need a place to keep everything you and your team create: your shared digital notebooks. Notion really shines here, providing an elegant solution that’s way more powerful than Google Docs. But once again, a mindset shift is required. Instead of creating a collection of loose notes in a hierarchical folder structure, Notion&#8217;s advantage is to create a <strong>Primary Notes Table</strong> — one rich with metadata that makes it easy to surface your most recent work, documents that need revising, or procedures related to a given project.</p>\n<p>Here, I encourage you to think of the types of documents you create and reference on a regular basis. Do you have regular meetings with pre-set agendas? Libraries of SOPs? Candidate evaluation forms for interviews? Requests for proposals? Not only can you quickly organize them in Notion (without using folders), but you can create templates that streamline your workflow. (More on that later!)</p>\n<p>In addition to the document type, once again, you&#8217;ll pick additional metadata such as <em>Date Created</em>, <em>Last Modified</em> and <em>Created By</em>. If you’re working with a team, you may also want a column with either the author or the person responsible for that particular note. Tags can also be useful if you have a predefined list, but can also become unwieldy if misused — so proceed with caution.</p>\n<p>For your Note Type, I recommend starting with these four to keep things simple and streamlined:</p>\n<ul>\n<li><strong>Active</strong>: something you’re actively working on and is reasonably developed. Think a draft of a blog post or sales copy.</li>\n<li><strong>Brainstorm</strong>: new ideas that are still taking shape.</li>\n<li><strong>Reference</strong>: a document that you’ll refer back to with some regularity or for a specific purpose.</li>\n<li><strong>Archive</strong>: items that have served their purpose and you no longer need, but would like to be able to surface just in case (as opposed to flat out deleting them).</li>\n</ul>\n<p>Feel free to customize these Note types based on your team&#8217;s needs. Do you have a lot of <a href=\"https://mariepoulin.com/blog/notion-office-hours-scaling-your-business-%f0%9f%93%88/\">SOPs</a> in your company or department? Make that a Note Type so you can find them all in one place.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/high-output-project-management-in-notion/?utm_source=rss\">High-output Project Management in Notion</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/high-output-project-management-in-notion/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180423",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Computing",
            "Database",
            "Productivity Tools",
            "Web"
        ],
        "dc:creator": [
            "Khe Hy, Kate Andlund"
        ],
        "pubDate": [
            "Tue, 02 Feb 2021 22:15:12 GMT"
        ],
        "metaDesc": [
            "Learn how to architect, implement and maintain a minimalist setup for team-based Notion setups. We walk you through setting up primary tables and show you how to best leverage them using Notion's unique superpowers."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Introduction to Data Types: Static, Dynamic, Strong & Weak"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/typing-versus-dynamic-typing/?utm_source=rss\"\n              title=\"Introduction to Data Types: Static, Dynamic, Strong & Weak\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2004/06/1622699116data-types.png\"\n        alt=\"Introduction to Static, Dynamic, Strong and Weak Data Types\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2004/06/1622699116data-types-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2004/06/1622699116data-types.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This article will explain what data types are, what is meant by the terms &#8220;static&#8221;, &#8220;dynamic&#8221;, &#8220;strong&#8221; or &#8220;weak&#8221; when we talk about data types, and why should we even care.</strong></p>\n<h2 id=\"whataredatatypesanyway\">What Are Data Types Anyway?</h2>\n<p>If you&#8217;ve done any programming, you surely have seen variables, parameters or values returned from functions. They&#8217;re everywhere in the programming world. Many programmers begin using them without really knowing what they&#8217;re specifying to the computer under the hood. When defining these values, a programmer is specifying to the computer what a variable will be named but also telling the computer what type of data it is. Is it an integer? Is it a string of characters? Is it a single character or a complex type like a <code>Point</code>? To understand data types, we may find it easier to flip around the term and think of it as &#8220;the type of data&#8221; we&#8217;re dealing with.</p>\n<p>If you&#8217;ve sifted through information on the Web, you might have read conflicting information about &#8220;static&#8221; vs &#8220;dynamic&#8221; data types, as well as &#8220;strong&#8221; vs &#8220;weak&#8221; data types. They&#8217;re not the same thing. As we go through the different terms below, please keep in mind that a language can include a combination of static/dynamic and strong/weak data types. They&#8217;re not exclusive. For instance, a language can be static and strong or static and weak. But before we go too far into defining these terms, why should we even care?</p>\n<h2 id=\"whyshouldwecareaboutdatatypes\">Why Should We Care About Data Types?</h2>\n<p>Every programming language has a data type system. Without a type system, computers wouldn&#8217;t know how to represent the data in our programs. They wouldn&#8217;t know how to take this type of data and add it to this other type of data or even how to store the data. By specifying a variable as an integer, the computer knows how many bytes it needs to represent the value and, more importantly, how it can perform operations with it. Adding two integers together is a different operation from adding together two strings. The only way the computer knows how to handle the data is by knowing the types of data it&#8217;s dealing with.</p>\n<p>You can begin programming without knowing much about the underlying type systems at play. That&#8217;s part of the beauty of these higher-level languages. But understanding the types of data you&#8217;re dealing with, and how best to represent the data you&#8217;re working with, brings huge advantages, such as those listed below. </p>\n<ul>\n<li>\n<p>You&#8217;ll have more efficient programs that make better use of memory and storage. By knowing that an array of integers occupies less space than an array of doubles can lead to kilobytes or even megabytes of savings when dealing with very large arrays in memory or on the hard disk.</p>\n</li>\n<li>\n<p>It will help you decipher debugging messages and gain a better understanding of problems related to data types. When the program complains it can&#8217;t add two numbers because one of the numbers is a string, you understand why. Learning this fact will help you avoid making the mistake of trying to add a number to a string to begin with.</p>\n</li>\n<li>\n<p>Once you know how types work, you can be like Neo from the movie <em>The Matrix</em> and know how to bend the rules. You&#8217;ll know when adding an integer to a character how you can get another character and why that works.</p>\n</li>\n</ul>\n<h2 id=\"staticvsdynamicdatatypingsystems\">Static vs Dynamic Data Typing Systems</h2>\n<p>So, data types are how we tell the computer the type of data we&#8217;re dealing with. However, when a programmer says a language&#8217;s type system is static or dynamic, what are they referring to?</p>\n<p>Static data typed languages are those languages that require the programmer to explicitly define a data type when they create a piece of data (be it a variable, parameter, return value, and so on). Typically, these types are also fixed as being that type for the lifetime of the program, and they don&#8217;t change their type. Let&#8217;s take a look at an example:</p>\n<pre><code class=\"java language-java\">int myNumber = 42;              // integer data type\r\nstring name = \"Rocky Balboa\";   // string data type\r\nfinal double PI = 3.141592;     // double data type\r\n\r\n// Function takes two integer data types, returns an integer data type\r\npublic int add(int a, int b) {\r\n    return a + b;\r\n}\r\n</code></pre>\n<p>This example above shows a few variables being defined, and an example of a function that adds two numbers together. As you can see, we are explicitly telling the language (in this case, Java) that we&#8217;re dealing with integers, strings and doubles. Without these hints to the compiler, the compiler would not know how to treat <code>myNumber</code>. This is just a name that makes sense to us, not the computer.</p>\n<p>Some languages that are statically typed include Java, C#, C++ and Go. But these are just a few of many.</p>\n<p>Let&#8217;s contrast this with a dynamic data typed language. Below is an example:</p>\n<pre><code class=\"php language-php\">$myNumber = 42;           // integer data type\r\n$name = \"Rocky Balboa\";   // string data type\r\n$PI = 3.141592;           // float data type\r\n\r\n// Function takes two integer data types, returns an integer data type\r\nfunction add($a, $b) {\r\n    return $a + $b;\r\n}\r\n</code></pre>\n<p>So, where did all the types go? In this example above, we see that our variables in PHP, a dynamically typed language, don&#8217;t explicitly say what types of data they are. If we&#8217;re not telling PHP the data types, how does it know? Well, it guesses based on the value being assigned to it. It can correctly guess that <code>$myNumber</code> is an integer because the value 42 is an integer.</p>\n<p>What about the function? It too makes a guess based on the values passed to it. This means that <code>add()</code> could take two integers and return an integer, or it also could take two floats and return a float. The types are inferred and can even change during runtime. We could later, in the same program, say that <code>$myNumber</code> is equal to <code>Tom</code> and it will let us switch the variable to a string.</p>\n<p>A few of the many languages that are dynamic include JavaScript, PHP, Python and Ruby.</p>\n<h2 id=\"whywouldyoupreferstaticoverdynamicorviceversa\">Why Would You Prefer Static Over Dynamic or Vice Versa?</h2>\n<p>In the case of static data typed languages, by explicitly telling the compiler up front the types of data you&#8217;re dealing with, it can catch common mistakes and errors in code long before deployment. If you define one value to be an integer and another to be string, the compiler can catch an addition error during compile time and won&#8217;t let you finish building the program. This is good in that the earlier you catch an error, the stronger your code will be, and the less it will cost you and your clients to fix it. It&#8217;s much easier to fix things early than later after deployment.</p>\n<p>So static is the way to go right? Well, the tradeoff is that you have to explicitly define everything before you use it. You have to type more code, you have to know the type of data you&#8217;re dealing with beforehand (not always something you know) and you have to know what&#8217;s going to happen in your operations. You have to know that <code>1 / 3</code> is going to give you <code>0</code> and not <code>.33333</code> and things like that.</p>\n<p>Dynamic languages give you added flexibility in this area. They&#8217;re often described by programmers as being “more expressive”. In PHP, for instance, you&#8217;ll get <code>.3333...</code> as you might expect. However, the problem is that if the interpreter makes a wrong guess in the data types, you have to know about it. Otherwise it can sneak by. Since we can&#8217;t catch everything, code in dynamic languages tends to be a bit more error prone and brittle. Data types in these dynamic languages are typically determined at runtime. This makes it hard to catch many errors until they reach a production environment. It may work fine on your local development machine, but the production runtime environment could be slightly different, yielding some different guesswork by the interpreter. </p>\n<p>JavaScript is one language that is considered dynamic. With the introduction of <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, a superset of JavaScript, programmers introduced the idea of explicitly declaring data types for variables in order to make the language more static. As JavaScript&#8217;s popularity has grown — even beyond the browser with tools like <a href=\"https://nodejs.org/\">Node.js</a> — programmers wanted to add the benefits of static data typing to take out some of the wrong guesswork JavaScript does when dealing with data types. JavaScript is <a href=\"https://www.destroyallsoftware.com/talks/wat\">notorious for some of its bad guesswork</a> when dealing with data and its types. This is an example of making JavaScript, a dynamic language, into something more like a statically typed language to catch errors early and lead to healthier code. This is all the more important given that JavaScript is making its way into server-side applications with the help of Node.js.</p>\n<p>In short, static data types give you a strict environment and typically yield stronger code. Dynamic languages give you flexibility and the ability to write code faster, but can lead to more error prone code if you&#8217;re not careful in checking your types.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/typing-versus-dynamic-typing/?utm_source=rss\">Introduction to Data Types: Static, Dynamic, Strong & Weak</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/typing-versus-dynamic-typing/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=34486",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Programming"
        ],
        "dc:creator": [
            "Tim Hurd"
        ],
        "pubDate": [
            "Wed, 02 Jun 2021 15:00:00 GMT"
        ],
        "metaDesc": [
            "Static, dynamic, strong, weak data types? Are you confused? Learn what these terms really mean, and which is best for you."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Improve User Experience with Accurate User Feedback"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/how-to-improve-user-experience-with-accurate-user-feedback/?utm_source=rss\"\n              title=\"How to Improve User Experience with Accurate User Feedback\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609807896better-ui-feedback.png\"\n        alt=\"How to Improve User Experience with Accurate User Feedback\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609807896better-ui-feedback-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609807896better-ui-feedback.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>For every action on the Web, there should be a reaction. Feedback might tell a user if the action was successful or not, but ideally it will tell them more, such as what to do next or why an action is taking so long.</strong></p>\n<p>You’ve probably experienced a situation where you’ve submitted a form. After clicking the submit button, nothing appears to happen. Was the form submitted? Perhaps the form submission failed. </p>\n<p>It’s an excellent example of where feedback can remove any doubts or fear the user might experience. A simple progress indicator would resolve this issue. It would visually tell the user that the server has received the form and is actively processing it. </p>\n<p>Not providing feedback can cause a lot of trouble. For instance, we submitted the form but didn&#8217;t get any feedback. The following scenarios are possible:</p>\n<ul>\n<li>Users refresh the page as they think the form submission failed. This scenario can lead to double data submissions, which impacts your data quality.</li>\n<li>Users seek alternative ways to contact you, such as Twitter, LinkedIn, or Facebook.</li>\n<li>Users submit data via other communication means, such as an email address they find on the website. Therefore, you have to manually process this data and follow up with the user via email.</li>\n<li>Users leave the website without completing the form submission. </li>\n</ul>\n<p>As you can see, something as simple as displaying a progress indicator can save a lot of overhead for an organization. In the worst-case scenario of this example, you lose a potential client as they don’t wait for the form submission to complete.</p>\n<p>This article explores the importance of feedback, common UI elements to provide feedback, and good and bad examples of feedback.</p>\n<h2 id=\"whatisfeedbackinuxdesign\">What is Feedback in UX Design?</h2>\n<p>A user interface responds to actions. This is what we define as feedback. Feedback is used to engage, explain, and remove fear or confusion, all of which improve user satisfaction.</p>\n<p>Most feedback you encounter is visual for user interfaces. For games or other types of content, user feedback can take the form of auditory feedback. Let’s focus on visual feedback. </p>\n<p>Visual feedback has three main goals, detailed below.</p>\n<h3 id=\"1signalresponsiveness\">1. Signal responsiveness</h3>\n<p>It’s often not clear if an element is clickable. Buttons, therefore, <a href=\"https://www.invisionapp.com/inside-design/comprehensive-guide-designing-ux-buttons/\">implement visual feedback</a> when you hover over them. Web designers use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:hover\">CSS :hover selector</a> to apply different styling when a user hovers a web element. We all know the example where the button color changes when you hover over it. </p>\n<p>This form of feedback is essential to tell the user they can interact with the element. Without it, the user has to guess which elements allow engagement. But remember that users of touch devices my not be able to take advantage of hover effects.</p>\n[video mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609715094hover.mp4\"][/video]\n<p><small><a href=\"https://dribbble.com/shots/14639664--Hover-w-animated-letters\">Video source</a></small></p>\n<h3 id=\"2boostengagement\">2. Boost engagement</h3>\n<p>Feedback doesn&#8217;t just signal the outcome of an action. It can also guide a user. A visual effect draws the user’s attention to a particular UI element and encourages the user to click it. Therefore, you can use visual feedback to tell the user what to do next.</p>\n<p>Let’s say you want to boost the number of users signing up for your newsletter. What about adding a small visual clue to the sign-up form? For instance, make the “Sign Up” button shake briefly to draw the user’s attention when the newsletter form is visual. It’s a simple yet effective technique to increase engagement.</p>\n[video mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609715286buttons.mp4\"][/video]\n<p><small><a href=\"https://dribbble.com/shots/7441241-Button-Hover-Effects\">Video source</a></small></p>\n<h3 id=\"3signalactivity\">3. Signal activity</h3>\n<p>Lastly, feedback is most helpful to tell the user something is happening. As mentioned in the web form example, a progress indicator tells the user the form submission has been received and is being processed by the server.</p>\n<p>It’s the most crucial form of feedback! An action always requires reaction. A lack of feedback is the main source of confusion or fear for users interacting with applications. On top of that, feedback improves user experience by removing confusion. </p>\n[video mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609801315feedback.mp4\"][/video]\n<p><small><a href=\"https://dribbble.com/shots/12567603-Upvote\">Video source</a></small></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/how-to-improve-user-experience-with-accurate-user-feedback/?utm_source=rss\">How to Improve User Experience with Accurate User Feedback</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/how-to-improve-user-experience-with-accurate-user-feedback/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180497",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Accessibility",
            "Design",
            "Design & UX",
            "UI Design",
            "Usability",
            "UX",
            "Web Design"
        ],
        "dc:creator": [
            "Michiel Mulders"
        ],
        "pubDate": [
            "Wed, 13 Jan 2021 21:00:54 GMT"
        ],
        "metaDesc": [
            "You submit a form—but get no feedback. Wha? Did it submit? Learn how to make sure your UI elements provide feedback to users—so that you don't lose them!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Migrate Your App from Express to Fastify"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/express-to-fastify-migrate/?utm_source=rss\"\n              title=\"How to Migrate Your App from Express to Fastify\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138720migrate_result.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138720migrate_result-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138720migrate_result-768x403.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138720migrate_result-1024x538.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138720migrate_result.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a style=\"font-weight:bold\" href=\"https://expressjs.com/\">Express</a> has long been the most popular framework for developing web applications with Node.js. Unfortunately, this framework hasn&#8217;t seen much active development in recent years. This means that it doesn&#8217;t have support for modern JavaScript features. In the meantime, a number of new frameworks have emerged which take a different approach to Node.js application development. One of these frameworks is <a style=\"font-weight:bold\" href=\"https://www.fastify.io/\">Fastify</a>.</strong></p>\n<p>In this article, we&#8217;ll look at what makes Fastify an appealing alternative for developing web applications with Node.js. We&#8217;ll learn how we can avoid the need to rewrite our existing Express applications from scratch, and instead migrate them to using Fastify in phases. By the time we&#8217;re done, you&#8217;ll be able to confidently migrate your existing Express applications and start leveraging the benefits of the Fastify framework.</p>\n<p>There are a few requirements for following along with this article:</p>\n<ul>\n<li>You&#8217;ll need to be comfortable with creating a basic Express application, defining routes and configuring middleware.</li>\n<li>You&#8217;ll need to be comfortable running commands in a terminal.</li>\n<li>You&#8217;ll need to have <a href=\"https://nodejs.org/en/download/\">Node.js</a> &gt;= v14.13.0 installed. This provides us with good support for <a href=\"https://nodejs.org/docs/latest-v14.x/api/esm.html\">ECMAScript (ES) modules</a> and allows us to use <a href=\"https://nodejs.org/docs/latest-v14.x/api/esm.html#esm_top_level_await\">top-level await</a>. The code examples in this article use ES module syntax (<code>import</code> / <code>export</code>).</li>\n</ul>\n<p>All of the example code in this article is <a href=\"https://github.com/simonplend/express-to-fastify-migration\">available on GitHub</a> for you to browse, download and experiment with. <!-- https://github.com/sitepoint-editors/express-to-fastify-migration --></p>\n<p>There is also a <a href=\"https://simonplend.com/learning-fastify-how-to-migrate-your-app-from-express-to-fastify/\">video version of this post available on my site</a>.</p>\n<h2 id=\"whatarethebenefitsofmigratingtofastify\">What are the benefits of migrating from Express to Fastify?</h2>\n<p>If you&#8217;re comfortable building Node.js applications with Express, you might be wondering what the benefits are of migrating existing Express applications to Fastify. Here are some great reasons to consider making the move:</p>\n<ul>\n<li>\n<p><strong>Validation and logging out of the box</strong>. These features are commonly required when building web applications. When using Fastify, there&#8217;s no need to choose and integrate libraries for these tasks, as it provides them for us. We&#8217;ll learn more about these features later in this article.</p>\n</li>\n<li>\n<p><strong>Native support for async code</strong>. Fastify natively handles promises and supports <code>async</code> / <code>await</code>. This means that routes will catch uncaught rejected promises for us. This allows us to write asynchronous code safely. It also lets us do neat things, like automatically send the return value from a route handler function as the response body:</p>\n<pre><code class=\"javascript language-javascript\">app.get(\"/user/:id\", async (request) =&gt; await getUser(request.params.id));\r\n</code></pre>\n</li>\n<li>\n<p><strong>Automatic parsing and serialization of JSON</strong>. We don&#8217;t need to configure Fastify to parse JSON request bodies, or to serialize objects as JSON for responses. It handles all of this automatically for us:</p>\n<pre><code class=\"javascript language-javascript\">app.get(\"/user/:id\", async (request, reply) =&gt; {\r\n  const name = request.body.name;\r\n\r\n  reply.send({ user: { name } });\r\n});\r\n</code></pre>\n</li>\n<li>\n<p><strong>Developer friendly</strong>. With explicit and expressive APIs, as well as excellent <a href=\"https://www.fastify.io/docs/latest/TypeScript/\">support for TypeScript</a>, Fastify has been designed with developer experience in mind.</p>\n</li>\n<li>\n<p><strong>It&#8217;s fast</strong>. We never want a framework to become the source of performance bottlenecks in our applications. The good news is that Fastify has been built to be highly performant. The Fastify <a href=\"https://www.fastify.io/benchmarks/\">benchmarks</a> show how it compares against other Node.js web frameworks.</p>\n</li>\n<li>\n<p><strong>In active development</strong>. The Fastify framework is being <a href=\"https://github.com/fastify/fastify/graphs/code-frequency\">actively developed</a>. There are <a href=\"https://www.npmjs.com/package/fastify?activeTab=versions\">regular releases</a> with improvements and bug/security fixes.</p>\n</li>\n</ul>\n<h2 id=\"howtomigrateanapiwithconfidence\">How to Migrate an API with Confidence</h2>\n<p>We want to be confident that our application is still working as expected after it has been migrated to Fastify. One of the things which can help us catch bugs or identify unintended changes is API integration tests.</p>\n<p>Integration tests exercise the components of an application in a different way to unit tests. Unit tests exercise the functions of individual components on their own. Integration tests allow us to verify the behavior of multiple components working together.</p>\n<p>If we write API integration tests for an Express application, we want to be able to run those same tests once we&#8217;ve migrated the application to Fastify. When writing integration tests for an API, there are a few key things to consider:</p>\n<ul>\n<li>\n<p><strong>They shouldn&#8217;t be tied to a specific framework</strong>. We want to be able to run the same tests before and after migration, without the need to change the tests or any of the libraries that we&#8217;re using for them.</p>\n</li>\n<li>\n<p><strong>Keep them simple</strong>. At a minimum, the integration tests should make requests to the endpoints which an API exposes and verify that a response is returned, but generally not much more. We might want to check for specific HTTP status codes or response headers, but we should try to keep the tests as simple as possible.</p>\n</li>\n<li>\n<p><strong>Pick tools you&#8217;re comfortable with</strong>. There are lots of different tools which can help us with creating and running API tests, but it&#8217;s important to use tools which we&#8217;re comfortable with. To write effective integration tests, we need to be able to make HTTP requests and make assertions against the responses from our API. In general, we don&#8217;t need a lot of libraries or tools to make this work.</p>\n</li>\n</ul>\n<p>We won&#8217;t be digging into the details of how to implement API integration tests in this article, but they&#8217;re something you should consider writing before undertaking a framework migration.</p>\n<h2 id=\"transitioningtofastifywithfastifyexpress\">Transitioning from Express to Fastify with fastify-express</h2>\n<p>The idea of migrating an existing Express application to a completely different framework can seem quite daunting. Fortunately, the Fastify team have created a plugin — <a href=\"https://github.com/fastify/fastify-express\">fastify-express</a> — which can help ease the migration path.</p>\n<p>The <code>fastify-express</code> plugin adds full Express compatibility to Fastify. It provides a <code>use()</code> method which we can use to add Express middleware and routes to our Fastify server. This gives us the option of gradually migrating parts of an existing Express application over to Fastify.</p>\n<p>Here&#8217;s an example of <a href=\"https://expressjs.com/en/api.html#router\">Express router</a>:</p>\n<pre><code class=\"javascript language-javascript\">// src/routes.js\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/:user_id\", function getUser(request, response, next) {\r\n  response.json({});\r\n});\r\n\r\nexport default router;\r\n</code></pre>\n<p>We can then use <code>fastify-express</code> to add our existing Express router to a Fastify server instance:</p>\n<pre><code class=\"javascript language-javascript\">// src/server.js\r\n\r\nimport Fastify from \"fastify\";\r\nimport ExpressPlugin from \"fastify-express\";\r\n\r\nimport routes from \"./routes.js\";\r\n\r\nconst fastify = Fastify();\r\n\r\nawait fastify.register(ExpressPlugin);\r\n\r\nfastify.use(\"/user\", routes);\r\n\r\nawait fastify.listen(3000);\r\n</code></pre>\n<p>We&#8217;ll explore the details of how this all works when we start migrating our application to Fastify a little later.</p>\n<p>It&#8217;s important to be aware that using the <code>fastify-express</code> plugin is not a long-term solution. If we want to get the full benefits of Fastify, we&#8217;ll need to migrate our Express-specific application code at some point. However, the <code>fastify-express</code> plugin provides us with the opportunity for a phased migration to Fastify.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/express-to-fastify-migrate/?utm_source=rss\">How to Migrate Your App from Express to Fastify</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/express-to-fastify-migrate/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181919",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Simon Plenderleith"
        ],
        "pubDate": [
            "Sun, 28 Mar 2021 15:00:19 GMT"
        ],
        "metaDesc": [
            "Express is getting old and out of date. Learn what makes Fastify a great alternative, and how to migrate an existing Node.js app from Express to Fastify."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Prince Chukwudire"
        ],
        "title": [
            "How To Build A Geocoding App In Vue.js Using Mapbox"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/building-geocoding-app-vue-mapbox/"
        ],
        "pubDate": [
            "Mon, 07 Jun 2021 11:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/building-geocoding-app-vue-mapbox/"
        ],
        "description": [
            "Pinpoint accuracy and modularity are among the perks that make geocodes the perfect means of finding a particular location.\nIn this guide, we’ll build a simple geocoding app from scratch, using Vue.js and Mapbox. We’ll cover the process from building the front-end scaffolding up to building a geocoder to handle forward geocoding and reverse geocoding. To get the most out of this guide, you’ll need a basic understanding of JavaScript and Vue."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/building-geocoding-app-vue-mapbox/\" />\n              <title>How To Build A Geocoding App In Vue.js Using Mapbox</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>How To Build A Geocoding App In Vue.js Using Mapbox</h1>\n                  \n                    \n                    <address>Prince Chukwudire</address>\n                  \n                  <time datetime=\"2021-06-07T11:00:00&#43;00:00\" class=\"op-published\">2021-06-07T11:00:00+00:00</time>\n                  <time datetime=\"2021-06-07T11:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>Pinpoint accuracy and modularity are among the perks that make geocodes the perfect means of finding a particular location.</p>\n\n<p>In this guide, we’ll build a <a href=\"https://github.com/smashingmagazine/Tutorials/tree/Geocoding-app-vue\">simple geocoding app</a> from scratch, using Vue.js and Mapbox. We’ll cover the process from building the front-end scaffolding up to building a geocoder to handle forward geocoding and reverse geocoding. To get the most out of this guide, you’ll need a basic understanding of JavaScript and Vue.js and how to make API calls.</p>\n\n<h3 id=\"what-is-geocoding\">What Is Geocoding?</h3>\n\n<p>Geocoding is the transformation of text-based locations to geographic coordinates (typically, longitude and latitude) that indicate a location in the world.</p>\n\n<p>Geocoding is of two types: <strong>forward and reverse</strong>. Forward geocoding converts location texts to geographic coordinates, whereas reverse geocoding converts coordinates to location texts.</p>\n\n<p>In other words, reverse geocoding turns 40.714224, -73.961452 into “277 Bedford Ave, Brooklyn”, and forward geocoding does the opposite, turning “277 Bedford Ave, Brooklyn” into 40.714224, -73.961452.</p>\n\n<p>To give more insight, we will build a mini web app that uses an interactive web map with custom markers to display location coordinates, which we will subsequently decode to location texts.</p>\n\n<p>Our app will have the following basic functions:</p>\n\n<ul>\n<li>give the user access to an interactive map display with a marker;</li>\n<li>allow the user to move the marker at will, while displaying coordinates;</li>\n<li>return a text-based location or location coordinates upon request by the user.</li>\n</ul>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\n\n\n<h3 id=\"set-up-project-using-vue-cli\">Set Up Project Using Vue CLI</h3>\n\n<p>We’ll make use of the <a href=\"https://github.com/smashingmagazine/Tutorials/tree/geocoder/boilerplate\">boilerplate found in this repository</a>. It contains a new project with the Vue CLI and <code>yarn</code> as a package manager. You’ll need to clone the repository. Ensure that you’re working from the <code>geocoder/boilerplate</code> branch.</p>\n\n<h3 id=\"set-up-file-structure-of-application\">Set Up File Structure of Application</h3>\n\n<p>Next, we will need to set up our project’s file structure. Rename the <code>Helloworld.vue</code> file in the component’s folder to <code>Index.vue</code>, and leave it blank for now. Go ahead and copy the following into the <code>App.vue</code> file:</p>\n\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;!--Navbar Here --&gt;\n    &lt;div&gt;\n      &lt;nav&gt;\n        &lt;div class=\"header\"&gt;\n          &lt;h3&gt;Geocoder&lt;/h3&gt;\n        &lt;/div&gt;\n      &lt;/nav&gt;\n    &lt;/div&gt;\n    &lt;!--Index Page Here --&gt;\n    &lt;index /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport index from \"./components/index.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    index,\n  },\n};\n&lt;/script&gt;</code></pre>\n\n<p>Here, we’ve imported and then registered the recently renamed component locally. We’ve also added a navigation bar to lift our app’s aesthetics.</p>\n\n<p>We need an <code>.env</code> file to load the environment variables. Go ahead and add one in the root of your project folder.</p>\n\n<h3 id=\"install-required-packages-and-libraries\">Install Required Packages and Libraries</h3>\n\n<p>To kickstart the development process, we will need to install the required libraries. Here’s a list of the ones we’ll be using for this project:</p>\n\n<ol>\n<li><strong>Mapbox GL JS</strong><br />\nThis JavaScript library uses WebGL to render interactive maps from <a href=\"https://docs.mapbox.com/help/glossary/vector-tiles/\">vector tiles</a> and <a href=\"https://docs.mapbox.com/mapbox-gl-js/style-spec/\">Mapbox</a>.</li>\n<li><strong>Mapbox-gl-geocoder</strong><br />\nThis geocoder control for Mapbox GL will help with our forward geocoding.</li>\n<li><strong>Dotenv</strong><br />\nWe won’t have to install this because it comes preinstalled with the Vue CLI. It helps us to load environment variables from an <code>.env</code> file into <a href=\"https://nodejs.org/docs/latest/api/process.html#process_process_env\"><code>process.env</code></a>. This way, we can keep our configurations separate from our code.</li>\n<li><strong>Axios</strong><br />\nThis library will help us make HTTP requests.</li>\n</ol>\n\n<p>Install the packages in your CLI according to your preferred package manager. If you’re using Yarn, run the command below:</p>\n\n<pre><code class=\"language-bash\">cd geocoder && yarn add mapbox-gl @mapbox/mapbox-gl-geocoder axios</code></pre>\n\n<p>If you’re using npm, run this:</p>\n\n<pre><code class=\"language-bash\">cd geocoder && npm i mapbox-gl @mapbox/mapbox-gl-geocoder axios --save</code></pre>\n\n<p>We first had to enter the <code>geocoder</code> folder before running the installation command.</p>\n\n<h3 id=\"scaffolding-the-front-end-with-vue-js\">Scaffolding the Front End With Vue.js</h3>\n\n<p>Let’s go ahead and create a layout for our app. We will need an element to house our map, a region to display the coordinates while listening to the marker’s movement on the map, and something to display the location when we call the reverse geocoding API. We can house all of this within a card component.</p>\n\n<p>Copy the following into your <code>Index.vue</code> file:</p>\n\n<pre><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div class=\"main\"&gt;\n    &lt;div class=\"flex\"&gt;\n      &lt;!-- Map Display here --&gt;\n      &lt;div class=\"map-holder\"&gt;\n        &lt;div id=\"map\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;!-- Coordinates Display here --&gt;\n      &lt;div class=\"dislpay-arena\"&gt;\n        &lt;div class=\"coordinates-header\"&gt;\n          &lt;h3&gt;Current Coordinates&lt;/h3&gt;\n          &lt;p&gt;Latitude:&lt;/p&gt;\n          &lt;p&gt;Longitude:&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"coordinates-header\"&gt;\n          &lt;h3&gt;Current Location&lt;/h3&gt;\n          &lt;div class=\"form-group\"&gt;\n            &lt;input\n              type=\"text\"\n              class=\"location-control\"\n              :value=\"location\"\n              readonly\n            /&gt;\n            &lt;button type=\"button\" class=\"copy-btn\"&gt;Copy&lt;/button&gt;\n          &lt;/div&gt;\n          &lt;button type=\"button\" class=\"location-btn\"&gt;Get Location&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre>\n\n<p>To see what we currently have, start your development server. For Yarn:</p>\n\n<pre><code class=\"language-bash\">yarn serve</code></pre>\n\n<p>Or for npm:</p>\n\n<pre><code class=\"language-bash\">npm run serve</code></pre>\n\n<p>Our app should look like this now:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"387\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Scaffold preview\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Geocoding app scaffold preview. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2db65f59-f1f9-4373-b2b1-8514d763b09d/1-building-geocoding-app-vue-mapbox.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The blank spot to the left looks off. It should house our map display. Let’s add that.</p>\n\n<h3 id=\"interactive-map-display-with-mapbox\">Interactive Map Display With Mapbox</h3>\n\n<p>The first thing we need to do is gain access to the Mapbox GL and Geocoder libraries. We’ll start by importing the Mapbox GL and Geocoder libraries in the <code>Index.vue</code> file.</p>\n\n<pre><code class=\"language-javascript\">import axios from \"axios\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";</code></pre>\n\n<p>Mapbox requires a unique <a href=\"https://docs.mapbox.com/help/glossary/access-token/\">access token</a> to compute map vector tiles. <a href=\"https://docs.mapbox.com/help/glossary/access-token/\">Get yours</a>, and add it as an environmental variable in your <code>.env</code> file.</p>\n\n<pre><code class=\"language-javascript\">.env</code></pre>\n\n<pre><code class=\"language-javascript\">VUE_APP_MAP_ACCESS_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code></pre>\n\n<p>We also need to define properties that will help with putting our map tiles together in our data instance. Add the following below the spot where we imported the libraries:</p>\n\n<pre><code class=\"language-javascript\">export default {\n  data() {\n    return {\n      loading: false,\n      location: \"\",\n      access_token: process.env.VUE_APP_MAP_ACCESS_TOKEN,\n      center: [0, 0],\n      map: {},\n    };\n  },\n}</code></pre>\n\n<ul>\n<li>The <code>location</code> property will be modeled to the input that we have in our scaffolding. We will use this to handle reverse geocoding (i.e. display a location from the coordinates).</li>\n<li>The <code>center</code> property houses our coordinates (longitude and latitude). This is critical to putting our map tiles together, as we will see shortly.</li>\n<li>The <code>access_token</code> property refers to our environmental variable, which we added earlier.</li>\n<li>The <code>map</code> property serves as a constructor for our map component.</li>\n</ul>\n\n<p>Let’s proceed to create a method that plots our interactive map with our forward geocoder embedded in it. This method is our base function, serving as an intermediary between our component and Mapbox GL; we will call this method <code>createMap</code>. Add this below the data object:</p>\n\n<pre><code class=\"language-javascript\">mounted() {\n  this.createMap()\n},\n\nmethods: {\n  async createMap() {\n    try {\n      mapboxgl.accessToken = this.access_token;\n      this.map = new mapboxgl.Map({\n        container: \"map\",\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: this.center,\n        zoom: 11,\n      });\n\n    } catch (err) {\n      console.log(\"map error\", err);\n    }\n  },\n},\n</code></pre>\n\n<p>To create our map, we’ve specified a <code>container</code> that houses the map, a <code>style</code> property for our map’s display format, and a <code>center</code> property to house our coordinates. The <code>center</code> property is an array type and holds the longitude and latitude.</p>\n\n<p>Mapbox GL JS initializes our map based on these parameters on the page and returns a <code>Map</code> object to us. The <code>Map</code> object refers to the map on our page, while exposing methods and properties that enable us to interact with the map. We’ve stored this returned object in our data instance, <code>this.map</code>.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"forward-geocoding-with-mapbox-geocoder\">Forward Geocoding With Mapbox Geocoder</h3>\n\n<p>Now, we will add the geocoder and custom marker. The geocoder handles forward geocoding by transforming text-based locations to coordinates. This will appear in the form of a search input box appended to our map.</p>\n\n<p>Add the following below the <code>this.map</code> initialization that we have above:</p>\n\n<pre><code class=\"language-javascript\">let geocoder =  new MapboxGeocoder({\n    accessToken: this.access_token,\n    mapboxgl: mapboxgl,\n    marker: false,\n  });\n\nthis.map.addControl(geocoder);\n\ngeocoder.on(\"result\", (e) => {\n  const marker = new mapboxgl.Marker({\n    draggable: true,\n    color: \"#D80739\",\n  })\n    .setLngLat(e.result.center)\n    .addTo(this.map);\n  this.center = e.result.center;\n  marker.on(\"dragend\", (e) => {\n    this.center = Object.values(e.target.getLngLat());\n  });\n});</code></pre>\n</div>\n\nHere, we’ve first created a new instance of a geocoder using the `MapboxGeocoder` constructor. This initializes a geocoder based on the parameters provided and returns an object, exposed to methods and events. The `accessToken` property refers to our Mapbox access token, and `mapboxgl` refers to the [map library](https://docs.mapbox.com/#maps) currently used.\n\nCore to our app is the custom marker; the geocoder comes with one by default. This, however, wouldn’t give us all of the customization we need; hence, we’ve disabled it.\n\nMoving along, we’ve passed our newly created geocoder as a parameter to the `addControl` method, exposed to us by our map object. `addControl` accepts a `control` as a parameter.\n\nTo create our custom marker, we’ve made use of an event exposed to us by our geocoder object. The `on` event listener enables us to subscribe to events that happen within the geocoder. It accepts various [events](https://github.com/mapbox/mapbox-gl-geocoder/blob/master/API.md#on) as parameters. We’re listening to the `result` event, which is fired when an input is set.\n\nIn a nutshell, on `result`, our marker constructor creates a marker, based on the parameters we have provided (a draggable attribute and color, in this case). It returns an object, with which we use the `setLngLat` method to get our coordinates. We append the custom marker to our existing map using the `addTo` method. Finally, we update the `center` property in our instance with the new coordinates.\n\nWe also have to track the movement of our custom marker. We’ve achieved this by using the `dragend` event listener, and we updated our `center` property with the current coordinates.\n\nLet’s update the template to display our interactive map and forward geocoder. Update the coordinates display section in our template with the following:\n\n<pre><code class=\"language-html\">&lt;div class=\"coordinates-header\"&gt;\n  &lt;h3&gt;Current Coordinates&lt;/h3&gt;\n  &lt;p&gt;Latitude: {{ center[0] }}&lt;/p&gt;\n  &lt;p&gt;Longitude: {{ center[1] }}&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Remember how we always updated our <code>center</code> property following an event? We are displaying the coordinates here based on the current value.</p>\n\n<p>To lift our app’s aesthetics, add the following CSS file in the <code>head</code> section of the <code>index.html</code> file. Put this file in the public folder.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-html\">&lt;link href=\"https://api.tiles.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css\" rel=\"stylesheet\" /&gt;</code></pre>\n</div>\n\n<p>Our app should look like this now:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"389\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Forward geocoding preview\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Forward geocoding preview. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/94ec158a-9a69-4349-8676-38307bfda229/2-building-geocoding-app-vue-mapbox.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"reverse-geocode-location-with-mapbox-api\">Reverse Geocode Location With Mapbox API</h3>\n\n<p>Now, we will handle reverse geocoding our coordinates to text-based locations. Let’s write a method that handles that and trigger it with the <code>Get Location</code> button in our template.</p>\n\n<p>Reverse geocoding in Mapbox is handled by the reverse geocoding API. This accepts <code>longitude</code>, <code>latitude</code>, and <code>access token</code> as request parameters. This call returns a response payload &mdash; typically, with various details. Our concern is the first object in the <code>features</code> array, where the reverse geocoded location is.</p>\n\n<p>We’ll need to create a function that sends the <code>longitude</code>, <code>latitude</code> and <code>access_token</code> of the location we want to get to the Mapbox API. We need to send them in order to get the details of that location.</p>\n\n<p>Finally, we need to update the <code>location</code> property in our instance with the value of the <code>place_name</code> key in the object.</p>\n\n<p>Below the <code>createMap()</code> function, let’s add a new function that handles what we want. This is how it should look:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">async getLocation() {\n  try {\n    this.loading = true;\n    const response = await axios.get(\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${this.center[0]},${this.center[1]}.json?access_token=${this.access_token}`\n    );\n    this.loading = false;\n    this.location = response.data.features[0].place_name;\n  } catch (err) {\n    this.loading = false;\n    console.log(err);\n  }\n},\n</code></pre>\n</div>\n\n<p>This function makes a <code>GET</code> request to the Mapbox API. The response contains <code>place_name</code> &mdash; the name of the selected location. We get this from the response and then set it as the value of <code>this.location</code>.</p>\n\n<p>With that done, we need to edit and set up the button that will call this function we have created. We’ll make use of a <code>click</code> event listener &mdash; which will call the <code>getLocation</code> method when a user clicks on it. Go ahead and edit the button component to this.</p>\n\n<pre><code class=\"language-javascript\">&lt;button\n  type=\"button\"\n  :disabled=\"loading\"\n  :class=\"{ disabled: loading }\"\n  class=\"location-btn\"\n  @click=\"getLocation\"\n&gt;\n  Get Location\n&lt;/button&gt;\n</code></pre>\n\n<p>As icing on the cake, let’s attach a function to copy the displayed location to the clipboard. Add this just below the <code>getLocation</code> function:</p>\n\n<pre><code class=\"language-javascript\">copyLocation() {\n  if (this.location) {\n    navigator.clipboard.writeText(this.location);\n    alert(\"Location Copied\")\n  }\n  return;\n},\n</code></pre>\n\n<p>Update the <code>Copy</code> button component to trigger this:</p>\n\n<pre><code class=\"language-html\">&lt;button type=\"button\" class=\"copy-btn\" @click=\"copyLocation\"&gt;</code></pre>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>In this guide, we’ve looked at geocoding using Mapbox. We built a geocoding app that transforms text-based locations to coordinates, displaying the location on an interactive map, and that converts coordinates to text-based locations, according to the user’s request. This guide is just the beginning. A lot more could be achieved with the geocoding APIs, such as changing the presentation of the map using the various <a href=\"https://docs.mapbox.com/api/maps/styles/\">map styles</a> provided by Mapbox.</p>\n\n<ul>\n<li><em>The source code is <a href=\"https://github.com/smashingmagazine/Tutorials/tree/Geocoding-app-vue\">available on GitHub</a>.</em></li>\n</ul>\n\n<h4 id=\"resources\">Resources</h4>\n\n<ul>\n<li>“<a href=\"https://docs.mapbox.com/api/search/geocoding/\">Geocoding</a>”, Mapbox documentation</li>\n<li>“<a href=\"https://docs.mapbox.com/api/maps/styles/\">Styles</a>”, Mapbox documentation</li>\n<li>“<a href=\"https://cli.vuejs.org/guide/mode-and-env.html#using-env-variables-in-client-side-code\">Using Env Variables in Client-Side Code</a>”, in “Modes and Environment Variables”, Vue CLI</li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(ks, vf, yk, il, al)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "author": [
            "Nwani Victory"
        ],
        "title": [
            "Getting Started With Webpack"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/getting-started-webpack/"
        ],
        "pubDate": [
            "Fri, 04 Jun 2021 10:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/getting-started-webpack/"
        ],
        "description": [
            "In the early days when modularity was introduced in JavaScript, there was no native support for running modules within the browser. Support for modular programming was being implemented in Node.js using the CommonJS blueprint and it was being adopted by those using JavaScript for building server-side applications.\nIt also had prospects for large web applications as developers could avoid namespace collisions and build a more maintainable codebases by writing code in a more modular pattern."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/getting-started-webpack/\" />\n              <title>Getting Started With Webpack</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Getting Started With Webpack</h1>\n                  \n                    \n                    <address>Nwani Victory</address>\n                  \n                  <time datetime=\"2021-06-04T10:00:00&#43;00:00\" class=\"op-published\">2021-06-04T10:00:00+00:00</time>\n                  <time datetime=\"2021-06-04T10:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>In the early days when <a href=\"https://en.wikipedia.org/wiki/Modular_programming\">modularity</a> was introduced in JavaScript, there was no native support for running modules within the browser. Support for <a href=\"https://en.wikipedia.org/wiki/Modular_programming\">modular programming</a> was being implemented in <a href=\"https://nodejs.org/en/\">Node.js</a> using the <a href=\"https://en.wikipedia.org/wiki/CommonJS\">CommonJS blueprint</a> and it was being adopted by those using JavaScript for building server-side applications.</p>\n\n<p>It also had prospects for <strong>large web applications</strong> as developers could avoid <a href=\"https://www.zendesk.com/blog/keep-javascript-libraries-from-colliding/\">namespace collisions</a> and build a more maintainable codebases by writing code in a more modular pattern. But there was still a challenge: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">modules</a> couldn’t be used <em>within</em> web browsers, where JavaScript was usually executed.</p>\n\n<p>To solve this problem, module bundlers such as <a href=\"https://webpack.js.org/\">webpack</a>, <a href=\"https://parceljs.org/\">Parcel</a>, <a href=\"https://rollupjs.org/\">Rollup</a> and also <a href=\"https://developers.google.com/closure/compiler\">Google’s Closure Compiler</a> were written to create optimized bundles of your code for your end-user&rsquo;s browser to download and execute.</p>\n\n<h3 id=\"what-does-it-mean-to-bundle-your-code\">What Does It Mean To “Bundle” Your Code?</h3>\n\n<p><em>Bundling code</em> refers to combining and optimizing multiple modules into one or more <strong>production-ready bundles</strong>. The bundle mentioned here can be understood better as the end product of the entire bundling process.</p>\n\n<p>In this article, we will be focusing on <a href=\"https://webpack.js.org/\">webpack</a>, a tool written by <a href=\"https://github.com/sokra\">Tobias Koppers</a>, which over time has grown to become a major tool within the JavaScript toolchain, often used in large and small projects.</p>\n\n<p><strong>Note:</strong> <em>To benefit from this article, it’s a good idea to be familiar with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">JavaScript modules</a>. You will also need</em> <a href=\"https://www.nodejs.org\"><em>Node</em></a> <em>installed on your local machine, so you can install and use webpack locally.</em></p>\n\n<h3 id=\"marker\" style=\"text-transform: none;\">What Is webpack?</h3>\n\n<p><a href=\"https://webpack.js.org/\">webpack</a> is a highly extensible and configurable <strong>static module bundler</strong> for JavaScript applications. With its extensible nature, you can plug in external loaders and plugins to achieve your end goal.</p>\n\n<p>As shown in the illustration below, webpack goes through your application from a <strong>root entry point</strong>, builds a dependency graph comprising of dependencies that act directly or indirectly on the root file and produces optimized bundles of the combined modules.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"360\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"webpack depedency graph illustration\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      An illustration of depedency graph graph generated by webpack starting from an entry point. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5b9eda26-9041-4d59-a5d7-f2ddf660b950/webpack-dependency-graph.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>To understand how webpack works, we need to understand some terminology that it uses (check <a href=\"https://webpack.js.org/glossary/\">webpack Glossary</a>. This terminology is often used in this article, and it’s also frequently referenced in <a href=\"https://webpack.js.org/\">webpack’s documentation</a>.</p>\n\n<ul>\n<li><strong>Chunk</strong><br />\nA <em>chunk</em> refers to the code extracted from modules. This code will be stored in a <em>chunk file</em>. Chunks are commonly used when performing code-splitting with webpack.</li>\n<li><strong>Modules</strong><br />\n<em>Modules</em> are broken-down parts of your application which you import to perform a specific task or function. Webpack supports modules created using the <a href=\"https://webpack.js.org/api/module-methods/#es6-recommended\">ES6</a>, <a href=\"https://webpack.js.org/api/module-methods/#commonjs\">CommonJS</a> and <a href=\"https://webpack.js.org/api/module-methods/#amd\">AMD</a> syntax.</li>\n<li><strong>Assets</strong><br />\nThe term <em>assets</em> is frequently used within webpack and other bundlers in general. It refers to the <strong>static files</strong> bundled during the build process. These files could be anything from images to fonts or even video files. As you read further down the article, you will see how we use loaders to work with different asset types.</li>\n</ul>\n\n<p><strong>Recommended reading</strong>: <em><a href=\"https://www.smashingmagazine.com/2017/02/a-detailed-introduction-to-webpack/\">Webpack - A Detailed Introduction</a></em></p>\n\n<p>Once we’ve understood what webpack is and what terminology it uses, let’s see how they apply in putting together a configuration file for a demo project.</p>\n\n<p><strong>Note</strong>: <em>You will also need <a href=\"https://webpack.js.org/api/cli/\"><code>webpack-cli</code></a> installed to use webpack on your machine. If not installed, you will be prompted from your terminal to install it.</em></p>\n\n<h3 id=\"marker\" style=\"text-transform: none;\">webpack Configuration Files</h3>\n\n<p>Apart from using the <a href=\"https://www.npmjs.com/package/webpack-cli\">webpack-cli</a> from a terminal, you can also use webpack in your project via a configuration file. But with the recent versions of webpack, we can use it in our project <em>without</em> a configuration file. We can use <code>webpack</code> as a value of one of the commands in our <code>package.json</code> file &mdash; without any flag. This way, webpack will assume your project’s entry point file lives in the <code>src</code> directory. It will bundle the entry file and output it to the <code>dist</code> directory.</p>\n\n<p>An example is the sample <code>package.json</code> file below. Here, we use webpack to bundle the application without a configuration file:</p>\n\n<pre><code class=\"language-javascript\">{\n  \"name\" : \"Smashing Magazine\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n      \"build\" : \"webpack\"\n  },\n  \"dependencies\" : {\n    \"webpack\": \"^5.24.1\"\n  }\n}</code></pre>\n\n<p>When running it the build command in the file above, webpack will bundle the file in the <code>src/index.js</code> directory and output it in a <code>main.js</code> file in a <code>dist</code> directory. webpack is, however, much more flexible than that. We can <strong>change the entry point</strong>, adjust the output point and refine many other default behaviors by editing a configuration file with the <code>-- config</code> flag.</p>\n\n<p>An example is the modified build command from the <code>package.json</code> file above:</p>\n\n<pre><code class=\"language-javascript\">\"build\" : \"webpack --config webpack.config.js\"</code></pre>\n\n<p>Above, we added the <code>--config</code> flag and specified a <code>webpack.config.js</code> as the file having the new webpack configuration.</p>\n\n<p>The <code>webpack.config.js</code> file doesn’t exist yet though. So we need to create it in our application directory and paste the following code below into the file.</p>\n\n<pre><code class=\"language-javascript\"># webpack.config.js\n\nconst path = require(\"path\")\n\nmodule.exports = {\n  entry : \"./src/entry\",\n  output : {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"output.js\"\n  }\n}\n</code></pre>\n\n<p>The file above still configures webpack to bundle your JavaScript file, but now we can define a <strong>custom entry</strong> and output file paths rather than the default path used by webpack.</p>\n\n<p>A few things to note about a webpack configuration file:</p>\n\n<ul>\n<li>A webpack configuration file is a JavaScript file, written as a JavaScript <a href=\"https://nodejs.org/api/modules.html#modules_modules_commonjs_modules\">CommonJS module</a>.</li>\n<li>A webpack configuration file <strong>exports an object</strong> with several properties. Each of these properties is used as an option to configure webpack when bundling your code. An example is the <code>mode</code> option:\n\n<ul>\n<li><a href=\"https://webpack.js.org/configuration/mode/\"><code>mode</code></a><br />\nIn configuration, this option is used to set the <code>NODE_ENV</code> value during bundling. It can either have a <code>production</code> or <code>development</code> value. When not specified, it will <strong>default</strong> to <code>none</code>. It’s also important to note that webpack bundles your assets <em>differently</em> based on the <code>mode</code> value. For example, webpack automatically caches your bundles in development mode to optimize and reduce the bundle time. Refer to the <a href=\"https://webpack.js.org/configuration/mode/\">mode section</a> of the <a href=\"https://webpack.js.org/guides/getting-started/\">webpack documentation</a> to see a changelog of the options automatically applied in each mode.</li>\n</ul></li>\n</ul>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\n\n\n<h3 id=\"marker\" style=\"text-transform: none;\">webpack Concepts</h3>\n\n<p>When configuring webpack either via the <a href=\"https://webpack.js.org/api/cli/\">CLI</a> or through a configuration file, there are <strong>four main concepts</strong> that are applied as <em>options</em>. The next section of this article focuses on these concepts and applies them when building the configuration for a demo web application.</p>\n\n<p>Please note that the concepts explained below share some similarities with other module bundlers. For example, when using <a href=\"https://rollupjs.org/guide/en/#configuration-files\">Rollup</a> with a <a href=\"https://rollupjs.org/guide/en/#configuration-files\">configuration file</a>, you can define an <a href=\"https://rollupjs.org/guide/en/#configuration-files\">input</a> field to specify the entry point of the dependency graph, an <a href=\"https://rollupjs.org/guide/en/#configuration-files\">output</a> object configuring how and where the produced chunks are placed, and also a <a href=\"https://rollupjs.org/guide/en/#configuration-files\">plugins</a> object for adding external plugins.</p>\n\n<h4 id=\"entry\">Entry</h4>\n\n<p>The <em>entry</em> field in your configuration file contains the path to the file from where webpack starts building a <strong>dependency graph</strong>. From this entry file, webpack will proceed to other modules which depend directly or indirectly on the entry point.</p>\n\n<p>Your configuration’s entry point can be a <a href=\"https://webpack.js.org/concepts/entry-points/#single-entry-shorthand-syntax\">Single Entry</a> type with a <strong>single</strong> file value, similar to the example below:</p>\n\n<pre><code class=\"language-javascript\"># webpack.configuration.js\n\nmodule.exports = {\n  mode:  \"development\",\n  entry : \"./src/entry\" \n}\n</code></pre>\n\n<p>The entry point can also be a <strong>multi-main entry type</strong> having an array containing the path to several entry files, similar to the example below:</p>\n\n<pre><code class=\"language-javascript\"># webpack.configuration.js\n\nconst webpack = require(\"webpack\")\n\nmodule.exports = {\n  mode: \"development\",\n  entry: [ './src/entry', './src/entry2' ],\n}\n</code></pre>\n\n<h4 id=\"output\">Output</h4>\n\n<p>Just as the name implies, a configuration’s <em>output</em> field is where the created bundle will live. This field comes in handy when you have several modules in place. Rather than using the name generated by webpack, you can <strong>specify your own filename</strong>.</p>\n\n<pre><code class=\"language-javascript\"># webpack.configuration.js\n\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\n\nmodule.exports = {\n  mode: \"development\",\n  entry: './src/entry',\n  output: {\n    filename: \"webpack-output.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  }\n}\n</code></pre>\n    \n\n<h4 id=\"loaders\">Loaders</h4>\n\n<p>By default, webpack only understands JavaScript files within your application. However, webpack treats every file imported as a module as a <strong>dependency</strong>, and adds it to the dependency graph. To process static resources such as images, CSS files, JSON files or even your data stored in CSV, webpack uses <a href=\"https://webpack.js.org/concepts/loaders/\">loaders</a> to “load” these files into the bundle.</p>\n\n<p>Loaders are flexible enough to be used for a lot of things, from transpiling your ES code, to handling your application’s styles or even linting your code with ESLint.</p>\n\n<p>There are <strong>three ways to use loaders</strong> within your application. One of them is through the <em>inline</em> method by directly importing it in the file. For example, to minimize image size, we can use the <code>image-loader</code> loader in the file directly as shown below:</p>\n\n<pre><code class=\"language-javascript\">// main.js\n\nimport ImageLoader from 'image-loader'</code></pre>\n \n\n<p>Another preferred option to use loaders is via your webpack configuration file. This way, you can do more with loaders, such as <strong>specifying the file types</strong> you want to apply the loaders to. To do this, we create a <code>rules</code> array and specify the loaders in an object, each having a test field with a regex expression matching the assets we want to apply the loaders to.</p>\n\n<p>For examples, with <code>image-loader</code> imported directly in the previous example, we can use it in the webpack configuration file with the most basic options from the <a href=\"https://github.com/vanwagonet/img-loader\">documentation</a>. This will look like this:</p>\n\n<pre><code class=\"language-javascript\"># webpack.config.js\n\nconst webpack = require(\"webpack\")\nconst path = require(\"path\")\nconst merge = require(\"webpack-merge\")\n\nmodule.exports = {\n  mode: \"development\",\n  entry: './src/entry',\n  output: {\n    filename: \"webpack-output.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n    {\n      test: /\\.(jpe?g|png|gif|svg)$/i,\n      use: [\n        'img-loader'\n        ]\n    }\n   ]\n  }\n}\n</code></pre>\n\n<p>Take a closer look at the <code>test</code> field in the object that contains the <code>image-loader</code> above. We can spot the regex expression that matches all image files: either <code>jp(e)g</code>, <code>png</code>, <code>gif</code> and <code>svg</code> format.</p>\n\n<p>The last method of using Loaders is via the CLI with the <code>--module-bind</code> flag.</p>\n\n<p>The <a href=\"https://github.com/webpack-contrib/awesome-webpack#loaders\">awesome-webpack</a> readme contains an <strong>exhaustive list of loaders</strong> that you can use with webpack, each grouped into categories of operations that they perform. Below are just a few loaders that you might find handy in your application:</p>\n\n<ul>\n<li><a href=\"https://github.com/herrstucki/responsive-loader\"><strong>Responsive-loader</strong></a>\nYou will find this loader very helpful when adding images to fit your responsive site or app. It creates multiple images of various sizes from a single image and returns a <code>srcset</code> matching the images for use at appropriate display screen sizes.</li>\n<li><a href=\"https://github.com/babel/babel-loader\"><strong>Babel-loader</strong></a><br />\nThis is used for transpiling your JavaScript code from modern ECMA syntax to ES5.</li>\n<li><a href=\"https://github.com/samsarahq/graphql-loader\"><strong>GraphQL-Loader</strong></a><br />\nIf you are a GraphQL enthusiast, you’ll find this loader quite helpful as it loads your <code>.graphql</code> files containing your GraphQL schema, queries, and mutations &mdash; along with the option to enable validation.</li>\n</ul>\n\n<h4 id=\"plugins\">Plugins</h4>\n\n<p>The use of <em>plugins</em> allows webpack compiler to <strong>perform tasks on chunks</strong> produced from the bundled modules. Although webpack is not a <a href=\"https://www.smashingmagazine.com/2016/06/harness-machines-productive-task-runners/\">task runner</a>, with plugins, we can perform some custom actions which the loaders could not perform when the code was being bundled.</p>\n\n<p>An example of a webpack plugin is the <em>ProgressPlugin</em> built-in to webpack. It provides a way to customize the progress which is printed out in the console during compilation.</p>\n\n<pre><code class=\"language-javascript\"># webpack.config.js\n\nconst webpack = require(\"webpack\")\nconst path = require(\"path\")\nconst merge = require(\"webpack-merge\")\n\nconst config = {\n  mode: \"development\",\n  entry: './src/entry',\n  output: {\n    filename: \"webpack-output.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n    {\n      test: /\\.(jpe?g|png|gif|svg)$/i,\n      use: [\n        'img-loader'\n        ]\n    }\n   ]\n  },\n  plugins: [ \n        new webpack.ProgressPlugin({\n          handler: (percentage, message ) =&gt; {\n            console.info(percentage, message);\n          },\n        })\n    ]\n}\n\nmodule.exports = config\n</code></pre>\n\n<p>With the Progress plugin in the configuration above, we provided a <strong>handler function</strong> that will print out the compilation percentage and message to the console during the compilation process.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"787\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"webpack progress plugin output\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      A shell output showing messages from webpack progress plugin. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/64da04a3-fec7-4add-8bbc-24fba7f6fbfb/webpack-progress-plugin.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Below are a few plugins from the <a href=\"https://github.com/webpack-contrib/awesome-webpack#loaders\">awesome-webpack</a> readme which you will find handy in your webpack application.</p>\n\n<ul>\n<li><a href=\"https://www.npmjs.com/package/offline-plugin\"><strong>Offline-plugin</strong></a><br />\nThis plugin utilizes <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">service workers</a> first or the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\">AppCache</a> where available to provide an offline experience for webpack managed projects.</li>\n<li><a href=\"https://www.npmjs.com/package/purgecss-webpack-plugin\"><strong>Purgecss-webpack-plugin</strong></a><br />\nThis plugin comes in handy when trying to optimize your webpack project as it removes unused CSS within your application during compilation.<br /></li>\n</ul>\n\n<p>At this point, we have our first webpack configuration for a relatively small application fully set up. Let’s further consider how we can do certain things with webpack in our application.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"handling-multiple-environments\">Handling Multiple Environments</h3>\n\n<p>In your application, you might need to configure webpack differently for either a <strong>development or production environment</strong>. For example, you might not want webpack to output minor warning logs each time a new deployment is made to your continuous integration pipeline in your production environment.</p>\n\n<p>There are <a href=\"https://webpack.js.org/configuration/configuration-types/\">several ways</a> to achieve that, as recommended by webpack and the community. One way is to <strong>convert your configuration file</strong> to export a function that returns an object. This way, current environment will be passed into the function by the webpack compiler as its first parameter, and other option as the second parameter.</p>\n\n<p>This method of handling your webpack environment will come in handy if there are a few operations you’d like to perform differently based on the current environment. However, for larger applications with more complex configurations, you could end up with a configuration packed with plenty of conditional statements.</p>\n\n<p>The code snippet below shows an example of how to handle a <code>production</code> and <code>development</code> environment in the same file using the <code>functions</code> method.</p>\n\n<pre><code class=\"language-javascript\">// webpack.config.js\n\nmodule.exports = function (env, args) {\n  return {\n   mode : env.production ? 'production' : 'development',\n  entry: './src/entry',\n  output: {\n    filename: \"webpack-output.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  plugins: [ \n       env.development && ( \n          new webpack.ProgressPlugin({\n            handler: (percentage, message ) =&gt; {\n                console.info(percentage, message);\n            },\n        })\n      )\n    ]\n  }\n}\n</code></pre>   \n\n<p>Going through the exported function in the code snippet above, you’ll see how the <code>env</code> parameter passed into the function is being used with a ternary operator to switch values. It’s first used to set the webpack mode, then it’s also used to enable the <a href=\"https://webpack.js.org/plugins/progress-plugin/\">ProgressPlugin</a> only in development mode.</p>\n\n<p>Another more elegant way to handle your <em>production</em> and <em>development</em> environment is to create <strong>different configuration files</strong> for the two environments. Once we’ve done that, we can use them with different commands in the <code>package.json</code> scripts when bundling the application. Take a look at the snippet below:</p>\n\n<pre><code class=\"language-javascript\">{\n  \"name\" : \"smashing-magazine\", \n  \"main\" : \"index.js\"\n  \"scripts\" : {\n    \"bundle:dev\" : \"webpack --config webpack.dev.config.js\",\n    \"bundle:prod\" : \"webpack --config webpack.prod.config.js\"\n  },\n  \"dependencies\" : {\n    \"webpack\": \"^5.24.1\"\n  }\n}</code></pre>\n\n<p>In the <code>package.json</code> above, we have <strong>two script commands</strong>, each using a different configuration file written to handle a specific environment when bundling the application’s assets. Now you can bundle your application using <code>npm run bundle:dev</code> in development mode, or <code>npm run bundle:prod</code> when creating a production-ready bundle.</p>\n\n<p>Using the second approach, you <strong>avoid conditional statements</strong> introduced when returning your configuration object from a function. However, now you also have to maintain multiple configuration files.</p>\n\n<h3 id=\"splitting-configuration-file\">Splitting Configuration File</h3>\n\n<p>At this point, our webpack configuration file is at 38 lines of code (LOC). This is quite fine for a demo application with a single loader and a single plugin.</p>\n\n<p>For a larger application though, our webpack configuration file will definitely be <em>much</em> longer, having several loaders and plugins with their custom options each. To keep the configuration file clean and readable, we can <strong>split the configuration into smaller objects</strong> across multiple files then use the <a href=\"https://www.npmjs.com/package/webpack-merge\">webpack-merge</a> package to merge the configuration objects into one base file.</p>\n\n<p>To apply it to our webpack project, we can split the single configuration file into three smaller files: one for loaders, one for plugins, and the last file as the base configuration file where we put the two other files together.</p>\n\n<p>Create a <code>webpack.plugin.config.js</code> file and paste the code below into it to use the plugins with additional options.</p>\n\n<pre><code class=\"language-javascript\">// webpack.plugin.config.js\nconst webpack = require('webpack')\n \nconst plugin = [\n  new webpack.ProgressPlugin({\n          handler: (percentage, message ) =&gt; {\n            console.info(percentage, message);\n          },\n  })\n]\n\nmodule.exports = plugin</code></pre>\n\n<p>Above, we have a single plugin which we extracted from the <code>webpack.configuration.js</code> file.</p>\n\n<p>Next, create a <code>webpack.loader.config.js</code> file with the code below for the webpack loaders.</p>\n\n<pre><code class=\"language-javascript\">// webpack.loader.config.js\n\nconst loader = {\n module: {\n    rules: [\n    {\n      test: /\\.(jpe?g|png|gif|svg)$/i,\n      use: [\n        'img-loader'\n        ]\n    }\n  ]\n  }\n}</code></pre>\n\n<p>In the code block above, we moved the webpack <code>img-loader</code> into a separate file.</p>\n\n<p>Finally, create a <code>webpack.base.config.js</code> file where the base input and output configuration for the webpack application will be kept alongside the two created files above.</p>\n\n<pre><code class=\"language-javascript\">// webpack.base.config.js\nconst path = require(\"path\")\nconst merge = require(\"webpack-merge\")\n\nconst plugins = require('./webpack.plugin.config')\nconst loaders = require('./webpack.loader.config')\n\nconst config = merge(loaders, plugins, {\n  mode: \"development\",\n  entry: './src/entry',\n  output: {\n    filename: \"webpack-output.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  }\n});\n\nmodule.exports = config\n</code></pre>\n\n<p>Taking a glance at the webpack file above, you can observe how compact it is in comparison to the original <code>webpack.config.js</code> file. Now the three main parts of the configuration have been broken into smaller files and can be used individually.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"optimizing-large-builds\">Optimizing Large Builds</h3>\n\n<p>As you keep working on your application over a period of time, your application will definitely grow larger in features and size. As this happens, new files will be created, old files will be modified or refactored, and new external packages will be installed &mdash; all leading to an <strong>increase in the bundle size</strong> emitted by webpack.</p>\n\n<p>By default, webpack automatically tries to optimize bundles on your behalf if your configuration mode is set to <code>production</code>. For example, one technique that webpack applies by default (starting with webpack 4+) to optimize and reduce your bundle size is <a href=\"https://www.smashingmagazine.com/2021/05/tree-shaking-reference-guide/\">Tree-Shaking</a>. Essentially, it’s an optimization technique used to remove unused code. At a simple level during bundling, the import and export statements are used to <strong>detect unused modules</strong> before removing them from the emitted bundles.</p>\n\n<p>You can also <em>manually</em> optimize your application bundle by adding an <code>optimization</code> object with certain fields into your configuration file. The <a href=\"https://webpack.js.org/configuration/optimization/\">optimization section</a> of the webpack documentation contains a full list of fields you can use in the <code>optimization</code> object to, well, optimize your application. Let’s consider one out of the 20 documented fields.</p>\n\n<ul>\n<li><code>minimize</code><br />\nThis boolean field is used to instruct webpack to minimize the bundle size. By default, webpack will try to achieve this using <a href=\"https://www.npmjs.com/package/terser-webpack-plugin\">TerserPlugin</a>, a code minification package shipped with webpack.</li>\n</ul>\n\n<blockquote>Minification applies to minimizing your code by removing unnecessary data from the code which in turn reduces the code size produced after the process.</blockquote>\n\n<p>We can also use other preferred minifiers by adding a <code>minimizer</code> array field within the <code>optimization</code> object. An example is the use of <a href=\"https://www.npmjs.com/package/uglifyjs-webpack-plugin\">Uglifyjs-webpack-plugin</a> below.</p>\n\n<pre><code class=\"language-javascript\">// webpack.config.js\nconst Uglify = require(\"uglifyjs-webpack-plugin\")\n\nmodule.exports = {\n    optimization {\n      minimize : true,\n      minimizer : [\n        new Uglify({\n          cache : true,\n          test: /\\.js(\\?.*)?$/i,\n       })\n    ]\n  } \n }</code></pre>\n\n<p>Above, <code>uglifyjs-webpack-plugin</code> is being used as a minifier with two quite important options. First, enabling <code>cache</code> means that Uglify will only minify existing files when they are new changes, and the <code>test</code> option specifies the specific file types we want to minify.</p>\n\n<p><strong>Note:</strong> <em>The <a href=\"https://www.npmjs.com/package/uglifyjs-webpack-plugin\">uglifyjs-webpack-plugin</a> gives a comprehensive list of the options available for use when minifying your code with it.</em></p>\n\n<h4 id=\"a-little-optimization-demo\">A Little Optimization Demo</h4>\n\n<p>Let’s manually try to optimize a demo application by applying some fields in a larger project to see the difference. Although we won’t dive deep into optimizing the application, we’ll see the difference in bundle sizes between when running webpack in <code>development</code> mode, versus when in <code>production</code> mode.</p>\n\n<p>For this demo, we’ll use a desktop application built with <a href=\"https://www.electronjs.org/\">Electron</a> that also uses <a href=\"https://reactjs.org/\">React.js</a> for its UI — all bundled together with webpack. Electron and React.js sound like a pretty heavy combination and might likely generate a bigger bundle.</p>\n\n<p><strong>Note</strong>: <em>If you are learning about</em> <a href=\"https://www.electronjs.org/\"><em>Electron</em></a> <em>for the first time,</em> <a href=\"https://www.smashingmagazine.com/2020/07/desktop-apps-electron-vue-javascript/\"><em>this article</em></a> <em>gives a good insight into what</em> <a href=\"https://www.electronjs.org/\"><em>Electron</em></a> <em>is and how you can use it for building cross-platform desktop applications.</em></p>\n\n<p>To try out the demo locally, clone the application from the GitHub <a href=\"https://github.com/vickywane/webpack-react-demo.git\">repository</a> and install the dependencies using the commands below.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-bash\"># clone repository\ngit clone https://github.com/vickywane/webpack-react-demo.git\n\n# change directory\ncd demo-electron-react-webpack\n\n# install dependencies\nnpm install</code></pre>\n</div>\n\n<p>The desktop application is fairly simple with a single page styled using <a href=\"https://www.styled-components.com/\">styled-components</a>. When the desktop application is launched with the <code>yarn start</code> command, the single page displays a list of images fetched from a CDN, as shown below.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"439\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Electron application with React.js interface preview.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Desktop preview of images within the Electron application with React.js interface. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d7f86ad4-6064-4abc-b7b1-ee6a04d7ff07/demo-application.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Let’s create a <strong>development bundle</strong> of this application first without any manual optimization to analyze the final bundle size.</p>\n\n<p>Running <code>yarn build:dev</code> from a terminal in the project directory will create the development bundle. Plus, it will print out the following statistics to your terminal:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"464\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"webpack compiler logs in development mode\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Terminal logs from webpack compiler when run in development mode without manual optimizations. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e6a3e81c-a7aa-4154-92a9-c2e9b2c7237b/development-logs.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The command will show us the statistics of the entire compilation and the emitted bundles.</p>\n\n<p>Take note of the <code>mainRenderer.js</code> chunk is at 1.11 Mebibyte (approx 1.16 MB). The <code>mainRenderer</code> is the entry point for the Electron application.</p>\n\n<p>Next, let’s add <a href=\"https://www.npmjs.com/package/uglifyjs-webpack-plugin\">uglifyjs-webpack-plugin</a> as an installed plugin in the <code>webpack.base.config.js</code> file for code minification.</p>\n\n<pre><code class=\"language-javascript\">// webpack.base.config.js\nconst Uglifyjs = require(\"uglifyjs-webpack-plugin\")\n\nmodule.exports = {\n  plugins : [\n    new Uglifyjs({\n      cache : true\n    })\n  ]\n}\n</code></pre>  \n\n<p>Lastly, let’s run bundle the application with webpack in <code>production</code> mode. Running <code>yarn build:prod</code> command from your terminal will output the data below to your terminal.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"583\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"webpack compiler logs in production mode.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Logs from webpack compiler when application is bundled in production mode with code minification. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8d3a8aca-0092-4a27-88ce-d3f05ba62715/production-logs.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Take a note of the <code>mainRenderer</code> chunk this time. It has dropped to a whopping 182 Kibibytes (approximately 186 KB), and that’s more than 80% of the <code>mainRenderer</code> chunk size emitted previously!</p>\n\n<p>Let’s further visualize the emitted bundles using the <a href=\"https://www.npmjs.com/package/webpack-bundle-analyzer\">webpack-bundler-analyzer</a>. Install the plugin using the <code>yarn add webpack-bundle-analyzer</code> command and modify the <code>webpack.base.config.js</code> file to contain the code below which adds the plugin.</p>\n\n<pre><code class=\"language-javascript\">// webpack.base.config.js\nconst Uglifyjs = require(\"uglifyjs-webpack-plugin\");\nconst BundleAnalyzerPlugin = require(\"webpack-bundle-analyzer\");\n  .BundleAnalyzerPlugin;\n\nconst config = {\n  plugins: [\n    new Uglifyjs({\n      cache : true\n    }),\n    new BundleAnalyzerPlugin(),\n  ]\n};\n\nmodule.exports = config;\n</code></pre>\n\n<p>Run <code>yarn build:prod</code> from your terminal for the application to be re-bundled. By default, <a href=\"https://github.com/webpack-contrib/webpack-bundle-analyzer\">webpack-bundle-analyzer</a> will start an HTTP server that serves the visualized overview of the bundles in your browser.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"381\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Bundle analyzer representation of emitted bundle.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      webpack bundle analyzer showing a visual representation of emitted bundle and files within. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b976d5a-fc8e-4aa0-9bf6-cc4fe856a655/bundle-analyzer.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>From the image above, we can see a <strong>visual representation</strong> of the emitted bundle and file sizes within the bundle. In the visual, we can observe that in the folder <code>node_modules</code>, the biggest file is the <code>react-dom.production.min.js</code>, followed by <code>stylis.min.js</code>.</p>\n\n<p>Using the file sizes visualized by the analyzer, we’ll have a better idea of what installed package is contributing the major portion of the bundle. We can then look for ways to optimize it or replace it with a lighter package.</p>\n\n<p><strong>Note:</strong> <em>The webpack-analyzer-plugin</em> <a href=\"https://www.npmjs.com/package/webpack-bundle-analyzer\"><em>documentation</em></a> <em>lists other means available for displaying the analysis created from your emitted bundles.</em></p>\n\n<h3 id=\"marker\" style=\"text-transform: none;\">webpack Community</h3>\n\n<p>One of the strengths of webpack has been the <strong>large community</strong> of developers behind it and this has been of great use to developers trying webpack out for the first time. Just like this article, there are several articles, guides and resources with the documentation that serves as a great guide when using webpack.</p>\n\n<p>For example, <a href=\"https://webpack.js.org/guides/build-performance/\">Build Performance guide from webpack’s blog</a> contains tips on optimizing your webpack builds and <a href=\"https://slack.engineering/keep-webpack-fast-a-field-guide-for-better-build-performance/\">Slack&rsquo;s case study</a>  (although a bit old) explains how webpack was optimized at <a href=\"https://slack.Ncom/intl/en-ng/\">Slack</a>.</p>\n\n<p>Several community resources explain parts of webpack’s documentation, providing you with sample demo projects to show how features of webpack are being used. An example is an article on <a href=\"https://blog.bitsrc.io/revolutionizing-micro-frontends-with-webpack-5-module-federation-and-bit-99ff81ceb0\">Webpack 5 Module Federation</a> which explains how webpack’s new <a href=\"https://webpack.js.org/concepts/module-federation/\">Module Federation</a> feature is used in a React application.</p>\n\n<h3 id=\"summary\">Summary</h3>\n\n<p>After seven years of its existence, webpack has truly proved itself to be an important part of the JavaScript toolchain used by a large number of projects. This article only gives a glimpse into the things one can achieve with webpack’s flexible and extensible nature.</p>\n\n<p>The next time you need to choose a module bundler for your application, hopefully you will better understand some core concepts of Webpack, the problem it solves, and also the steps of setting up your configuration files.</p>\n\n<h4><span class=\"rh\">Further Reading</span> on SmashingMag:</h4>\n\n<ul>\n<li><a title=\"Read 'Webpack - A Detailed Introduction'\" href=\"https://www.smashingmagazine.com/2017/02/a-detailed-introduction-to-webpack/\" rel=\"bookmark\">Webpack - A Detailed Introduction</a></li>\n<li><a title=\"Read 'Build A PWA With Webpack And Workbox'\" href=\"https://www.smashingmagazine.com/2019/06/pwa-webpack-workbox/\" rel=\"bookmark\">Build A PWA With Webpack And Workbox</a></li>\n<li><a title=\"Read 'Setting TypeScript For Modern React Projects Using Webpack'\" href=\"https://www.smashingmagazine.com/2020/05/typescript-modern-react-projects-webpack-babel/\" rel=\"bookmark\">Setting TypeScript For Modern React Projects Using Webpack</a></li>\n<li><a title=\"Read 'How To Harness The Machines: Being Productive With Task Runners'\" href=\"https://www.smashingmagazine.com/2016/06/harness-machines-productive-task-runners/\" rel=\"bookmark\">How To Harness The Machines: Being Productive With Task Runners</a></li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(ks, vf, yk, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Collective #665"
        ],
        "link": [
            "https://tympanus.net/codrops/collective/collective-665/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Thu, 10 Jun 2021 14:24:48 +0000"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?post_type=collective&p=54957",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>Cognitive Bias and the Design Process * MVP Transformations * Best practices for fonts </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-665/\">Collective #665</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aristidebenoist.com/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_WOTW.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54958\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.aristidebenoist.com/\">Inspirational Website of the Week: Aristide Benoist</a></h2>\n<p class=\"ct-coll-p\">The website of Aristide Benoist is an interaction gem that shines with novel details and unique touches. Our pick this week.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aristidebenoist.com/\">Get inspired</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item ct-coll-item--sponsor\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n        <a class=\"ct-coll-thumb\" href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=newsletter&amp;utm_campaign=jun21\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_be.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54969\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_be.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_be-300x300.jpg 300w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_be-105x105.jpg 105w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<div class=\"ct-coll-sponsorship\">Our Sponsor</div>\n<h2><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=newsletter&amp;utm_campaign=jun21\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">The New Super Fast Way to Build a Website</a></h2>\n<p class=\"ct-coll-p\">BeTheme’s new Muffin Builder is like upgrading from a Ford to a Ferrari. You’ll be shocked at how quickly you get your website (or one of Be’s 600+ pre-built websites) to the finish line.</p>\n<p>        <a class=\"ct-coll-link\" target=\"_blank\" href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=newsletter&amp;utm_campaign=jun21\" rel=\"nofollow sponsored noopener noreferrer\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jonyablonski.com/articles/2021/cognitive-bias-and-the-design-process/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_bias.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54974\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://jonyablonski.com/articles/2021/cognitive-bias-and-the-design-process/\">Cognitive Bias and the Design Process</a></h2>\n<p class=\"ct-coll-p\">A look at the systematic errors in thinking that affects decisions and judgment during the design process. By Jon Yablonski.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jonyablonski.com/articles/2021/cognitive-bias-and-the-design-process/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://xnqor.csb.app/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_2d3d.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54968\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://xnqor.csb.app/\">Visually Explained: MVP Transformations</a></h2>\n<p class=\"ct-coll-p\">An interactive sandbox that shows the 3 basic matrix transformations that are essential for understanding vertex shaders in Three.js.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://xnqor.csb.app/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/font-best-practices/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_fonts.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54975\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://web.dev/font-best-practices/\">Best practices for fonts</a></h2>\n<p class=\"ct-coll-p\">Learn how to optimize web fonts for Core Web Vitals in this article by Katie Hempenius.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/font-best-practices/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.testdouble.com/talks/2021-06-03-how-to-find-and-remove-dead-css/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_deadcss.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54970\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://blog.testdouble.com/talks/2021-06-03-how-to-find-and-remove-dead-css/\">How to Find and Remove Dead CSS</a></h2>\n<p class=\"ct-coll-p\">Justin Searls&#8217; screencast on how to go about identifying and removing unused styles.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.testdouble.com/talks/2021-06-03-how-to-find-and-remove-dead-css/\">Watch it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/vasturiano/3d-force-graph\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_3dthree.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54971\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/vasturiano/3d-force-graph\">3D Force-Directed Graph</a></h2>\n<p class=\"ct-coll-p\">A web component to represent a graph data structure in a 3-dimensional space using a force-directed iterative layout. It uses Three.js for 3D rendering.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/vasturiano/3d-force-graph\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/css-is-and-where/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_is.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54963\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_is.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_is-339x300.jpg 339w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://web.dev/css-is-and-where/\">New CSS functional pseudo-class selectors :is() and :where()</a></h2>\n<p class=\"ct-coll-p\">Adam Argyle explains the new pseudo class selectors :is() and :where() are going to have a big impact.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/css-is-and-where/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_hexa.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54960\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/\">Hexagons and Beyond: Flexible, Responsive Grid Patterns, Sans Media Queries</a></h2>\n<p class=\"ct-coll-p\">Temani Afif shows how to create a fully responsive hexagon grid made without media queries.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.smashingmagazine.com/2021/06/getting-started-webpack/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_webpack.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54961\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.smashingmagazine.com/2021/06/getting-started-webpack/\">Getting Started With Webpack</a></h2>\n<p class=\"ct-coll-p\">Take a deep dive into what webpack is and how to use it in your development workflow. By Nwani Victory.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.smashingmagazine.com/2021/06/getting-started-webpack/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://localghost.dev/2021/06/the-right-tag-for-the-job-why-you-should-use-semantic-html/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_localghost.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54959\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://localghost.dev/2021/06/the-right-tag-for-the-job-why-you-should-use-semantic-html/\">The right tag for the job: why you should use semantic HTML</a></h2>\n<p class=\"ct-coll-p\">Sophie Koonin explains why it&#8217;s paramount to use semantic HTML.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://localghost.dev/2021/06/the-right-tag-for-the-job-why-you-should-use-semantic-html/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fig.io/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_fig.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54964\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://fig.io/\">Fig</a></h2>\n<p class=\"ct-coll-p\">Fig adds VSCode-style autocomplete to your existing terminal.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fig.io/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://helix-editor.com/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_postmodern.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54972\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_postmodern.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_postmodern-301x300.jpg 301w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_postmodern-105x105.jpg 105w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://helix-editor.com/\">Helix</a></h2>\n<p class=\"ct-coll-p\">A &#8220;post-modern&#8221; modal text editor where the whole design is based around multiple selections as an editing primitive.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://helix-editor.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.scottohara.me/blog/2021/05/28/disabled-links.html\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_link.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54978\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_link.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_link-331x300.jpg 331w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.scottohara.me/blog/2021/05/28/disabled-links.html\">Disabling a link</a></h2>\n<p class=\"ct-coll-p\">Learn how to disable a hyperlink in this article by Scott O&#8217;Hara.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.scottohara.me/blog/2021/05/28/disabled-links.html\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.a11yproject.com/posts/2021-06-07-fixing-contrast-issues-on-your-own-site-and-elsewhere/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_fixcontrast.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54977\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_fixcontrast.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_fixcontrast-292x300.jpg 292w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.a11yproject.com/posts/2021-06-07-fixing-contrast-issues-on-your-own-site-and-elsewhere/\">Assistive Technology: Fixing contrast issues, on your own site and elsewhere</a></h2>\n<p class=\"ct-coll-p\">Learn how to fix the insufficient text contrast issue for better accessibility using a browser extension.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.a11yproject.com/posts/2021-06-07-fixing-contrast-issues-on-your-own-site-and-elsewhere/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakearchibald.github.io/request-quest/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_requests.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54966\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://jakearchibald.github.io/request-quest/\">Request Quest</a></h2>\n<p class=\"ct-coll-p\">The game is pretty simple: look at some code &amp; decide if it would trigger an HTTP request in the latest stable release of particular browsers.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakearchibald.github.io/request-quest/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.nocodb.com/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_sql.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54965\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.nocodb.com/\">NocoDB</a></h2>\n<p class=\"ct-coll-p\">A free and open source Airtable alternative that can turn any SQL database into a smart spreadsheet. Supports MySQL, Postgres, SQL server, MariaDB &amp; SQLite.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.nocodb.com/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://javascript.plainenglish.io/throw-out-react-and-pick-up-angular-8b578bb7cabc\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/Screen-Shot-2021-06-10-at-15.22.15.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54982\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://javascript.plainenglish.io/throw-out-react-and-pick-up-angular-8b578bb7cabc\">Why We Should Throw Out React and Pick Up Angular</a></h2>\n<p class=\"ct-coll-p\">Sam Redmond shares the largest issues he faced when dealing with a variety of React projects and explains how Angular solves most of them.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://javascript.plainenglish.io/throw-out-react-and-pick-up-angular-8b578bb7cabc\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://betterwebtype.com/articles/2021/06/07/all-you-need-is-5-fonts/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_5fonts.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54967\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_5fonts.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_5fonts-316x300.jpg 316w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://betterwebtype.com/articles/2021/06/07/all-you-need-is-5-fonts/\">All you need is 5 fonts</a></h2>\n<p class=\"ct-coll-p\">Matej Latin shows how you only need 5 fonts for good web typography.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://betterwebtype.com/articles/2021/06/07/all-you-need-is-5-fonts/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kalker.strct.net/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_kalker.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54973\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://kalker.strct.net/\">Kalker</a></h2>\n<p class=\"ct-coll-p\">Kalker is a calculator that supports user-defined variables, functions, ambiguous syntax, derivation and integration. It runs on Windows, macOS, Linux, Android, and in web browsers (with WebAssembly).</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://kalker.strct.net/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/03/inspirational-websites-roundup-26/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_websites.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54980\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/06/03/inspirational-websites-roundup-26/\">Inspirational Websites Roundup #26</a></h2>\n<p class=\"ct-coll-p\">Get updated on the latest trends in web design with this new collection of super creative websites.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/03/inspirational-websites-roundup-26/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/04/trigonometry-in-css-and-javascript-beyond-triangles/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_trigo.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54962\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/06/04/trigonometry-in-css-and-javascript-beyond-triangles/\">Trigonometry in CSS and JavaScript: Beyond Triangles</a></h2>\n<p class=\"ct-coll-p\">In part three of our series we’ll look at how to create more interesting shapes with trigonometry, and how to draw them with the Canvas API.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/04/trigonometry-in-css-and-javascript-beyond-triangles/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C665_svgfilter.jpg\" alt=\"Collective 665 item image\" class=\"wp-image-54976\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\">Thumbnail Hover Effect with SVG Filters</a></h2>\n<p class=\"ct-coll-p\">A simple thumbnail hover effect with a caption slide out animation and an SVG filter distortion on the image.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\">Check it out</a><br />\n</article>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-665/\">Collective #665</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "Setting Up a Modern PHP Development Environment with Docker"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/docker-php-development-environment/?utm_source=rss\"\n              title=\"Setting Up a Modern PHP Development Environment with Docker\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612308286php-docker.png\"\n        alt=\"How to Set Up Your PHP Dev Environment with Docker\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612308286php-docker-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612308286php-docker.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, I’ll lay out how to best get started with setting up a PHP dev environment, walking you through how to get set up with Docker. There are so many ways to set up your PHP dev environment, but using Docker is the current best practice.</strong></p>\n<p>I&#8217;ll start with a brief history of how people have set up their PHP dev environment over the years, leading up to where we are now. But if you&#8217;d rather skip all that and just get your server running, <a href=\"#tldr\">you can skip right to the configuration steps</a>.</p>\n<h2 id=\"alittlebackground\">A Little Background</h2>\n<p>One of the problems with web development is that things change at a rapid pace. CSS best practices change as new properties are added to the specification. (How did we ever cope without <a href=\"https://www.sitepoint.com/introducing-the-css-grid-layout/\">CSS Grid</a>?) PHP is now on version 8, and even the tools we use to execute PHP scripts are being refined over time. As a result, a lot of the tutorials get outdated quite quickly.</p>\n<p>Until a couple of years ago, I sent everyone I was teaching to Bruno Skvorc&#8217;s excellent article <a href=\"https://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/\">Re-introducing Vagrant: The Right Way to Start with PHP</a>. At the time it was a fantastic introduction to the (then) best way to set up a local development environment.</p>\n<p>That article is only from 2015, but five or six years is an eon in ever-moving web development timescales. The &#8220;right way&#8221; has moved on quite significantly since then.</p>\n<p>I&#8217;ll quickly recap how things have changed over the years.</p>\n<h3 id=\"1manuallyinstallingphpmysqlandapache\">1. Manually installing PHP, MySQL and Apache</h3>\n<p>If, like me, you&#8217;re old enough to have been developing websites in the 90s, you&#8217;ll remember how frustrating the experience was. Back then, if you were in the minority who didn&#8217;t just develop on the live web server (yes, we really did this, yes it was a terrible idea), you would manually install Apache, PHP and MySQL on your development machine.</p>\n<p>Getting a development environment set up required significant expertise. You needed to know how to configure the web server, how to configure PHP, and you had to go through the process of manually installing and configuring all the software you used. This was a time-consuming and daunting task in its own right for novice developers. </p>\n<h3 id=\"2preconfiguredpackagessuchasxampp\">2. Preconfigured Packages such as XAMPP</h3>\n<p>By the early to mid 2000s, people had started putting together all the required software in a single package which installed and configured all the software you needed. These packages were things like XAMPP and WAMP, and at the click of a button they gave you a usable development environment.</p>\n<p>If you hang around various PHP facebook groups, you&#8217;ll find that a significant portion of new developers still follow tutorials from this era and a large number of existing developers never moved on, so XAMPP is still used quite widely. If this describes you, it&#8217;s time to move on.</p>\n<p>Using XAMPP made it very easy to get a web development environment up and running on your machine. Bruno&#8217;s article outlines the problems with this approach, but the main issue comes when you want to put your site live on the Web. The versions of PHP, MySQL and Apache (or NGINX) may be different from the ones you installed as part of your XAMPP package. In addition, there are a couple of minor, but frustrating, differences between Windows and Linux. If you&#8217;re developing your site on a Windows machine and uploading it to a Linux server, some of your code may not work at all once it&#8217;s uploaded.</p>\n<h3 id=\"3virtualmachinesandvagrant\">3. Virtual Machines and Vagrant</h3>\n<p>In the late 2000s and early 2010s, the trend among developers was to move to a virtual machine. The idea was that you could run a copy of the real web server&#8217;s operating system with all its installed programs — the exact same configuration and setup as the actual web server you were going to eventually deploy your website to. That way, when you made the website live, there was no chance of it not working.  </p>\n<p>While many programmers saw the benefit of such an environment, the difficulty and time required to set this up meant that few did. That was until Vagrant (and associated tools like Puphpet) came along and took all the hassle out of doing so. </p>\n<p>Take a look at <a href=\"https://www.sitepoint.com/re-introducing-vagrant-right-way-start-php/\">the article I linked to earlier</a> for an excellent description of Vagrant, Virtual Machines and the benefits of setting up a development environment in this way.</p>\n<h3 id=\"4docker\">4. Docker</h3>\n<p>All this background brings us to today and the reason for this article. If Vagrant is so great, why use something else instead? </p>\n<p>The main benefits of a virtual environment set up using Vagrant are:</p>\n<ol>\n<li>\n<p>Your development PC is not tied into a particular environment. You can host multiple websites: one using Apache, one using NGINX, one using PHP 7 and one using PHP 8.</p>\n</li>\n<li>\n<p>When the site is made live, the website is being uploaded to exactly the same environment that it was developed on.</p>\n</li>\n</ol>\n<p>It&#8217;s easy to see why developers want this. Taking the next step up to Docker keeps these benefits while avoiding some of the drawbacks of Vagrant/Virtual Machine environments.</p>\n<h4 id=\"whatswrongwithvagrant\">What&#8217;s wrong with Vagrant?</h4>\n<p>Despite the benefits, a Vagrant-based development environment introduces its own set of restrictions and problems.</p>\n<ol>\n<li>\n<p>System resources. Vagrant requires running a whole different operating system. You need to download and install the operating system that&#8217;s running on your web server, and all the packages it has installed. This uses significant amount of disk space and memory. A virtual machine will normally need at least 512 MB RAM. That&#8217;s not a lot for today&#8217;s computers, but it quickly adds up. If you want to host one website on PHP 7 and one on PHP 8, you need two different virtual machine instances installed and configured on your computer.</p>\n</li>\n<li>\n<p>You have to ensure the virtual machine and the server are in sync. Whenever you update the server or change the server&#8217;s configuration, you have to remember to update your local development environment with the same changes. </p>\n</li>\n<li>\n<p>It locks you tightly into a server OS and configuration. Moving a website from one server to another is a difficult task. A website is more than just the PHP scripts, images and CSS that make it up. A specific server configuration (such as installed PHP extensions and <code>nginx.conf</code>/<code>httpd.conf</code>) are also required for the website to function correctly.</p>\n</li>\n<li>\n<p>There is a very limited choice of available packages. Depending on which Linux distribution your web server is running, you may not have any choice over which version of PHP you run. Unless you install packages from third-party repositories, you won’t be able to use the latest and greatest PHP version. At the time of writing, PHP 8 has recently become available. If you&#8217;re using CentOS 8/RHEL 8, you&#8217;re stuck with PHP 7.3 until you get a new version of the operating system. If you&#8217;re on Debian, the latest version available is 7.3. Other distributions will have different versions available.</p>\n</li>\n<li>\n<p>The server configuration is global. PHP has a settings file called <code>php.ini</code>. Changing this applies the updated configuration to every website hosted on the server. The same goes for <code>nginx.conf</code> for NGINX or <code>httpd.conf</code> for Apache. The MySQL database instance has databases for all sites hosted on the server. Making any large-scale database configuration changes is far reaching. Updating a MySQL setting will affect every website using that MySQL server! </p>\n</li>\n<li>\n<p>The package versions are global on the real server. Although it’s <em>possible</em> to run multiple PHP versions on the same web server, it’s difficult to configure and can have bizarre side effects depending on what your script is doing (such as when you have a script you want to run in a systemd unit/cronjob and forget that you should be using <code>/bin/php72</code> rather than <code>/bin/php</code>).</p>\n</li>\n</ol>\n<p>Although points 5 and 6 can be overcome on the development machine by running different Vagrant virtual machines, you&#8217;ll need a real web server that mirrors each configuration you’re running so that the websites work when you upload them.</p>\n<h3 id=\"introducingdocker\">Introducing Docker</h3>\n<p>Docker solves all the problems listed above. But just what is Docker and how does it work?</p>\n<p>Let&#8217;s start with the intro from Wikipedia: </p>\n<blockquote>\n<p>Docker is a set of platform as a service (PaaS) products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels.</p>\n</blockquote>\n<p>Before getting too technical, the practical benefit to us as web developers is that Docker allows us to package up <em>everything</em> the website needs, all the PHP code along with the PHP executable, MySQL server and NGINX server in addition to the configuration files used by those programs.</p>\n<p>All the website&#8217;s code, and the exact versions of the programs needed to run that code, are packaged together, effectively as a single application. This entire application can then be run on <em>any</em> operating system. When someone runs the packaged application, PHP, MySQL, NGINX and all the PHP files you wrote are all embedded in the application itself. Even better, the exact MySQL, NGINX and PHP versions are part of the package. When you run the application, the exact versions of these tools that the application was developed for are downloaded and installed.  </p>\n<p>&#8220;Isn&#8217;t that what a virtual machine already does?&#8221; I hear you ask. Yes it is, but there’s a big difference between the way Vagrant and Docker handle software installs.</p>\n<p>With Vagrant, running a Virtual Machine, the complete operating system with a specific PHP version, MySQL version and (usually) server configuration is cloned from the real web server. When the server is updated, the virtual machine must also be updated.</p>\n<p>When using Docker, however, the PHP/MySQL/NGINX version is provided as a single package known as an <em>image</em>, and the server can run as many different images as you like.</p>\n<p>The benefit here is that the web server and your development machine are both running the exact same image. You just upload your image to the web server, run the entire application there and your website is up without needing any web server configuration at all.</p>\n<p>Additionally, each image is entirely separate from other image on the server. Each image (one per website in this simplified example) is separate from each other. Each website will have its own NGINX configuration, its own <code>php.ini</code> and its own installs of PHP and MySQL. Each website can be running entirely different PHP versions. You can even have one website running on Apache and one website running on NGINX, on the same machine at the same time. Even when you’re running two different NGINX websites, you’ll have two different NGINX processes, with their own configurations, running at the same time.</p>\n<p>This has a small memory overhead, but the flexibility it grants makes this a very worthwhile trade-off:</p>\n<ol>\n<li>\n<p>The entire website, with the required PHP/MySQL versions, all the configuration and all the code can be moved around with ease. Moving the website to a new server requires just copying a single folder. You don’t need to make any changes to the PHP or NGINX configuration on the new server. You don&#8217;t even need to install PHP or NGINX on the server itself. They’ll be automatically installed by Docker when you launch the application.</p>\n</li>\n<li>\n<p>You can run the <em>exact same image</em> on your development machine. Using Vagrant, you’re effectively running a <em>copy</em> of the server&#8217;s configuration/installed packages on the same machine. With Docker, the same exact same image is run on your PC for development as is being run on the server. </p>\n</li>\n<li>\n<p><code>php.ini</code> tweaks, <code>nginx.conf</code> configuration changes or updating PHP to the latest version is treated the same way as uploading updated PHP code to the server. You update the <em>application</em>, and it doesn&#8217;t matter whether that&#8217;s changing some PHP code or updating <code>php.ini</code>.</p>\n</li>\n<li>\n<p>Each image is self-contained in something called a &#8220;container&#8221;. A PHP script running in one image can&#8217;t access files running in another. Think <code>open_basedir</code> but much stricter. A container is like a very light-weight virtual machine. It acts like its own operating system and code running in a container doesn&#8217;t even know it&#8217;s being run inside one while not being able to see anything outside the container. If one of your PHP scripts is insecure and gives someone effective shell access, they can only access files on the server that you’ve given the container access to.</p>\n</li>\n<li>\n<p>Unlike a virtual machine, if two different websites are in completely different containers but use the same NGINX or PHP versions, disk space and RAM is shared between the two containers. </p>\n</li>\n<li>\n<p>Because each image is self-contained, moving the website to a different server is easy. The application doesn&#8217;t rely on the server&#8217;s installed PHP version and it doesn&#8217;t care what packages are installed on the server. If you want to move a Dockerized application to a different server, it&#8217;s as simple as copying all the website files and launching the application.</p>\n</li>\n<li>\n<p>You can run as many Docker images on the server as you like, each with their own PHP version, web server software, database and associated files.</p>\n</li>\n</ol>\n<h2 id=\"settingthingsup\">Setting Things Up</h2>\n<p>That&#8217;s the theory out of the way. Now let&#8217;s jump in and create a server using Docker.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Before we start, you&#8217;ll need to download and install Docker. Head over to the Docker website, then <a href=\"https://docs.docker.com/get-docker/\">download and install it for your operating system</a>. </p>\n<p>If you&#8217;re on Linux, you should install the <code>docker</code> and <code>docker-compose</code> packages through your distribution&#8217;s package manager. Depending on your distribution, you may need to:</p>\n<ol>\n<li>\n<p>Add your user to the <code>docker</code> group <a href=\"https://docs.docker.com/engine/install/linux-postinstall/\">as outlined in the Docker manual here</a>.</p>\n</li>\n<li>\n<p>Start the <code>docker</code> service <code>systemctl start docker.service</code> and enable it with <code>systemctl enable docker</code>.</p>\n</li>\n</ol>\n<p>If you&#8217;re on Windows or macOS, the installer will do this for you.</p>\n<p>Secondly, because we&#8217;re going to be running a web server inside Docker and forwarding some ports if you already have a web server (Apache, NGINX, XAMPP, IIS, etc.) or MySQL running on your machine, stop them before continuing. </p>\n<h3 id=\"gettingstarted\">Getting started</h3>\n<p>A web server usually consists of multiple different programs — such as NGINX, PHP and MySQL. In Docker&#8217;s terminology, each program you wish to install is a <strong>service</strong>. </p>\n<p>There are several ways of creating these services in Docker. I&#8217;ll cover the most user friendly. Docker supports creating a configuration file using YAML (Yet Another Markup Language). </p>\n<p>Although you can type in all the options on the command line, I recommend using the YAML configuration file for several reasons:</p>\n<ol>\n<li>\n<p>It’s a lot easier to read/understand.</p>\n</li>\n<li>\n<p>You don&#8217;t have to re-type several long commands every time you want to run the server.</p>\n</li>\n<li>\n<p>You can track changes to the file with Git.</p>\n</li>\n</ol>\n<h2 id=\"dockercomposeymlfornginx\"><code>docker-compose.yml</code> for NGINX</h2>\n<p>Docker provides a tool called <code>docker-compose</code> that takes a configuration file called <code>docker-compose.yml</code> and launches the services listed inside it. Let&#8217;s start by adding a web server, NGINX. </p>\n<p>Firstly, create a folder somewhere on your computer that will store your website. You&#8217;ll need to go back to this folder regularly so remember where it is. Create <code>docker-compose.yml</code> with the following contents:</p>\n<pre><code class=\"yaml language-yaml\">version: '3'\r\nservices:\r\n    web:\r\n        image: nginx:latest\r\n        ports:\r\n            - \"80:80\"\r\n</code></pre>\n<p>Let&#8217;s take a look through the configuration one line at a time:</p>\n<pre><code class=\"yaml language-yaml\">version: '3'\r\n</code></pre>\n<p>This tells <code>docker-compose</code> which version of the YAML specification to use. <code>3</code> is the latest, and different versions have a slightly different specification, keywords and structure.</p>\n<p>The next line, <code>services:</code>, will be followed by a list of all the services you want to run.</p>\n<p>In our example so far, there’s just one service called <code>web</code> (you can call this anything you like) using the official NGINX image <code>nginx:latest</code>. Note that the indentation using spaces (not tabs!) matters. YAML relies on the nesting level to determine the structure of the file.</p>\n<p>If you wanted to specify a different NGINX version, you could specify that here like so:</p>\n<pre><code class=\"yaml language-yaml\">version: '3'\r\nservices:\r\n    web:\r\n        image: nginx:1.18.0\r\n        ports:\r\n            - \"80:80\"\r\n</code></pre>\n<p>I recommend using <code>latest</code> unless you have a good reason to use an earlier version.</p>\n<p>The <code>ports</code> block sets up port forwarding. It forwards <code>80</code> on the local machine to <code>80</code> on the image. Any request on the host machine to <code>http://127.0.0.1</code> will be forwarded to the NGINX server running in the container.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/docker-php-development-environment/?utm_source=rss\">Setting Up a Modern PHP Development Environment with Docker</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/docker-php-development-environment/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180923",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Cloud Development",
            "Deployment",
            "Installation",
            "PHP",
            "Vagrant",
            "Web"
        ],
        "dc:creator": [
            "Tom Butler"
        ],
        "pubDate": [
            "Tue, 02 Feb 2021 15:00:32 GMT"
        ],
        "metaDesc": [
            "There are so many ways to set up your PHP development environment, but using Docker is the current best practice. Let's walk through how to do it properly."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            ":nth-child Between Two Fixed Indexes"
        ],
        "link": [
            "https://css-tricks.com/nth-child-between-two-fixed-indexes/"
        ],
        "comments": [
            "https://css-tricks.com/nth-child-between-two-fixed-indexes/#comments"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Tue, 29 Jun 2021 14:37:21 +0000"
        ],
        "category": [
            "Article",
            "nth-child",
            "pseudo classes"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=342736",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I needed to select some elements between two fixed indexes the other day — like literally the second through fifth elements. Ironically, I have a whole post on <a href=\"https://css-tricks.com/useful-nth-child-recipies/\">&#8220;Useful :nth-child Recipes&#8221;</a> but this wasn&#8217;t one of them. </p>\n<p>The answer, it &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/nth-child-between-two-fixed-indexes/\">:nth-child Between Two Fixed Indexes</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I needed to select some elements between two fixed indexes the other day — like literally the second through fifth elements. Ironically, I have a whole post on <a href=\"https://css-tricks.com/useful-nth-child-recipies/\">&#8220;Useful :nth-child Recipes&#8221;</a> but this wasn&#8217;t one of them. </p>\n\n\n\n<p>The answer, it turns out, isn&#8217;t <em>that</em> complicated. But it did twist my brain a little bit. </p>\n\n\n\n<span id=\"more-342736\"></span>\n\n\n\n<p>Say you want to select all divs from the second one and beyond:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div:nth-child(n + 2) {\n\n}\n/* [ ]  [x]  [x]  [x]  [x]  [x]  [x]  [x], etc. */</code></pre>\n\n\n\n<p>That makes logical sense to me. If <code>n</code> is <code>0</code>, the expression is <code>2</code>, and <code>n</code> increments upwards from there and selects everything beyond it.</p>\n\n\n\n<p>But then how do you &#8220;stop&#8221; the selecting at a specific index? Like&#8230; </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* Not real */\ndiv:nth-child(minmax(2, 5)) {\n\n}\n/* [ ]  [x]  [x]  [x]  [x]  [x]  [ ]  [ ], etc. */</code></pre>\n\n\n\n<p>Well, we can do the opposite thing, selecting only the first set of elements then stopping (constraining in the other direction) by reversing the value of <code>n</code>. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div:nth-child(-n + 6) {\n\n}\n/* [x]  [x]  [x]  [x]  [x]  [ ]  [ ]  [ ], etc. */</code></pre>\n\n\n\n<p>That will select the the first five elements and then stop because, as <code>n</code> gets bigger, the expression value goes to <code>0</code> and into negative numbers. </p>\n\n\n\n<p>So, the CSS trick here is to combine both of those <code>:nth-child</code> expressions. </p>\n\n\n\n<p>We know that CSS pseudo-selectors are additive in the sense that they must <em>both</em> be true in order to select them.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">a:first-child:hover {\n  /* selects the &lt;a> if it is BOTH the first child and in a hover state */\n}</code></pre>\n\n\n\n<p>To accomplish the idea of &#8220;2 and over&#8221; and &#8220;5 and under&#8221; we chain the pseudo-selectors:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div:nth-child(n + 2):nth-child(-n + 6) {\n  background: green;\n}</code></pre>\n\n\n\n<p>That&#8217;ll do:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExWGLMb\" src=\"//codepen.io/anon/embed/ExWGLMb?height=450&amp;theme-id=1&amp;slug-hash=ExWGLMb&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExWGLMb\" title=\"CodePen Embed ExWGLMb\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The part that twisted my brain was thinking about &#8220;additive&#8221; pseudo-selectors. I was thinking that selecting &#8220;2 and up&#8221; would do just that, and &#8220;5 and under&#8221; would do just that, and those things combined meant &#8220;all elements.&#8221; But that&#8217;s just wrong thinking. It&#8217;s the conditions that are additive, meaning that every element must meet both conditions. </p>\n\n\n\n<p>If you found this confusing like I did, wait until you check out <a href=\"https://quantityqueries.com/\">Quanity Queries</a>. By nesting a lot of nth-style pseudo-selectors, you can build logic that, for example, only selects elements depending on how many of them are in the DOM. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">div:nth-last-child(n+2):nth-last-child(-n+5):first-child, \ndiv:nth-last-child(n+2):nth-last-child(-n+5):first-child ~ div {\n  /* Only select if there are at least 2 and at most 5 */\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2658\" height=\"2080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=2658%2C2080&#038;ssl=1\" alt=\"\" class=\"wp-image-343257\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?w=2658&amp;ssl=1 2658w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=300%2C235&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=1024%2C801&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=768%2C601&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=1536%2C1202&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=2048%2C1603&amp;ssl=1 2048w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-3.08.53-PM.png?resize=1000%2C783&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p><a href=\"https://css-tricks.com/solved-with-css-logical-styling-based-on-the-number-of-given-elements/\">Una broke this down even further</a> for us a while back.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/nth-child-between-two-fixed-indexes/\">:nth-child Between Two Fixed Indexes</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/nth-child-between-two-fixed-indexes/feed/"
        ],
        "slash:comments": [
            "1"
        ],
        "post-id": [
            {
                "_": "342736",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "What is the JavaScript Internationalization API (I18n)?"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/javascript-internationalization-api-i18n/?utm_source=rss\"\n              title=\"What is the JavaScript Internationalization API (I18n)?\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615778552I18n-civ.jpg\"\n        alt=\"An introduction to the JavaScript Internationalization API (i18n)\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615778552I18n-civ-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615778552I18n-civ-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615778552I18n-civ-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615778552I18n-civ.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>English is the world&#8217;s most widely used language, yet only one in seven people speak it. It&#8217;s the first (native) language of 379 million people, but 917 million speak Mandarin Chinese, 460 million speak Spanish, and 341 million speak Hindi.</strong></p>\n<p>Many non-English speakers reside in emerging markets with exponential internet growth. If your web app can be globally translated, your potential target market could increase by 700%!</p>\n<p>The JavaScript Internationalization API (also known as i18n) allows you to design web pages and applications in such a way that they can be easily adapted to support the needs of users that speak different languages.</p>\n<p>In this article, we&#8217;ll look at the various methods the API offers and how you can implement them in your code to reach a wider, more international audience.</p>\n<h2 id=\"internationalizationi18ncanbetricky\">Internationalization (I18n) Can Be Tricky</h2>\n<p>Internationalization looks easy … <em>until you try to do it</em>.</p>\n<p>Latin-based languages can be superficially similar. For example, a form requesting a name, email, and date translates like this:</p>\n<ul>\n<li>Spanish: nombre, email, fecha</li>\n<li>French: nom, e-mail, date</li>\n<li>German: name, email, datum</li>\n</ul>\n<p>The <a href=\"https://en.wikipedia.org/wiki/Gettext\">Gettext</a> internationalization and localization system has been around for several decades, and libraries are available for most programming languages.</p>\n<p>In simpler cases, you could use some form of tokenization. For example, take an HTML template containing the following:</p>\n<pre><code class=\"markup language-markup\">&lt;label for=\"name\"&gt;{{ NAME }}&lt;/label&gt;\r\n</code></pre>\n<p>This is dynamically replaced by <em>&#8216;name&#8217;</em> when a user has English set as their primary language. Unfortunately, that&#8217;s where the problems start for your user interface:</p>\n<ol>\n<li>There can be different variations of the same language. The Spanish spoken in Spain is not identical to that spoken in South America.</li>\n<li>Words in one language can be considerably longer in others. For example,  &#8220;email&#8221; translates to &#8220;электронное письмо&#8221; in Russian.</li>\n<li>Text isn&#8217;t always oriented from left to right. Some is written from right to left — such as Arabic, Hebrew, Kurdish, and Yiddish. Others can be written from top to bottom, such as Chinese, Korean, Japanese, and Taiwanese.</li>\n</ol>\n<p>Many issues can be addressed by keeping text to a minimum and adopting CSS properties such as <a href=\"https://developer.mozilla.org/docs/Web/CSS/direction\"><code>direction</code></a>, <a href=\"https://developer.mozilla.org/docs/Web/CSS/writing-mode\"><code>writing-mode</code></a>, and <a href=\"https://developer.mozilla.org/docs/Web/CSS/CSS_Logical_Properties\">logical dimensions</a> for layout.</p>\n<h2 id=\"terminologyturmoil\">Terminology Turmoil</h2>\n<p>Further confusion will arise when your application needs to display dates, times, numbers, currencies, or units.</p>\n<p>Consider a date shown as &#8220;12/03/24&#8221;. It will be read as:</p>\n<ul>\n<li>&#8220;3 December 2024&#8221; by US residents who use the MDY format</li>\n<li>&#8220;12 March 2024&#8221; by European, South American, and Asian residents who use the DMY format, and</li>\n<li>&#8220;24 March 2012&#8221; by Canadian, Chinese, Japanese, and Hungarian residents who opt for the considerably more practical YMD format.</li>\n</ul>\n<p><em>(Be aware that date delimiter slashes are not common in all languages!)</em></p>\n<p>The number &#8220;1,000&#8221; will be read as:</p>\n<ul>\n<li>&#8220;one thousand&#8221; by those in the US, UK, Canada, China, and Japan, and</li>\n<li>&#8220;one (point zero)&#8221; by those in Spain, France, Germany, and Russia where a number&#8217;s decimal fraction is separated by a comma.</li>\n</ul>\n<p>The situation can even be complex in English alone. The term &#8220;1,000 meters&#8221; means:</p>\n<ul>\n<li>1 kilometer (or 0.62 of a mile) to US residents</li>\n<li>a collection of one thousand measuring instruments to those in the UK, Canada, and Australia!</li>\n</ul>\n<h2 id=\"thejavascriptintlapi\">The JavaScript Intl API</h2>\n<p>The little-known JavaScript <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code> object</a> implements the ECMAScript Internationalization API in most modern browsers and runtimes. <a href=\"https://kangax.github.io/compat-table/esintl/\">Support is generally good</a>, and even IE11 has many of the more useful methods. For older browsers, there&#8217;s a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a>, and the API can be detected like so:</p>\n<pre><code class=\"javascript language-javascript\">if (window.Intl) {\r\n  // Intl supported\r\n}\r\n</code></pre>\n<p>The API is slightly unusual. It provides several object constructors for dates, times, numbers, and lists, which are passed a locale and an optional object containing configuration parameters. For example, here&#8217;s a <code>DateTime</code> object specifying US English:</p>\n<pre><code class=\"javascript language-javascript\">const dateFormatter = new Intl.DateTimeFormat('en-US');\r\n</code></pre>\n<p>This object can be used any number of times to call various methods which are passed a <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date()</code> value</a> (or an <a href=\"https://www.sitepoint.com/javascript-temporal-api-introduction/\">ES6 Temporal</a> when available). The <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\"><code>format</code> method</a> is usually the most practical option. For example:</p>\n<pre><code class=\"javascript language-javascript\">const valentinesDay = dateFormatter.format( new Date('2022-02-14') );\r\n// returns US format \"2/14/2022\"\r\n\r\nconst starwarsDay = dateFormatter.format( new Date('2022-05-04') );\r\n// returns US format \"5/4/2022\"\r\n</code></pre>\n<p>Alternatively, you can create the <code>Intl</code> object and run a method in one line of code:</p>\n<pre><code class=\"javascript language-javascript\">const starwarsDay = new Intl.DateTimeFormat('en-US').format( new Date('2022-05-04') );\r\n</code></pre>\n<p>As well as the <code>format()</code> method, some objects support these:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts\"><code>formatToParts()</code></a>: returns an array of objects containing formatted strings, such as <code>{ type: 'weekday', value: 'Monday' }</code></li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions\"><code>resolvedOptions()</code></a>: returns a new object with properties reflecting the locale and formatting options used, such as <code>dateFormatter.resolvedOptions().locale</code>.</li>\n</ul>\n<h2 id=\"defininglocales\">Defining Locales</h2>\n<p>All <code>Intl</code> objects require a <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\">locale argument</a>. This is a string which identifies:</p>\n<ul>\n<li>a language subtag</li>\n<li>a script subtag (optional)</li>\n<li>a region (or country) subtag (optional)</li>\n<li>one or more variant subtags (optional)</li>\n<li>one or more BCP 47 extension sequences (optional)</li>\n<li>a private-use extension sequence (optional)</li>\n</ul>\n<p>The language and region is often enough. For example, <code>\"en-US\"</code>, <code>\"fr-FR\"</code>, and so on.</p>\n<p>As well as using a string, an <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale\"><code>Intl.locale</code></a> object can be used to construct locales, such as English US with 12-hour time format:</p>\n<pre><code class=\"javascript language-javascript\">const us = new Intl.Locale('en', {\r\n  region: 'US', hourCycle: 'h12', calendar: 'gregory'\r\n});\r\n</code></pre>\n<p>This can be used in another <code>Intl</code> constructor. For example:</p>\n<pre><code class=\"javascript language-javascript\">new Intl.DateTimeFormat(us, { timeStyle: 'medium' })\r\n  .format( new Date('2022-05-04T13:00:00') );\r\n\r\n// \"1:00:00 PM\"\r\n</code></pre>\n<p>If no locale is defined, the device&#8217;s current language and region settings are used. For example:</p>\n<pre><code class=\"javascript language-javascript\">new Intl.DateTimeFormat().format( new Date('2022-05-04') );\r\n</code></pre>\n<p>This returns <code>\"5/4/2022\"</code> on a device with US settings and <code>\"04/05/2022\"</code> on a device with UK settings.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/javascript-internationalization-api-i18n/?utm_source=rss\">What is the JavaScript Internationalization API (I18n)?</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/javascript-internationalization-api-i18n/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181640",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Sun, 14 Mar 2021 15:00:26 GMT"
        ],
        "metaDesc": [
            "Need to translate your website? Learn how to use the JavaScript Internationalization API (I18n) and how easy it is to implement it in your apps."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Asynchronous Programming Using Async/Await in C#"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/asynchronous-programming-using-async-await-in-c/?utm_source=rss\"\n              title=\"Asynchronous Programming Using Async/Await in C#\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612399745asynchronous-programming.jpg\"\n        alt=\"Asynchronous Programming Using Async/Await in C#\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612399745asynchronous-programming-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612399745asynchronous-programming.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>The <code>async</code> and <code>await</code> keywords were introduced in C# to make <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/async\">asynchronous programming</a> on the .NET platform easier. These keywords have fundamentally changed how code is written in most of the C# ecosystem. Asynchronous programming has become mainstream, and modern frameworks such as ASP.NET Core are fully asynchronous.</strong></p>\n<p>Having such an impact on the C# ecosystem, asynchronous programming proves to be quite valuable. But what is asynchronous programming in the first place?</p>\n<p>This article is going to introduce asynchronous programming, show usage of <code>async</code> and <code>await</code> keywords, talk about the deadlock pitfall and finish with some tips for refactoring blocking C# code with these keywords.</p>\n<p>Let&#8217;s start with terminology.</p>\n<h2 id=\"concurrentvsparallelvsasynchronous\">Concurrent vs Parallel vs Asynchronous</h2>\n<p>What are the differences between these three terms? All of them are applications of multi-threading, their definitions overlap, and they are often used interchangeably. That&#8217;s why the terminology for implementations that leverage multi-threading can be confusing.</p>\n<p>We&#8217;ll go through the nuances between these terms, so that we can come up with a clear definition for asynchronous programming.</p>\n<p>Let&#8217;s assume a GUI application as an example.</p>\n<h3 id=\"synchronousexecutiondoingthingsoneaftertheother\">Synchronous execution: doing things one after the other</h3>\n<p>The user clicks a button and waits for the application to finish handling the click event. Since only one thing can happen at a time, the UI stops responding until the event has been completely handled. In the same way, the application can’t do anything in the background while UI is available for user input.</p>\n<h3 id=\"concurrentdoingmultiplethingsatthesametime\">Concurrent: doing multiple things at the same time</h3>\n<p>The user clicks a button, and the application triggers a separate thread in the background to execute the task needed to satisfy user&#8217;s request <em>concurrently</em>. The thread responsible for handling UI events becomes available again immediately after starting the background thread, keeping the UI responsive.</p>\n<h3 id=\"paralleldoingmultiplecopiesofsomethingatthesametime\">Parallel: doing multiple copies of something at the same time</h3>\n<p>The user instructs the application to process all the files in a folder. The application triggers a number of threads with the processing logic and distributes the files among these threads.</p>\n<h3 id=\"asynchronousnothavingtowaitforonetasktofinishbeforestartinganother\">Asynchronous: not having to wait for one task to finish before starting another</h3>\n<p>The application starts a database query <em>asynchronously</em>. While the query is in progress, it also starts reading a file <em>asynchronously</em>. While both tasks are in progress, it does some calculation.<br />\nWhen all these tasks are finished, it uses the results of all these three operations to update the UI.</p>\n<h2 id=\"asynchronousprogramming\">Asynchronous Programming</h2>\n<p>Based on the terminology above, we can define asynchronous programming simply as follows:</p>\n<blockquote>\n<p>The execution thread should not wait for an I/O-bound or CPU-bound task to finish.</p>\n</blockquote>\n<p>Examples of I/O-bound operations can be file system access, DB access, or an HTTP request. Examples of CPU-bound operations can be resizing an image, converting a document, or encrypting/decrypting data.</p>\n<h3 id=\"benefits\">Benefits</h3>\n<p>Using asynchronous programming has several benefits:</p>\n<ul>\n<li>avoiding thread pool starvation by “pausing” execution and releasing the thread back to thread pool during asynchronous activities</li>\n<li>keeping the UI responsive</li>\n<li>possible performance gains from concurrency</li>\n</ul>\n<h2 id=\"asynchronousprogrammingpatterns\">Asynchronous Programming Patterns</h2>\n<p>.NET provides three patterns for performing asynchronous operations.</p>\n<h3 id=\"asynchronousprogrammingmodelapm_legacy_\">Asynchronous programming model (APM): <em>LEGACY</em></h3>\n<p>Also known as an <code>IAsyncResult</code> pattern, it’s implemented by using two methods: <code>BeginOperationName</code> and <code>EndOperationName</code>.</p>\n<pre><code class=\"cs language-cs\">public class MyClass { \r\n    public IAsyncResult BeginRead(byte [] buffer, int offset, int count, AsyncCallback callback, object state) {...};\r\n    public int EndRead(IAsyncResult asyncResult);\r\n} \r\n</code></pre>\n<p>From the Microsoft documentation:</p>\n<blockquote>\n<p>After calling <code>BeginOperationName</code>, an application can continue executing instructions on the calling thread while the asynchronous operation takes place on a different thread. For each call to <code>BeginOperationName</code>, the application should also call <code>EndOperationName</code> to get the results of the operation.</p>\n</blockquote>\n<h3 id=\"eventbasedasynchronouspatterneap_legacy_\">Event-based asynchronous pattern (EAP): <em>LEGACY</em></h3>\n<p>This pattern is implemented by writing an <code>OperationNameAsync</code> method and an <code>OperationNameCompleted</code> event:</p>\n<pre><code class=\"cs language-cs\">public class MyClass { \r\n    public void ReadAsync(byte [] buffer, int offset, int count) {...};\r\n    public event ReadCompletedEventHandler ReadCompleted;\r\n} \r\n</code></pre>\n<p>The asynchronous operation will be started with the async method, which will trigger the <code>Completed</code> event for making the result available when the async operation is completed. A class that uses EAP may also contain an <code>OperationNameAsyncCancel</code> method to cancel an ongoing asynchronous operation.</p>\n<h3 id=\"taskbasedasynchronouspatterntap_recommended_\">Task-based asynchronous pattern (TAP): <em>RECOMMENDED</em></h3>\n<p>We have only an <code>OperationNameAsync</code> method that returns a <code>Task</code> or a generic <code>Task&lt;T&gt;</code> object:</p>\n<pre><code class=\"cs language-cs\">public class MyClass { \r\n    public Task&lt;int&gt; ReadAsync(byte [] buffer, int offset, int count) {...};\r\n} \r\n</code></pre>\n<p><code>Task</code> and <code>Task&lt;T&gt;</code> classes model asynchronous operations in TAP. It&#8217;s important to understand <code>Task</code> and <code>Task&lt;T&gt;</code> classes for understanding TAP, which is important for understanding and using <code>async</code>/<code>await</code> keywords, so let&#8217;s talk about these two classes in more detail.</p>\n<h2 id=\"taskandtasklttgt\">Task and Task&lt;T&gt;</h2>\n<p>The <code>Task</code> and <code>Task&lt;T&gt;</code> classes are the core of asynchronous programming in .NET. They facilitate all kinds of interactions with the asynchronous operation they represent, such as:</p>\n<ul>\n<li>adding continuation tasks</li>\n<li>blocking the current thread to wait until the task is completed</li>\n<li>signaling cancellation (via <code>CancellationToken</code>s)</li>\n</ul>\n<p>After starting an asynchronous operation and getting a <code>Task</code> or <code>Task&lt;T&gt;</code> object, you can keep using the current execution thread to asynchronously execute other instructions that don&#8217;t need the result of the task, or interact with the task as needed.</p>\n<p>Here’s some example code that uses tasks to visualize what it looks like in action:</p>\n<pre><code class=\"cs language-cs\">using System;\r\nusing System.Threading.Tasks;\r\n\r\npublic class Example {\r\n    public static void Main() {\r\n       Task&lt;DataType&gt; getDataTask = Task.Factory.StartNew(() =&gt; { return GetData(); } );\r\n       Task&lt;ProcessedDataType&gt; processDataTask = getDataTask.ContinueWith((data) =&gt; { return ProcessData(data);} );\r\n       Task saveDataTask = processDataTask.ContinueWith((pData) =&gt; { SaveData(pData)} );\r\n       Task&lt;string&gt; displayDataTask = processDataTask.ContinueWith((pData) =&gt; { return CreateDisplayString(pData); } );\r\n       Console.WriteLine(displayDataTask.Result);\r\n       saveDataTask.Wait();\r\n    }\r\n}\r\n</code></pre>\n<p>Let&#8217;s walk through the code:</p>\n<ul>\n<li>We want to <strong>get some data</strong>. We use <code>Task.Factory.StartNew()</code> to create a task that immediately starts running. This task runs <code>GetData()</code> method <em>asynchronously</em> and, when finished, it assigns the data to its <code>.Result</code> property. We assign this task object to <code>getDataTask</code> variable.</li>\n<li>We want to <strong>process the data</strong> that <code>GetData()</code> method will provide. Calling <code>.ContinueWith()</code> method, we <em>asynchronously</em> create another task and set it as a continuation to <code>getDataTask</code>. This second task will take the <code>.Result</code> of the first task as an input parameter (<code>data</code>) and call the <code>ProcessData()</code> method with it <em>asynchronously</em>. When finished, it will assign the <strong>processed data</strong> to its <code>.Result</code> property. We assign this task to the <code>processDataTask</code> variable. (It’s important to note that, at the moment, we don&#8217;t know whether <code>getDataTask</code> is finished or not, and we don&#8217;t care. We just know what we want to happen when it&#8217;s finished, and we write the code for that.)</li>\n<li>We want to <strong>save the processed data</strong>. We use the same approach to create a third task that will call <code>SaveData()</code> <em>asynchronously</em> when data processing is finished, and set it as a continuation to <code>processDataTask</code>.</li>\n<li>We also want to <strong>display the processed data</strong>. We don&#8217;t have to wait for the data to be saved before displaying it, so we create a fourth task that will create the display string from the processed data <em>asynchronously</em> when data processing is finished, and set it <strong>also</strong> as a continuation to <code>processDataTask</code>. (Now we have two tasks that are assigned as continuations to <code>processDataTask</code>. These tasks will start <em>concurrently</em> as soon as <code>processDataTask</code> is completed.)</li>\n<li>We want to <strong>print the display string</strong> to the console. We call <code>Console.WriteLine()</code> with <code>.Result</code> property of the <code>displayDataTask</code>. The <code>.Result</code> property access is a <strong>blocking</strong> operation; our execution thread will <em>block</em> until <code>displayDataTask</code> is completed.</li>\n<li>We want to <strong>make sure that the data is saved</strong> before leaving the <code>Main()</code> method and exiting the program. At this point, though, we do not know the state of <code>saveDataTask</code>. We call the <code>.Wait()</code> method to <strong>block</strong> our execution thread until <code>saveDataTask</code> completes.</li>\n</ul>\n<h2 id=\"almostgood\">Almost Good</h2>\n<p>As demonstrated above, TAP and <code>Task</code>/<code>Task&lt;T&gt;</code> classes are pretty powerful for applying asynchronous programming techniques. But there&#8217;s still room for improvement:</p>\n<ul>\n<li>Boilerplate code needed for using tasks is quite verbose.</li>\n<li>Assigning continuations and making granular decisions about which task should run means a lot of details should be handled by the programmer, increasing the complexity and making the code error-prone. (Verbosity, combined with increased complexity, means the code will be difficult to understand, thus difficult to maintain.)</li>\n<li>Despite all this power, there&#8217;s no way to wait for a task to complete without blocking the execution thread.</li>\n</ul>\n<p>These drawbacks can become significant challenges for teams to adopt TAP. </p>\n<p>This is where the <code>async</code> and <code>await</code> keywords come into play.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/asynchronous-programming-using-async-await-in-c/?utm_source=rss\">Asynchronous Programming Using Async/Await in C#</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/asynchronous-programming-using-async-await-in-c/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180961",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "ASP.NET",
            "Programming",
            "Web"
        ],
        "dc:creator": [
            "Kerem Ispirli"
        ],
        "pubDate": [
            "Wed, 03 Feb 2021 15:00:31 GMT"
        ],
        "metaDesc": [
            "New to asynchronous programming? Learn what it's about, how to use the async and await keywords, avoid deadlock pitfalls and refactor blocking C# code."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Beginner’s Guide to Vue 3"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/vue-3-beginner-guide/?utm_source=rss\"\n              title=\"A Beginner’s Guide to Vue 3\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032089Vue3.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032089Vue3-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032089Vue3-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032089Vue3-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032089Vue3-1536x808.jpg 1536w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032089Vue3.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, you’ll learn the fundamentals of Vue.js. Even though the article uses Vue 3, the fundamentals apply to older Vue versions too.</strong></p>\n<p>We&#8217;ll cover how to:</p>\n<ul>\n<li>create a Vue application with Vue CLI</li>\n<li>render lists</li>\n<li>use conditional rendering</li>\n<li>make use of dynamic CSS</li>\n<li>handle user inputs and events</li>\n<li>use methods and computed properties</li>\n<li>use HTML attribute binding</li>\n</ul>\n<p>We&#8217;ll start by creating a skeleton application with the CLI.</p>\n<h2 id=\"creatingtheapplicationwithvuecli\">Creating the Application with Vue CLI</h2>\n<p>The Vue command-line interface allows us to create and configure new Vue projects from scratch. That is, instead of adding packages and configurations ourselves, the CLI does that for us.</p>\n<p>Let&#8217;s install the Vue command-line interface.</p>\n<h3 id=\"installingvuecli\">Installing Vue CLI</h3>\n<p>The tutorial assumes you don’t have Vue CLI installed on your machine. To install it, run the following command:</p>\n<pre><code class=\"bash language-bash\">npm i -g @vue/cli\r\n</code></pre>\n<p>Alternatively, you can install it using Yarn as follows:</p>\n<pre><code class=\"bash language-bash\">yarn global add @vue/cli\r\n</code></pre>\n<p>Once you&#8217;ve run any of the above commands, the installation starts, and it will take a few seconds or minutes. Once the installation finishes, you can create projects with the following command:</p>\n<pre><code class=\"bash language-bash\">vue create your-project-name\r\n</code></pre>\n<h3 id=\"thevuecreatecommand\">The <code>vue create</code> command</h3>\n<p>Once we&#8217;ve run the <code>vue create</code> command, we&#8217;ll be prompted with a handful of questions. The purpose of these questions is to configure the project to suit our needs.</p>\n<p><!-- ![Figure 1: the Vue CLI welcome screen](vue-cli-welcome.png) --></p>\n[caption id=\"attachment_185481\" align=\"alignnone\" width=\"1060\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913322vue-cli-welcome.png\" alt=\"Figure 1: The Vue CLI welcome screen\" width=\"1060\" height=\"358\" class=\"size-full wp-image-185481\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913322vue-cli-welcome.png 1060w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913322vue-cli-welcome-300x101.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913322vue-cli-welcome-1024x346.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913322vue-cli-welcome-768x259.png 768w\" sizes=\"(max-width: 1060px) 100vw, 1060px\" /> Figure 1: The Vue CLI welcome screen[/caption]\n<p>Figure 1 above shows the welcome screen we get when we run <code>vue create your-project-name</code>. We then have to choose between three different options:</p>\n<ol>\n<li>create a default Vue 2 project</li>\n<li>create a default Vue 3 project</li>\n<li>manually select features</li>\n</ol>\n<p>The first two options will install a default Vue project for us. However, we don&#8217;t want a default project. For this tutorial, we&#8217;ll manually select the features for our project. Once we choose the third option, we&#8217;ll get a series of questions.</p>\n<p><!-- ![Figure 2: configuring a Vue project with Vue CLI](configure.png) --></p>\n[caption id=\"attachment_185484\" align=\"alignnone\" width=\"1060\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913493configure.png\" alt=\"Figure 2: Configuring a Vue project with Vue CLI\" width=\"1060\" height=\"611\" class=\"size-full wp-image-185484\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913493configure.png 1060w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913493configure-300x173.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913493configure-1024x590.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913493configure-768x443.png 768w\" sizes=\"(max-width: 1060px) 100vw, 1060px\" /> Figure 2: Configuring a Vue project with Vue CLI[/caption]\n<p>Figure 2 above illustrates what we see when we choose the third option — <em>manually select features</em>. We can pick what features we need in our project, such as:</p>\n<ul>\n<li>adding unit and E2E testing to our project</li>\n<li>choosing a linter/formatter for the project</li>\n<li>adding options such as Vuex, TypeScript, Router and so on </li>\n</ul>\n<p>After that, we&#8217;re prompted to choose a Vue version for our project. For this tutorial, I recommend choosing Vue 3, as pictured below.</p>\n<p><!-- ![Figure 3: choosing a Vue version in Vue CLI](version.png) --></p>\n[caption id=\"attachment_185486\" align=\"alignnone\" width=\"1060\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913642version.png\" alt=\"Figure 3: choosing a Vue version in Vue CLI\" width=\"1060\" height=\"611\" class=\"size-full wp-image-185486\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913642version.png 1060w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913642version-300x173.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913642version-1024x590.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913642version-768x443.png 768w\" sizes=\"(max-width: 1060px) 100vw, 1060px\" /> Figure 3: Choosing a Vue version in Vue CLI[/caption]\n<p>Lastly, we&#8217;ll need to answer more questions based on the features we select in the first step, as shown earlier in Figure 2.</p>\n<p>Before going further, I want to make sure we&#8217;re on the same page:</p>\n<ol>\n<li>Run <code>vue create vue3-fundamentals</code> in your terminal.</li>\n<li>Choose “manually select features”.</li>\n<li>Untick all features except <strong>Babel</strong>. For this tutorial, we don&#8217;t need any extra features.</li>\n<li>Choose Vue version 3.</li>\n<li>Choose “In dedicated config files” when it asks you where to place the config for Babel, and so on.</li>\n<li>Don’t save the preset for future projects.</li>\n</ol>\n<p>After following the above steps, the project structure should look like the one in Figure 4 below.</p>\n<p><!-- ![Figure 4: Our Vue 3 project structure](structure.png) --></p>\n[caption id=\"attachment_185488\" align=\"alignnone\" width=\"1720\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913719structure.png\" alt=\"Figure 4: Our Vue 3 project structure\" width=\"1720\" height=\"1400\" class=\"size-full wp-image-185488\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913719structure.png 1720w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913719structure-300x244.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913719structure-1024x833.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913719structure-768x625.png 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913719structure-1536x1250.png 1536w\" sizes=\"(max-width: 1720px) 100vw, 1720px\" /> Figure 4: Our Vue 3 project structure[/caption]\n<p>That&#8217;s it with the project configuration! Now we&#8217;re ready to work on it and learn Vue!</p>\n<p><em>If you want to see a more comprehensive article about the CLI, check this <a href=\"https://catalins.tech/get-started-with-vue-cli-and-ui\">Vue CLI article</a>.</em></p>\n<h2 id=\"preparingtheapplication\">Preparing the Application</h2>\n<p>There are some things we don&#8217;t need in the application. First of all, go to <code>src</code> &gt; <code>components</code> and delete the <code>HelloWorld.vue</code> component.</p>\n<p>Now go to the <code>App.vue</code> file and remove all the references of <code>HelloWorld</code> from the file. Also, remove the image with the Vue logo. Lastly, modify the <code>export default {}</code> code block.</p>\n<p>See the complete code of <code>App.vue</code> below:</p>\n<pre><code class=\"markup language-markup\">&lt;template&gt;\r\n  &lt;h1&gt;{{ title }}&lt;/h1&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: 'My To Do App'\r\n    }\r\n  }\r\n}\r\n&lt;/script&gt;\r\n</code></pre>\n<p>Set up a <code>title</code> property and display it in the template.</p>\n<h2 id=\"listrendering\">List Rendering</h2>\n<p>The first concept we&#8217;ll cover is how to render lists in a Vue application. However, before we can do that, we need a list.</p>\n<p>Open the file <code>App.vue</code> and add the following array:</p>\n<pre><code class=\"javascript language-javascript\">&lt;script&gt;\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: 'My To Do App',\r\n      tasks: [\r\n        { id: 1, name: 'Learn Vue JS', finished: false },\r\n        { id: 2, name: 'Build a Vue application', finished: false },\r\n        { id: 3, name: 'Write an article about Vue JS', finished: false }\r\n      ]\r\n    }\r\n  }\r\n}\r\n&lt;/script&gt;\r\n</code></pre>\n<p>In the above code snippet, we added an array of objects. Each object represents an individual task, and each task contains the following:</p>\n<ul>\n<li><strong>an ID</strong>: we can identify each task by its unique ID</li>\n<li><strong>a name</strong>: it describes what the task is about</li>\n<li><strong>finished field</strong>: it represents whether the person finished the task or not</li>\n</ul>\n<p>The next step is to loop over the array and render it on the page. In Vue, we can loop over lists with the <code>v-for</code> directive. The <code>v-for</code> directive has the form of <code>task in tasks</code>, where each <code>task</code> represents an individual item in the array, and the <code>tasks</code> represents the array.</p>\n<p>We can see the <code>v-for</code> directive in action in the code snippet below:</p>\n<pre><code class=\"markup language-markup\">&lt;ul&gt;\r\n    &lt;li v-for=\"task in tasks\" :key=\"task.id\"&gt;\r\n      {{task.id}}. {{ task.name }}\r\n    &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</code></pre>\n<p>We can render each <code>item</code> or <code>task</code> using the Mustache notation. We use the Mustache notation by using those double curly braces.</p>\n<p>At the moment, it only displays the ID and the name of the tasks. But we could also show whether it&#8217;s finished or not as follows:</p>\n<pre><code class=\"javascript language-javascript\">{{ task.id }}. {{ task.name }} - {{ task.finished}}\r\n</code></pre>\n<p>However, we&#8217;ll use that field for other purposes later in the tutorial. If we save the code and run the application, we should see something as follows:</p>\n<p><!-- ![Figure 5: list rendering in Vue with the v-for directive](list-rendering.png) --></p>\n[caption id=\"attachment_185490\" align=\"alignnone\" width=\"959\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913794list-rendering.png\" alt=\"Figure 5: list rendering in Vue with the v-for directive\" width=\"959\" height=\"776\" class=\"size-full wp-image-185490\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913794list-rendering.png 959w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913794list-rendering-300x243.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913794list-rendering-768x621.png 768w\" sizes=\"(max-width: 959px) 100vw, 959px\" /> Figure 5: List rendering in Vue with the v-for directive[/caption]\n<p>You can see that the tasks are rendered on the page, and each one has an ID and a name. </p>\n<h3 id=\"uniquekey\">Unique key</h3>\n<p>You may have noticed the following bit of code:</p>\n<pre><code class=\"javascript language-javascript\">:key=\"task.id\"\r\n</code></pre>\n<p>It&#8217;s recommended we use the <code>:key</code> attribute when we loop over lists. The reason is so that each DOM element has a unique key. Thus, Vue can track each node&#8217;s identity to reuse and reorder existing elements. As a result, it also improves the performance of the application.</p>\n<p>Usually, we use the item&#8217;s ID for the <code>:key</code> attribute, like in the above example.</p>\n<p><em>Check <a href=\"https://gist.github.com/SitePointEditors/e9b87fbac4fc134755b505b33b05ef57\">this gist</a> to see how the <code>App.vue</code> file should look up to this point.</em></p>\n<h2 id=\"conditionalrendering\">Conditional Rendering</h2>\n<p>There are occasions when we want to display something on the page based on a specific condition. Thus, we can use the <code>v-if</code> directive to render a piece of code based on a condition.</p>\n<p>The block of code is rendered only if the expression provided returns a truthy value. For instance, in the application we&#8217;re building in this tutorial, we might want a <strong>Delete task</strong> button to show after we finish a task. Thus, we can delete a task when we&#8217;re done with it.</p>\n<p>Let&#8217;s add the <strong>Delete task</strong> button. Go to the <code>App.vue</code> file and add the following code in the unordered list:</p>\n<pre><code class=\"markup language-markup\">&lt;ul&gt;\r\n    &lt;li v-for=\"task in tasks\" :key=\"task.id\"&gt;\r\n        {{ task.id }}. {{ task.name }}\r\n\r\n        &lt;div v-if=\"task.finished\"&gt;\r\n            &lt;button&gt;Delete task&lt;/button&gt;\r\n        &lt;/div&gt;\r\n    &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</code></pre>\n<p>You can see the new <code>div</code> with the <code>v-if</code> directive. Its purpose is to check if the task is finished. If the task is completed, it shows the delete button. If the task isn&#8217;t finished, the button is hidden.</p>\n<p>Go and change the <code>finished</code> field on any task from the <code>task</code> array to true. After that, refresh the application, and we should see the delete button.</p>\n<p>If you followed all the steps, this is what you should see:</p>\n<p><!-- ![Figure 6: Vue conditional rendering](conditional.png) --></p>\n[caption id=\"attachment_185492\" align=\"alignnone\" width=\"973\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913866conditional.png\" alt=\"Figure 6: Vue conditional rendering\" width=\"973\" height=\"776\" class=\"size-full wp-image-185492\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913866conditional.png 973w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913866conditional-300x239.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913866conditional-768x613.png 768w\" sizes=\"(max-width: 973px) 100vw, 973px\" /> Figure 6: Vue conditional rendering[/caption]\n<p>The <code>v-if</code> directive is handy when we want to render something based on a condition.</p>\n<p>Before moving on, it&#8217;s important to note that we can use <code>v-else-if</code> and <code>v-else</code> too. For instance, we could have something similar to this:</p>\n<pre><code class=\"markup language-markup\">&lt;ul&gt;\r\n    &lt;li v-for=\"task in tasks\" :key=\"task.id\"&gt;\r\n        {{ task.id }}. {{ task.name }}\r\n\r\n        &lt;div v-if=\"task.finished\"&gt;\r\n            &lt;button&gt;Delete task&lt;/button&gt;\r\n        &lt;/div&gt;\r\n        &lt;div v-else-if=\"task.edit\"&gt;\r\n            &lt;button&gt;Edit task&lt;/button&gt;\r\n        &lt;/div&gt;\r\n        &lt;div v-else&gt;\r\n            &lt;p&gt;No button&lt;/&gt;\r\n        &lt;/div&gt;\r\n    &lt;/li&gt;\r\n&lt;/ul&gt;\r\n</code></pre>\n<p>You can see how powerful conditional rendering is. However, for this tutorial, we&#8217;re using only the <code>v-if</code>.</p>\n<p><em>Check <a href=\"https://gist.github.com/SitePointEditors/87d7e287ccc04cdaaad3fc1eefa576fd\">this gist</a> to see how the <code>App.vue</code> file should look up to this point.</em></p>\n<h2 id=\"handlinguserinput\">Handling User Input</h2>\n<p>The next step is to handle the user input. First of all, go to the <code>App.vue</code> file and add the following HTML code under the application title:</p>\n<pre><code class=\"markup language-markup\">&lt;h2&gt;Add a new task&lt;/h2&gt;\r\n\r\n&lt;div&gt;\r\n   &lt;input type=\"text\"\r\n     v-model=\"newTask\"\r\n     placeholder=\"Add a new task\"\r\n   &gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div v-if=\"newTask.length &gt; 0\"&gt;\r\n   &lt;h3&gt;New task preview&lt;/h3&gt;\r\n   &lt;p&gt;{{ newTask }}&lt;/p&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>In the above code snippet, we add a text input that allows users to add new tasks. Also, you&#8217;ll note the <code>v-model</code> directive. The <code>v-model</code> directive enables us to create two-way binding between the input field and the application state. (You can learn more about <code>v-model</code> in “<a href=\"https://www.sitepoint.com/vue-3-reactivity-system/\">Understanding the New Reactivity System in Vue 3</a>”.)</p>\n<p>Before we can try out the code, add the <code>newTask</code> field in the Vue instance as follows:</p>\n<pre><code class=\"javascript language-javascript\">return {\r\n      title: 'My To Do App',\r\n      newTask: '',\r\n      tasks: [\r\n        { id: 1, name: 'Learn Vue JS', finished: false },\r\n        { id: 2, name: 'Build a Vue application', finished: false },\r\n        { id: 3, name: 'Write an article about Vue JS', finished: false }\r\n      ]\r\n    }\r\n</code></pre>\n<p>If we run the application and type anything in the input field, we&#8217;ll see the text appearing under the input field.</p>\n<p><!-- ![Figure 7: Vue handling user input](user-input.png) --></p>\n[caption id=\"attachment_185494\" align=\"alignnone\" width=\"973\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/1621913938user-input.png\" alt=\"Figure 7: Vue handling user input\" width=\"973\" height=\"776\" class=\"size-full wp-image-185494\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913938user-input.png 973w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913938user-input-300x239.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621913938user-input-768x613.png 768w\" sizes=\"(max-width: 973px) 100vw, 973px\" /> Figure 7: Vue handling user input[/caption]\n<p>In the code above, we added <code>&lt;p&gt;{{ newTask }}&lt;/p&gt;</code> in the HTML code, which represents the &#8220;newTask&#8221; field. Thus, it gets updated and rendered on the page whenever we add anything in the input field. It appears under the input field.</p>\n<p><em>Check <a href=\"https://gist.github.com/SitePointEditors/cf25d043f07421262971413e37d7b46c\">this gist</a> to see how the <code>App.vue</code> file should look up to this point.</em></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/vue-3-beginner-guide/?utm_source=rss\">A Beginner’s Guide to Vue 3</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/vue-3-beginner-guide/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=185478",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Catalin Pit"
        ],
        "pubDate": [
            "Tue, 25 May 2021 16:00:22 GMT"
        ],
        "metaDesc": [
            "New to Vue or Vue version 3? Learn the fundamental building blocks of Vue by building a Vue application with Vue CLI."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Issue #461"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/bmpTqum7ZC0/"
        ],
        "pubDate": [
            "Tue, 25 May 2021 21:55:33 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-461/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to control macro and micro layouts in a new era of responsive web design, how to use Container Queries in Web Components, how container queries work, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/new-responsive/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">The New Responsive: Web Design in a Component-Driven World</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://web.dev/new-responsive/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/the-new-responsive-web-design-in-a-component-driven-world.png\" alt=\"The New Responsive: Web Design in a Component-Driven World\" /></a>\n\t\t\t\t\t\t<p>Una Kravets offers some advice on controlling macro and micro layouts in a new era of responsive web design.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/new-responsive/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://mxb.dev/blog/container-queries-web-components/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Container Queries in Web Components</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://mxb.dev/blog/container-queries-web-components/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/container-queries-web-components.png\" alt=\"Container Queries in Web Components\" /></a>\n\t\t\t\t\t\t<p>Max Böck created a book store concept to demonstrate a practical use-case for container queries.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://mxb.dev/blog/container-queries-web-components/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/free-chat-and-activity-feed-apis-2505\">Free Chat & Activity Feed APIs for Qualifying Teams</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/free-chat-and-activity-feed-apis-2505\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/free-chat-and-activity-feed-apis.jpg\" alt=\"Free Chat & Activity Feed APIs for Qualifying Teams\" /></a>\n\t\t\t\t\t\t<p>Unlock enterprise-grade features, functions, and UI components completely free for your startup or side project. <img src='https://www.vpdae.com/open/2128.gif?opens=1' width='1' height='1'></p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/free-chat-and-activity-feed-apis-2505\">Try it today!</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/can-we-create-a-resize-hack-with-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Can We Create a “Resize Hack” With Container Queries?</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Jhey Tompkins explains how container queries work by giving a fresh take on the classic CSS meme featuring Peter Griffin fussing with window blinds.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/can-we-create-a-resize-hack-with-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/learn/css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Learn CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>An evergreen CSS course and reference to level up your web styling expertise.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/learn/css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.quirksmode.org/blog/archives/2021/05/aspectratio.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">aspect-ratio</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Peter-Paul Koch looks at the new <code>aspect-ratio</code> declaration and some of its quirks.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.quirksmode.org/blog/archives/2021/05/aspectratio.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.sarasoueidan.com/blog/tips-for-reader-modes/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Design for Reading: Tips for Optimizing Content for Reader Modes and Reading Apps</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Sara Soueidan offers some tips on optimizing content for reader modes and reading apps.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.sarasoueidan.com/blog/tips-for-reader-modes/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/making-disabled-buttons-more-inclusive/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Making Disabled Buttons More Inclusive</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Sandrina Pereira shares some advice on making disabled buttons accessible.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/making-disabled-buttons-more-inclusive/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/esnextnews\">ES.next News - The latest in JavaScript and <nobr>cross-platform</nobr> tools.</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/esnextnews\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/es-next-news.png\" alt=\"ES.next News - The latest in JavaScript and <nobr>cross-platform</nobr> tools.\" /></a>\n\t\t\t\t\t\t<p>Get the latest in JavaScript and <nobr>cross-platform</nobr> tools once a week in your Inbox. Curated by Dr. Axel Rauschmayer and Johannes Weber.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/esnextnews\">Subscribe Now</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://csshell.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Hell</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Funny, sarcastic, educational, and very human collection of code we all dread, why, and how to fix it.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://csshell.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://domevents.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Explore DOM Events</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>An online visualizer that explains how exactly the DOM Event system works.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://domevents.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://kentcdodds.com/blog/don-t-solve-problems-eliminate-them?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Don't Solve Problems, Eliminate Them</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://kentcdodds.com/blog/don-t-solve-problems-eliminate-them?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/dont-solve-problems-eliminate-them.jpg\" alt=\"Don't Solve Problems, Eliminate Them\" /></a>\n\t\t\t\t\t\t<p>Kent C. Dodds explains how eliminating problems can drastically simplify your codebases and life.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://kentcdodds.com/blog/don-t-solve-problems-eliminate-them?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/bmpTqum7ZC0\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-461/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "React Fragments: What Every React Developer Should Know"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/react-fragments-introduction/?utm_source=rss\"\n              title=\"React Fragments: What Every React Developer Should Know\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624931640react-fragments.png\"\n        alt=\"React Fragments: What Every React Developer Should Know\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624931640react-fragments-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624931640react-fragments.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a href=\"https://reactjs.org/docs/fragments.html\">React Fragments</a> were introduced in November 2017 with <a href=\"https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html\">React 16.2.0</a>. Although they&#8217;ve been around for a while, many React developers avoid using them or employ them without knowing what they are. React Fragments are an entry-level but key feature, and every React developer should master them, regardless of their skill level. Also, considering how long they&#8217;ve been part of React, they can no longer be ignored.</strong> </p>\n<p>So, let’s see everything you need to master React Fragments, by diving into the Why, the What, the How, and the When.</p>\n<h2 id=\"whyreactfragmentsexist\">Why React Fragments Exist</h2>\n<p>As stated in <a href=\"https://reactjs.org/docs/fragments.html#motivation\">the official React documentation</a>, returning more than one HTML element is a commonly desired behavior for React components. To achieve this, you must wrap all these elements with an HTML tag. This is because React requires that components return only one HTML element. The easiest solution would be to use a wrapper <code>&lt;div&gt;</code>. From a logical point of view, this extra <code>&lt;div&gt;</code> can usually be considered irrelevant, but it does have consequences. First, by using this approach consistently, you&#8217;re making your DOM more nested, and consequently slower to be rendered. Second, such an approach can lead to invalid HTML, as you&#8217;re going to see.</p>\n<p>For example, let’s say you have a <code>Table</code> component which renders an HTML table, whose columns are rendered with another component called <code>Columns</code>. Here&#8217;s the code you might use for this:</p>\n<pre><code class=\"javascript language-javascript\">function Table() {\r\n  return (\r\n    &lt;table&gt;\r\n      &lt;tr&gt;\r\n        &lt;Columns /&gt;\r\n      &lt;/tr&gt;\r\n    &lt;/table&gt;\r\n  );\r\n}\r\n\r\nfunction Columns() {\r\n  return (\r\n    // the wrapper div used to return two &lt;td&gt; tags\r\n    &lt;div&gt;\r\n      &lt;td&gt;Hello&lt;/td&gt;\r\n      &lt;td&gt;World&lt;/td&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n</code></pre>\n<p>This would result in the following HTML to be rendered, which is invalid, because a <code>&lt;div&gt;</code> can&#8217;t appear as a child of <code>&lt;tr&gt;</code>.</p>\n<pre><code class=\"markup language-markup\">&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;div&gt;\r\n      &lt;td&gt;Hello&lt;/td&gt;\r\n      &lt;td&gt;World&lt;/td&gt;\r\n    &lt;/div&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;\r\n</code></pre>\n<p>React Fragments were introduced precisely to solve this problem.</p>\n<h2 id=\"whatreactfragmentsare\">What React Fragments Are</h2>\n<p>React Fragments involve a special syntax that lets you group a list of HTML elements without adding extra nodes to the DOM. In other words, React Fragments enable you to group multiple child components without introducing any unnecessary markup in the rendered HTML, offering a solution to the problem addressed before, and many others.</p>\n<h2 id=\"howtousethem\">How To Use Them</h2>\n<p>You can use React Fragments by wrapping your child elements to be returned by your component with a <code>&lt;React.Fragments&gt;</code> tag. Returning to the example above, the <code>Columns</code> component would be written as follows:</p>\n<pre><code class=\"javascript language-javascript\">function Columns() {\r\n  return (\r\n    &lt;React.Fragment&gt;\r\n      &lt;td&gt;Hello&lt;/td&gt;\r\n      &lt;td&gt;World&lt;/td&gt;\r\n    &lt;/React.Fragment&gt;\r\n  );\r\n}\r\n</code></pre>\n<p>This would cause the <code>Table</code> component to be translated into the following HTML:</p>\n<pre><code class=\"markup language-markup\">&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Hello&lt;/td&gt;\r\n    &lt;td&gt;World&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;\r\n</code></pre>\n<p>As you can see, there&#8217;s no wrapping tag in the rendered HTML. Unlike what happened before, this won&#8217;t result in invalid HTML.</p>\n<p>React Fragments can also be employed with a short syntax, which looks like an empty tag: </p>\n<pre><code class=\"javascript language-javascript\">function Columns() {\r\n  return (\r\n    // using &lt;&gt; is just like using &lt;React.Fragment&gt;\r\n    &lt;&gt;\r\n      &lt;td&gt;Hello&lt;/td&gt;\r\n      &lt;td&gt;World&lt;/td&gt;\r\n    &lt;/&gt;\r\n    // using &lt;/&gt; is just like using &lt;/React.Fragment&gt;\r\n  );\r\n}\r\n</code></pre>\n<p>This leads to the same result as the example above. So, keep in mind that the empty tag is a shorthand for <code>&lt;React.Fragment&gt;</code>.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/react-fragments-introduction/?utm_source=rss\">React Fragments: What Every React Developer Should Know</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/react-fragments-introduction/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=194631",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Antonello Zanini"
        ],
        "pubDate": [
            "Mon, 28 Jun 2021 16:00:18 GMT"
        ],
        "metaDesc": [
            "Every React developer should know about React Fragments. Learn what React Fragments are, why they're important, how to use them, and when!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Change Your Boss’s Mind Without Losing Your Job"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/change-boss-mind/?utm_source=rss\"\n              title=\"How to Change Your Boss’s Mind Without Losing Your Job\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614583706boss-change-mind.jpg\"\n        alt=\"How to Change Your Boss's Mind Without Losing Your Job\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614583706boss-change-mind-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614583706boss-change-mind-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614583706boss-change-mind-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614583706boss-change-mind.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Your boss is about to do something stupid.</strong></p>\n<p>You know the routine. They make a terrible decision that ends up costing the company money. When they realize they&#8217;ve dug themselves into a deep hole, they&#8217;re upset, blaming you or your co-workers.</p>\n<p><em>&#8220;Why didn&#8217;t anyone tell me?&#8221;</em></p>\n<p>It&#8217;s a catch-22 many developers find themselves in on a routine basis. Their boss makes an unrealistic request then reacts negatively when you&#8217;re unable to deliver the results they want.</p>\n<p>What&#8217;s wrong with them?</p>\n<h2 id=\"yourbossneedsyoutochangetheirmind\">Your boss needs you to change their mind</h2>\n<p>Good decision-making is incredibly difficult.</p>\n<p>It doesn&#8217;t matter what your boss has on their plate, their job is a difficult one. At any given time, they&#8217;re spinning and balancing multiple plates:</p>\n<ul>\n<li>They&#8217;re working with legal to address contract or project-level disputes.</li>\n<li>They need HR&#8217;s help to deal with the developer on your team that&#8217;s lazy and killing morale.</li>\n<li>Directors and executives are hammering, demanding that they produce results <em>they know</em> are impossible.</li>\n<li>They&#8217;ve been pushed into a management role they&#8217;re unqualified for and disinterested in.</li>\n<li>The majority of their developers are fighting each other for the same opportunities.</li>\n<li>You don&#8217;t know it, but their budget was slashed by half; executives are demanding more work for less.</li>\n</ul>\n<p>There&#8217;s a very good chance your manager is discouraged, overwhelmed, and backed into a corner. Many managers don&#8217;t have the knowledge, resources, or support they need to do their jobs well.</p>\n<p><strong>This isn&#8217;t my problem.</strong></p>\n<p>Ah, but it is. Your boss is looking for an employee who&#8217;s willing to help carry their burdens for them.</p>\n<p>So what?</p>\n<p>When you gain the ability to change your boss&#8217;s mind, you also provide your manager, employer, and yourself with the ability to:</p>\n<ul>\n<li>avoid serious problems that eventually lead to layoffs or firings (such as projects that are inefficient, overbudget, bloated, or filled with poor quality code)</li>\n<li>generate more revenue for your company (important when you&#8217;re looking for a raise)</li>\n<li>find cost-effective, more efficient ways to solve complex problems</li>\n<li>properly evaluate opportunities as they appear — meaning you&#8217;re aware of upcoming opportunities <em>before</em> the rest of your co-workers or teammates</li>\n<li>create a work environment where you&#8217;re surrounded by allies who are willing to go out of their way to help you.</li>\n</ul>\n<p>But it&#8217;s a risk.</p>\n<p>If you go out of your way to help your boss or manager, and you do it wrong, it could blow up in your face. Besides, you&#8217;re just a developer. What are you supposed to do to help your manager?</p>\n<h2 id=\"whygotothetroubleofchangingyourbosssmind\">Why go to the trouble of changing your boss&#8217;s mind?</h2>\n<p>This is how elite developers are made.</p>\n<p>When I use the term &#8220;elite&#8221;, I&#8217;m referring to the top one to ten percent of developers in a given industry or profession. These developers receive a string of benefits other developers don&#8217;t:</p>\n<ul>\n<li>they&#8217;re paid <em>far more</em> than most developers</li>\n<li>they win coveted jobs and promotions in the face of <em>intense</em> competition</li>\n<li>customers and employers wait/fight for the chance to work with them</li>\n<li>they win promotions <em>before</em> they&#8217;re publicly available</li>\n<li>they receive special perks and rewards most developers are unable to get</li>\n<li>co-workers, publishers, and thought leaders seek out their knowledge, attracting more rewards</li>\n<li>they can wield a greater degree of control</li>\n<li>customers and employers trust them at the <em>start</em> of the relationship</li>\n<li>customers and employers are willing to pay for their equipment, growth, and development</li>\n</ul>\n<p>So what do these elite developers know that most developers don&#8217;t?</p>\n<p><strong>It&#8217;s <em>not</em> about the work.</strong></p>\n<p>What does that mean? Elite developers are focused on <strong>very</strong> different things:</p>\n<ol>\n<li>The <strong>value</strong> they provide</li>\n<li>The <em>people</em> they serve</li>\n</ol>\n<p>Most developers focus on the work, getting better at their craft, increasing their knowledge, producing higher quality work.</p>\n<p>Elite developers do this too.</p>\n<p>But they understand that being great (not just good) at your job is <em>an entry-level requirement</em>. This is the part most developers miss; they naturally assume that being a great developer is all it takes to improve your career prospects.</p>\n<p><strong>It&#8217;s not enough.</strong></p>\n<p>Elite developers use the value formula to create huge amounts of benefits for their managers.</p>\n<p>Do you know it?</p>\n<p>It&#8217;s a formula created by Peter Thiel, founder of PayPal. This is the formula that elite, top performers use in every industry:</p>\n<ol>\n<li>Create <strong>X</strong> dollars of value.</li>\n<li>Capture <em><strong>Y</strong></em> percent of <strong>X</strong>.</li>\n</ol>\n<p>Can you see what&#8217;s happening?</p>\n<p>The more value these developers create for their manager and their employers, the more value they can earn and extract for themselves.</p>\n<p><strong>What kind of value can developers demonstrate?</strong></p>\n<p>You can:</p>\n<ul>\n<li>Take the initiative by solving recurring or longstanding team problems in your free time.</li>\n<li>Demonstrate the negative impact live code or development processes have on the organization.</li>\n<li>Take on more than is necessary, working to earn their trust and become an indispensable employee over time.</li>\n<li>Consistently exceed key performance indicators and metrics in your organization (such as <a href=\"https://en.wikipedia.org/wiki/Technical_debt\">technical debt</a>, lines of code, ability to ship code, meeting deadlines, etc.). This will vary by organization.</li>\n<li>Create tools, documentation, resources, or libraries that reduce development time across the organization.</li>\n<li>Show clients how your code solves the Five Q&#8217;s of strategy.</li>\n</ul>\n<p>Not detailed enough?</p>\n<p>Think of it this way. There are two kinds of results your manager wants from you: conventional and transformative results. Here&#8217;s a quick recap of my <a href=\"https://www.sitepoint.com/5-simple-strategies-to-double-your-salary/\">previous post</a>.</p>\n<ol>\n<li><strong>Conventional results:</strong> being great at your job, going above and beyond, and performing well in general. If you&#8217;re a JavaScript developer, your code is pristine, and you&#8217;re helpful, productive, etc.</li>\n<li><strong>Transformative results:</strong> these are results that make things better for your company, the industry, or customers as a whole. It can be as simple as shared knowledge or as detailed as software that transforms the industry.</li>\n</ol>\n<p>Here&#8217;s why these results matter. Conventional results build trust. It&#8217;s easy for your boss to take a risk on you, to spend more on you when they trust you.</p>\n<p>What&#8217;s in it for you? Quite a lot, actually.</p>\n<p>If you can change your boss&#8217;s mind reliably and in a trustworthy fashion, you can write your own ticket (career-wise). These aren&#8217;t lofty or unrealistic claims. Elite developers achieve results like these regularly.</p>\n<h2 id=\"whatyoullneedtochangeyourbosssmind\">What you&#8217;ll need to change your boss&#8217;s mind</h2>\n<p>You&#8217;ll need two things: a good working relationship and a framework.</p>\n<p>When it comes to changing your boss&#8217;s mind, you&#8217;ll need to know the what, when, and how. Here&#8217;s a concise breakdown of each.</p>\n<p>Change your boss&#8217;s mind when:</p>\n<ul>\n<li>their decision hurts you, the company, or themself</li>\n<li>they&#8217;re about to make a decision that will cost the company money, slow a project down, or increase development time unnecessarily</li>\n<li>their decision will make customers or clients unhappy and far more likely to take their business elsewhere</li>\n<li>their decision will make their colleagues and co-workers unhappy or turn others against them</li>\n</ul>\n<p>Do you see the pattern?</p>\n<p><strong>Don&#8217;t attempt to change their mind if:</strong></p>\n<ul>\n<li>the change benefits you exclusively or primarily</li>\n<li>it makes things worse for your boss (obviously)</li>\n<li>it goes against instructions from those above your boss</li>\n<li>the change damages or destroys relationships between managers, co-workers, or customers</li>\n</ul>\n<p><strong>Do attempt to change their mind if:</strong></p>\n<ul>\n<li>you&#8217;re reasonably confident you can improve the situation for your boss, co-workers, team, or the organization</li>\n<li>your boss is missing crucial information that&#8217;s necessary or essential</li>\n<li>they&#8217;re asking you for feedback or have a <em>proven</em> open-door policy that solicits feedback</li>\n<li>you&#8217;ve developed the trust you need to act on your co-workers&#8217; behalf</li>\n</ul>\n<p>See the difference?</p>\n<p>This tactic — changing your boss&#8217;s mind — is powerful. It&#8217;s a career-ender if this strategy is misused or abused. Following the framework listed above insulates you against any blowback that would cost you your job. At this point, the most obvious question then is, how?</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/change-boss-mind/?utm_source=rss\">How to Change Your Boss’s Mind Without Losing Your Job</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/change-boss-mind/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181504",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Andrew McDermott"
        ],
        "pubDate": [
            "Tue, 02 Mar 2021 15:15:18 GMT"
        ],
        "metaDesc": [
            "Is your boss making bad decisions? Are you walking on eggshells? Learn some practical steps to help your boss make better decisions without losing your job!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Cancel Pending API Requests to Show Correct Data"
        ],
        "link": [
            "https://css-tricks.com/how-to-cancel-pending-api-requests-to-show-correct-data/"
        ],
        "comments": [
            "https://css-tricks.com/how-to-cancel-pending-api-requests-to-show-correct-data/#comments"
        ],
        "dc:creator": [
            "Georgi Nikoloff"
        ],
        "pubDate": [
            "Fri, 25 Jun 2021 14:33:33 +0000"
        ],
        "category": [
            "Article",
            "AbortController",
            "api",
            "fetch"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=342911",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I recently had to create a widget in React that fetches data from multiple API endpoints. As the user clicks around, new data is fetched and marshalled into the UI. But it caused some problems.</p>\n<p>One problem quickly became evident: &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-cancel-pending-api-requests-to-show-correct-data/\">How to Cancel Pending API Requests to Show Correct Data</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I recently had to create a widget in React that fetches data from multiple API endpoints. As the user clicks around, new data is fetched and marshalled into the UI. But it caused some problems.</p>\n\n\n\n<span id=\"more-342911\"></span>\n\n\n\n<p>One problem quickly became evident: if the user clicked around fast enough, as previous network requests got resolved, the UI was updated with incorrect, outdated data for a brief period of time.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls poster=\"https://css-tricks.com/wp-content/uploads/2021/06/steam-api-deals.png\" src=\"https://css-tricks.com/wp-content/uploads/2021/06/pending-networks-problem.mp4\"></video></figure>\n\n\n\n<p>We can <a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\">debounce</a> our UI interactions, but that fundamentally does not solve our problem. Outdated network fetches will resolve and update our UI with wrong data up until the final network request finishes and updates our UI with the <em>final</em> correct state. The problem becomes more evident on slower connections. Furthermore, we’re left with useless networks requests that waste the user’s data.</p>\n\n\n\n<p>Here is an example I built to illustrate the problem. It grabs game deals from Steam via the cool <a href=\"https://www.cheapshark.com/\">Cheap Shark API</a> using the modern <code>fetch()</code> method. Try rapidly updating the price limit and you will see how the UI flashes with wrong data until it finally settles.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_RwpJaXE\" src=\"//codepen.io/anon/embed/RwpJaXE?height=550&amp;theme-id=1&amp;slug-hash=RwpJaXE&amp;default-tab=result\" height=\"550\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed RwpJaXE\" title=\"CodePen Embed RwpJaXE\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<h3 id=\"h-the-solution\">The solution</h3>\n\n\n\n<p>Turns out there is a way to abort pending DOM asynchronous requests using an <code>AbortController</code>. You can use it to cancel not only HTTP requests, but <a href=\"https://css-tricks.com/using-abortcontroller-as-an-alternative-for-removing-event-listeners/\">event listeners as well</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-large\"><p>The <strong><code>AbortController</code> </strong>interface represents a controller object that allows you to abort one or more Web requests as and when desired.</p><cite>—<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortController\">Mozilla Developer Network</a></cite></blockquote>\n\n\n\n<p>The <code>AbortController</code> API is simple: it exposes an <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\">AbortSignal</a></code> that we insert into our <code>fetch()</code> calls, like so:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const abortController = new AbortController()\nconst signal = abortController.signal\nfetch(url, { signal })</code></pre>\n\n\n\n<p>From here on, we can call <code>abortController.abort()</code> to make sure our pending fetch is aborted.</p>\n\n\n\n<p>Let’s rewrite our example to make sure we are canceling any pending fetches and marshalling only the latest data received from the API into our app:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_yLMEzvy\" src=\"//codepen.io/anon/embed/yLMEzvy?height=450&amp;theme-id=1&amp;slug-hash=yLMEzvy&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed yLMEzvy\" title=\"CodePen Embed yLMEzvy\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The code is mostly the same with few key distinctions:</p>\n\n\n\n<ol><li>It creates a new cached variable, <code>abortController</code>, in a <code>useRef</code> in the <code>&lt;App /&gt;</code> component.</li><li>For each new fetch, it initializes that fetch with a new <code>AbortController</code> and obtains its corresponding <code>AbortSignal</code>.</li><li>It passes the obtained <code>AbortSignal</code> to the <code>fetch()</code> call.</li><li>It aborts itself on the next fetch.</li></ol>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const App = () => {\n // Same as before, local variable and state declaration\n // ...\n\n // Create a new cached variable abortController in a useRef() hook\n const abortController = React.useRef()\n\n React.useEffect(() => {\n  // If there is a pending fetch request with associated AbortController, abort\n  if (abortController.current) {\n    abortController.abort()\n  }\n  // Assign a new AbortController for the latest fetch to our useRef variable\n  abortController.current = new AbortController()\n  const { signal } = abortController.current\n\n  // Same as before\n  fetch(url, { signal }).then(res => {\n    // Rest of our fetching logic, same as before\n  })\n }, [\n  abortController,\n  sortByString,\n  upperPrice,\n  lowerPrice,\n ])\n}</code></pre>\n\n\n\n<h3 id=\"h-conclusion\">Conclusion</h3>\n\n\n\n<p>That’s it! We now have the best of both worlds: we debounce our UI interactions <strong>and</strong> we manually cancel outdated pending network fetches. This way, we are sure that our UI is updated once and only with the <em>latest</em> data from our API.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-to-cancel-pending-api-requests-to-show-correct-data/\">How to Cancel Pending API Requests to Show Correct Data</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/how-to-cancel-pending-api-requests-to-show-correct-data/feed/"
        ],
        "slash:comments": [
            "7"
        ],
        "enclosure": [
            {
                "$": {
                    "url": "https://css-tricks.com/wp-content/uploads/2021/06/steam-api-deals.png,src:https://css-tricks.com/wp-content/uploads/2021/06/pending-networks-problem.mp4",
                    "length": "0",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://css-tricks.com/wp-content/uploads/2021/06/pending-networks-problem.mp4",
                    "length": "3397902",
                    "type": "video/mp4"
                }
            }
        ],
        "post-id": [
            {
                "_": "342911",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Thumbnail Hover Effect with SVG Filters"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Wed, 09 Jun 2021 12:07:04 +0000"
        ],
        "category": [
            "Playground",
            "distortion",
            "hover",
            "svg filter",
            "thumbnail"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=54938",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>A simple thumbnail hover effect with an SVG filter distortion.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\">Thumbnail Hover Effect with SVG Filters</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>Already a while back, we explored <a href=\"https://tympanus.net/codrops/2019/03/12/image-distortion-effects-with-svg-filters/\">applying SVG filters to images</a> that appear when hovering a menu item. Today I thought that it would be interesting to play with a similar effect on thumbnails. </p>\n\n\n\n<p>So the idea is to hover a small image and apply an <a href=\"https://tympanus.net/codrops/2019/01/15/svg-filters-101/\">SVG filter</a> to it while sliding in another element, a caption that covers the image. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover01.jpg\" alt=\"\" class=\"wp-image-54952\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover01.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover01-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover01-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>This kind of animation adds that little special extra to a design component like this. I really hope you like it and that it inspires you for new ideas. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover02.jpg\" alt=\"\" class=\"wp-image-54953\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover02.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover02-400x300.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover02-768x576.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>I&#8217;ve used a different filter on each one of the images, so you can get an idea on the different possibilities here.</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover-1.mp4\"></video></figure>\n\n\n\n<p><strong>Please download it and use it as you wish, and thanks for stopping by! </strong></p>\n\n\n\n<p>Let me know what you think of it <a href=\"https://twitter.com/crnacura\">@crnacura</a> or <a href=\"https://twitter.com/codrops\">@codrops</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/09/thumbnail-hover-effect-with-svg-filters/\">Thumbnail Hover Effect with SVG Filters</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "enclosure": [
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/SVGThumbHover-1.mp4",
                    "length": "556103",
                    "type": "video/mp4"
                }
            }
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "Understanding the New Reactivity System in Vue 3"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/vue-3-reactivity-system/?utm_source=rss\"\n              title=\"Understanding the New Reactivity System in Vue 3\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618992345vue-3-reactivity.png\"\n        alt=\"Understanding the New Reactivity System in Vue 3\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618992345vue-3-reactivity-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618992345vue-3-reactivity.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Reactivity systems are one of the key parts of modern front-end frameworks. They’re the magic wand which makes apps highly interactive, dynamic, and responsive. Understanding what a reactivity system is and how it can be applied in practice is a crucial skill for every web developer.</strong></p>\n<p>A reactivity system is a mechanism which <em>automatically</em> keeps in sync a data source (model) with a data representation (view) layer. Every time the model changes, the view is re-rendered to reflect the changes. </p>\n<p>Let&#8217;s take <a href=\"https://v3.vuejs.org/examples/markdown.html\">a simple Markdown editor</a> as an example. It usually has two panes: one for writing the Markdown code (which modifies the underlying model), and one for previewing the compiled HTML (which shows the updated view). When you write something in the writing pane, it&#8217;s immediately and automatically previewed in the previewing pane. Of course, this is just a simple example. Often things are far more complex. </p>\n<p>In many cases, the data we want to display depends on some other data. In such a scenario, the dependencies are tracked and the data is updated accordingly. For example, let&#8217;s say we have a <code>fullName</code> property, which depends on <code>firstName</code> and <code>lastName</code> properties. When any of its dependencies are modified, the <code>fullName</code> property is automatically re-evaluated and the result is displayed in the view.</p>\n<p>Now that we&#8217;ve established what reactivity is, it&#8217;s time to learn how the new Vue 3 reactivity works, and how we can use it in practice. But before we do this, we&#8217;ll take a quick look at the old Vue 2 reactivity and its caveats.</p>\n<h2 id=\"abriefexplorationofvue2reactivity\">A Brief Exploration of Vue 2 Reactivity</h2>\n<p>Reactivity in Vue 2 is more or less &#8220;hidden&#8221;. Whatever we put in the <code>data</code> object, Vue makes it reactive implicitly. On the one hand, this makes the developer&#8217;s job easier, but on the other hand it leads to less flexibility.</p>\n<p>Behind the scenes, Vue 2 uses the ES5 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a> to convert all of the <code>data</code> object&#8217;s properties into <em>getters</em> and <em>setters</em>. For each component instance, Vue creates a dependencies watcher instance. Any properties collected/tracked as dependencies during the component&#8217;s render are recorded by the watcher. Later on, when a dependency&#8217;s setter is triggered, the watcher is notified and the component re-renders and updates the view. This is basically how all the magic works. Unfortunately, there are some caveats.</p>\n<h3 id=\"changedetectioncaveats\">Change Detection Caveats</h3>\n<p>Because of the limitations of <code>Object.defineProperty()</code>, there are some data changes that Vue can&#8217;t detect. These include:</p>\n<ul>\n<li>adding/removing a property to/from an object (such as <code>obj.newKey = value</code>)</li>\n<li>setting array items by index (such as <code>arr[index] = newValue</code>)</li>\n<li>modifying the length of an array (such as <code>arr.length = newLength</code>)</li>\n</ul>\n<p>Fortunately, to deal with these limitations Vue provides us with the <a href=\"https://vuejs.org/v2/api/#Vue-set\">Vue.set</a> API method, which adds a property to a reactive object, ensuring the new property is also reactive and thus triggers view updates. </p>\n<p>Let&#8217;s explore the above cases in the following example:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;h1&gt;Hello! My name is {{ person.name }}. I'm {{ person.age }} years old.&lt;/h1&gt;\r\n  &lt;button @click=\"addAgeProperty\"&gt;Add \"age\" property&lt;/button&gt;\r\n  &lt;p&gt;Here are my favorite activities:&lt;/p&gt;\r\n  &lt;ul&gt;\r\n    &lt;li v-for=\"item, index in activities\" :key=\"index\"&gt;\r\n      {{ item }}\r\n      &lt;button @click=\"editActivity(index)\"&gt;Edit&lt;/button&gt;\r\n    &lt;/li&gt;\r\n  &lt;/ul&gt;\r\n  &lt;button @click=\"clearActivities\"&gt;Clear the activities list&lt;/button&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<pre><code class=\"javascript language-javascript\">const App = new Vue({\r\n  el: '#app',\r\n  data: {\r\n    person: {\r\n      name: \"David\"\r\n    },\r\n    activities: [\r\n      \"Reading books\",\r\n      \"Listening music\",\r\n      \"Watching TV\"\r\n    ]\r\n  },\r\n  methods: { \r\n    // 1. Add a new property to an object\r\n    addAgeProperty() {\r\n      this.person.age = 30\r\n    },\r\n    // 2. Setting an array item by index\r\n    editActivity(index) {\r\n      const newValue = prompt('Input a new value')\r\n      if (newValue) {\r\n        this.activities[index] = newValue\r\n      }\r\n    },\r\n    // 3. Modifying the length of the array\r\n    clearActivities() { \r\n      this.activities.length = 0 \r\n    }\r\n  }\r\n});\r\n</code></pre>\n<p>Here&#8217;s a <a href=\"https://codepen.io/SitePoint/pen/NWdOZGd?editors=1010\">CodePen example</a>.</p>\n<p>In the above example, we can see that none of the three methods is working. We can&#8217;t add a new property to the <code>person</code> object. We can&#8217;t edit an item from the <code>activities</code> array by using its index. And we can&#8217;t modify the length of the <code>activities</code> array. </p>\n<p>Of course, there are workarounds for these cases and we&#8217;ll explore them in the next example:</p>\n<pre><code class=\"javascript language-javascript\">const App = new Vue({\r\n  el: '#app',\r\n  data: {\r\n    person: {\r\n      name: \"David\"\r\n    },\r\n    activities: [\r\n      \"Reading books\",\r\n      \"Listening music\",\r\n      \"Watching TV\"\r\n    ]\r\n  },\r\n  methods: { \r\n    // 1. Adding a new property to the object\r\n    addAgeProperty() {\r\n      Vue.set(this.person, 'age', 30)\r\n    },\r\n    // 2. Setting an array item by index\r\n    editActivity(index) {\r\n      const newValue = prompt('Input a new value')\r\n      if (newValue) {\r\n        Vue.set(this.activities, index, newValue)\r\n      }\r\n    },\r\n    // 3. Modifying the length of the array\r\n    clearActivities() { \r\n      this.activities.splice(0)\r\n    }\r\n  }\r\n});\r\n</code></pre>\n<p>Here&#8217;s a <a href=\"https://codepen.io/SitePoint/pen/wvgYLMo?editors=1010\">CodePen example</a>.</p>\n<p>In this example, we use the <code>Vue.set</code> API method to add the new <code>age</code> property to the <code>person</code> object and to select/modify a particular item from the activities array. In the last case, we just use the JavaScript built-in <code>splice()</code> array method.</p>\n<p>As we can see, this works, but it&#8217;s a bit hacky and leads to inconsistency in the codebase. Fortunately, in Vue 3 this has been resolved. Let&#8217;s see the magic in action, in the following example:</p>\n<pre><code class=\"javascript language-javascript\">const App = {\r\n  data() {\r\n    return {\r\n      person: {\r\n        name: \"David\"\r\n      },\r\n      activities: [\r\n        \"Reading books\",\r\n        \"Listening music\",\r\n        \"Watching TV\"\r\n      ]\r\n    }\r\n  },\r\n  methods: { \r\n    // 1. Adding a new property to the object\r\n    addAgeProperty() {\r\n      this.person.age = 30\r\n    },\r\n    // 2. Setting an array item by index\r\n    editActivity(index) {\r\n      const newValue = prompt('Input a new value')\r\n      if (newValue) {\r\n        this.activities[index] = newValue\r\n      }\r\n    },\r\n    // 3. Modifying the length of the array\r\n    clearActivities() { \r\n      this.activities.length = 0 \r\n    }\r\n  }\r\n}\r\n\r\nVue.createApp(App).mount('#app')\r\n</code></pre>\n<p>Here&#8217;s a <a href=\"https://codepen.io/SitePoint/pen/WNRaqwj?editors=1010\">CodePen example</a>.</p>\n<p>In this example, which uses Vue 3, we revert to the built-in JavaScript functionality, used in the first example, and now all methods work like a charm.</p>\n<p>In Vue 2.6, a <a href=\"https://vuejs.org/v2/api/#Vue-observable\">Vue.observable()</a> API method was introduced. It exposes, to some extent, the reactivity system allowing developers to make objects reactive explicitly. Actually, this is the exact same method Vue uses internally to wrap the <code>data</code> object and is useful for creating a minimal, cross-component state store for simple scenarios. But despite its usefulness, this single method can&#8217;t match the power and flexibility of the full, feature-rich reactivity API which ships with Vue 3. And we&#8217;ll see why in the next sections.</p>\n<p><em>Note: because <code>Object.defineProperty()</code> is an ES5-only and un-shimmable feature, Vue 2 doesn’t support IE8 and below.</em></p>\n<h2 id=\"howvue3reactivityworks\">How Vue 3 Reactivity Works</h2>\n<p>The reactivity system in Vue 3 was completely rewritten in order to take advantage of the ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a> APIs. The new version exposes a feature-rich reactivity API which makes the system far more flexible and powerful than before. </p>\n<p>The Proxy API allows developers to intercept and modify low-level object operations on a target object. A proxy is a clone/wrapper of an object (called <em>target)</em> and offers special functions (called <em>traps</em>), which respond to specific operations and override the built-in behavior of JavaScript objects. If you still need to use the default behavior, you can use the corresponding Reflection API, whose methods, as the name suggests, reflect those of the Proxy API. Let&#8217;s explore an example to see how these APIs are used in Vue 3:</p>\n<pre><code class=\"javascript language-javascript\">let person = {\r\n  name: \"David\",\r\n  age: 27\r\n};\r\n\r\nconst handler = {\r\n  get(target, property, receiver) {\r\n    // track(target, property)\r\n    console.log(property) // output: name\r\n    return Reflect.get(target, property, receiver)\r\n  },\r\n  set(target, property, value, receiver) {\r\n    // trigger(target, property)\r\n    console.log(`${property}: ${value}`) // output: \"age: 30\" and \"hobby: Programming\"\r\n    return Reflect.set(target, property, value, receiver)\r\n  }\r\n}\r\n\r\nlet proxy = new Proxy(person, handler);   \r\n\r\nconsole.log(person)\r\n\r\n// get (reading a property value)\r\nconsole.log(proxy.name)  // output: David\r\n\r\n// set (writing to a property)\r\nproxy.age = 30;\r\n\r\n// set (creating a new property)\r\nproxy.hobby = \"Programming\";\r\n\r\nconsole.log(person) \r\n</code></pre>\n<p>Here&#8217;s a <a href=\"https://codepen.io/SitePoint/pen/MWJPMeQ?editors=0011\">CodePen example</a>.</p>\n<p>To create a new proxy, we use the <code>new Proxy(target, handler)</code> constructor. It takes two arguments: the target object (<code>person</code> object) and the handler object, which defines which operations will be intercepted (<code>get</code> and <code>set</code> operations). In the <code>handler</code> object, we use the <code>get</code> and <code>set</code> traps to track when a property is read and when a property is modified/added. We set console statements to ensure that the methods work correctly. </p>\n<p>The <code>get</code> and <code>set</code> traps take the following arguments:</p>\n<ul>\n<li><code>target</code>: the target object which is wrapped by the proxy</li>\n<li><code>property</code>: the property name</li>\n<li><code>value</code>: the property value (this argument is used only for set operations)</li>\n<li><code>receiver</code>: the object on which the operation takes place (usually the proxy)</li>\n</ul>\n<p>The Reflect API methods accepts the same arguments as their corresponding proxy methods. They&#8217;re used to implement the default behavior for the given operations, which for the <code>get</code> trap is returning the property name and for the <code>set</code> trap is returning <code>true</code> if the property was set or <code>false</code> if not.</p>\n<p>The commented <code>track()</code> and <code>trigger()</code> functions are specific to Vue and are used to track when a property is read and when a property is modified/added. As a result, Vue re-runs the code that&#8217;s using that property.</p>\n<p>In the last part of the example, we use a console statement to output the original <code>person</code> object. Then we use another statement to read the property <code>name</code> of the <code>proxy</code> object. Next, we modify the <code>age</code> property and create a new <code>hobby</code> property. Finally, we output the <code>person</code> object again to see that it has been updated correctly.</p>\n<p>And this is how Vue 3 reactivity works in a nutshell. Of course, the real implementation is way more complex, but hopefully the example presented above is enough for you to grasp the main idea.</p>\n<p>There&#8217;s also a couple of considerations when you use Vue 3 reactivity:</p>\n<ul>\n<li>it only works on browsers supporting ES6+</li>\n<li>the reactive proxy isn&#8217;t equal to the original object</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/vue-3-reactivity-system/?utm_source=rss\">Understanding the New Reactivity System in Vue 3</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/vue-3-reactivity-system/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182220",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "APIs",
            "ES6",
            "JavaScript"
        ],
        "dc:creator": [
            "Ivaylo Gerchev"
        ],
        "pubDate": [
            "Mon, 26 Apr 2021 16:00:11 GMT"
        ],
        "metaDesc": [
            "Vue 2's reactivity system was good but had limitations. Learn why Vue 3's new, feature-rich reactivity API is far more flexible and powerful than before."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Átila Fassina"
        ],
        "title": [
            "Tree-Shaking: A Reference Guide"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/tree-shaking-reference-guide/"
        ],
        "pubDate": [
            "Fri, 14 May 2021 10:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/tree-shaking-reference-guide/"
        ],
        "description": [
            "Before starting our journey to learn what tree-shaking is and how to set ourselves up for success with it, we need to understand what modules are in the JavaScript ecosystem.\nSince its early days, JavaScript programs have grown in complexity and the number of tasks they perform. The need to compartmentalize such tasks into closed scopes of execution became apparent. These compartments of tasks, or values, are what we call modules."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/tree-shaking-reference-guide/\" />\n              <title>Tree-Shaking: A Reference Guide</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Tree-Shaking: A Reference Guide</h1>\n                  \n                    \n                    <address>Átila Fassina</address>\n                  \n                  <time datetime=\"2021-05-14T10:30:00&#43;00:00\" class=\"op-published\">2021-05-14T10:30:00+00:00</time>\n                  <time datetime=\"2021-05-14T10:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>Before starting our journey to learn what tree-shaking is and how to set ourselves up for success with it, we need to understand what modules are in the JavaScript ecosystem.</p>\n\n<p>Since its early days, JavaScript programs have grown in complexity and the number of tasks they perform. The need to compartmentalize such tasks into closed scopes of execution became apparent. These compartments of tasks, or values, are what we call <strong>modules</strong>. They’re main purpose is to prevent repetition and to leverage reusability. So, architectures were devised to allow such special kinds of scope, to expose their values and tasks, and to consume external values and tasks.</p>\n\n<p>To dive deeper into what modules are and how they work, I recommend “<a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES Modules: A Cartoon Deep-Dive</a>”. But to understand the nuances of tree-shaking and module consumption, the definition above should suffice.</p>\n\n<h3 id=\"what-does-tree-shaking-actually-mean\">What Does Tree-Shaking Actually Mean?</h3>\n\n<p>Simply put, tree-shaking means removing unreachable code (also known as dead code) from a bundle. As Webpack version 3’s documentation states:</p>\n\n<blockquote>“You can imagine your application as a tree. The source code and libraries you actually use represent the green, living leaves of the tree. Dead code represents the brown, dead leaves of the tree that are consumed by autumn. In order to get rid of the dead leaves, you have to shake the tree, causing them to fall.”</blockquote>\n\n<p>The term was first popularized in the front-end community by <a href=\"https://rollupjs.org/guide/en/#tree-shaking\">the Rollup team</a>. But authors of all dynamic languages have been struggling with the problem since much earlier. The idea of a tree-shaking algorithm can be traced back to at least the early 1990s.</p>\n\n<p>In JavaScript land, tree-shaking has been possible since the ECMAScript module (ESM) specification in ES2015, previously known as ES6. Since then, tree-shaking has been enabled by default in most bundlers because they reduce output size without changing the program’s behaviour.</p>\n\n<p>The main reason for this is that ESMs are static by nature. Let‘s dissect what that means.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p><p>Meet <a data-instant href=\"/the-smashing-newsletter/\"><strong>Smashing Email Newsletter</strong></a> with useful tips on front-end, design &amp; UX. Subscribe and <strong>get “Smart Interface Design Checklists”</strong> &mdash; a <strong>free PDF deck</strong> with 150+ questions to ask yourself when designing and building almost anything.</p><div><section class=\"nlbf\"><form action=\"//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0\" method=\"post\"><div class=\"nlbwrapper\"><label for=\"mce-EMAIL-hp\" class=\"sr-only\">Your (smashing) email</label><div class=\"nlbgroup\"><input type=\"email\" name=\"EMAIL\" class=\"nlbf-email\" id=\"mce-EMAIL-hp\" placeholder=\"Your email\">\n<input type=\"submit\" value=\"Meow!\" name=\"subscribe\" class=\"nlbf-button\"></div></div></form><style>.nlbf{display:flex;padding-bottom:.25em;padding-top:.5em;text-align:center;letter-spacing:-.5px;color:#fff;font-size:1.15em}.nlbgroup:hover{box-shadow:0 1px 7px -5px rgba(50,50,93,.25),0 3px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025)}.nlbf .nlbf-button,.nlbf .nlbf-email{flex-grow:1;flex-shrink:0;width:auto;margin:0;padding:.75em 1em;border:0;border-radius:11px;background:#fff;font-size:1em;box-shadow:none}.promo-box .nlbf-button:focus,.promo-box input.nlbf-email:active,.promo-box input.nlbf-email:focus{box-shadow:none}.nlbf-button:-ms-input-placeholder,.nlbf-email:-ms-input-placeholder{color:#777;font-style:italic}.nlbf-button::-webkit-input-placeholder,.nlbf-email::-webkit-input-placeholder{color:#777;font-style:italic}.nlbf-button:-ms-input-placeholder,.nlbf-button::-moz-placeholder,.nlbf-button::placeholder,.nlbf-email:-ms-input-placeholder,.nlbf-email::-moz-placeholder,.nlbf-email::placeholder{color:#777;font-style:italic}.nlbf .nlbf-button{transition:all .2s ease-in-out;color:#fff;background-color:#0168b8;font-weight:700;box-shadow:0 1px 1px rgba(0,0,0,.3);width:100%;border:0;border-left:1px solid #ddd;flex:2;border-top-left-radius:0;border-bottom-left-radius:0}.nlbf .nlbf-email{border-top-right-radius:0;border-bottom-right-radius:0;width:100%;flex:4;min-width:150px}@media all and (max-width:650px){.nlbf .nlbgroup{flex-wrap:wrap;box-shadow:none}.nlbf .nlbf-button,.nlbf .nlbf-email{border-radius:11px;border-left:none}.nlbf .nlbf-email{box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);min-width:100%}.nlbf .nlbf-button{margin-top:1em;box-shadow:0 1px 1px rgba(0,0,0,.5)}}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus,.nlbf .nlbf-button:hover{cursor:pointer;color:#fff;background-color:#0168b8;border-color:#dadada;box-shadow:0 1px 1px rgba(0,0,0,.3)}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus{outline:0!important;text-shadow:1px 1px 1px rgba(0,0,0,.3);box-shadow:inset 0 3px 3px rgba(0,0,0,.3)}.nlbgroup{display:flex;box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);border-radius:11px;transition:box-shadow .2s ease-in-out}.nlbwrapper{display:flex;flex-direction:column;justify-content:center}.nlbf form{width:100%}.nlbf .nlbgroup{margin:0}.nlbcaption{font-size:.9em;line-height:1.5em;color:#fff;border-radius:11px;padding:.5em 1em;display:inline-block;background-color:#0067b859;text-shadow:1px 1px 1px rgba(0,0,0,.3)}.wf-loaded-stage2 .nlbf .nlbf-button{font-family:Mija}</style></section><p class=\"mtn mbn\"><small class=\"promo-box__footer mtm block grey\"><em>Once a week. Useful tips on <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">front-end &amp; UX</a>. Trusted by 190.000 friendly folks.</em></small></p></div></p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-firechat.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"310\"\n\t\t\t\t\t\t\t\t\t\theight=\"400\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"es-modules-vs-commonjs\">ES Modules vs. CommonJS</h3>\n\n<p>CommonJS predates the ESM specification by a few years. It came about to address the lack of support for reusable modules in the JavaScript ecosystem. CommonJS has a <code>require()</code> function that fetches an external module based on the path provided, and it adds it to the scope during runtime.</p>\n\n<p>That <code>require</code> is a <code>function</code> like any other in a program makes it hard enough to evaluate its call outcome at compile-time. On top of that is the fact that adding <code>require</code> calls anywhere in the code is possible &mdash; wrapped in another function call, within if/else statements, in switch statements, etc.</p>\n\n<p>With the learning and struggles that have resulted from wide adoption of the CommonJS architecture, the ESM specification has settled on this new architecture, in which modules are imported and exported by the respective keywords <code>import</code> and <code>export</code>. Therefore, no more functional calls. ESMs are also allowed only as top-level declarations &mdash; nesting them in any other structure is not possible, being as they are <strong>static</strong>: ESMs do not depend on runtime execution.</p>\n\n<h3 id=\"scope-and-side-effects\">Scope and Side Effects</h3>\n\n<p>There is, however, another hurdle that tree-shaking must overcome to evade bloat: side effects. A function is considered to have side effects when it alters or relies on factors external to the scope of execution. A function with side effects is considered <strong>impure</strong>. A pure function will always yield the same result, regardless of context or the environment it’s been run in.</p>\n\n<pre><code class=\"language-ts\">const pure = (a:number, b:number) => a + b\nconst impure = (c:number) => window.foo.number + c\n</code></pre>\n\n<p>Bundlers serve their purpose by evaluating the code provided as much as possible in order to determine whether a module is pure. But code evaluation during compiling time or bundling time can only go so far. Therefore, it’s assumed that packages with side effects cannot be properly eliminated, even when completely unreachable.</p>\n\n<p>Because of this, bundlers now accept a key inside the module’s <code>package.json</code> file that allows the developer to declare whether a module has no side effects. This way, the developer can opt out of code evaluation and hint the bundler; the code within a particular package can be eliminated if there’s no reachable import or <code>require</code> statement linking to it. This not only makes for a leaner bundle, but also can speed up compiling times.</p>\n\n<pre><code class=\"language-json\">\n{\n    \"name\": \"my-package\",\n    \"sideEffects\": false\n}\n</code></pre>\n\n<p>So, if you are a package developer, make conscientious use of <code>sideEffects</code> before publishing, and, of course, revise it upon every release to avoid any unexpected breaking changes.</p>\n\n<p>In addition to the root <code>sideEffects</code> key, it is also possible to determine purity on a file-by-file basis, by annotating an inline comment, <code>/*@__PURE__*/</code>, to your method call.</p>\n\n<pre><code class=\"language-javascript\">const x = */@__PURE__*/eliminated_if_not_called()\n</code></pre>\n\n<p>I consider this inline annotation to be an escape hatch for the consumer developer, to be done in case a package has not declared <code>sideEffects: false</code> or in case the library does indeed present a side effect on a particular method.</p>\n\n<h3 id=\"optimizing-webpack\">Optimizing Webpack</h3>\n\n<p>From version 4 onward, Webpack has required progressively less configuration to get best practices working. The functionality for a couple of plugins has been incorporated into core. And because the development team takes bundle size very seriously, they have made tree-shaking easy.</p>\n\n<p>If you’re not much of a tinkerer or if your application has no special cases, then tree-shaking your dependencies is a matter of just one line.</p>\n\n<p>The <code>webpack.config.js</code> file has a root property named <code>mode</code>. Whenever this property’s value is <code>production</code>, it will tree-shake and fully optimize your modules. Besides eliminating dead code with the <code>TerserPlugin</code>, <code>mode: 'production'</code> will enable deterministic mangled names for modules and chunks, and it will activate the following plugins:</p>\n\n<ul>\n<li>flag dependency usage,</li>\n<li>flag included chunks,</li>\n<li>module concatenation,</li>\n<li>no emit on errors.</li>\n</ul>\n\n<p>It’s not by accident that the trigger value is <code>production</code>. You will not want your dependencies to be fully optimized in a development environment because it will make issues much more difficult to debug. So I would suggest going about it with one of two approaches.</p>\n\n<p>On the one hand, you could pass a <code>mode</code> flag to the Webpack command line interface:</p>\n\n<pre><code class=\"language-bash\"># This will override the setting in your webpack.config.js\nwebpack --mode=production\n</code></pre>\n\n<p>Alternatively, you could use the <code>process.env.NODE_ENV</code> variable in <code>webpack.config.js</code>:</p>\n\n<pre><code class=\"language-javascript\">mode: process.env.NODE_ENV === 'production' ? 'production' : development\n</code></pre>\n\n<p>In this case, you must remember to pass <code>--NODE_ENV=production</code> in your deployment pipeline.</p>\n\n<p>Both approaches are an abstraction on top of the much known <code>definePlugin</code> from Webpack version 3 and below. Which option you choose makes absolutely no difference.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"webpack-version-3-and-below\">Webpack Version 3 and Below</h3>\n\n<p>It’s worth mentioning that the scenarios and examples in this section might not apply to recent versions of Webpack and other bundlers. This section considers usage of <a href=\"https://github.com/mishoo/UglifyJS/tree/v2.x\">UglifyJS version 2</a>, instead of <a href=\"https://github.com/terser/terser\">Terser</a>. UglifyJS is the package that Terser was forked from, so code evaluation might differ between them.</p>\n\n<p>Because Webpack version 3 and below don’t support the <code>sideEffects</code> property in <code>package.json</code>, all packages must be completely evaluated before the code gets eliminated. This alone makes the approach less effective, but several caveats must be considered as well.</p>\n\n<p>As mentioned above, the compiler has no way of finding out by itself when a package is tampering with the global scope. But that’s not the only situation in which it skips tree-shaking. There are fuzzier scenarios.</p>\n\n<p>Take this package example from Webpack’s documentation:</p>\n\n<pre><code class=\"language-javascript\">// transform.js\nimport * as mylib from 'mylib';\n\nexport const someVar = mylib.transform({\n  // ...\n});\n\nexport const someOtherVar = mylib.transform({\n  // ...\n});\n</code></pre>\n\n<p>And here is the entry point of a consumer bundle:</p>\n\n<pre><code class=\"language-javascript\">// index.js\n\nimport { someVar } from './transforms.js';\n\n// Use `someVar`...\n</code></pre>\n\n<p>There’s no way to determine whether <code>mylib.transform</code> instigates side effects. Therefore, no code will be eliminated.</p>\n\n<p>Here are other situations with a similar outcome:</p>\n\n<ul>\n<li>invoking a function from a third-party module that the compiler cannot inspect,</li>\n<li>re-exporting functions imported from third-party modules.</li>\n</ul>\n\n<p>A tool that might help the compiler get tree-shaking to work is <a href=\"https://www.npmjs.com/package/babel-plugin-transform-imports\">babel-plugin-transform-imports</a>. It will split all member and named exports into default exports, allowing the modules to be evaluated individually.</p>\n\n<pre><code class=\"language-javascript\">// before transformation\nimport { Row, Grid as MyGrid } from 'react-bootstrap';\nimport { merge } from 'lodash';\n\n// after transformation\nimport Row from 'react-bootstrap/lib/Row';\nimport MyGrid from 'react-bootstrap/lib/Grid';\nimport merge from 'lodash/merge';\n</code></pre>\n\n<p>It also has a configuration property that warns the developer to avoid troublesome import statements. If you’re on Webpack version 3 or above, and you have done your due diligence with basic configuration and added the recommended plugins, but your bundle still looks bloated, then I recommend giving this package a try.</p>\n\n<h3 id=\"scope-hoisting-and-compile-times\">Scope Hoisting and Compile Times</h3>\n\n<p>In the time of CommonJS, most bundlers would simply wrap each module within another function declaration and map them inside an object. That’s not any different than any map object out there:</p>\n\n<pre><code class=\"language-javascript\">(function (modulesMap, entry) {\n  // provided CommonJS runtime\n})({\n  \"index.js\": function (require, module, exports) {\n     let { foo } = require('./foo.js')\n     foo.doStuff()\n  },\n  \"foo.js\": function(require, module, exports) {\n     module.exports.foo = {\n       doStuff: () => { console.log('I am foo') }\n     }\n  }\n}, \"index.js\")\n</code></pre>\n\n<p>Apart from being hard to analyze statically, this is fundamentally incompatible with ESMs, because we’ve seen that we cannot wrap <code>import</code> and <code>export</code> statements. So, nowadays, bundlers hoist every module to the top level:</p>\n\n<pre><code class=\"language-javascript\">// moduleA.js\nlet $moduleA$export$doStuff = () => ({\n  doStuff: () => {}\n})\n\n// index.js\n$moduleA$export$doStuff()\n</code></pre>\n\n<p>This approach is fully compatible with ESMs; plus, it allows code evaluation to easily spot modules that aren’t being called and to drop them. The caveat of this approach is that, during compiling, it takes considerably more time because it touches every statement and stores the bundle in memory during the process. That’s a big reason why bundling performance has become an even greater concern to everyone and why compiled languages are being leveraged in tools for web development. For example, <a href=\"https://esbuild.github.io/\">esbuild</a> is a bundler written in Go, and <a href=\"https://swc.rs/\">SWC</a> is a TypeScript compiler written in Rust that integrates with Spark, a bundler also written in Rust.</p>\n\n<p>To better understand scope hoisting, I highly recommend <a href=\"https://v2.parceljs.org/features/scope-hoisting/\">Parcel version 2’s documentation</a>.</p>\n\n<h3 id=\"avoid-premature-transpiling\">Avoid Premature Transpiling</h3>\n\n<p>There’s one specific issue that is unfortunately rather common and can be devastating for tree-shaking. In short, it happens when you’re working with special loaders, integrating different compilers to your bundler. Common combinations are TypeScript, Babel, and Webpack &mdash; in all possible permutations.</p>\n\n<p>Both Babel and TypeScript have their own compilers, and their respective loaders allow the developer to use them, for easy integration. And therein lies the hidden threat.</p>\n\n<p>These compilers reach your code <em>before</em> code optimization. And whether by default or misconfiguration, these compilers often output CommonJS modules, instead of ESMs. As mentioned in a previous section, CommonJS modules are dynamic and, therefore, cannot be properly evaluated for dead-code elimination.</p>\n\n<p>This scenario is becoming even more common nowadays, with the growth of “isomorphic” apps (i.e. apps that run the same code both server- and client-side). Because Node.js does not have standard support for ESMs yet, when compilers are targeted to the <code>node</code> environment, they output CommonJS.</p>\n\n<p>So, be sure to <strong>check the code that your optimization algorithm is receiving</strong>.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"tree-shaking-checklist\">Tree-Shaking Checklist</h3>\n\n<p>Now that you know the ins and outs of how bundling and tree-shaking work, let’s draw ourselves a checklist that you can print somewhere handy for when you revisit your current implementation and code base. Hopefully, this will save you time and allow you to optimize not only the perceived performance of your code, but maybe even your pipeline’s build times!</p>\n\n<ol>\n<li>Use ESMs, and not only in your own code base, but also favour packages that output ESM as their consumables.</li>\n<li>Make sure you know exactly which (if any) of your dependencies have not declared <code>sideEffects</code> or have them set as <code>true</code>.</li>\n<li>Make use of inline annotation to declare method calls that are <strong>pure</strong> when consuming packages with side effects.</li>\n<li>If you’re outputting CommonJS modules, make sure to optimize your bundle <strong>before</strong> transforming the import and export statements.</li>\n</ol>\n\n<h3 id=\"package-authoring\">Package Authoring</h3>\n\n<p>Hopefully, by this point we all agree that ESMs are the way forward in the JavaScript ecosystem. As always in software development, though, transitions can be tricky. Luckily, package authors can adopt non-breaking measures to facilitate swift and seamless migration for their users.</p>\n\n<p>With some small additions to <code>package.json</code>, your package will be able to tell bundlers the environments that the package supports and how they’re supported best. Here’s a <a href=\"https://docs.skypack.dev/package-authors/package-checks#esm\">checklist from Skypack</a>:</p>\n\n<ul>\n<li>Include an ESM export.</li>\n<li>Add <code>&quot;type&quot;: &quot;module&quot;</code>.</li>\n<li>Indicate an entry point through <code>&quot;module&quot;: &quot;./path/entry.js&quot;</code> (a community convention).</li>\n</ul>\n\n<p>And here’s an example that results when all best practices are followed and you wish to support both web and Node.js environments:</p>\n\n<pre><code class=\"language-javascript\">{\n    // ...\n    \"main\": \"./index-cjs.js\",\n    \"module\": \"./index-esm.js\",\n    \"exports\": {\n        \"require\": \"./index-cjs.js\",\n        \"import\": \"./index-esm.js\"\n    }\n    // ...\n}\n</code></pre>\n\n<p>In addition to this, the Skypack team has introduced a <strong>package quality score</strong> as a benchmark to determine whether a given package is set up for longevity and best practices. The tool is <a href=\"https://github.com/skypackjs/package-check\">open-sourced on GitHub</a> and can be added as a <code>devDependency</code> to your package to perform the checks easily before each release.</p>\n\n<h3 id=\"wrapping-up\">Wrapping Up</h3>\n\n<p>I hope this article has been useful to you. If so, consider sharing it with your network. I look forward to interacting with you in the comments or on Twitter.</p>\n\n<h3 id=\"useful-resources\">Useful Resources</h3>\n\n<h4 id=\"articles-and-documentation\">Articles and Documentation</h4>\n\n<ul>\n<li>“<a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES Modules: A Cartoon Deep-Dive</a>”, Lin Clark, Mozilla Hacks</li>\n<li>“<a href=\"https://webpack.js.org/guides/tree-shaking/\">Tree Shaking</a>”, Webpack</li>\n<li>“<a href=\"https://webpack.js.org/configuration/\">Configuration</a>”, Webpack</li>\n<li>“<a href=\"https://webpack.js.org/configuration/optimization/\">Optimization</a>”, Webpack</li>\n<li>“<a href=\"https://v2.parceljs.org/features/scope-hoisting/\">Scope Hoisting</a>”, Parcel version 2’s documentation</li>\n</ul>\n\n<h4 id=\"projects-and-tools\">Projects and Tools</h4>\n\n<ul>\n<li><a href=\"https://github.com/terser/terser\">Terser</a></li>\n<li><a href=\"https://www.npmjs.com/package/babel-plugin-transform-imports\">babel-plugin-transform-imports</a></li>\n<li><a href=\"https://skypack.dev\">Skypack</a></li>\n<li><a href=\"https://webpack.js.org/\">Webpack</a></li>\n<li><a href=\"https://v2.parceljs.org/\">Parcel</a></li>\n<li><a href=\"https://rollupjs.org/guide/en/#tree-shaking\">Rollup</a></li>\n<li><a href=\"https://esbuild.github.io/\">esbuild</a></li>\n<li><a href=\"https://swc.rs/\">SWC</a></li>\n<li><a href=\"https://github.com/skypackjs/package-check\">Package Check</a></li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il, al)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Issue #462"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/bcK4YDssvPU/"
        ],
        "pubDate": [
            "Tue, 15 Jun 2021 13:40:30 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-462/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn CSS-related techniques for optimizing Web Vitals, how container queries can change your workflow, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/css-web-vitals/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS for Web Vitals</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://web.dev/css-web-vitals/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/css-web-vitals.jpg\" alt=\"CSS for Web Vitals\" /></a>\n\t\t\t\t\t\t<p>Katie Hempenius and Una Kravets cover CSS-related techniques for optimizing Web Vitals.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/css-web-vitals/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://ishadeed.com/article/container-queries-for-designers/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Container Queries For Designers</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://ishadeed.com/article/container-queries-for-designers/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/container-queries-for-designers.png\" alt=\"CSS Container Queries For Designers\" /></a>\n\t\t\t\t\t\t<p>Ahmad Shadeed explores how container queries could change your workflow as a designer.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://ishadeed.com/article/container-queries-for-designers/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"https://css-weekly.com/advertise/\" target=\"_blank\">From Our Sponsor <small style=\"text-decoration:underline;\">(via Paved)</small></a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/cleaning-spreadsheets\">Tired of cleaning spreadsheets?</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/cleaning-spreadsheets\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/cleaning-spreadsheets.jpg\" alt=\"Tired of cleaning spreadsheets?\" /></a>\n\t\t\t\t\t\t<p>Let your users import their own Excel files, with confidence. No formatting CSV templates, custom scripts and no need to build a clunky importer in-house. Integrate a production-ready data importer from Flatfile in minutes.<img src='https://www.vpdae.com/open/2323.gif?opens=1' width='1' height='1'></p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/cleaning-spreadsheets\">Get a demo</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/05/css-container-queries-use-cases-migration-strategies/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Container Queries: Use-Cases And Migration Strategies</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Adrian Bece explains CSS container query basics and how to use them today with progressive enhancement or polyfills.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/05/css-container-queries-use-cases-migration-strategies/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/front-end-testing-is-for-everyone/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Front-End Testing is For Everyone</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Evgeny Klimenchenko covers the most popular and widely used types of front-end tests.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/front-end-testing-is-for-everyone/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://tympanus.net/codrops/2021/06/01/trigonometry-in-css-and-javascript-introduction-to-trigonometry/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Trigonometry in CSS and JavaScript: Introduction to Trigonometry</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Michelle Barker explains how trigonometry can be useful in web development and delves into some creative applications in CSS and JavaScript.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://tympanus.net/codrops/2021/06/01/trigonometry-in-css-and-javascript-introduction-to-trigonometry/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.quirksmode.org/blog/archives/2021/06/inherit_initial.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Inherit, initial, unset, revert</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Peter-Paul Koch takes a quick look at a few special CSS keywords you can use on any CSS property: inherit, initial, revert, and unset.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.quirksmode.org/blog/archives/2021/06/inherit_initial.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/06/has-native-css-parent-selector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Meet :has, A Native CSS Parent Selector (And More)</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Adrian Bece explores what makes relational selector one of the most requested features and how are we, as developers, working around not having it.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/06/has-native-css-parent-selector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.a11y-collective.com/blog/the-perfect-link/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">The Perfect Link</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Rian Rietveld explains that there&#8217;s more to a link than just a clickable word or image.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.a11y-collective.com/blog/the-perfect-link/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://inclusivedesignprinciples.org/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Inclusive Design Principles</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Henny Swan, Ian Pouncey, Heydon Pickering, and Léonie Watson outline design principles that will help you put people first.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://inclusivedesignprinciples.org/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/polypane2\">Polypane — Build Responsive & Accessible Websites 5x Faster</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/polypane2\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/build-responsive-and-accessible-websites-5x-faster.jpg\" alt=\"Polypane — Build Responsive & Accessible Websites 5x Faster\" /></a>\n\t\t\t\t\t\t<p>Polypane is a standalone browser to guide your web development workflow every step of the way with built-in tools for responsive design, accessibility, meta information, and so much more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/polypane2\">Try Polypane for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://boringavatars.com/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Boring Avatars</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Boring Avatars is a tiny JavaScript React library that generates custom, SVG-based, round avatars from any username and color palette.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://boringavatars.com/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://party.js.org/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Party.js</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Party.js is a JavaScript library to brighten up your user&#8217;s site experience with visual effects!</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://party.js.org/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/thebabydino/pen/LYWeOPP?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Pure CSS Magic Gateways With Houdini (Chromium Only)</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/thebabydino/pen/LYWeOPP?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/pure-css-magic-gateways-with-houdini.png\" alt=\"Pure CSS Magic Gateways With Houdini (Chromium Only)\" /></a>\n\t\t\t\t\t\t<p>Ana Tudor created a fascinating, animated scene using CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/thebabydino/pen/LYWeOPP?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/bcK4YDssvPU\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-462/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "UI Interactions & Animations Roundup #17"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/28/ui-interactions-animations-roundup-17/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Mon, 28 Jun 2021 10:27:34 +0000"
        ],
        "category": [
            "UI Interactions and Animations Roundups",
            "animation",
            "collection",
            "inspiration",
            "interaction",
            "roundup"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=55128",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>A fresh pick of the most interesting UI animation and interaction shots to get inspired. </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/28/ui-interactions-animations-roundup-17/\">UI Interactions &#038; Animations Roundup #17</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>Vibrant colors paired with organic motion that doesn&#8217;t shy away from morphing different shapes and dimensions — that&#8217;s the current exciting landscape of UI animations and interactions. There&#8217;s something for everybody&#8217;s style, so dive in, enjoy and let some inspiration in!</p>\n\n\n\n<p>Thanks for checking by!</p>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15905478-mightybuilders-Blog-Post-Animation\">mightybuilders &#8211; Blog Post Animation</a></h3>\n\n\n\n<p>by Vivien Cseresznyés</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/speedyslipperycrayfish?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15899908-Identity-Crafter\">Identity Crafter</a></h3>\n\n\n\n<p>by Michael Crawford</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/grandioserigideider?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15896808-Gallerie-dell-Accademia-di-Venezia-Museum-hall\">Gallerie dell&#8217;Accademia di Venezia. Museum hall</a></h3>\n\n\n\n<p>by Evgeny UPROCK</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/consciouspersonalindianpalmsquirrel?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15922205-Personal-Portfolio-Website\">Personal Portfolio Website</a></h3>\n\n\n\n<p>by Saad Ibn Sayed</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/slimycheapfireant?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15831783-Your-Other-Life\">Your Other Life</a></h3>\n\n\n\n<p>by Michael Crawford</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/occasionalthiskob?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15918369-Mercedes-Benz-redesign-Goodbye-sir-stirling\">Mercedes-Benz redesign. Goodbye, sir stirling!</a></h3>\n\n\n\n<p>by Evgeny UPROCK</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/handsomeforthrightcentipede?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15898483-Sporty-Rich-Gallery\">Sporty &amp; Rich Gallery</a></h3>\n\n\n\n<p>by Megan Milosevich</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/secretfittingkinkajou?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15829028-Event-Management-App-Interaction\">Event Management App Interaction</a></h3>\n\n\n\n<p>by Cuberto</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/informalaffectionateasiaticmouflon?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15824253-mightybuilders-Article-page-animation\">mightybuilders &#8211; Article page animation</a></h3>\n\n\n\n<p>by Vivien Cseresznyés</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/minorinfinitefrillneckedlizard?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15822006-okaybutcolor-Interaction\">okaybutcolor &#8211; Interaction</a></h3>\n\n\n\n<p>by Anton Pecheritsa</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/untriedgaseousafricanpiedkingfisher?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15743697-Focus-Lab-YouTube\">Focus Lab YouTube</a></h3>\n\n\n\n<p>by Bill Kenney</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/definitequickeskimodog?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15743241-Home-Page-InteriorLAB\">Home Page | InteriorLAB</a></h3>\n\n\n\n<p>by Victor Work</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/wellgroomedindelibleargusfish?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15771711-Exploration-website\">Exploration website</a></h3>\n\n\n\n<p>by Matthew Hall</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/adoreddismalcheetah?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15761137-Wendy-s-Cookies-Website\">Wendy s Cookies Website</a></h3>\n\n\n\n<p>by Dannniel</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/ellipticalmaleafricanwilddog?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15746259-Expolight\">Expolight</a></h3>\n\n\n\n<p>by Advanced Team</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/drearyvibrantcuscus?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15739781-Dancing-on-Air\">Dancing on Air</a></h3>\n\n\n\n<p>by Irakli Nadirashvili</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/goodelastickatydid?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15770486-UI-Concept-3\">UI Concept #3</a></h3>\n\n\n\n<p>by Nino Lekveishvili</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/unawaregrotesquealabamamapturtle?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15760166-SNEAKERS-HOMEPAGE\">SNEAKERS &#8211; HOMEPAGE</a></h3>\n\n\n\n<p>by Hervé Rbna</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/pessimistictanbasenji?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15676132-WebGL-Morphing-Geometry\">WebGL Morphing Geometry</a></h3>\n\n\n\n<p>by Andrew Encharm</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/failingsecretegret?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15644348-Travelo-Personalized-Trips-Operator\">Travelo – Personalized Trips Operator</a></h3>\n\n\n\n<p>by Metacarbon</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/elegantbogusdutchshepherddog?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n\n\n<h3><a href=\"https://dribbble.com/shots/15692222-Blog-Concept\">Blog Concept</a></h3>\n\n\n\n<p>by Irakli Nadirashvili</p>\n\n\n<div class='embed_responsive embed_responsive--gfycat'><iframe src='https://gfycat.com/ifr/nextdopeyhamster?controls=0' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/28/ui-interactions-animations-roundup-17/\">UI Interactions &#038; Animations Roundup #17</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "provider": "Codrops"
    },
    {
        "author": [
            "Stephanie Eckles"
        ],
        "title": [
            "When CSS Isn’t Enough: JavaScript Requirements For Accessible Components"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/"
        ],
        "pubDate": [
            "Mon, 14 Jun 2021 10:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/"
        ],
        "description": [
            "As the author of ModernCSS.dev, I’m a big proponent of CSS solutions. And, I love seeing the clever ways people use CSS for really out-of-the-box designs and interactivity! However, I’ve noticed a trend toward promoting “CSS-only” components using methods like the “checkbox hack”. Unfortunately, hacks like these leave a significant amount of users unable to use your interface.\nThis articles covers several common components and why CSS isn’t sufficient for covering accessibility by detailing the JavaScript requirements."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/\" />\n              <title>When CSS Isn’t Enough: JavaScript Requirements For Accessible Components</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>When CSS Isn’t Enough: JavaScript Requirements For Accessible Components</h1>\n                  \n                    \n                    <address>Stephanie Eckles</address>\n                  \n                  <time datetime=\"2021-06-14T10:30:00&#43;00:00\" class=\"op-published\">2021-06-14T10:30:00+00:00</time>\n                  <time datetime=\"2021-06-14T10:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>As the author of <a href=\"https://moderncss.dev\">ModernCSS.dev</a>, I’m a big proponent of CSS solutions. And, I love seeing the clever ways people use CSS for really out-of-the-box designs and interactivity! However, I’ve noticed a trend toward promoting “CSS-only” components using methods like the “<a href=\"https://css-tricks.com/the-checkbox-hack/\">checkbox hack</a>”. Unfortunately, hacks like these leave a significant amount of users unable to use your interface.</p>\n\n<p>This articles covers several common components and why CSS isn’t sufficient for covering accessibility by detailing the JavaScript requirements. These requirements are based on the <a href=\"https://www.w3.org/WAI/standards-guidelines/wcag/\">Web Content Accessibility Guidelines (WCAG)</a> and additional research from accessibility experts. I won’t prescribe JavaScript solutions or demo CSS, but rather examine what needs to be accounted for when creating each component. A JavaScript framework can certainly be used but is not necessary in order to add the events and features discussed.</p>\n\n<blockquote>The requirements listed are by and large not optional &mdash; they are necessary to help ensure the accessibility of your components.</blockquote>\n\n<p>If you’re using a framework or component library, you can use this article to help evaluate if the provided components <strong>meet accessibility requirements</strong>. It’s important to know that many of the items noted are not going to be fully covered by automated accessibility testing tools like aXe, and therefore need some manual testing. Or, you can use a testing framework like <a href=\"https://www.cypress.io/\">Cypress</a> to create tests for the required functionality.</p>\n\n<p>Keep in mind that this article is focused on informing you of JavaScript considerations for each interface component. This is not a comprehensive resource for all the implementation details for creating fully accessible components, such as necessary aria or even markup. Resources are included for each type to assist you in learning more about the wider considerations for each component.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p>Meet <strong><a data-instant href=\"https://www.smashingconf.com/online-workshops/\">Smashing Online Workshops</a></strong> on <strong>front-end &amp; UX</strong>, with practical takeaways, live sessions, <strong>video recordings</strong> and a friendly Q&amp;A. On design systems, CSS/JS and UX. With Brad Frost, Stephanie Eckles, Carie Fisher and <a href=\"https://smashingconf.com/online-workshops/workshops\">so many others</a>.</p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<a data-instant href=\"smashing-workshops\" class=\"btn btn--green btn--large\">Jump to online workshops&nbsp;↬</a>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"smashing-workshops\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-in-a-chair--tall.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"257\"\n\t\t\t\t\t\t\t\t\t\theight=\"355\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"determining-if-css-only-is-an-appropriate-solution\">Determining If CSS-Only Is An Appropriate Solution</h3>\n\n<p>Here are a few questions to ask before you proceed with a CSS-only solution. We’ll cover some of the terms presented here in more context alongside their related components.</p>\n\n<ul>\n<li><strong>Is this for your own enjoyment?</strong><br />\nThen absolutely go all in on CSS, push the boundaries, and learn what the language can do! 🎉</li>\n<li><strong>Does the feature include showing and hiding of content?</strong><br />\nThen you need JS to at minimum toggle aria and to enable closing on <code>Esc</code>. For certain types of components that also change state, you may also need to communicate changes by triggering updates within an ARIA live region.</li>\n<li><strong>Is the natural focus order the most ideal?</strong><br />\nIf the natural order loses the relationship between a trigger and the element it triggered, or a keyboard user can’t even access the content via natural tab order, then you need JS to assist in focus management.</li>\n<li><strong>Does the stylized control offer the correct information about the functionality?</strong><br />\nUsers of assistive technology like screen readers receive information based on semantics and ARIA that helps them determine what a control does. And, users of speech recognition need to be able to identify the component’s label or type to work out the phrase to use to operate the controls. For example, if your component is styled like tabs but uses radio buttons to “work” like tabs, a screen reader may hear “radio button” and a speech user may try to use the word “tab” to operate them. In these cases, you’ll need JS to enable using the appropriate controls and semantics to achieve the desired functionality.</li>\n<li><strong>Does the effect rely on hover and/or focus?</strong><br />\nThen you may need JS to assist in an alternative solution for providing equal access or persistent access to the content especially for touch screen users and those using desktop zoom of 200%+ or magnification software.</li>\n</ul>\n\n<p><strong>Quick tip</strong>: <em>Another reference when you’re creating any kind of customized control is the <a href=\"https://w3c.github.io/using-aria/#checklist\">Custom Control Accessible Development Checklist</a> from the W3 “Using ARIA” guide. This mentions several points above, with a few additional design and semantic considerations.</em></p>\n\n<h3 id=\"tooltips\">Tooltips</h3>\n\n<p>Narrowing the definition of a tooltip is a bit tricky, but for this section we’re talking about small text labels that appear on mouse hover near a triggering element. They overlay other content, do not require interaction, and disappear when a user removes hover or focus.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"300\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example tooltips from GitHub, Whimsical, and Notion\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Example tooltips from GitHub, Whimsical, and Notion. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78e1ac78-4eb5-47f7-92cc-813bb40c540e/1-css-js-requirements-accessible-components.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The CSS-only solution here may seem completely fine, and can be accomplished with something like:</p>\n\n<pre><code class=\"language-css\">&lt;button class=\"tooltip-trigger\"&gt;I have a tooltip&lt;/button&gt;\n&lt;span class=\"tooltip\"&gt;Tooltip&lt;/span&gt;\n\n.tooltip {\ndisplay: none;\n}\n\n.tooltip-trigger:hover + .tooltip,\n.tooltip-trigger:focus + .tooltip {\ndisplay: block;\n}\n</code></pre>\n\n<p>However, this ignores quite a list of accessibility concerns and excludes many users from accessing the tooltip content.</p>\n\n<p>A large group of excluded users are those using touch screens where <code>:hover</code> will possibly not be triggered since on touch screens, a <code>:hover</code>  event triggers in sync with a <code>:focus</code> event. This means that any related action connected to the triggering element &mdash; such as a button or link &mdash; will fire alongside the tooltip being revealed. This means the user may miss the tooltip, or not have time to read its contents.</p>\n\n<p>In the case that the tooltip is attached to an interactive element with no events, the tooltip may show but not be dismissible until another element gains focus, and in the meantime may block content and prevent a user from doing a task.</p>\n\n<p>Additionally, users who need to use zoom or magnification software to navigate also experience quite a barrier to using tooltips. Since tooltips are revealed on hover, if these users need to change their field of view by panning the screen to read the tooltip it may cause it to disappear. Tooltips also remove control from the user as there is often nothing to tell the user a tooltip will appear ahead of time. The <strong>overlay of content</strong> may prevent them from doing a task. In some circumstances such as a tooltip tied to a form field, mobile or other on-screen keyboards can obscure the tooltip content. And, if they are not appropriately connected to the triggering element, some assistive technology users may not even know a tooltip has appeared.</p>\n\n<p>Guidance for the behavior of tooltips comes from <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\">WCAG Success Criterion 1.4.13 &mdash; Content on Hover or Focus</a>. This criterion is intended to help low vision users and those using zoom and magnification software. The guiding principles for tooltip (and other content appearing on hover and focus) include:</p>\n\n<ul>\n<li><strong>Dismissible</strong><br />\nThe tooltip can be dismissed without moving hover or focus</li>\n<li><strong>Hoverable</strong><br />\nThe revealed tooltip content can be hovered without it disappearing</li>\n<li><strong>Persistent</strong><br />\nThe additional content does not disappear based on a timeout, but waits for a user to remove hover or focus or otherwise dismiss it</li>\n</ul>\n\n<p>To fully meet these guidelines requires some JavaScript assistance, particularly to allow for dismissing the content.</p>\n\n<ul>\n<li>Users of assistive technology will assume that dismissal behavior is tied to the <kbd>Esc</kbd> key, which requires a JavaScript listener.</li>\n<li>According to Sarah Higley’s research described in the next section, adding a visible “close” button within the tooltip would also require JavaScript to handle its close event.</li>\n<li>It’s possible that JavaScript may need to augment your styling solution to ensure a user can hover over the tooltip content without it dismissing during the user moving their mouse.</li>\n</ul>\n\n<h4 id=\"alternatives-to-tooltips\">Alternatives To Tooltips</h4>\n\n<p>Tooltips should be a last resort. Sarah Higley &mdash; an accessibility expert who has a particular passion for dissuading the use of tooltips &mdash; offers this simple test:</p>\n\n<blockquote>“Why am I adding this text to the UI? Where else could it go?”<br /><br />&mdash; Sarah Higley from the presentation “<a href=\"https://www.youtube.com/watch?v=lb0_v7D4kbs\">Tooltips: Investigation Into Four Parts</a>”</blockquote>\n\n<p>Based on research Sarah was involved with for her role at Microsoft, an alternative solution is a dedicated “toggletip”. Essentially, this means providing an additional element to allow a user to intentionally trigger the <strong>showing and hiding of extra content</strong>. Unlike tooltips, toggletips can retain semantics of elements within the revealed content. They also give the user back the control of toggling them, and retain discoverability and operability by more users and in particular touch screen users.</p>\n\n<p>If you’ve remembered the <code>title</code> attribute exists, just know that it suffers all the same issues we noted from our CSS-only solution. In other words &mdash; don’t use <code>title</code> under the assumption it’s an acceptable tooltip solution.</p>\n\n<p>For more information, check out <a href=\"https://www.youtube.com/watch?v=lb0_v7D4kbs\">Sarah’s presentation on YouTube</a> as well as her <a href=\"https://sarahmhigley.com/writing/tooltips-in-wcag-21/\">extensive article on tooltips</a>. To learn more about tooltips versus toggletips and a bit more info on why not to use <code>title</code>, review Heydon Pickering’s article from Inclusive Components: <a href=\"https://inclusive-components.design/tooltips-toggletips/\">Tooltips and Toggletips</a>.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"modals\">Modals</h3>\n\n<p>Modals &mdash; aka lightboxes or dialogs &mdash; are in-page windows that appear after a triggering action. They overlay other page content, may contain structured information including additional actions, and often have a semi-transparent backdrop to help distinguish the modal window from the rest of the page.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"492\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example modals from GitHub and Material Design\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Example modals from GitHub and Material Design. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e2c1b6ac-6c84-4cbc-9a9f-882fb8be0708/2-css-js-requirements-accessible-components.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>I have seen a few variations of a CSS-only modal (and am guilty of making one for an older version of my portfolio). They may use the “checkbox hack”, make use of the behavior of <code>:target</code>, or try to fashion it off of <code>:focus</code> (which is probably really an overlarge tooltip in disguise).</p>\n\n<p>As for the HTML <code>dialog</code> element, be aware that it is not considered to be comprehensively accessible. So, while I absolutely encourage folks to use native HTML before custom solutions, unfortunately this one breaks that idea. You can learn more about <a href=\"https://www.scottohara.me/blog/2019/03/05/open-dialog.html\">why the HTML <code>dialog</code> isn’t accessible</a>.</p>\n\n<p>Unlike tooltips, modals are intended to allow structured content. This means potentially a heading, some paragraph content, and interactive elements like links, buttons or even forms. In order for the most users to access that content, they must be able to use <strong>keyboard events</strong>, particularly tabbing. For longer modal content, arrow keys should also retain the ability to scroll. And like tooltips, they should be dismissible with the <kbd>Esc</kbd> key &mdash; and there’s no way to enable that with CSS-only.</p>\n\n<p>JavaScript is required for focus management within modals. Modals should <em>trap</em> focus, which means once focus is within the modal, a user should <em>not</em> be able to tab out of it into the page content behind it. But first, focus has to get <em>inside</em> of the modal, which also requires JavaScript for a fully accessible modal solution.</p>\n\n<p>Here’s the <strong>sequence of modal related events</strong> that must be managed with JavaScript:</p>\n\n<ol>\n<li>Event listener on a button opens the modal</li>\n<li>Focus is placed within the modal; which element varies based on modal content (see decision tree)</li>\n<li>Focus is trapped within the modal until it is dismissed</li>\n<li>Preferably, a user is able to close a modal with the <kbd>Esc</kbd> key in addition to a dedicated close button <em>or</em> a destructive button action such as “Cancel” if acknowledgement of modal content is required\n\n<ol>\n<li>If <kbd>Esc</kbd> is allowed, clicks on the modal backdrop should also dismiss the modal</li>\n</ol></li>\n<li>Upon dismissal, if no navigation occurred, focus is placed back on the triggering button element</li>\n</ol>\n\n<h4 id=\"modal-focus-decision-tree\">Modal Focus Decision Tree</h4>\n\n<p>Based on the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/examples/dialog-modal/dialog.html\">WAI-ARIA Authoring Practices Modal Dialog Example</a>, here is a simplified decision tree for where to place focus once a modal is opened. Context will always dictate the choice here, and ideally focus is managed further than simply “the first focusable element”. In fact, sometimes non-focusable elements need to be selected.</p>\n\n<ul>\n<li><strong>Primary subject of the modal is a form.</strong><br />\nFocus first form field.</li>\n<li><strong>Modal content is significant in length and pushes modal actions out of view.</strong><br />\nFocus a heading if present, or first paragraph.</li>\n<li><strong>Purpose of the modal is procedural (example: confirmation of action) with multiple available actions.</strong><br />\nFocus on the “least destructive” action based on the context (example: “OK”).</li>\n<li><strong>Purpose of the modal is procedural with one action.</strong><br />\nFocus on the first focusable element</li>\n</ul>\n\n<p><strong>Quick tip</strong>: <em>In the case of needing to focus a non-focusable element, such as a heading or paragraph, add <code>tabindex=&quot;-1&quot;</code> which allows the element to become programmatically focusable with JS but does not add it to the DOM tab order.</em></p>\n\n<p>Refer to the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/examples/dialog-modal/dialog.html\">WAI-ARIA modal demo</a> for more information on other requirements for setting up ARIA and additional details on how to select which element to add focus to. The demo also includes JavaScript to exemplify how to do focus management.</p>\n\n<p>For a ready-to-go solution, Kitty Giraudel has created <a href=\"https://a11y-dialog.netlify.app/\">a11y-dialog</a> which includes the feature requirements we discussed. Adrian Roselli also has <a href=\"https://adrianroselli.com/2020/10/dialog-focus-in-screen-readers.html\">researched managing focus of modal dialogs</a> and created a demo and compiled information on how different browser and screen reader combinations will communicate the focused element.</p>\n\n<h3 id=\"tabs\">Tabs</h3>\n\n<p>Tabbed interfaces involve a series of triggers that display corresponding content panels one at a time. The CSS “hacks” you may find for these involve using stylized radio buttons, or <code>:target</code>, which both allow only revealing a single panel at a time.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"240\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example tabs from Shopify Polaris and IBM Carbon\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Example tabs from Shopify Polaris and IBM Carbon. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/118262cd-04ee-4dfb-89dc-958995e5a0d6/3-css-js-requirements-accessible-components.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Here are the tab features that require JavaScript:</p>\n\n<ol>\n<li>Toggling the <code>aria-selected</code> attribute to true for the current tab and false for unselected tabs</li>\n<li>Creating a <em>roving tabindex</em> to distinguish tab selection from focus</li>\n<li>Move focus between tabs by responding to arrow key events (and optionally <code>Home</code> and <code>End</code>)</li>\n</ol>\n\n<p>Optionally, you can make tab selection follow focus &mdash; meaning when a tab is focused its also then selected and shows its associated tab panel. The WAI-ARIA Authoring Practices offers this <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_selection_follows_focus\">guide to making a choice for whether selection should follow focus</a>.</p>\n\n<p>Whether or not you choose to have selection follow focus, you will also use JavaScript to listen for arrow key events to move focus between tab elements. This is an alternative pattern to allow <strong>navigation of tab options</strong> since the use of a roving tabindex (described next) alters the natural keyboard tab focus order.</p>\n\n<h4 id=\"marker\" style=\"text-transform: none;\">About Roving <code>tabindex</code></h4>\n\n<p>The concept of a <a href=\"https://www.w3.org/TR/wai-aria-practices/#kbd_roving_tabindex\">roving tabindex</a> is that the value of the <code>tabindex</code> value is programmatically controlled to manage the focus order of elements. In regards to tabs, this means that only the selected tab is part of the focus order by way of setting <code>tabindex=&quot;0&quot;</code>, and unselected tabs are set to <code>tabindex=&quot;-1&quot;</code> which removes them from the natural keyboard focus order.</p>\n\n<p>The reason for this is so that when a tab is selected, the next tab will land a user’s focus within the associated tab panel. You may choose to make the element that is the tab panel focusable by assigning it <code>tabindex=&quot;0&quot;</code>, or that may not be necessary if there’s a guarantee of a <strong>focusable element within the tab panel</strong>. If your tab panel content will be more variable or complex, you may consider managing focus according to the decision tree we reviewed for modals.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"example-tab-patterns\">Example Tab Patterns</h3>\n\n<p>Here are some reference patterns for creating tabs:</p>\n\n<ul>\n<li><a href=\"https://dequeuniversity.com/library/aria/tabpanel\">Tabpanel demo from Deque University</a></li>\n<li><a href=\"https://scottaohara.github.io/a11y_tab_widget/\">Tab widget tests from Scott O’Hara</a> (tests several functional patterns)</li>\n<li><a href=\"https://inclusive-components.design/tabbed-interfaces/\">Tabbed Interfaces</a> from Heydon Pickering’s <em>Inclusive Components</em>, which demonstrates how tabs can be a progressive enhancement of a table of contents</li>\n</ul>\n\n<h3 id=\"carousels\">Carousels</h3>\n\n<p>Also called slideshows or sliders, carousels involve a series of rotating content panels (aka “slides”) that include control mechanisms. You will find these in many configurations with a wide range of content. They are somewhat notoriously considered <a href=\"https://shouldiuseacarousel.com/\">a bad design pattern</a>.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"360\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"An example carousel demo created with bxSlider\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      An example carousel demo created with bxSlider. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/994ef747-b95d-4b02-9a10-65da686d5e3a/4-css-js-requirements-accessible-components.jpg'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The tricky part about CSS-only carousels is that they may not offer controls, or they may use unexpected controls to manipulate the carousel movement. For example, you can again use the “checkbox hack” to cause the carousel to transition, but <strong>checkboxes impart the wrong type of information</strong> about the interaction to users of assistive tech. Additionally, if you style the checkbox labels to visually appear as forward and backward arrows, you are likely to give users of speech recognition software the wrong impression of what they should say to control the carousel.</p>\n\n<p>More recently, native <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\">CSS support for scroll snap</a> has landed. At first, this seems like the perfect CSS-only solution. But, even automated accessibility checking will <strong>flag these as un-navigable by keyboard users</strong> in case there is there no way to navigate them via interactive elements. There are other accessibility and user experience concerns with the default behavior of this feature, some of which I’ve included in <a href=\"https://smolcss.dev/#smol-scroll-snap\">my scroll snap demo on SmolCSS</a>.</p>\n\n<p>Despite the wide range in how carousels look, there are some common traits. One option is to <a href=\"https://dequeuniversity.com/library/aria/carousel\">create a carousel using tab markup</a> since effectively it’s the same underlying interface with an altered visual presentation. Compared to tabs, carousels may offer extra controls for previous and next, and also pause if the carousel is auto-playing.</p>\n\n<p>The following are JavaScript considerations depending on your carousel features:</p>\n\n<ul>\n<li><strong>Using Paginated Controls</strong><br />\nUpon selection of a numbered item, programmatically focus the associated carousel slide. This will involve setting up slide containers using roving tabindex so that you can focus the current slide, but prevent access to off-screen slides.</li>\n<li><strong>Using Auto-Play</strong><br />\nInclude a pause control, and also enable pausing when the slide is hovered or an interactive element within it is focused. Additionally, you can <a href=\"https://web.dev/prefers-reduced-motion/\">check for <code>prefers-reduced-motion</code> within JavaScript</a> to load the slideshow in a paused state to respect user preferences.</li>\n<li><strong>Using Previous/Next Controls</strong><br />\nInclude a visually hidden element marked as <code>aria-live=&quot;polite&quot;</code> and upon these controls being activated, populate the live region with an indication of the current position, such as “Slide 2 of 4”.</li>\n</ul>\n\n<h4 id=\"resources-for-building-accessible-carousels\">Resources For Building Accessible Carousels</h4>\n\n<ul>\n<li>Thorough implementation details and considerations as well as a full code example from the <a href=\"https://www.w3.org/WAI/tutorials/carousels/\">W3C Web Accessibility tutorial on carousels</a></li>\n<li>Deque University’s example of <a href=\"https://dequeuniversity.com/library/aria/carousel\">enhancing a tab interface into a carousel</a></li>\n<li>The WAI-ARIA Authoring Practices example of an <a href=\"https://www.w3.org/TR/2019/NOTE-wai-aria-practices-1.1-20190814/examples/carousel/carousel-1.html\">auto-rotating image carousel</a></li>\n<li>A <a href=\"https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/#accessible-carousels-and-content-sliders\">selection of carousel resources</a> in Smashing’s roundup of accessible components</li>\n</ul>\n\n<h3 id=\"dropdown-menus\">Dropdown Menus</h3>\n\n<p>This refers to a component where a button toggles open a list of links, typically used for navigation menus. CSS implementations that stop at showing the menu on <code>:hover</code> or <code>:focus</code> only miss some important details.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"360\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example dropdown menus from Dribbble, Google search, and GitHub\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Example dropdown menus from Dribbble, Google search, and GitHub. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/365cc532-dc82-49a3-8326-4ed2692519f9/5-css-js-requirements-accessible-components.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>I’ll admit, I even thought that by using the newer <code>:focus-within</code> property we could safely implement a CSS-only solution. You’ll see that <a href=\"https://moderncss.dev/css-only-accessible-dropdown-navigation-menu/\">my article on CSS dropdown menus</a> was amended to include notes and resources on the necessary JavaScript (I kept the title so that others seeking that solution will hopefully complete the JS implementation, too). Specifically, relying on only CSS means violating <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\">WCAG Success Criterion 1.4.13: Content on Hover or Focus</a> which we learned about with tooltips.</p>\n\n<p>We need to add in JavaScript for some techniques that should sound familiar at this point:</p>\n\n<ul>\n<li>Toggling <code>aria-expanded</code> on the menu button between <code>true</code> and <code>false</code> by listening to  <code>click</code> events</li>\n<li>Closing an open menu upon use of the <kbd>Esc</kbd> key, and returning focus to the menu toggle button</li>\n<li>Preferably, closing open menus when focus is moved outside of the menu</li>\n<li><em>Optional</em>: Implement arrow keys as well as <code>Home</code> and <code>End</code> keys for keyboard navigation between menu toggle buttons and links within the dropdowns</li>\n</ul>\n\n<p><strong>Quick tip</strong>: <em>Ensure the correct implementation of the dropdown menu by associating the menu display to the selector of <code>.dropdown-toggle[aria-expanded=</code><code>&quot;</code><code>true</code><code>&quot;</code><code>] + .dropdown</code> rather than basing the menu display on the presence of an additional JS-added class like <code>active</code>. This removes some complexity from your JS solution, too!</em></p>\n\n<p>This is also referred to as a “disclosure pattern” and you can find more details in the WAI-ARIA Authoring Practices’s <a href=\"https://w3c.github.io/aria-practices/examples/disclosure/disclosure-navigation.html\">Example Disclosure Navigation Menu</a>.</p>\n\n<h4 id=\"additional-resources-on-creating-accessible-components\">Additional resources on creating accessible components</h4>\n\n<ul>\n<li>Smashing’s <a href=\"https://www.smashingmagazine.com/2021/03/complete-guide-accessible-front-end-components/\">Complete Guide to Accessible Front-End Components</a></li>\n<li>Carie Fisher’s article <a href=\"https://www.smashingmagazine.com/2021/03/good-better-best-untangling-complex-world-accessible-patterns/\">Good, Better, Best: Untangling The Complex World Of Accessible Patterns</a></li>\n<li>Demos and information on common design patterns and widgets available from the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.2/\">WAI-ARIA Authoring Practices 1.2</a></li>\n<li><a href=\"https://dequeuniversity.com/library/\">Deque University’s Code Library</a></li>\n<li><a href=\"https://github.com/scottaohara/accessible_components\">Scott O’Hara’s Accessible Components</a></li>\n<li>Heydon Pickering’s <a href=\"https://inclusive-components.design/\">Inclusive Components</a></li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Svelte 3: A Radical Compiler-based JavaScript Framework"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/svelte-javascript-framework-introduction/?utm_source=rss\"\n              title=\"Svelte 3: A Radical Compiler-based JavaScript Framework\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611557391svelte.png\"\n        alt=\"Meet Svelte 3, a Powerful, Even Radical JavaScript Framework\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611557391svelte-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611557391svelte.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll explore <a href=\"https://svelte.dev/\">Svelte 3</a>, a front-end JavaScript framework that takes a slightly different approach to frameworks. Whereas frameworks like React ship a large bundle of JavaScript, Svelte applications are compiled by the Svelte compiler into JavaScript that claims to be much smaller than the equivalent React code. And because the code runs through the Svelte compiler, it can also be optimized.</strong></p>\n<p>Svelte also takes a very different approach to managing data — no <code>useState</code> hooks in sight — and it&#8217;s a lot of fun to work with. Even if you&#8217;re a big fan of React or any of the other popular frameworks, Svelte is worth checking out. In this introduction, we&#8217;ll build a small example application to get a taste of what Svelte can offer. Let&#8217;s get started!</p>\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<p>We&#8217;re not going to dive too much into bundling and the infrastructure of Svelte apps in this tutorial, so we&#8217;ll follow the Svelte tutorial to get an application up and running.</p>\n<p>We’ll need to have <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">Node</a> and <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">Git</a> installed locally. Then we can run:</p>\n<pre><code class=\"bash language-bash\">npx degit sveltejs/template github-repository-searcher\r\n</code></pre>\n<p>This will clone the Svelte template repository into the <code>github-repository-searcher</code> folder (the app we&#8217;re building will use the GitHub API to search for repositories) and set up all the tooling for us. I highly recommend this approach if you&#8217;re focusing on learning Svelte: it will let you dive right into the framework and not get bogged down in build configuration.</p>\n<p>Once that command above has completed, you can <code>cd github-repository-searcher</code> to change to that directory, and then run <code>npm install</code> to install all the dependencies. Once that&#8217;s done, <code>npm run dev</code> will get the app up and running, using the Rollup bundler to build the application. Visiting <a href=\"http://localhost:5000\">http://localhost:5000</a> should present you with the Svelte Hello World page, and now we&#8217;re good to get building!</p>\n<h2 id=\"asveltecomponent\">A Svelte component</h2>\n<p>Before we start building out more Svelte components, let&#8217;s take a look at the existing component that the template comes with. The first thing to note is that Svelte components are defined in a <code>.svelte</code> file. <code>App.svelte</code> (located in the <code>src</code> folder) is split into three parts:</p>\n<pre><code class=\"markup language-markup\">&lt;script&gt;\r\n  export let name;\r\n&lt;/script&gt;\r\n\r\n&lt;style&gt;\r\n  /* CSS removed to save space */\r\n&lt;/style&gt;\r\n\r\n&lt;main&gt;\r\n  &lt;h1&gt;Hello {name}!&lt;/h1&gt;\r\n  &lt;p&gt;\r\n    Visit the\r\n    &lt;a href=\"https://svelte.dev/tutorial\"&gt;Svelte tutorial&lt;/a&gt;\r\n    to learn how to build Svelte apps.\r\n  &lt;/p&gt;\r\n&lt;/main&gt;\r\n</code></pre>\n<p>Working with these Svelte files will be much easier if your editor understands them and can syntax highlight them correctly. <a href=\"https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode\">Svelte provides a VS Code extension</a>, which is what I use, but if you use a different editor I suggest searching on Google. Svelte has a good-sized community, so it&#8217;s likely that plugins exist for most popular editors.</p>\n<p>Svelte components are split into three parts:</p>\n<ol>\n<li>The <code>script</code> tag is where all the JavaScript for the component is written.</li>\n<li>The <code>style</code> tag is where all the component&#8217;s CSS is defined. In a Svelte component, all CSS is scoped to that component by default, so any styles here <em>only apply to the component, not globally</em>.</li>\n<li>Anything else provided in the component is treated as HTML for the component to output. Svelte also provides templating logic to support conditional renders, looping over arrays, and so on.</li>\n</ol>\n<p>To run our application, use <code>npm run dev</code>. This will run Rollup, our bundler, and also a small HTTP server that will serve our application up on port 5000.</p>\n<h2 id=\"askingtheuserforagithubusername\">Asking the User for a GitHub Username</h2>\n<p>The first step of our application is to ask the user to provide a GitHub username. We&#8217;ll then take this name and search GitHub for a list of repositories that the user has. Let&#8217;s update <code>App.svelte</code> to do just that.</p>\n<p>First, in the <code>script</code> block, delete the <code>export let name</code> line. This is how we define props in Svelte, which work just like props in React. The <code>export</code> keyword here declares that this value is a prop that will be provided by the component&#8217;s parent. In our case though, our component won&#8217;t take any properties, so we can delete it. You&#8217;ll also need to then update <code>src/main.js</code> to remove the <code>props: {...}</code> code, as our <code>App</code> component doesn&#8217;t take any props. Once you&#8217;ve done that, <code>main.js</code> should look like this:</p>\n<pre><code class=\"javascript language-javascript\">import App from './App.svelte';\r\n\r\nconst app = new App({\r\n  target: document.body,\r\n});\r\n\r\nexport default app;\r\n</code></pre>\n<p>This file contains what is effectively the entry point to your application. Think of it as equal to the <code>ReactDOM.render</code>, if you&#8217;re familiar with React.</p>\n<p>Let&#8217;s update <code>App.svelte</code> with the HTML we want. We&#8217;ll create a simple form that asks the user for a username:</p>\n<pre><code class=\"markup language-markup\">&lt;script&gt;\r\n&lt;/script&gt;\r\n\r\n&lt;style&gt;\r\n  main {\r\n    width: 80%;\r\n    max-width: 800px;\r\n    margin: 20px auto;\r\n    padding: 20px;\r\n  }\r\n\r\n  label {\r\n    font-weight: bold;\r\n  }\r\n\r\n  input {\r\n    width: 80%;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;main&gt;\r\n  &lt;form&gt;\r\n    &lt;label for=\"username\"&gt;Enter a GitHub username:&lt;/label&gt;\r\n    &lt;input type=\"text\" name=\"username\" placeholder=\"jackfranklin\" /&gt;\r\n    &lt;button type=\"submit\"&gt;Load repositories&lt;/button&gt;\r\n  &lt;/form&gt;\r\n&lt;/main&gt;\r\n</code></pre>\n<p>We won&#8217;t focus on CSS in this tutorial (I&#8217;m no designer!), but I&#8217;ve applied a small amount of CSS to make things look a little nicer. Now that we have our form, let&#8217;s look at how we hook it up with Svelte. The first thing to note is that there&#8217;s no explicit <code>useState</code> hook or similar; the approach Svelte takes is much closer to that of other frameworks like Vue or Angular, where you instead bind an input to a value. This is a common theme of Svelte, and shouldn&#8217;t be a surprise given one of its explicit goals is to <a href=\"https://svelte.dev/blog/write-less-code\">allow developers to write less code</a>.</p>\n<p>Let&#8217;s declare a variable for the input:</p>\n<pre><code class=\"javascript language-javascript\">let usernameInputField = '';\r\n</code></pre>\n<p>Then use Svelte&#8217;s <code>bind:value</code> directive in the template:</p>\n<pre><code class=\"markup language-markup\">&lt;input type=\"text\" name=\"username\" placeholder=\"jackfranklin\" bind:value={usernameInputField}&gt;\r\n</code></pre>\n<p>Svelte will do the rest for us: as the user types in the input, the variable <code>usernameInputField</code> will be updated and kept in sync.</p>\n<p>Once the user has typed in a username, we need to listen out for when they&#8217;ve submitted the form. Svelte uses the following syntax to bind event listeners:</p>\n<pre><code class=\"markup language-markup\">&lt;form on:submit={onSubmit}&gt;\r\n</code></pre>\n<p>This will call the <code>onSubmit</code> function when the user submits the form. There&#8217;s one more trick that Svelte has up its sleeve though, and that&#8217;s <a href=\"https://svelte.dev/tutorial/event-modifiers\">event modifiers</a>:</p>\n<pre><code class=\"markup language-markup\">&lt;form on:submit|preventDefault={onSubmit}&gt;\r\n</code></pre>\n<p>Now when Svelte sees a submit event on this form, it will automatically call <code>event.preventDefault()</code> for us. I love this: it&#8217;s one less thing for us to worry about and one more thing we can hand off to the framework.</p>\n<p>Back in our <code>script</code> tag we can define this <code>onSubmit</code> function. It will take the username and call the GitHub API to get a list of repositories (it will return the first 30 repositories, so you&#8217;ll need to paginate if you want to get all of them, but we&#8217;ll leave that for now):</p>\n<pre><code class=\"javascript language-javascript\">async function onSubmit() {\r\n  const url = `https://api.github.com/users/${usernameInputField}/repos`;\r\n\r\n  const response = await fetch(url);\r\n  const repositories = await response.json();\r\n  console.log('loaded repositories', repositories)\r\n}\r\n</code></pre>\n<p>Once we have these repositories, we want to list them on the page and allow the user to search for a given repository. Rather than do this all in the <code>App.svelte</code> component, let&#8217;s create a new component called <code>Search.svelte</code>. It will take the list of repositories and provide an input for the user to search for the repository they’re after.</p>\n<p>Create a new file in the existing directory called <code>Search.svelte</code>. I like to start my components with a small amount of boilerplate just to check I&#8217;ve got everything set up:</p>\n<pre><code class=\"markup language-markup\">&lt;script&gt;\r\n&lt;/script&gt;\r\n\r\n&lt;style&gt;\r\n&lt;/style&gt;\r\n\r\n&lt;p&gt;Search component&lt;/p&gt;\r\n</code></pre>\n<p>Then when I render this component on the page, I&#8217;ll be able to tell if it&#8217;s rendering correctly.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/svelte-javascript-framework-introduction/?utm_source=rss\">Svelte 3: A Radical Compiler-based JavaScript Framework</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/svelte-javascript-framework-introduction/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180754",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Jack Franklin"
        ],
        "pubDate": [
            "Sun, 24 Jan 2021 14:00:41 GMT"
        ],
        "metaDesc": [
            "Meet Svelte 3, a radical JavaScript framework. With its compiler-based approach, it's not for everybody - but it's worth considering."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Fetching Data from a Third-party API with Vue.js and Axios"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/fetching-data-third-party-api-vue-axios/?utm_source=rss\"\n              title=\"Fetching Data from a Third-party API with Vue.js and Axios\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2019/04/1614731082fetch-data-3rd-party-api-axios-vue.jpg\"\n        alt=\"Fetching Data from a Third-party API with Vue.js and Axios\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2019/04/1614731082fetch-data-3rd-party-api-axios-vue-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2019/04/1614731082fetch-data-3rd-party-api-axios-vue-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2019/04/1614731082fetch-data-3rd-party-api-axios-vue-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2019/04/1614731082fetch-data-3rd-party-api-axios-vue.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>More often than not, when building your JavaScript application, you’ll want to fetch data from a remote source or consume an <a href=\"https://en.wikipedia.org/wiki/Application_programming_interface\">API</a>. There’s lots of cool stuff that can be done with data from a range of <a href=\"https://github.com/toddmotto/public-apis\">publicly available APIs</a>.</strong></p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/04/1492025578APIB-01.png\" alt=\"A woman collecting data from library shelves\" /></p>\n<p>With <a href=\"https://vuejs.org/\">Vue.js</a>, you can literally build an app around one of these services and start serving content to users in minutes.</p>\n<p>I’ll demonstrate how to build a simple news app that will show the top news articles of the day, and that will allow users to filter by their category of interest, fetching data from <a href=\"https://developer.nytimes.com/\">the New York Times API</a>. You can find the complete code for this tutorial <a href=\"https://github.com/sitepoint-editors/vue-news-app\">here</a>.</p>\n<p>Here’s what the final app will look like:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613472666vue-news-final-app.png\" alt=\"vue-news-final-app\" /></p>\n<p>To follow along with this tutorial, you’ll need Node.js and (optionally) <a href=\"https://yarnpkg.com/\">Yarn</a> installed on your machine. To install Node, you can either head to the <a href=\"https://nodejs.org/en/download/\">official download page</a> and grab the Node binaries for your system, or use a <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">version manager</a> instead. </p>\n<p>Once Node is installed, to pull in Yarn, run:</p>\n<pre><code class=\"bash language-bash\">npm i -g yarn\r\n</code></pre>\n<p>You&#8217;ll also require a basic knowledge of Vue.js. You can find a great getting started guide for that <a href=\"https://v3.vuejs.org/guide/introduction.html\">here</a>. </p>\n<h2 id=\"acquireanapikey\">Acquire an API Key</h2>\n<p>To make use of the NYTimes API, you’ll need to get an API key. So if you don’t already have one, head over to their <a href=\"https://developer.nytimes.com/signup\">signup page</a> and register to get an API key for the <a href=\"https://developer.nytimes.com/top_stories_v2.json\">Top Stories API</a>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/161347247001-nyt-register-api-key.png\" alt=\"01-nyt-register-api-key\" /></p>\n<p>We&#8217;ll be using the <a href=\"https://developer.nytimes.com/docs/top-stories-product/1/overview\">top stories</a> API endpoint to fetch data from. Take note that there are multiple sections such as &#8220;home&#8221;, &#8220;travel&#8221;, &#8220;arts&#8221; and &#8220;science&#8221; that this API provides. We&#8217;ll need to build a filter that can allow users to select a section and load the stories within it.</p>\n<p>Below are example calls:</p>\n<pre><code class=\"http language-http\">https://api.nytimes.com/svc/topstories/v2/arts.json?api-key=yourkey\r\nhttps://api.nytimes.com/svc/topstories/v2/home.json?api-key=yourkey\r\nhttps://api.nytimes.com/svc/topstories/v2/science.json?api-key=yourkey\r\nhttps://api.nytimes.com/svc/topstories/v2/us.json?api-key=yourkey\r\nhttps://api.nytimes.com/svc/topstories/v2/world.json?api-key=yourkey\r\n</code></pre>\n<p>Feel free to use your favorite REST client (such as <a href=\"https://hoppscotch.io/\">Hoppscotch</a> or <a href=\"https://insomnia.rest/\">Insomnia</a>) to test your API calls.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/161347246801b-insomnia-rest-client.png\" alt=\"insomnia rest client\" /></p>\n<h2 id=\"projectstructure\">Project Structure</h2>\n<p>Let&#8217;s quickly spin up a Vue 3 project using <a href=\"https://vitejs.dev/guide/\">Vite</a>, a dev server that runs faster than <a href=\"https://cli.vuejs.org/\">Vue CLI</a>:</p>\n<pre><code class=\"bash language-bash\">yarn create @vitejs/app vue-news-app --template vue\r\n\r\n# Install package dependencies\r\ncd vue-news-app\r\nyarn install\r\n\r\n# Confirm app can run\r\nyarn dev\r\n</code></pre>\n<p>Open <code>localhost:3000</code> in your browser. You should have the following view:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/161347247202-create-vue-app.png\" alt=\"create vue app\" /></p>\n<p>Next, let&#8217;s install the <a href=\"https://tailwindcss.com/\">TailwindCSS</a> framework to provide some basic styling. You&#8217;ll need to stop the server in order to perform this action:</p>\n<pre><code class=\"bash language-bash\">yarn add -D tailwindcss@latest postcss@latest autoprefixer@latest\r\n\r\n# Generate tailwind.config.js and postcss.config.js files\r\nnpx tailwindcss init -p\r\n</code></pre>\n<p>We&#8217;ll need some additional package utilities to help us format dates and clamp the number of lines for the <code>abstract</code> field:</p>\n<pre><code class=\"bash language-bash\">yarn add @tailwindcss/line-clamp date-fns\r\n</code></pre>\n<p><code>@tailwindcss/line-clamp</code> is a plugin that needs to be included in <code>tailwind.config.js</code>. Below is the full configuration:</p>\n<pre><code class=\"javascript language-javascript\">module.exports = {\r\n  purge: [\"./index.html\", \"./src/**/*.{vue,js,ts,jsx,tsx}\"],\r\n  darkMode: false, // or 'media' or 'class'\r\n  theme: {\r\n    extend: {},\r\n  },\r\n  variants: {\r\n    extend: {},\r\n  },\r\n  plugins: [require(\"@tailwindcss/line-clamp\")],\r\n}\r\n</code></pre>\n<p>Next, create an <code>index.css</code> file in the <code>src</code> folder and add this code:</p>\n<pre><code class=\"css language-css\">@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\nbody {\r\n  @apply antialiased text-green-900 bg-green-50;\r\n  font-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\r\n}\r\n\r\n#app {\r\n  @apply flex flex-col min-h-screen overflow-x-hidden;\r\n}\r\n</code></pre>\n<p>In addition to importing the required Tailwind CSS classes, we&#8217;ve included a few CSS settings to help us define the default theme of our application. We&#8217;ve also implemented a flex layout system to help us create a sticky header and footer for our application.</p>\n<p>We&#8217;ll need to import <code>index.css</code> in <code>src/main.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">import { createApp } from \"vue\"\r\nimport App from \"./App.vue\"\r\nimport \"./index.css\"\r\n\r\ncreateApp(App).mount(\"#app\")\r\n</code></pre>\n<p>Let&#8217;s now go ahead and define our application layout. First, clear out any existing components in <code>src/components</code>. Next, within the same folder, create these three files:</p>\n<ul>\n<li><code>Layout.vue</code></li>\n<li><code>Header.vue</code></li>\n<li><code>Footer.vue</code></li>\n</ul>\n<p>Copy the following code for each file:</p>\n<p><strong>src/components/Footer.vue</strong>:</p>\n<pre><code class=\"javascript language-javascript\">&lt;template&gt;\r\n  &lt;footer\r\n    class=\"px-4 py-8 text-sm font-bold text-center text-green-100 bg-green-900\"&gt;\r\n    &lt;p class=\"text-sm tracking-wide\"&gt;Copyright (c) 2021 SitePoint&lt;/p&gt;\r\n  &lt;/footer&gt;\r\n&lt;/template&gt;\r\n</code></pre>\n<p><strong>src/components/Header.vue</strong>:</p>\n<pre><code class=\"javascript language-javascript\">&lt;template&gt;\r\n  &lt;header class=\"flex justify-center py-6 bg-green-900 place-items-center\"&gt;\r\n    &lt;img alt=\"Vue logo\" src=\"../assets/logo.png\" width=\"32\" /&gt;\r\n    &lt;span class=\"ml-4 text-lg font-bold text-green-100 md:text-xl\"&gt;\r\n      Vue News | NYTimes Edition\r\n    &lt;/span&gt;\r\n  &lt;/header&gt;\r\n&lt;/template&gt;\r\n</code></pre>\n<p><strong>src/components/Layout.vue</strong>:</p>\n<pre><code class=\"javascript language-javascript\">&lt;template&gt;\r\n  &lt;Header /&gt;\r\n  &lt;main class=\"container flex-grow px-4 mx-auto my-12\"&gt;\r\n    &lt;slot /&gt;\r\n  &lt;/main&gt;\r\n  &lt;Footer /&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nimport Header from \"./Header.vue\"\r\nimport Footer from \"./Footer.vue\"\r\n\r\nexport default {\r\n  components: {\r\n    Header,\r\n    Footer,\r\n  },\r\n}\r\n&lt;/script&gt;\r\n</code></pre>\n<p>Finally, update <code>src/App.vue</code>:</p>\n<pre><code class=\"javascript language-javascript\">&lt;template&gt;\r\n  &lt;Layout&gt;\r\n    &lt;p&gt;Main content goes here&lt;/p&gt;\r\n  &lt;/Layout&gt;\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\nimport Layout from \"./components/Layout.vue\"\r\n\r\nexport default {\r\n  components: {\r\n    Layout,\r\n  },\r\n}\r\n&lt;/script&gt;\r\n</code></pre>\n<p>Execute <code>yarn dev</code>. The browser should refresh automatically.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/161347247403-vue-layout.png\" alt=\"vue layout\" /></p>\n<p>With the application layout completed, we can now start building the core logic of our news app.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/fetching-data-third-party-api-vue-axios/?utm_source=rss\">Fetching Data from a Third-party API with Vue.js and Axios</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/fetching-data-third-party-api-vue-axios/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=152461",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Ajax",
            "JavaScript"
        ],
        "dc:creator": [
            "Olayinka Omole, Michael Wanyoike"
        ],
        "pubDate": [
            "Tue, 02 Mar 2021 14:00:57 GMT"
        ],
        "metaDesc": [
            "Learn how to start a new Vue project, fetch data from an API using axios, and handle responses and manipulate data using components and computed properties."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Adding Support for Multi-Audio Tracks in The Eyevinn Channel Engine"
        ],
        "author": [
            "Nicholas Frederiksen"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 07:57:06 +0000"
        ],
        "link": [
            "https://dev.to/video/adding-support-for-multi-audio-tracks-in-the-eyevinn-channel-engine-2bii"
        ],
        "guid": [
            "https://dev.to/video/adding-support-for-multi-audio-tracks-in-the-eyevinn-channel-engine-2bii"
        ],
        "description": [
            "<p>In this blog post, I'll describe how I extended the current demuxed audio feature so that the Channel Engine could play multiple audio tracks. I will also assume that reader is somewhat familiar with the HLS straming format and Channel Engine or has at least read the documentation in the Channel Engine git repo <a href=\"https://github.com/Eyevinn/channel-engine\">link</a>, or this article <a href=\"https://eyevinntechnology.medium.com/server-less-ott-only-playout-bc5a7f2e6d04\">link</a> beforehand.</p>\n\n<h3>\n  <a href=\"#introduction\">\n  </a>\n  Introduction\n</h3>\n\n<p>The Eyevinn Channel Engine is an Open-Source service that works well with muxed VODs, but when it comes to demuxed VODs, it does the bare minimum at the moment, namely just using the first audio track it could find. This demuxed support feature can certainly be extended. </p>\n\n<p>But before we get into it, I need to clarify what I mean when I say \"audio tracks\" and \"audio groups\", as I will be using these words throughout this post. </p>\n\n<p>In an HLS master manifest, you can have a media item with the attribute <code>TYPE=AUDIO</code> with a reference to a media playlist manifest containing the audio segments. This is what I will be referring to as an \"audio track\". Multiple audio tracks can exist in the HLS master manifest. These tracks can be grouped/categorized, by the media item's GROUP-ID attribute. Audio tracks that have the same GROUP-ID value is what I will refer as an \"audio group\". In other words, an audio group consists of one or more audio tracks. GROUP-IDs are an HLS requirement for media items.</p>\n\n<p>Now, a quick overview as to how the old demuxed audio feature worked.</p>\n\n<p>The Channel Engine would create a master manifest for its channel stream based on the specifications detailed in the <code>ChannelManager</code> object, which one passes as an option to the Channel Engine instance. If we passed a variable signaling the Channel Engine that we want to use demuxed content then the Channel Engine will do the following extra steps when creating the master manifest.</p>\n\n<p>The Channel Engine will add 1 media item of type audio to the master manifest with the GROUP-ID attribute set to the first GROUP-ID found in a stream item in the VOD asset's master manifest.</p>\n\n<p>Then when the audio track is requested by the player/client, the Channel Engine will respond with an audio playlist manifest. The playlist will have references to audio segments belonging to the VOD asset's first available audio track for that audio group. Even if there are multiple audio groups in the VOD, they won't be used. Even if there are multiple audio tracks within the audio groups, they won't be used. There is clearly potential here to add support for using more than one specific audio track and audio group.</p>\n\n<h3>\n  <a href=\"#challenges\">\n  </a>\n  Challenges\n</h3>\n\n<p>The task in question will have some implementation challenges. <br>\nA few things needed to be taken into account. Namely:</p>\n\n<ul>\n<li>How to have the client select a track of a certain audio group.</li>\n<li>How to have the client select a certain language/audio track within the selected audio group.</li>\n<li>How to handle the case where the requested audio group is not present in the current VOD.</li>\n<li>How to handle the case where the requested language is not present amongst the current VOD's audio tracks for that audio group.</li>\n<li>How to handle VOD stitching when VODs have a different set of audio groups.</li>\n<li>How to handle VOD stitching when VODs have a different set of languages/audio tracks.</li>\n</ul>\n<h3>\n  <a href=\"#delimitations\">\n  </a>\n  Delimitations\n</h3>\n\n<p>My implemented solution in its current state did not cover every edge case. Meaning that some points mentioned in <strong>Challenges</strong> have yet to be addressed. However, the implementation works fairly well for the most basic case and can be extended in the future to handle more edge cases.</p>\n\n<p>My solution will assume that every VOD uses the same audio GROUP-ID and uses mostly the same languages in their audio tracks.</p>\n\n<p>As a side-note, the effects of VODs not using the same GROUP-ID will result in an error. A proposed solution is mentioned in the <strong>Future Work</strong> chapter.</p>\n<h3>\n  <a href=\"#implementation\">\n  </a>\n  Implementation\n</h3>\n\n<p>The following steps give an overview of how I added support for multi-audio in the Channel Engine.</p>\n\n<p><strong>Step 1: Adding audio media items to the master manifest based on a set of predefined audio languages.</strong></p>\n\n<p>To address the challenge of how the client is to select a certain audio group and audio track, I extended the current method in place, which became a reiteration of the method used for selecting different VOD profiles.</p>\n\n<p>The plan was to let the client select a track based on what's been predefined. So to have it work like it does for VOD profiles, I needed to extend the <code>ChannelManager</code> class with an extra function.</p>\n\n<p>Media Items are added to the Master Manifest with attribute values set according to a predefined JSON object, defined in a <code>_getAudioTracks()</code> function in the <code>ChannelManager</code> class/object.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--t0B-euqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9psssbj99ot492wk9oh.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--t0B-euqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9psssbj99ot492wk9oh.PNG\" alt=\"Alt Text\"></a></p>\n\n<p>Now the resulting master manifest may look something like this...<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>#EXTM3U\n#EXT-X-VERSION:4\n## Created with Eyevinn Channel Engine library (version=2.19.3)\n##    https://www.npmjs.com/package/eyevinn-channel-engine\n#EXT-X-SESSION-DATA:DATA-ID=\"eyevinn.tv.session.id\",VALUE=\"1\"\n#EXT-X-SESSION-DATA:DATA-ID=\"eyevinn.tv.eventstream\",VALUE=\"/eventstream/1\"\n\n# AUDIO groups\n#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"audio\",LANGUAGE=\"en\", NAME=\"English\",AUTOSELECT=YES,DEFAULT=YES,CHANNELS=\"2\",URI=\"master-audio_en.m3u8;session=1\"\n#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID=\"audio\",LANGUAGE=\"sv\", NAME=\"Swedish\",AUTOSELECT=YES,DEFAULT=NO,CHANNELS=\"2\",URI=\"master-audio_sv.m3u8;session=1\"\n\n#EXT-X-STREAM-INF:BANDWIDTH=6134000,RESOLUTION=1024x458,CODECS=\"avc1.4d001f,mp4a.40.2\",AUDIO=\"audio\"\nmaster6134000.m3u8;session=1\n#EXT-X-STREAM-INF:BANDWIDTH=2323000,RESOLUTION=640x286,CODECS=\"avc1.4d001f,mp4a.40.2\",AUDIO=\"audio\"\nmaster2323000.m3u8;session=1\n#EXT-X-STREAM-INF:BANDWIDTH=1313000,RESOLUTION=480x214,CODECS=\"avc1.4d001f,mp4a.40.2\",AUDIO=\"audio\"\nmaster1313000.m3u8;session=1\n\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Note: Notice that GROUP-ID is not a field in the audioTrack JSON, and so the GROUP-ID in the master manifest's media items are actually permanently set to the first GROUP-ID found in the very first VOD. This is how it worked before, and my feature extension has kept it that way for now. See <strong>Delimitations</strong>. </p>\n</blockquote>\n\n<p>Next was to make some small adjustments to the route handler (specifically <code>_handleAudioManifest()</code>) for the endpoint of a URI in a media item. <br>\nThe Channel Engine reads parameter values from the client request in a clever way. Values can be extracted from the request path itself.<br>\nValues extracted are the audio group Id and language. This tells us what segments we are to include in the media manifest response.      </p>\n\n<p><strong>Step 2: Make it possible in HLS-vodtolive, to load in all audio groups, and also all audio tracks for each audio group.</strong></p>\n\n<p>Now that we know what segments the client is looking for, how do we find them? This is where the Eyevinn dependency package <code>hls-vodtolive</code> comes into play.</p>\n\n<p>In short, the <code>hls-vodtolive</code> package creates an HLSVod class/object which given a VOD master manifest as input, will load and store all segments referenced in that manifest into a JSON object organized by profiles. An HLSVod object will also divide the segments into an array of subsets, that we call media sequences. So each subset/media sequence will be used to create a pseudo-live looking media manifest.  </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1-BotvSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htiuqwel07br58rueji.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1-BotvSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htiuqwel07br58rueji.png\" alt=\"Alt Text\"></a></p>\n\n<p>This class however, did not properly load segments from audio media manifests. An extension was needed. </p>\n\n<p>Not going into detail, I can say that it was changed so that the HLSVod would load all audio segments from every audio media manifest and organize them by audio groups, then by languages.<br>\nEffectively, storing all audio segments possible from the original VOD manifest.    </p>\n\n<p><strong>Step 3: Make it so that you can stitch audio tracks between two HLSVods.</strong></p>\n\n<p>This step involves more expansions to the <code>hls-vodtolive</code> package. Expansions are done to the HLSVod class function <code>_loadPrevious()</code>.</p>\n\n<p>You see, an HLSVod can load after another when using the function <code>loadAfter()</code>, and when doing so will inherit some segments from the HLSVod before it. This basically makes it possible to create media sequences that smoothly go from the contents of one VOD to the other, using HLS discontinuity tags. </p>\n\n<blockquote>\n<p>Look at the Channel Engine chapter in Server-less OTT-Only Playout article for more info on it <a href=\"https://eyevinntechnology.medium.com/server-less-ott-only-playout-bc5a7f2e6d04\">Link</a>.    </p>\n</blockquote>\n\n<p>The tricky part is deciding who inherits what from who. <br>\nIdeally, if the 2 HLSVods in question have the same set of languages and audio group names, then it's fairly straightforward who gets what. But if they have nothing in common, then it suddenly becomes ambiguous. However, it is probably more likely that the Channel Engine User is using VOD assets that have at least some common languages/audio tracks.  </p>\n\n<p>That being said, it is a possibility that the VOD assets may have named their GROUP-IDs differently. However, as of now, it is assumed that this is not the case. This addressed in the <strong>Delimitations</strong> chapter, and then again in the <strong>Future Work</strong> chapter below.</p>\n\n<p>See the figures below for a visual representation of the challenge. The figure depicts a scenario where the prior HLSVod has audio tracks for the languages English, Swedish, and Russian. While the current HLSVod has audio tracks for English, Swedish, and Norwegian. <br>\nThe outer box represents the current HLSVod object, and the inner colored boxes represent audio tracks in the HLSVod.<br>\nThe blue and red represent the prior VOD segments and current VOD segments respectively. Again it is assumed that both HLSVods have the same audio group.</p>\n\n<p>So... matching languages inherit segments from each other, but what segments does the unique languages inherit? </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9GHlI4cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9kgo2iuhk6mxmunxuk2.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9GHlI4cA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j9kgo2iuhk6mxmunxuk2.PNG\" alt=\"Alt Text\"></a></p>\n\n<p>The answer is... any segments really. What is important is that we can enable generating media sequences that transition smoothly and that the client gets the proper audio for the VOD. Sure it might not be in the expected language, but at least the HLS player will not be confused. </p>\n\n<p>However, I thought it would be best for the unique languages to inherit segments from the previous VOD's default language, or more specifically the first loaded language (which usually corresponds to the default language in a demuxed VOD).<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eMCk4o10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b2m1grsfv31h8369pal.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eMCk4o10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b2m1grsfv31h8369pal.PNG\" alt=\"Alt Text\"></a></p>\n\n<p>Lastly, in case a loaded language from the previous VOD did not get inherited at all, then we simply remove it from our collection of audio tracks for an audio group, so that we do not evoke any false positives when a request comes for that language.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s0imneuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvnc8wapa5qxko8n8amy.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s0imneuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvnc8wapa5qxko8n8amy.PNG\" alt=\"Alt Text\"></a></p>\n\n<p>But this brings up an interesting question. What do we do if a request comes for a language that is not in the HLSVod's collection? </p>\n\n<p>Well, we simply provide a fallback track. In other words, let's say the client is requesting an audio track in the language of Russian but the current VOD only has English and Swedish, then we will respond with the English audio track instead, assuming that English was the first loaded audio track for the HLSVod.</p>\n\n<p>And that's all there was to it! <br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7U5h1zmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xncnqubaahd9gyrq28ks.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7U5h1zmo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xncnqubaahd9gyrq28ks.gif\" alt=\"Alt Text\"></a><br>\nAfter these steps it now became possible to play, select, and transition between audio tracks for demuxed VODs in the Channel Engine.</p>\n\n<h3>\n  <a href=\"#future-work\">\n  </a>\n  Future Work\n</h3>\n\n<ul>\n<li>Add support for a fallback audio group</li>\n</ul>\n\n<p>Adding a fallback audio group when an audio group is not found will help to ensure that the Channel Engine stream will always have audio to play. Doing this, it is important to make sure that every audio track in the fallback audio group has segments from the prior VOD stitched in front of it. It would probably work again to distribute segments from the prior VODs first loaded audio track for its first loaded audio group. </p>\n\n<ul>\n<li>Add support for presetting, selecting, and using multiple audio groups.</li>\n</ul>\n\n<p>As of now, we only support the use of a single audio group. If there ever is a need to want to use more than one audio group at a time in Channel Engine, then we would need to expand channel options in the <code>ChannelManager</code>. However, there will be a challenge in how we then deal with mapping between audio groups of different names among VODs.  </p>\n\n<ul>\n<li>Loading audio tracks that have the same language in a single VOD.</li>\n</ul>\n\n<p>We do not support the loading of duplicate languages, but they do occur in HLS manifests. For example, a VOD could have an English track and an English Commentary track in it, both setting their language value to \"en\". In our current state, only the first English track would be loaded.<br>\nNow the use case for having an English commentary track as a preset track is not very common, I'd imagine. But it could be nice to have support for it if it ever became a desired feature in Channel Engine.<br>\nThat said... An immediate workaround would be to prepare the HLS manifest beforehand and just make sure that every media item has a unique language value. </p>\n\n<p><em>Nicholas Frederiksen is a developer at Eyevinn Technology, the European leading independent consultancy firm specializing in video technology and media distribution.</em></p>\n\n<p><em>If you need assistance in the development and implementation of this, our team of video developers are happy to help you out. If you have any questions or comments just drop a line in the comments section to this post.</em></p>\n\n"
        ],
        "category": [
            "opensource",
            "streaming",
            "hls"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Issue #463"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/dBIv_BPD1-s/"
        ],
        "pubDate": [
            "Wed, 23 Jun 2021 21:03:00 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-463/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to combine media queries with container queries, how to optimize web vitals using Lighthouse, how to style scrollbars, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://mxb.dev/blog/media-queries-in-times-of-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Media Queries in Times of @container</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://mxb.dev/blog/media-queries-in-times-of-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/media-queries-in-times-of-container-queries.jpg\" alt=\"Media Queries in Times of @container\" /></a>\n\t\t\t\t\t\t<p>Max Böck explores the role of media queries within the context of newly available container queries.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://mxb.dev/blog/media-queries-in-times-of-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/optimize-vitals-lighthouse/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Optimizing Web Vitals using Lighthouse</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://web.dev/optimize-vitals-lighthouse/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/optimizing-web-vitals-using-lighthouse1.jpg\" alt=\"Optimizing Web Vitals using Lighthouse\" /></a>\n\t\t\t\t\t\t<p>Addy Osmani covers new tooling features in Lighthouse, PageSpeed, and DevTools to help identify how your site can improve on the Web Vitals.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/optimize-vitals-lighthouse/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/debugging-css-23062021\">Master the Skill of Debugging CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/debugging-css-23062021\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/02/debugging-css.jpg\" alt=\"Master the Skill of Debugging CSS\" /></a>\n\t\t\t\t\t\t<p>Ahmad Shadeed wrote a book full of tips and techniques on how to debug CSS, which will help you significantly reduce the time you spend on debugging and fixing CSS bugs.</p>\n<p>Use the coupon code “<strong>cssweekly</strong>” at checkout to get a 15% discount.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/debugging-css-23062021\">Discover More</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://ishadeed.com/article/custom-scrollbars-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Custom Scrollbars In CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ahmad Shadeed gives a comprehensive introduction to styling scrollbars.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://ishadeed.com/article/custom-scrollbars-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Serving Sharp Images to High Density Screens</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Jake Archibald created a guide to compressing and serving images for dense screens.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/how-to-create-css-charts-with-interesting-shapes-glyphs-and-emoji/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">How to Create CSS Charts With Interesting Shapes, Glyphs and Emoji</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Preethi shows how to create charts with interesting shapes using glyphs, CSS shapes, and emojis with minimal effort.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/how-to-create-css-charts-with-interesting-shapes-glyphs-and-emoji/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.joshwcomeau.com/react/demystifying-styled-components/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Demystifying styled-components</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Joshua Comeau explains the basic concepts of <code><nobr>styled-components</nobr></code> by building a mini-clone from scratch.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.joshwcomeau.com/react/demystifying-styled-components/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://adrianroselli.com/2021/06/multi-column-sortable-table-experiment.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Multi-Column Sortable Table Experiment</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Adrian Roselli outlines how to approach creating accessible, multi-column sortable tables.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://adrianroselli.com/2021/06/multi-column-sortable-table-experiment.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/polypane3\">Polypane — Build Responsive & Accessible Websites 5x Faster</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/polypane3\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/build-responsive-and-accessible-websites-5x-faster.jpg\" alt=\"Polypane — Build Responsive & Accessible Websites 5x Faster\" /></a>\n\t\t\t\t\t\t<p>Polypane is a standalone browser to guide your web development workflow every step of the way with built-in tools for responsive design, accessibility, meta information, and so much more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/polypane3\">Try Polypane for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://layout.bradwoods.io/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Layout Generator</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>An online CSS Grid &#038; Flexbox generator for creating layout components.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://layout.bradwoods.io/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codeimg.io/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Codeimg</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Codeimg is an online tool to create and share beautiful images of your source code.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codeimg.io/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/elisabethdiang/pen/PoGvPjr?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Pokemon Battle (Pure CSS)</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/elisabethdiang/pen/PoGvPjr?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/pokemon-battle-pure-css.jpg\" alt=\"Pokemon Battle (Pure CSS)\" /></a>\n\t\t\t\t\t\t<p>Elisabeth Diang created an impressive illustration using CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/elisabethdiang/pen/PoGvPjr?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/dBIv_BPD1-s\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-463/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "The Best VPNs for Developers"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/best-vpns-for-developers/?utm_source=rss\"\n              title=\"The Best VPNs for Developers\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620926776vpn.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620926776vpn-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620926776vpn-768x435.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620926776vpn-1024x580.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620926776vpn.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Does online privacy exist? Am I safe working on a coffee shop’s public Wi-Fi? How concerned should I be about ad tracking? Is my private code safe? If you feel like you’re being watched, you are. In this article, I’ll explain how using a VPN service makes you more secure and less visible online.</strong></p>\n<p>You probably already realize how vulnerable you are on an open internet connection. But let me spell it out for you anyway.</p>\n<p>Your ISP logs every website you visit and your work or school network probably does the same. Those websites see and log your IP address and system information, and advertisers track your online activity. So might your government, and in some countries, they also limit the sites you can visit. On public Wi-Fi, you’re vulnerable to packet sniffing software and man-in-the-middle attacks.</p>\n<p>A VPN removes those vulnerabilities. Connecting to a remote server through an encrypted tunnel hides your activity from your ISP, local network, and public Wi-Fi. Websites and trackers on the other side of the connection see the VPN server’s IP address, not your own. You&#8217;ve taken a huge step to reclaiming your privacy.</p>\n<p>Except for one major concern. Your VPN provider can see it all. That makes the choice of the right service your most important decision. In this article, we’ll guide you through the process and make some recommendations.</p>\n<h2 id=\"whydevelopersshoulduseavpn\">Why Developers Should Use a VPN</h2>\n<p>Everyone can benefit from a VPN, but they’re particularly suitable for developers because you spend a great deal of time online and frequently work with sensitive data. Here are ten ways using one will give you peace of mind:</p>\n<ol>\n<li>It’s an effective way to protect your own intellectual property, including proprietary code, custom designs and frameworks, apps and resources, from being stolen and used or sold by hackers.</li>\n<li>It limits the risk of any client data you&#8217;re hosting being compromised, including their financial data, contact information, schematics, patents, and more.</li>\n<li>It helps prevent data leaks of new product announcements, advertising campaigns, acquisitions, and more.</li>\n<li>You can research your competitors’ websites and products discreetly using a different IP address so they don’t know you visited.</li>\n<li>You can check that your own applications and websites work correctly internationally by connecting to servers in other countries. You can check that your site isn’t slow, confirm that the local language and currencies have been correctly identified, and see if any of your resources have been geo-blocked.</li>\n<li>You can ensure that remote team members can access all of the necessary resources and references essential to web development. For example, YouTube tutorials for new tools and technologies may not be accessible from all countries without a VPN.</li>\n<li>When working outside of the office, you can connect to public Wi-Fi hotspots with confidence.</li>\n<li>Hackers are prevented from learning the login details to your server when you or remote workers access it from outside of the office. It also prevents them from intercepting the data that&#8217;s being accessed.</li>\n<li>Many VPN services have anti-malware software built in, which will protect you and your team from phishing attacks and other threats.</li>\n<li>It improves your overall online privacy and security. That’s always a good thing.</li>\n</ol>\n<h2 id=\"whatyouneedfromavpn\">What You Need from a VPN</h2>\n<p>Here are some things to look for when choosing a VPN.</p>\n<h3 id=\"goodconnectionspeed\">Good Connection Speed</h3>\n<p>Encrypting your traffic and passing it through a server takes time. Expect to see a decrease in your upload and download speeds.</p>\n<p>How much it decreases depends on a number of factors including the distance the server is from you, the number of other users currently connected, and the quality of the hardware. I’ve encountered widely varying speeds between the different providers, and some offer fairly consistent speeds from server to server while others don’t.</p>\n<p>These factors make interpreting speed tests difficult. Connecting to a server from one part of the world will be different than connecting to it from another, and when you encounter slow speeds it’s difficult to determine whether the VPN is slow, the server is under an unusual load, or your own ISP is having a bad day.</p>\n<p>I’ve performed speed tests on multiple servers of numerous VPN services over the years. Here’s a comparison of the maximum speed achieved with each VPN as a percentage of my normal, unprotected speed:</p>\n<ul>\n<li>CyberGhost: 91%</li>\n<li>ProtonVPN (free): 76%</li>\n<li>Surfshark: 73%</li>\n<li>NordVPN: 70%</li>\n<li>ExpressVPN: 56%</li>\n<li>TorGuard: 49%</li>\n<li>PureVPN: 48%</li>\n<li>IPVanish: 41%</li>\n<li>Private Internet Access: 38%</li>\n</ul>\n<p>When covering each VPN below, I’ll also include speed test results performed by other reviewers to give a broader view.</p>\n<h3 id=\"alargenumberofserversaroundtheworld\">A Large Number of Servers Around the World</h3>\n<p>VPNs often provide thousands or tens of thousands of servers around the world. This helps even out the load and gives you access to content in other countries.</p>\n<ul>\n<li>CyberGhost: 6,900 in 60+ countries</li>\n<li>PureVPN: 6,500+ in 140+ countries</li>\n<li>NordVPN: 5,500 in 59 countries</li>\n<li>Private Internet Access: 3,252 in 37 locations</li>\n<li>Surfshark: 3,200+ in 65 countries</li>\n<li>ExpressVPN: 3,000+ in 94 countries</li>\n<li>TorGuard: 3,000 in 50 countries</li>\n<li>IPVanish: 1,600+ in 60 countries</li>\n<li>ProtonVPN: 1,237 in 55 countries</li>\n</ul>\n<p>Though they don’t have the most servers, PureVPN and ExpressVPN cover more countries than other services.</p>\n<h3 id=\"privacypoliciesandfeatures\">Privacy Policies and Features</h3>\n<p>All of your traffic goes through the VPN, so what the company does with that data is important. Many have a “no logs” policy and claim not to keep any record of your activities.</p>\n<p>Unfortunately, “no logs” doesn’t always mean <em>no</em> logs. If your plan has device or bandwidth restrictions, they need to keep some logs to ensure you’re not going over. Typically, these logs are deleted periodically, typically after 24 hours or 20 subsequent connections. PureVPN and IPVanish have significant privacy failures in their history: both companies have provided information in court cases that they claimed to be not logging.</p>\n<p>Fortunately, some providers are particularly strict about keeping no logs and their policies have been proven. For example, <a href=\"https://restoreprivacy.com/vpn/no-logs/#h-turkish-authorities-try-to-collect-logs-then-seize-expressvpn-server-but-still-no-data\">Restore Privacy</a> reports that in December 2017, police in Turkey attempted to force ExpressVPN to provide customer data for a criminal investigation. However, ExpressVPN did not have any logs to provide authorities. PureVPN and PIA have similar stories. Also, some companies are audited by third parties on a regular basis to verify the no logs claim, including ExpressVPN, NordVPN, Surfshark, and PureVPN.</p>\n<p>Some, such as ExpressVPN and Surfshark, go as far as having RAM-only servers. Once they are switched off or rebooted, no data at all is retained. <a href=\"https://invpn.com/ram-only-vpn-servers/\">inVPN.com</a> has an interesting article exploring this, and expect to see more VPN services following suit in the future.</p>\n<p>Most VPN services store personal information about you for account-keeping purposes, while others require just an email address and are happy for you to use a temporary one. Bank transactions are another way to connect you to a specific VPN account, and privacy-conscious services allow you to pay anonymously, such as with cryptocurrency or gift vouchers. In this review, only PureVPN and IPVanish offer no form of anonymous payment.</p>\n<p>You should also take note of where the service is based because some countries require companies to retain certain records. For example, the US Patriot Act allows the FBI to obtain personal information without a judge’s approval, and some countries have intelligence-sharing agreements with the US. Nevertheless, the privacy policies of some US-based VPNs have been tested in court where it was verified they were not keeping any logs.</p>\n<p>Finally, some services offer features like Double VPN and TOR over VPN. These significantly increase your anonymity, but usually at the expense of performance. It’s rare that you need this level of anonymity, but here are some services that offer additional privacy:</p>\n<ul>\n<li>NordVPN: double VPN</li>\n<li>ExpressVPN: TOR over VPN</li>\n<li>Surfshark: double VPN, TOR over VPN</li>\n<li>TorGuard: stealth proxy</li>\n<li>ProtonVPN: Secure Core VPN, TOR over VPN</li>\n</ul>\n<h3 id=\"securityfeatures\">Security Features</h3>\n<p>A number of encryption protocols are available to VPNs, and ideally, you’ll be given a choice. Some offer the strongest encryption, while others offer faster speeds.</p>\n<ul>\n<li>PPTP has been around for decades. It’s fast and widely supported but has major security issues.</li>\n<li>L2TP/IPSec are two protocols (one for tunneling, the other for encryption) that are faster and widely used, but easily blocked by firewalls, such as those used by Netflix.</li>\n<li>OpenVPN is open source and very secure. It’s slower, but fast enough for everyday use.</li>\n<li>SSTP is a fast and well-supported protocol developed by Microsoft.</li>\n<li>IKEv2 is a fast tunneling protocol developed by Microsoft and Cisco that is commonly paired with IPSec. It’s used on mobile devices.</li>\n<li>Wireguard is a new protocol that&#8217;s around twice as fast as OpenVPN but has some <a href=\"https://restoreprivacy.com/vpn/wireguard/\">privacy concerns</a>. It’s not yet available on all VPN services.</li>\n</ul>\n<p>A kill switch is an important security feature offered by many services. If you become disconnected from the server, you’d normally be left vulnerable. A kill switch will block all internet traffic until you reconnect.</p>\n<p>Finally, many VPN providers offer integrated protection from malware, adware, and phishing schemes. Below, only ExpressVPN, IPVanish, and TorGuard provide no type of malware protection.</p>\n<h3 id=\"accesstostreamingmedia\">Access to Streaming Media</h3>\n<p>Many streaming services, such as Netflix, attempt to block traffic from VPNs. That’s because media networks often offer exclusive distribution rights to shows in certain countries, so Netflix may not have the right to offer a movie or show to residents of that country.</p>\n<p>Whether you’re actively trying to stream media from other countries, or just want to watch a local Netflix show once you finish work, it’s frustrating if you have to disconnect from your VPN to gain access.</p>\n<p>Some VPN services have an extremely high success rate at bypassing Netflix’s firewall, while other services almost never seem to get through. Here’s the success rate I had when testing each service:</p>\n<ul>\n<li>Surfshark: 100% (9 out of 9 servers tested)</li>\n<li>NordVPN: 100% (9 out of 9 servers tested)</li>\n<li>PureVPN: 100% (9 out of 9 servers tested)</li>\n<li>ProtonVPN: 100% (3 out of 3 free servers tested)</li>\n<li>TorGuard: 100% with a US streaming IP, 19% with other servers (3 out of 16)</li>\n<li>CyberGhost: 80% (12 out of 15 servers tested)</li>\n<li>ExpressVPN: 33% (4 out of 12 servers tested)</li>\n<li>IPVanish: 33% (3 out of 9 servers tested)</li>\n<li>Private Internet Access: 22% (2 out of 9 servers tested)</li>\n</ul>\n<p>Other VPNs offer split tunneling that allows you to divert some of your traffic through the unprotected internet. This allows you to watch local streaming services without being blocked while the rest of your traffic goes through the VPN. ExpressVPN, Surfshark, CyberGhost, PureVPN, IPVanish, and Private Internet Access all offer split tunneling.</p>\n<h3 id=\"beawareofthelimitations\">Be Aware of the Limitations</h3>\n<p>Some VPN plans have built-in limits. Make sure these aren&#8217;t too restrictive for your needs. For example, many services limit the number of devices that can connect to the VPN simultaneously:</p>\n<ul>\n<li>Surfshark: unlimited</li>\n<li>IPVanish: unlimited</li>\n<li>PureVPN: 10 devices</li>\n<li>Private Internet Access: 10 devices</li>\n<li>TorGuard: 8 devices</li>\n<li>CyberGhost: 7 devices</li>\n<li>NordVPN: 6 devices</li>\n<li>ExpressVPN: 5 devices</li>\n<li>ProtonVPN: 1, 2, 5, or 10 devices depending on your plan</li>\n</ul>\n<p>Some VPNs — particularly free ones — limit the amount of bandwidth you can access through the VPN each month. All of those I recommend below come with unlimited bandwidth. Others are not available on all platforms, but those I recommend below are available on Windows, macOS, Android, iOS, and more.</p>\n<h3 id=\"price\">Price</h3>\n<p>VPNs are subscription services, and if you pay by the month they can be a little expensive. Many offer huge discounts if you pay for a year or more in advance, and once you decide to use a VPN long-term, this makes a lot of sense.</p>\n<p>Here are the equivalent monthly prices when paying for the cheapest plan for each service (usually a year or more in advance):</p>\n<ul>\n<li>Surfshark: $2.49/month</li>\n<li>Private Internet Access: $2.69/month</li>\n<li>CyberGhost: $2.75/month</li>\n<li>PureVPN: $3.33/month</li>\n<li>NordVPN: $3.71/month</li>\n<li>TorGuard: $3.89/month</li>\n<li>ProtonVPN: $6.63/month (limited free and $3.29/month plans are also available)</li>\n<li>IPVanish: $7.50/month</li>\n<li>ExpressVPN: $8.32/month</li>\n</ul>\n<p>Be cautious of free VPNs. They need to make money somehow and may do that by selling your private data. Only a few, like ProtonVPN, will prioritize your privacy.</p>\n<h2 id=\"howitested\">How I Tested</h2>\n<p>I’ve <strong>personally tested</strong> dozens of VPN services over the last few years. I performed speed tests on multiple servers, attempted to access streaming media from various countries, and explored the features of each app.</p>\n<p>I also consulted <strong>comparative testing by other reviewers</strong>. That’s especially helpful when comparing the download speeds that others encountered when using the services from other countries. Here are some reviews with test results I found useful:</p>\n<ul>\n<li><a href=\"https://www.av-comparatives.org/tests/vpn-report-2020-35-services/\">VPN Report 2020</a> by AV Comparatives, published April 2020</li>\n<li><a href=\"https://www.av-test.org/fileadmin/pdf/reports/AV-TEST_NordVPN_Comparative_Test_Report_September_2020.pdf\">VPN Comparative Test</a> (PDF) by AVTest, published September 2020</li>\n<li><a href=\"https://au.pcmag.com/vpn/138/the-best-vpn-services\">The Best VPN Services for 2021</a> by PCMag Australia, published March 2021</li>\n<li><a href=\"https://www.wired.co.uk/article/best-vpn\">The best VPN services tested for speed, reliability and privacy</a> by Wired UK, published March 2021</li>\n<li><a href=\"https://www.cnet.com/news/fastest-vpn/\">Fastest VPNs of 2021</a> by CNET, published March 2021</li>\n<li><a href=\"https://www.vpnmentor.com/\">8 Best VPNs in 2021 for PC, Mac, &#038; Phone</a> by vpnMentor, updated April 2021</li>\n</ul>\n<p>Finally, I wanted to get an idea of the satisfaction levels of real users. I checked <strong>consumer ratings</strong> from <a href=\"https://www.trustpilot.com/categories/vpn_service\">Trustpilot</a> and looked for services with a high four-star rating based on a large sample size:</p>\n<ul>\n<li>CyberGhost: 4.8 stars based on 12,043 reviews</li>\n<li>PureVPN: 4.7 stars based on 12,091 reviews</li>\n<li>IPVanish: 4.7 stars based on 6,860 reviews</li>\n<li>ExpressVPN: 4.6 stars based on 7,040 reviews</li>\n<li>TorGuard: 4.5 stars based on 795 reviews</li>\n<li>Surfshark: 4.3 stars based on 8,212 reviews</li>\n<li>NordVPN: 4.2 stars based on 5,567 reviews</li>\n<li>Private Internet Access: 4.0 stars based on 6,633 reviews</li>\n<li>ProtonVPN: 3.5 stars based on 88 reviews</li>\n</ul>\n<p>Although PureVPN and IPVanish received extremely high ratings, the customer isn’t always right. As I mentioned, both companies have been found to keep logs they claimed they were not keeping, and neither company offers payment cryptocurrency payments. Nevertheless, they must be doing something right to achieve consistently high ratings from so many users.</p>\n<h2 id=\"thebestvpnsfordevelopers\">The Best VPNs for Developers</h2>\n<h3 id=\"nordvpn\">NordVPN</h3>\n<p><a href=\"https://go.nordvpn.net/aff_c?offer_id=15&#038;aff_id=55347&#038;url_id=902\">NordVPN</a> offers an excellent all-around experience. It’s fast and secure, easy to use, has a good privacy policy, and offers additional security features. It’s also affordable and reliably connects to streaming media. However, I found server speeds to be inconsistent.</p>\n<ul>\n<li>Consumer rating: 4.2 stars based on 5,567 reviews (Trustpilot)</li>\n<li>Servers: 5,500 in 59 countries</li>\n<li>Simultaneous devices: 6</li>\n<li>Platforms: Windows, macOS, Linux, Android, Android TV, iOS, browser extensions for Firefox and Chrome</li>\n<li>Protocols: OpenVPN, IKEv2/IPSec, SSTP, L2TP, WireGuard</li>\n<li>Privacy: no logs, cryptocurrency payments</li>\n<li>Security: kill switch, double VPN, malware blocker</li>\n<li>Cheapest plan: $89 for two years (equivalent to $3.71/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018008vpn-nordvpn.png\" alt=\"NordVPN\" /></p>\n<p><strong>Speed:</strong> The closest Nord server to me achieved an excellent download speed of 70.22 Mbps on my 100 Mbps connection, one of the fastest I encountered. However, the average speed across all 27 servers I tested was just 25.16 Mbps, so not all servers were fast. Some other reviewers recorded slower times than I did.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 70%, fastest AU, slowest UK</li>\n<li>PCMag AU: maximum 71.3%</li>\n<li>CNET US: maximum 47%, fastest Singapore, slowest US</li>\n<li>AV Comparatives: average 40%</li>\n<li>AV-Test US: average 11% in US, average 5% in EU</li>\n<li>Wired UK: 363.2 Mbps (UK), 268 Mbps (NL), 24.88 Mbps (US)</li>\n</ul>\n<p><strong>Privacy:</strong> NordVPN has an excellent privacy policy and is located in Panama where there are no mandatory data retention laws. Their logging policy is audited by PricewaterhouseCoopers AG in Switzerland who verifies the company keeps no logs. Double VPN gives you even greater anonymity in sensitive situations.</p>\n<p><strong>Security:</strong> A range of protocols are offered as well as a malware blocker. If you drop your VPN connection you can configure Nord’s kill switch to either block internet access or terminate certain apps.</p>\n<p><strong>Streaming media:</strong> NordVPN has a feature called Smartplay that’s designed to give access to 400 streaming services. It seems to work well. I was able to connect to Netflix consistently using each of the nine servers that I tested.</p>\n<p><strong>Cost:</strong> When you pay in advance, NordVPN is among the most affordable services, costing less than $4 a month.</p>\n<h3 id=\"expressvpn\">ExpressVPN</h3>\n<p><a href=\"https://www.xvinlink.com/?a_fid=sitepoint-group\">ExpressVPN</a> isn’t as fast as NordVPN, nor as successful at connecting to streaming media services. However, it’s one of the most highly respected VPNs when it comes to privacy.</p>\n<ul>\n<li>Consumer rating: 4.6 stars based on 7,040 reviews (Trustpilot)</li>\n<li>Servers: 3,000+ in 94 countries</li>\n<li>Simultaneous devices: 5</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, Apple TV, Roku, FireOS, Chromecast, Chromebook, extensions for Chrome, Firefox, and Edge</li>\n<li>Protocols: OpenVPN, PPTP, SSTP, L2TP/IPSec, Lightway</li>\n<li>Privacy: no logs, bitcoin payments, TOR over VPN</li>\n<li>Security: kill switch, RAM-only servers</li>\n<li>Cheapest plan: $99.95/year (equivalent to $8.32/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018010vpn-expressvpn.png\" alt=\"ExpressVPN\" /></p>\n<p><strong>Speed:</strong> ExpressVPN has a reputation for being one of the faster VPN services, but that’s not borne out by speed tests. The explanation seems to be that it used to be faster. CNET’s 2019 speed test was a huge 98% of unprotected speed, while now it’s around half that.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 56%, fastest US, slowest UK</li>\n<li>PCMag AU: maximum 40.2%</li>\n<li>CNET US: maximum 48.2%, fastest Western Europe, slowest US</li>\n<li>vpnMentor UK: maximum 91%, fastest UK, slowest, AU</li>\n<li>AV Comparatives: average 27%</li>\n<li>AV-Test US: average 5% in US, average 3% in EU</li>\n<li>Wired UK: 131.2 Mbps (UK), 159.2 Mbps (NL), 139.2 Mbps (US)</li>\n</ul>\n<p><strong>Privacy:</strong> The company is located in the British Virgin Islands where data can be kept private, and their no logs policy has been tested in court. <a href=\"https://www.techspot.com/news/82259-keeping-private-5-vpns-have-verified-keep-no.html\">Techspot</a> reports that Turkish authorities tried to force the company to provide customer data in a case but failed. They claimed they are not subject to US and EU laws. The authorities then physically seized one of the servers but recovered no information because there were no logs.</p>\n<p><strong>Security:</strong> A kill switch disconnects you from the Internet if you lose your VPN connection. RAM-only servers are now used, and TOR over VPN is available for greater anonymity. However, a malware blocker is not included.</p>\n<p><strong>Streaming media:</strong> Over the years, I&#8217;ve tested ExpressVPN for Netflix access twice. The first time I was quite impressed. It connected 89% of the time (16 out of 18 servers). The second time was much less impressive, with a success rate of just 33% (4 out of 12 servers). However, the service offers split tunneling, so you’re able to watch local Netflix shows unprotected while the rest of your traffic goes through the VPN.</p>\n<p><strong>Cost:</strong> ExpressVPN is the most expensive service in our roundup, but I’ve never heard anyone complain. When privacy is your priority, it’s money well spent.</p>\n<h3 id=\"surfshark\">Surfshark</h3>\n<p><a href=\"https://get.surfshark.net/aff_c?offer_id=6&#038;aff_id=8672\">Surfshark</a> is another well-rounded VPN service, offering good speed, excellent security, and a complete feature set. It’s also extremely affordable and places no limit on the number of devices you can connect.</p>\n<ul>\n<li>Consumer rating: 4.3 stars based on 8,212 reviews (Trustpilot)</li>\n<li>Servers: 3,200+ in 65 countries</li>\n<li>Simultaneous devices: Unlimited</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, FireTV, Chrome and Firefox extensions</li>\n<li>Protocols: OpenVPN, IKEv2/IPSec, Socks5</li>\n<li>Privacy: no logs, cryptocurrency payments (CoinPayments, CoinGate), double VPN, TOR over VPN</li>\n<li>Security: kill switch, CleanWeb ad tracking blocker, RAM-only servers</li>\n<li>Cheapest plan: $59.76 for two years (equivalent to $2.49/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018012vpn-surfshark.png\" alt=\"Surfshark\" /></p>\n<p><strong>Speed:</strong> I found Surfshark’s closest server acceptably fast, achieving a download speed of 62.13 Mbps, and other reviewers had similar results. But not all of the servers are that fast. My average speed overall was just 25.16 Mbps.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 73%, fastest AU, slowest US</li>\n<li>PCMag AU: maximum 38.4%</li>\n<li>CNET US: maximum 83.1%, fastest US, slowest Australia</li>\n<li>AV Comparatives: average 76%</li>\n<li>Wired UK: 236 Mbps (UK), 212 Mbps (NL), 145.6 Mbps (US)</li>\n</ul>\n<p><strong>Privacy:</strong> Like ExpressVPN, Surfshark is located in the privacy-friendly British Virgin Islands. They offer several interesting privacy-related features:</p>\n<ul>\n<li>Camouflage mode masks your VPN activity so your ISP doesn&#8217;t know you&#8217;re using one</li>\n<li>Multihop (essentially double VPN) hides your trail by jumping your connection through multiple countries</li>\n<li>NoBorders mode lets you use the VPN in restrictive regions</li>\n</ul>\n<p><strong>Security:</strong> Surfshark offers a kill switch and ad blocker, and uses RAM-only servers. Cure 53, a German security firm, audited their Chrome and Firefox extensions (<a href=\"https://cure53.de/pentest-report_surfshark.pdf\">PDF report here</a>).</p>\n<p><strong>Streaming media:</strong> I found the service reliable at streaming media. All nine servers I tested successfully streamed Netflix content. Split tunneling is available so that you can stream media over an unprotected connection if necessary.</p>\n<p><strong>Cost:</strong> Surfshark offers the most affordable plan in our roundup.</p>\n<h3 id=\"cyberghost\">CyberGhost</h3>\n<p><a href=\"https://www.cyberghostvpn.com/offer/gen_a6chd2roy\">CyberGhost</a> is another affordable service that offers excellent security and privacy. According to my tests, it’s also the fastest VPN in our roundup.</p>\n<ul>\n<li>Consumer rating: 4.8 stars based on 12,043 reviews (Trustpilot)</li>\n<li>Servers: 6,900 in 60+ countries</li>\n<li>Simultaneous devices: 7</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, Android TV, FireTV, Apple TV, extensions for Chrome and Firefox</li>\n<li>Protocols: OpenVPN, IKEv2, WireGuard</li>\n<li>Privacy: no logs, Bitcoin payments</li>\n<li>Security: kill switch, ad and malware blocker</li>\n<li>Cheapest plan: $99 for three years (equivalent to $2.75/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018013vpn-cyberghost.png\" alt=\"CyberGhost\" /></p>\n<p><strong>Speed:</strong> I was able to achieve the highest download speed when using CyberGhost’s closest server. It also achieved quite a high average speed, indicating fast server speeds across the board.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 91%, fastest AU, slowest UK</li>\n<li>PCMag AU: 86.7%</li>\n<li>vpnMentor UK: maximum 66%, fastest UK, slowest AU</li>\n<li>AV Comparatives: average 23%</li>\n</ul>\n<p><strong>Privacy:</strong> The company is based in Romania and has a UK parent company. However, they have a strict no logs policy, and for an additional fee, you can access their NoSpy servers which are housed away from third parties in a special data center.</p>\n<p><strong>Security:</strong> A kill switch is included, as is an ad blocker, malware blocker, and tracking blocker.</p>\n<p><strong>Streaming media:</strong> I was able to access Netflix content with 80% (12 out of 15) of the servers I tested. Split tunneling is not available.</p>\n<p><strong>Cost:</strong> When you pay in advance, CyberGhost is among the most affordable services, costing less than $3 a month.</p>\n<h3 id=\"torguard\">TorGuard</h3>\n<p><a href=\"https://torguard.net/\">TorGuard</a> is a service that will suit tech-savvy networking gurus. All the settings are at your fingertips so you can choose how to balance speed with security.</p>\n<ul>\n<li>Consumer rating: 4.5 stars based on 795 reviews (Trustpilot)</li>\n<li>Servers: 3,000 in 50 countries</li>\n<li>Simultaneous devices: 8</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, extensions for Firefox and Chrome</li>\n<li>Protocols: OpenVPN, WireGuard, SSTP, IPSec</li>\n<li>Privacy: no logs, anonymous payments (including cryptocurrencies and gift cards)</li>\n<li>Security: kill switch, stealth proxy</li>\n<li>Cheapest plan: $139.99 for three years (equivalent to $3.89/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018015vpn-torguard.png\" alt=\"TorGuard\" /></p>\n<p><strong>Speed:</strong> When I tested the VPN the best speed I achieved was just half my unprotected speed, but the average speed across several servers was faster than many of the other VPNs I tested. Other reviewers also reported slow speeds.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 49%</li>\n<li>AV Comparatives: average 30%</li>\n<li>AV-Test US: average 7% in US, average 5% in EU</li>\n</ul>\n<p><strong>Privacy:</strong> The company is based in Germany and claims to keep no logs at all. Stealth proxy is a second layer of security that makes it impossible to detect you’re using a VPN.</p>\n<p><strong>Security:</strong> TorGuard’s kill switch will block all internet traffic if you become disconnected from the VPN and can also automatically close certain apps. A malware blocker is not included.</p>\n<p><strong>Streaming media:</strong> I didn’t have much luck streaming Netflix with TorGuard: just three of the sixteen servers I tested worked. However, you can purchase access to streaming IP addresses for certain countries, and the one I tested worked perfectly.</p>\n<p><strong>Cost:</strong> When you pay in advance, TorGuard is at the upper end of the more affordable services and costs just under $4 a month. However, if you intend to stream Netflix content while connected, you’ll need to pay extra.</p>\n<h3 id=\"purevpn\">PureVPN</h3>\n<p><a href=\"https://billing.purevpn.com/aff.php?aff=46896\">PureVPN</a> seems to have made its users happy, but I have a few concerns about the service. I found its interface a little inconsistent, they don’t offer an anonymous payment method, and they don’t have the best track record with privacy. Nevertheless, there is a lot to like about the service.</p>\n<ul>\n<li>Consumer rating: 4.7 stars based on 12,091 reviews (Trustpilot)</li>\n<li>Servers: 6,500+ in 140+ countries</li>\n<li>Simultaneous devices: 10</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, Android TV, FireOS, Roku, Boxee, Chromecast, extensions for Chrome and Firefox</li>\n<li>Protocols: SSTP, PPTP, OpenVPN, L2TP, IKEv2</li>\n<li>Privacy: no logs</li>\n<li>Security: kill switch, DDoS protection, ad blocking</li>\n<li>Cheapest plan: $79.92 for two years (equivalent to $3.33/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018017vpn-purevpn.png\" alt=\"PureVPN\" /></p>\n<p><strong>Speed:</strong> In my experience, you should expect your download speed to halve when using the VPN. Other reviewers also reported slow speeds.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 48%, fastest AU, slowest UK</li>\n<li>AV Comparatives: average 36%</li>\n<li>AV-Test US: average 6% in US, average 5% in EU</li>\n</ul>\n<p><strong>Privacy:</strong> According to <a href=\"https://restoreprivacy.com/vpn-logs-lies/\">Restore Privacy</a>, PureVPN was caught lying about its no logs policy in 2017. They were logging customer data for the FBI. Since then they claim to have cleaned up their game and this was verified in an audit by Altius IT. They are based in Hong Kong.</p>\n<p><strong>Security:</strong> A kill switch, ad blocking, and DDoS protection are offered. You can choose from a number of security protocols or allow the app to choose for you.</p>\n<p><strong>Streaming media:</strong> I was able to reliably stream Netflix content using PureVPN (9 out of 9 servers tested were successful), and split tunneling is also available.</p>\n<p><strong>Cost:</strong> When you pay in advance, PureVPN is among the most affordable services and costs just over $3 a month.</p>\n<h3 id=\"ipvanish\">IPVanish</h3>\n<p><a href=\"https://www.ipvanish.com/\">IPVanish</a> is affordable but its servers can be slow and streaming content can’t be reliably accessed. Unfortunately, like PureVPN they have a poor track record when it comes to privacy.</p>\n<ul>\n<li>Consumer rating: 4.7 stars based on 6,860 reviews (Trustpilot)</li>\n<li>Servers: 1,600+ in 60 countries</li>\n<li>Simultaneous devices: Unlimited</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, FireTV, Chrome OS</li>\n<li>Protocols: IKEv2, OpenVPN, L2TP, IPSec, PPTP</li>\n<li>Privacy: no logs</li>\n<li>Security: kill switch</li>\n<li>Cheapest plan: $89.99/year (equivalent to $7.50/month), first payment half price</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018018vpn-ipvanish.png\" alt=\"IPVanish\" /></p>\n<p><strong>Speed:</strong> When I tested IPVanish I encountered the slowest maximum and average speeds to date. But that’s not everyone’s experience. Reviewers in the US report higher average speeds than my maximum speed.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 41%, fastest AU, slowest UK</li>\n<li>CNET US: average 45%</li>\n<li>AV Comparatives: average 46%</li>\n</ul>\n<p><strong>Privacy:</strong> The company is based in the US and has been found in court to have lied about their no logs policy. According to <a href=\"https://restoreprivacy.com/ipvanish-provides-logs-to-authorities/\">Restore Privacy</a>, the Department of Homeland Security investigated an IPVanish user for child abuse in 2016 and eventually obtained detailed client records from the company as well as a list of dates and times they were connected to the VPN.</p>\n<p><strong>Security:</strong> The software includes a kill switch, but a malware blocker is not included.</p>\n<p><strong>Streaming media:</strong> I was unable to consistently stream Netflix content with PureVPN. Just three of the nine servers I tested were successful. However, split tunneling is available, so you can watch local content through an unprotected connection while the rest of your traffic goes through the VPN.</p>\n<p><strong>Cost:</strong> IPVanish is the second most expensive service in this roundup.</p>\n<h3 id=\"privateinternetaccesspia\">Private Internet Access (PIA)</h3>\n<p><a href=\"https://www.privateinternetaccess.com/\">Private Internet Access</a> is affordable and its no logs policy has been verified in court. It offers an easy-to-use interface and is suited to non-technical users who are new to VPNs. Keep it in mind for your non-technical friends.</p>\n<ul>\n<li>Consumer rating: 4.0 stars based on 6,633 reviews (Trustpilot)</li>\n<li>Servers: 3,252 in 37 locations</li>\n<li>Simultaneous devices: 10</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS</li>\n<li>Protocols: OpenVPN, PPTP, L2TP/IPSec, SOCKS5 Proxy</li>\n<li>Privacy: no logs, cryptocurrency payments</li>\n<li>Security: kill switch, MACE blocks domains used for ads, trackers, and malware</li>\n<li>Cheapest plan: $69.95 for two years with a bonus two months (equivalent to $2.69/month)</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618018020vpn-pia.png\" alt=\"Private Internet Access\" /></p>\n<p><strong>Speed:</strong> I found PIA very slow, but that’s not the whole story. Another reviewer in the UK found it extremely fast while a US reviewer found it even slower than I did. The speed you encounter may depend on your location, but ironically, the company is based in the US where the slowest speed was recorded.</p>\n<p>Speed tests:</p>\n<ul>\n<li>My tests AU: maximum 38%</li>\n<li>VPNMentor UK: 98%, fastest UK, slowest AU</li>\n<li>AV Comparatives: average 26%</li>\n<li>AV-Test US: average 4% in US, average 5% in EU</li>\n<li>Wired UK: 134.4 Mbps (UK), 110.4 Mbps (NL), 31.2 Mbps (US)</li>\n</ul>\n<p><strong>Privacy:</strong> The company is based in the US, but its no logs policy has been tested in court twice (in 2016 and 2018), and held up both times. No information was handed over to the court or FBI. You’ll find more details on <a href=\"https://www.techspot.com/news/82259-keeping-private-5-vpns-have-verified-keep-no.html\">Techspot</a>.</p>\n<p><strong>Security:</strong> PIA offers a kill switch, and a feature called MACE will automatically protect users from suspicious websites.</p>\n<p><strong>Streaming media:</strong> I was unable to reliably stream Netflix content with the service: only two servers out of nine succeeded. Split tunneling is available so that local media can be watched on an unprotected connection.</p>\n<p><strong>Cost:</strong> PIA is inexpensive, and offers the second cheapest plan in this roundup.</p>\n<h3 id=\"protonvpn\">ProtonVPN</h3>\n<p><a href=\"https://protonvpn.com/\">ProtonVPN</a> is making waves in the privacy community as being one of the better, more reliable services out there. They offer a host of VPN-related services, as well as encrypted mail, online storage and calendar. They are the only respectable company I know that offers a free tier for their VPN.</p>\n<ul>\n<li>Consumer rating: 3.5 stars based on 88 reviews (Trustpilot)</li>\n<li>Servers: 1,237 in 55 countries</li>\n<li>Simultaneous devices: up to 10 depending on your plan</li>\n<li>Platforms: Windows, macOS, Linux, Android, iOS, ChromeBook, Android TV</li>\n<li>Protocols: IKEv2/IPSec, OpenVPN</li>\n<li>Privacy: no logs, Bitcoin payments</li>\n<li>Security: kill switch, Always-On, Secure Core VPN, TOR over VPN, NetShield Ad</li>\n<li>Cheapest plan: $159 for two years for the Plus plan (equivalent to $6.63/month) and a limited free plan is available</li>\n</ul>\n<p><!--\n\n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618279503vpn-protonvpn.png\" alt=\"ProtonVPN\" />\n--!>\n</p>\n\n\n\n<p><strong>Speed:</strong> I tested ProtonVPN’s speed using the free plan and achieved an impressive 76% of my unprotected speed. Wired UK’s tests show a significant increase in paid plans, and the fact that there is no free Australian server also slowed my connection. Paying users should experience significantly faster speeds.</p>\n\n\n\n\n<p>Speed tests:</p>\n\n\n\n\n<ul>\n\n\n<li>My tests AU: maximum 76%, fastest JP, slowest NL</li>\n\n\n\n\n<li>PCMag AU: maximum 27.3%</li>\n\n\n\n\n<li>vpnMentor UK: maximum 75%, fastest RO, slowest BR</li>\n\n\n\n\n<li>AV Comparatives: average 30%</li>\n\n\n\n\n<li>Wired UK: 184 Mbps (UK paid), 164 Mbps (NL paid), 149.6 Mbps (US paid)</li>\n\n\n\n\n<li>Wired UK: 8.8 Mbps (NL free), 56.64 Mbps (US free)</li>\n\n\n</ul>\n\n\n\n\n<p><strong>Privacy:</strong> The company is based in Switzerland which has strong privacy laws and remains outside of US and EU jurisdiction. They are serious about privacy and their apps are open-sourced and independently audited.</p>\n\n\n\n\n<p><strong>Security:</strong> A kill switch blocks all internet traffic if you become disconnected from the VPN, and Always-On automatically reconnects you. Secure Core VPN and TOR over VPN offer additional protection when needed. All ProtonVPN servers are protected by full disk encryption. </p>\n\n\n\n\n<p><strong>Streaming media:</strong> I was able to successfully connect to Netflix using the three free servers I tested.</p>\n\n\n\n\n<p><strong>Cost:</strong> The free plan allows one device to be connected with medium speeds to servers in three countries. No other VPN in this roundup offers a free tier. The $3.29/month Basic plan offers two connections, and the $6.63/month Plus plan allows five VPN connections. An expensive Visionary plan is also available, offering 10 connections and a ProtonMail Visionary account.</p>\n\n\n\n\n<h2 id=\"finalthoughts\">Final Thoughts</h2>\n\n\n\n\n<p>Every developer owes it to themselves and their clients to use a VPN service. It will help protect your valuable digital assets, enhance your security, and give unrestricted access to resources around the world.</p>\n\n\n\n\n<p>Which is best for you? For an all-around solution, I recommend NordVPN, Surfshark, and CyberGhost. They have a good balance between speed, security, and features. If you value privacy above all else, it’s hard to go past ExpressVPN. No other VPN I’m aware of is spoken of so highly. If you'd prefer not to spend money at this point, ProtonVPN is the only reputable company I'm aware of that offers a free tier.</p>\n\n\n\n\n<p>Think twice about using PureVPN and IPVanish. While they are highly rated and have many thousands of satisfied users, court cases have shown that they were storing information they claimed never to have logged. Never choose a VPN service you can’t trust.</p>\n\n\n</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/best-vpns-for-developers/?utm_source=rss\">The Best VPNs for Developers</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/best-vpns-for-developers/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=183228",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Computing",
            "Essential Tools",
            "Web"
        ],
        "dc:creator": [
            "Adrian Try"
        ],
        "pubDate": [
            "Thu, 13 May 2021 01:00:23 GMT"
        ],
        "metaDesc": [
            "The best VPNs for developers, compared in-depth. Learn more about what a VPN is, why you need one, and which provider is right for you."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Code the K72 Marquee Hover Animation"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/30/how-to-code-the-k72-marquee-hover-animation/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Wed, 30 Jun 2021 10:44:59 +0000"
        ],
        "category": [
            "Tutorials",
            "hover",
            "marquee",
            "menu",
            "Navigation",
            "reveal"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=55133",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>Learn how to recreate the direction-aware marquee menu hover effect seen on the website of K72 by Locomotive.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/30/how-to-code-the-k72-marquee-hover-animation/\">How to Code the K72 Marquee Hover Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>A while back, the folks of <a href=\"https://k72.ca/en\">K72</a> released their amazing new <a href=\"https://k72.ca/en\">website</a> made by the award winning agency <a href=\"https://locomotive.ca/en\">Locomotive</a> that boasts with coolness and great design. It has many engaging details but the one I love the most is the fun menu hover effect that involves a marquee:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/k72menu_opt.mp4\"></video></figure>\n\n\n\n<p>In this tutorial I&#8217;ll show how to create this direction-aware marquee hover effect. We&#8217;ll not code the opening animation of the menu itself, but instead focus on animations involved when hovering a menu item.</p>\n\n\n\n<p>We won&#8217;t be looking under the hood and how the great folks of Locomotive did it but instead, do our version from the visual effect.</p>\n\n\n\n<p>Let&#8217;s get started!</p>\n\n\n\n<h2>The Markup</h2>\n\n\n\n<p>We&#8217;ll need a couple of elements to be able to pull off the <a href=\"https://tympanus.net/codrops/2019/04/18/how-to-create-and-animate-rotated-overlays/\">&#8220;reveal&#8221; effect</a>. This animation consists of translating one element (where the overflow is hidden) in one direction while moving its child in the opposite direction.  The illusion created is that the element reduces its height and gets cut off. </p>\n\n\n\n<p>Another structure we need to take care of, is the the one for the marquee. We cover the CSS-only marquee animation in <a href=\"https://tympanus.net/codrops/2020/03/31/css-only-marquee-effect/\">this tutorial</a>. So the structure will be similar but we&#8217;ll simplify things a bit style-wise (we won&#8217;t have an offset for the items) so less &#8220;calculations&#8221; will be needed.</p>\n\n\n\n<p>So this is the markup we&#8217;ll set up for the menu and a menu item:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;nav class=\"menu\">\n\t&lt;div class=\"menu__item\">\n\t\t&lt;a class=\"menu__item-link\">Guayaquil&lt;/a>\n\t\t&lt;div class=\"marquee\">\n\t\t\t&lt;div class=\"marquee__inner-wrap\">\n\t\t\t\t&lt;div class=\"marquee__inner\" aria-hidden=\"true\">\n\t\t\t\t\t&lt;span>Frank Tower&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/1.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Dom Dom&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/2.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Santa Maria&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/3.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Big Molly&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/4.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Frank Tower&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/1.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Dom Dom&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/2.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Santa Maria&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/3.jpg);\">&lt;/div>\n\t\t\t\t\t&lt;span>Big Molly&lt;/span>\n\t\t\t\t\t&lt;div class=\"marquee__img\" style=\"background-image:url(img/4.jpg);\">&lt;/div>\n\t\t\t\t&lt;/div>&lt;!--/marquee__inner-->\n\t\t\t&lt;/div>&lt;!--/marquee__inner-wrap-->\n\t\t&lt;/div>&lt;!--/marquee-->\n\t&lt;/div>&lt;!--/menu__item-->\n\t&lt;!-- ... -->\n&lt;/nav>&lt;!--/menu-->\n</code></pre>\n\n\n\n<p>For the looping marquee animation, we duplicate our content. Let&#8217;s look into the details for that in a moment.</p>\n\n\n\n<p>The <em>marquee</em> element and its child, <em>marquee__inner-wrap</em>, will be used for the cut off reveal effect. </p>\n\n\n\n<p>Let&#8217;s now take care of the styling.</p>\n\n\n\n<h2>The CSS</h2>\n\n\n\n<p>We&#8217;ll start by styling the menu item:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.menu__item {\n\tcursor: default;\n\tposition: relative;\n\toverflow: hidden;\n\ttext-align: center;\n\tbox-shadow: 0 -1px var(--color-border);\n}\n\n.menu__item:last-child {\n\tbox-shadow: 0 1px var(--color-border), 0 -1px var(--color-border);\n}</code></pre>\n\n\n\n<p>Since we want the little border to be visible when moving over to another item, we&#8217;ll use a box shadow. The variables are defined in the body styles. </p>\n\n\n\n<p>What is important here is that the element&#8217;s overflow is set to &#8220;hidden&#8221; because we&#8217;ll be sliding the inner elements up and down and we don&#8217;t want to see them. </p>\n\n\n\n<p>The link is styled simply and we also take care of focus styles:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.menu__item-link {\n\tdisplay: block;\n\tposition: relative;\n\tcursor: pointer;\n\ttext-decoration: none;\n}\n\n.menu__item-link:focus,\n.menu__item-link:focus-visible {\n\tcolor: var(--menu-focus);\n}\n\n.menu__item-link:focus:not(:focus-visible) {\n\tcolor: var(--color-link);\n}</code></pre>\n\n\n\n<p>The marquee will be positioned absolutely and we&#8217;ll translate it down by default, while the child will be translated up. When hovering, we&#8217;ll reset these translations dynamically using JavaScript depending on where we come from with the mouse:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.marquee {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\toverflow: hidden;\n\twidth: 100%;\n\theight: 100%;\n\tpointer-events: none;\n\tbackground: var(--marquee-bg);\n\ttransform: translate3d(0,101%,0);\n}\n\n.marquee__inner-wrap {\n\theight: 100%;\n\twidth: 100%;\n\ttransform: translate3d(0,-101%,0);\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee01.png\" alt=\"\" class=\"wp-image-55159\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee01.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee01-400x180.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee01-768x345.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>The inner marquee element will be as large as its content and we&#8217;ll have an animation running:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.marquee__inner {\n\theight: 100%;\n\twidth: fit-content;\n\talign-items: center;\n\tdisplay: flex;\n\tposition: relative;\n\tanimation: marquee 15s linear infinite;\n\twill-change: transform;\n}\n\n@keyframes marquee {\n\t100% {\n\t\ttransform: translate3d(-50%, 0, 0);\n\t}\n}</code></pre>\n\n\n\n<p>Since we doubled the content, we know exactly when we have to &#8220;restart&#8221; the animation. At half of the element&#8217;s width, we&#8217;ll go back to the beginning, creating the illusion of an endless flow. </p>\n\n\n\n<p>And finally, some styling for our text elements and the images:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.menu__item-link,\n.marquee span {\n\twhite-space: nowrap;\n\tfont-size: 6vw;\n\tline-height: 1.2;\n\tfont-weight: 600;\n\tpadding: 1vh 1vw 0;\n\ttext-transform: uppercase;\n}\n\n.marquee span {\n\ttext-align: center;\n\tcolor: var(--marquee-text);\n\tfont-weight: 400;\n}\n\n.marquee__img {\n\twidth: 15vw;\n\theight: 70%;\n\tmargin: 0 2vw;\n\tborder-radius: 5vw;\n\tbackground-size: cover;\n\tbackground-position: 50% 50%;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee_02.jpg\" alt=\"\" class=\"wp-image-55156\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee_02.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee_02-400x197.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/marquee_02-768x377.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>And that&#8217;s all the styling! Let&#8217;s now take care of the dynamic part.</p>\n\n\n\n<h2>The JavaScript</h2>\n\n\n\n<p>The core of our script is the changing of the transforms based on the direction we are coming from with the mouse. <a href=\"https://codepen.io/johnstew\">John Stewart</a> coded an <a href=\"https://codepen.io/johnstew/pen/zxYJZP?editors=0010\">elegant solution</a> for this and we&#8217;ll integrate his code into our script. We&#8217;ll use <a href=\"https://greensock.com/gsap/\">GSAP</a>. </p>\n\n\n\n<p>Let&#8217;s first create our entry file (index.js) and initialize our Menu:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Menu } from './menu';\n// initialize the menu\nnew Menu(document.querySelector('.menu'));</code></pre>\n\n\n\n<p>The Menu has a set of items:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { MenuItem } from './menuItem';\n\nexport class Menu {\n    constructor(el) {\n        // .menu element\n        this.DOM = {el: el};\n        // the menu items\n        this.DOM.menuItems = this.DOM.el.querySelectorAll('.menu__item');\n        // array of MenuItem\n        this.menuItems = &#91;];\n        this.DOM.menuItems.forEach(menuItem => this.menuItems.push(new MenuItem(menuItem)));\n    }\n}</code></pre>\n\n\n\n<p>We initialize a <em>MenuItem</em> instance for each of the menu&#8217;s items. </p>\n\n\n\n<p>Now let&#8217;s create a class <em>MenuItem</em> where we add the mouse enter/leave logic. We want to animate both the <em>.marquee</em> and <em>.marquee__inner-wrap </em>elements when hovering over the <em>.menu__item-link</em> element. These two elements need to be translated in different directions so that we achieve the cut-off <a href=\"https://tympanus.net/codrops/2019/04/18/how-to-create-and-animate-rotated-overlays/\">reveal effect</a>.</p>\n\n\n\n<p>Let&#8217;s start by initializing some elements and events:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { gsap } from 'gsap';\nimport { closestEdge } from './utils';\n\nexport class MenuItem {\n    constructor(el) {\n        // .menu__item element\n        this.DOM = {el: el};\n        // .menu__item-link element\n        this.DOM.link = this.DOM.el.querySelector('a.menu__item-link');\n        // .marquee element\n        this.DOM.marquee = this.DOM.el.querySelector('.marquee');\n        // .marquee__inner-wrap element\n        this.DOM.marqueeInner = this.DOM.marquee.querySelector('.marquee__inner-wrap');\n        // some default options for the animation's speed and easing\n        this.animationDefaults = {duration: 0.6, ease: 'expo'};\n        // events initialization\n        this.initEvents();\n    }\n    initEvents() {\n        this.onMouseEnterFn = ev => this.mouseEnter(ev);\n        this.DOM.link.addEventListener('mouseenter', this.onMouseEnterFn);\n        this.onMouseLeaveFn = ev => this.mouseLeave(ev);\n        this.DOM.link.addEventListener('mouseleave', this.onMouseLeaveFn);\n    }\n    // ...\n}</code></pre>\n\n\n\n<p>When hovering in or out, we want the marquee content to be revealed by sliding out both, the <em>marquee</em> and <em>marqueeInner</em> elements. This animation should follow the mouse movement, meaning that if we enter the element from the top then the sliding effect will be from top to bottom and vice-versa. To achieve this, we need to set up the correct initial positions for both elements:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class MenuItem {\n    // ...\n    mouseEnter(ev) {\n        // find closest side to the mouse\n        const edge = this.findClosestEdge(ev);\n        \n        // set the initial y position for both the marquee and marqueeInner elements\n        // for the reveal effect to happen, both start at opposite positions\n        // the directions are different depending on the direction the cursor enters the element (bottom or top)\n        gsap.timeline({defaults: this.animationDefaults})\n        .set(this.DOM.marquee, {y: edge === 'top' ? '-101%' : '101%'}, 0)\n        .set(this.DOM.marqueeInner, {y: edge === 'top' ? '101%' : '-101%'}, 0)\n        .to(&#91;this.DOM.marquee, this.DOM.marqueeInner], {y: '0%'}, 0);\n    }\n    mouseLeave(ev) {\n        // find closest side to the mouse\n        const edge = this.findClosestEdge(ev);\n        \n        gsap.timeline({defaults: this.animationDefaults})\n        .to(this.DOM.marquee, {y: edge === 'top' ? '-101%' : '101%'}, 0)\n        .to(this.DOM.marqueeInner, {y: edge === 'top' ? '101%' : '-101%'}, 0);\n    }\n    // find closest side to the mouse when entering/leaving\n    findClosestEdge(ev) {\n        const x = ev.pageX - this.DOM.el.offsetLeft;\n        const y = ev.pageY - this.DOM.el.offsetTop;\n        return closestEdge(x,y,this.DOM.el.clientWidth, this.DOM.el.clientHeight);\n    }\n    // ...\n}</code></pre>\n\n\n\n<p>And that&#8217;s all! Our direction-aware marquee hover effect is done! </p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/Marqueetirmmed-1.mp4\"></video><figcaption>Check out the <a href=\"http://tympanus.net/Development/MarqueeMenu/\" target=\"_blank\" rel=\"noreferrer noopener\">final demo</a>.</figcaption></figure>\n\n\n\n<p>Now, if you&#8217;d like another challenge, try to implement the opening/closing of the menu. The Locomotive team used a really great 3D effect here, so go on and try that or experiment with other cool &#8220;openings&#8221;.</p>\n\n\n\n<p>I really hope you enjoyed this tutorial and found it useful!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/30/how-to-code-the-k72-marquee-hover-animation/\">How to Code the K72 Marquee Hover Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "enclosure": [
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/k72menu_opt.mp4",
                    "length": "426250",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/Marqueetirmmed-1.mp4",
                    "length": "252360",
                    "type": "video/mp4"
                }
            }
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "How to Use PostCSS as a Configurable Alternative to Sass"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/postcss-sass-configurable-alternative/?utm_source=rss\"\n              title=\"How to Use PostCSS as a Configurable Alternative to Sass\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614052561postcss-preprocessor.png\"\n        alt=\"How to Use PostCSS as a Configurable Alternative to Sass\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614052561postcss-preprocessor-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614052561postcss-preprocessor.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Web developers love the <a href=\"https://sass-lang.com/\">Sass CSS preprocessor</a>. According to the <a href=\"https://2020.stateofcss.com/technologies/pre-post-processors/\">Sass opinions</a> in the <a href=\"https://2020.stateofcss.com/\">State of CSS Survey</a>, every developer knows what it is, 89% use it regularly, and 88% have high satisfaction.</strong></p>\n<p>Many web bundlers include Sass processing, but you may also be using <a href=\"https://postcss.org/\">PostCSS</a> without realizing it. PostCSS is primarily known for its <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer plugin</a>, which automatically adds <code>-webkit</code>, <code>-moz</code>, and <code>-ms</code> vendor prefixes to CSS properties when required. Its plugin system means it can do so much more … <em>such as compiling <code>.scss</code> files without having to use the Sass compiler.</em></p>\n<p>This tutorial explains how to create a custom CSS preprocessor which compiles Sass syntax and supplements it with further features. It&#8217;s ideal for anyone with specific CSS requirements who knows a little Node.js.</p>\n<h2 id=\"quickstart\">Quick Start</h2>\n<p>An example PostCSS project can be cloned from <a href=\"https://github.com/sitepoint-editors/postcss-demo\">GitHub</a>. It requires Node.js, so run <code>npm install</code> to fetch all dependencies.</p>\n<p>Compile the demonstration <code>src/scss/main.scss</code> source code to <code>build/css/main.css</code> using:</p>\n<pre><code class=\"bash language-bash\">npm run css:dev\r\n</code></pre>\n<p>Auto-compile whenever files are changed using:</p>\n<pre><code class=\"bash language-bash\">npm run css:watch\r\n</code></pre>\n<p>Then exit watching by pressing <kbd>Ctrl</kbd> | <kbd>Cmd</kbd> + <kbd>C</kbd> in the terminal.</p>\n<p>Both options also create a source map at <code>build/css/main.css.map</code>, which references the original source files in the developer tools.</p>\n<p>Production-level minified CSS without a source map can be compiled using:</p>\n<pre><code class=\"bash language-bash\">npm run css:build\r\n</code></pre>\n<p>Refer to the <code>README.md</code> file for further information.</p>\n<h2 id=\"shouldyoureplacesasswithpostcss\">Should You Replace Sass with PostCSS?</h2>\n<p>There’s nothing wrong with the Sass compiler, but consider the following factors.</p>\n<h3 id=\"moduledependencies\">Module Dependencies</h3>\n<p>The latest Dart version of Sass can be installed globally using the Node.js <code>npm</code> package manager:</p>\n<pre><code class=\"bash language-bash\">npm install -g sass\r\n</code></pre>\n<p>Compile Sass <code>.scss</code> code with:</p>\n<pre><code class=\"bash language-bash\">sass [input.scss] [output.css]\r\n</code></pre>\n<p>Source maps are automatically generated (<code>--no-source-map</code> will switch them off) or <code>--watch</code> can be added to auto-compile source files when they change.</p>\n<p>The latest version of Sass requires less than 5MB of installation space.</p>\n<p>PostCSS <em>should</em> require fewer resources and a basic Sass-like compiler with auto-prefixing, and minification needs less than 1MB of space. In reality, your <code>node_modules</code> folder will expand to more than 60MB and increase rapidly as more plugins are added. This is mostly <code>npm</code> installing other dependencies. Even though PostCSS may not use them, it can’t be considered as a lightweight alternative.</p>\n<p>However, if you&#8217;re already using PostCSS for Autoprefixer or other purposes, Sass may not be necessary.</p>\n<h3 id=\"processingspeed\">Processing Speed</h3>\n<p>The slow, Ruby-based Sass compiler has long gone and the latest edition uses a compiled <a href=\"https://dart.dev/\">Dart</a> runtime. <em>It&#8217;s fast.</em></p>\n<p>PostCSS is pure JavaScript and, while benchmarks will differ, it can be three times slower at compiling the same source code.</p>\n<p>However, this speed difference will be less noticeable if you&#8217;re already running PostCSS after Sass. A two-stage process can be slower than using PostCSS alone, since much of its work involves tokenizing CSS properties.</p>\n<h3 id=\"customization\">Customization</h3>\n<p>The Sass language includes a large set of features including variables, nesting, partials, mixins, and more. There are downsides:</p>\n<ol>\n<li>\n<p>You cannot easily add new features.</p>\n<p>Perhaps you&#8217;d like an option convert HSLA colors to RGB. It may be possible to write a custom function, but other requirements will be impossible — such as inlining an SVG as a background image.</p>\n</li>\n<li>\n<p>You can’t easily restrict the feature set.</p>\n<p>Perhaps you&#8217;d prefer your team not to use nesting or <code>@extend</code>. Linting rules will help, but they won&#8217;t stop Sass compiling valid <code>.scss</code> files.</p>\n</li>\n</ol>\n<p>PostCSS is considerably more configurable.</p>\n<p>On its own, PostCSS does nothing. Processing functionality requires one or more of the <a href=\"https://github.com/postcss/postcss/blob/main/docs/plugins.md\">many plugins available</a>. Most perform a single task, so if you don&#8217;t want nesting, don&#8217;t add a nesting plugin. If necessary, you can <a href=\"https://github.com/postcss/postcss/blob/main/docs/writing-a-plugin.md\">write your own plugins</a> in a standard JavaScript module that can harness the power of Node.js.</p>\n<h2 id=\"installpostcss\">Install PostCSS</h2>\n<p>PostCSS can be used with <a href=\"https://github.com/postcss/postcss#usage\">webpack, Parcel, Gulp.js, and other build tools</a>, but this tutorial shows how to run it from the command line.</p>\n<p>If necessary, initialize a new Node.js project with <code>npm init</code>. Set up PostCSS by installing the following modules for basic <code>.scss</code> parsing with plugins for partials, variables, mixins, nesting, and auto-prefixing:</p>\n<pre><code class=\"bash language-bash\">npm install --save-dev postcss postcss-cli postcss-scss postcss-advanced-variables postcss-nested autoprefixer\r\n</code></pre>\n<p>Like the <a href=\"https://github.com/sitepoint-editors/postcss-demo\">example project</a>, PostCSS and its plugins are installed locally. This is a practical option if your projects are likely to have differing compilation requirements.</p>\n<p><em>Note: PostCSS can only be run from a JavaScript file, but the <a href=\"https://github.com/postcss/postcss-cli\"><code>postcss-cli</code></a> module provides a wrapper that can be called from the command line. The <a href=\"https://github.com/postcss/postcss-scss\">postcss-scss</a> module allows PostCSS to read <code>.scss</code> files but doesn’t transform them.</em></p>\n<h3 id=\"autoprefixerconfiguration\">Autoprefixer Configuration</h3>\n<p>Autoprefixer uses <a href=\"https://github.com/browserslist/browserslist\">browserslist</a> to determine which vendor prefixes are required according to your list of supported browsers. It&#8217;s easiest to define this list as a <code>\"browserslist\"</code> array in <code>package.json</code>. The following example adds vendor prefixes where any browser has at least 2% market share:</p>\n<pre><code class=\"javascript language-javascript\">\"browserslist\": [\r\n  \"&gt; 2%\"\r\n],\r\n</code></pre>\n<h2 id=\"yourfirstbuild\">Your First Build</h2>\n<p>You’ll typically have a single root Sass <code>.scss</code> file which imports all required partial/component files. For example:</p>\n<pre><code class=\"scss language-scss\">// root Sass file\r\n// src/scss/main.scss\r\n@import '_variables';\r\n@import '_reset';\r\n@import 'components/_card';\r\n// etc.\r\n</code></pre>\n<p>Compilation can be started by running <code>npx postcss</code>, followed by the input file, an <code>--output</code> file, and any required options. For example:</p>\n<pre><code class=\"bash language-bash\">npx postcss ./src/scss/main.scss \\\r\n    --output ./build/css/main.css \\\r\n    --env development \\\r\n    --map \\\r\n    --verbose \\\r\n    --parser postcss-scss \\\r\n    --use postcss-advanced-variables postcss-nested autoprefixer\r\n</code></pre>\n<p>This command:</p>\n<ol>\n<li>parses <code>./src/scss/main.scss</code></li>\n<li>outputs to <code>./build/css/main.css</code></li>\n<li>sets the <code>NODE_ENV</code> environment variable to <code>development</code></li>\n<li>outputs an external source map file</li>\n<li>sets verbose output and error messages</li>\n<li>sets the <code>postcss-scss</code> Sass parser, and</li>\n<li>uses the plugins <code>postcss-advanced-variables</code>, <code>postcss-nested</code>, and <code>autoprefixer</code> to handle partials, variables, mixins, nesting, and auto-prefixing</li>\n</ol>\n<p>Optionally, you could add <code>--watch</code> to auto-compile when <code>.scss</code> files are modified.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/postcss-sass-configurable-alternative/?utm_source=rss\">How to Use PostCSS as a Configurable Alternative to Sass</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/postcss-sass-configurable-alternative/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181248",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "CSS",
            "HTML & CSS",
            "Sass"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 22 Feb 2021 15:00:37 GMT"
        ],
        "metaDesc": [
            "Sass is handy, but can't do everything. Learn how to use PostCSS to create a custom CSS preprocessor that compiles Sass syntax but also adds extra features."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Shawn Wildermuth"
        ],
        "title": [
            "Managing Shared State In Vue 3"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/managing-shared-state-vue3/"
        ],
        "pubDate": [
            "Thu, 03 Jun 2021 10:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/managing-shared-state-vue3/"
        ],
        "description": [
            "State can be hard. When we start a simple Vue project, it can be simple to just keep our working state on a particular component:\nsetup() { let books: Work[] = reactive([]); onMounted(async () =&gt; { // Call the API const response = await bookService.getScienceBooks(); if (response.status === 200) { books.splice(0, books.length, ...response.data.works); } }); return { books }; },  When your project is a single page of showing data (perhaps to sort or filter it), this can be compelling."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/managing-shared-state-vue3/\" />\n              <title>Managing Shared State In Vue 3</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Managing Shared State In Vue 3</h1>\n                  \n                    \n                    <address>Shawn Wildermuth</address>\n                  \n                  <time datetime=\"2021-06-03T10:30:00&#43;00:00\" class=\"op-published\">2021-06-03T10:30:00+00:00</time>\n                  <time datetime=\"2021-06-03T10:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>State can be hard. When we start a simple Vue project, it can be simple to just keep our working state on a particular component:</p>\n\n<pre><code class=\"language-javascript\">setup() {\n  let books: Work[] = reactive([]);\n\n  onMounted(async () =&gt; {\n    // Call the API\n    const response = await bookService.getScienceBooks();\n    if (response.status === 200) {\n      books.splice(0, books.length, ...response.data.works);\n    }\n  });\n\n  return {\n    books\n  };\n},\n</code></pre>\n\n<p>When your project is a single page of showing data (perhaps to sort or filter it), this can be compelling. But in this case, this component will get data on every request. What if you want to keep it around? That’s where state management comes into play. As network connections are often expensive and occasionally unreliable, it would be better to keep this state around as you navigate through an application.</p>\n\n<p>Another issue is communicating between components. While you can use events and props to communicate with direct children-parents, handling simple situations like error handling and busy flags can be difficult when each of your views/pages are independent. For example, imagine that you had a top-level control was wired up to show error and loading animation:</p>\n\n<pre><code class=\"language-javascript\">// App.vue\n&lt;template&gt;\n  &lt;div class=\"container mx-auto bg-gray-100 p-1\"&gt;\n    &lt;router-link to=\"/\"&gt;&lt;h1&gt;Bookcase&lt;/h1&gt;&lt;/router-link&gt;\n    &lt;div class=\"alert\" v-if=\"error\"&gt;{{ error }}&lt;/div&gt;\n    &lt;div class=\"alert bg-gray-200 text-gray-900\" v-if=\"isBusy\"&gt;\n      Loading...\n    &lt;/div&gt;\n    &lt;router-view :key=\"$route.fullPath\"&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n\n<p>Without an effective way to handle this state, it might suggest a publish/subscribe system, but in fact sharing data is more straightforward in many cases. If want to have shared state, how do you go about it? Let’s look at some common ways to do this.</p>\n\n<p><strong>Note</strong>: <em>You’ll find the code for this section in the “main” branch of the <a href=\"https://github.com/smashingmagazine/SmashingBookcase\">example project on GitHub</a>.</em></p>\n\n<h3 id=\"shared-state-in-vue-3\">Shared State In Vue 3</h3>\n\n<p>Since moving to Vue 3, I’ve migrated completely to using the Composition API. For the article, I’m also using TypeScript though that’s not required for examples I’m showing you. While you can share state any way you want, I’m going to show you several techniques that I find the most commonly used patterns. Each has it’s own pros and cons, so don’t take anything I talk about here as dogma.</p>\n\n<p>The techniques include:</p>\n\n<ul>\n  <li><a href=\"#factories\">Factories</a>,</li>\n  <li><a href=\"#shared-singletons\">Shared Singletons</a>,</li>\n  <li><a href=\"#vuex4\">Vuex 4</a>,</li>\n  <li><a href=\"#vuex5\">Vuex 5</a>.</li>\n</ul>\n\n<p><strong>Note</strong>: <em>Vuex 5, as of the writing of this article, it’s in the RFC (Request for Comments) stage so I want to get you ready for where Vuex is going, but right now there is not a working version of this option.</em></p>\n\n<p>Let’s dig in&hellip;</p>\n\n<h4 id=\"factories\">Factories</h4>\n\n<p><strong>Note</strong>: <em>The code for this section is in the “Factories” branch of the example project on <a href=\"https://github.com/smashingmagazine/SmashingBookcase/tree/Factories\">GitHub</a>.</em></p>\n\n<p>The factory pattern is just about creating an instance of the state you care about. In this pattern, you return a function that is much like the <strong>start</strong> function in the Composition API. You’d create a scope and build the components of what you’re looking for. For example:</p>\n\n<pre><code class=\"language-javascript\">export default function () {\n\n  const books: Work[] = reactive([]);\n\n  async function loadBooks(val: string) {\n      const response = await bookService.getBooks(val, currentPage.value);\n      if (response.status === 200) {\n        books.splice(0, books.length, ...response.data.works);\n      }\n  }\n\n  return {\n    loadBooks,\n    books\n  };\n}\n</code></pre>\n\n<p>You could ask for just the parts of the factory created objects you need like so:</p>\n\n<pre><code class=\"language-javascript\">// In Home.vue\n  const { books, loadBooks } = BookFactory();\n</code></pre>\n\n<p>If we add an <code>isBusy</code> flag to show when the network request happens, the above code doesn’t change, but you could decide where you are going to show the <code>isBusy</code>:</p>\n\n<pre><code class=\"language-javascript\">export default function () {\n\n  const books: Work[] = reactive([]);\n  const isBusy = ref(false);\n\n  async function loadBooks(val: string) {\n    isBusy.value = true;\n    const response = await bookService.getBooks(val, currentPage.value);\n    if (response.status === 200) {\n      books.splice(0, books.length, ...response.data.works);\n    }\n  }\n\n  return {\n    loadBooks,\n    books,\n    isBusy\n  };\n}\n</code></pre>\n\n<p>In another view (vue?) you could just ask for the isBusy flag without having to know about how the rest of the factory works:</p>\n\n<pre><code class=\"language-javascript\">// App.vue\nexport default defineComponent({\n  setup() {\n    const { isBusy } = BookFactory();\n    return {\n      isBusy\n    }\n  },\n})\n</code></pre>\n\n<p>But you may have noticed an issue; every time we call the factory, we’re getting a new instance of all the objects. There are times when you want to have a factory return new instances, but in our case we’re talking about sharing the state, so we need to move the creation outside the factory:</p>\n\n<pre><code class=\"language-javascript\">const books: Work[] = reactive([]);\nconst isBusy = ref(false);\n\nasync function loadBooks(val: string) {\n  isBusy.value = true;\n  const response = await bookService.getBooks(val, currentPage.value);\n  if (response.status === 200) {\n    books.splice(0, books.length, ...response.data.works);\n  }\n}\n\nexport default function () {\n return {\n    loadBooks,\n    books,\n    isBusy\n  };\n}\n</code></pre>\n\n<p>Now the factory is giving us a shared instance, or a singleton if you prefer. While this pattern works, it can be confusing to return a function that doesn’t create a new instance every time.</p>\n\n<p>Because the underlying objects are marked as <code>const</code> you shouldn’t be able to replace them (and break the singleton nature). So this code should complain:</p>\n\n<pre><code class=\"language-javascript\">// In Home.vue\n  const { books, loadBooks } = BookFactory();\n\n  books = []; // Error, books is defined as const\n</code></pre>\n\n<p>So it can be important to make sure mutable state can be updated (e.g. using <code>books.splice()</code> instead of assigning the books).</p>\n\n<p>Another way to handle this is to use shared instances.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p>How do we make <strong>design systems</strong> work? In his upcoming Smashing workshop on <a data-instant href=\"https://smashingconf.com/online-workshops/workshops/brad-frost-june/\">Successful Design Systems</a>, Brad Frost explains how to <strong>plan, execute and maintain</strong> a successful design system at your organization. Online, and <em>live</em>. June 29 – July 13, 2021.</p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<a data-instant href=\"https://smashingconf.com/online-workshops/workshops/brad-frost-june/\" class=\"btn btn--green btn--large\">Jump to the workshop&nbsp;↬</a>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"https://smashingconf.com/online-workshops/workshops/brad-frost-june/\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t<picture><source type=\"image/avif\" srcSet=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/70b4de6c-7455-4fd2-8039-11782ebdd47a/brad-frost.avif\" />\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ff6ac66a-406a-4dba-aab8-efb3c967c265/brad-frost-1.jpg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"300\"\n\t\t\t\t\t\t\t\t\t\theight=\"300\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</picture>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h4 id=\"shared-singletons\">Shared Instances</h4>\n\n<p><em>The code for this section is in the “SharedState” branch of the example project on <a href=\"https://github.com/smashingmagazine/SmashingBookcase/tree/SharedState\">GitHub</a>.</em></p>\n\n<p>If you’re going to be sharing state, might as well be clear about the fact that the state is a singleton. In this case, it can just be imported as a static object. For example, I like to create an object that can be imported as a reactive object:</p>\n\n<pre><code class=\"language-javascript\">export default reactive({\n\n  books: new Array&lt;Work&gt;(),\n  isBusy: false,\n\n  async loadBooks() {\n    this.isBusy = true;\n    const response = await bookService.getBooks(this.currentTopic, this.currentPage);\n    if (response.status === 200) {\n      this.books.splice(0, this.books.length, ...response.data.works);\n    }\n    this.isBusy = false;\n  }\n});\n</code></pre>\n\n<p>In this case, you just import the object (which I’m calling a store in this example):</p>\n\n<pre><code class=\"language-javascript\">// Home.vue\nimport state from \"@/state\";\n\nexport default defineComponent({\n  setup() {\n\n    // ...\n\n    onMounted(async () => {\n      if (state.books.length === 0) state.loadBooks();\n    });\n\n    return {\n      state,\n      bookTopics,\n    };\n  },\n});\n</code></pre>\n\n<p>Then it becomes easy to bind to the state:</p>\n\n<pre><code class=\"language-javascript\">&lt;!-- Home.vue --&gt;\n&lt;div class=\"grid grid-cols-4\"&gt;\n  &lt;div\n    v-for=\"book in state.books\"\n    :key=\"book.key\"\n    class=\"border bg-white border-grey-500 m-1 p-1\"\n  &gt;\n  &lt;router-link :to=\"{ name: 'book', params: { id: book.key } }\"&gt;\n    &lt;BookInfo :book=\"book\" /&gt;\n  &lt;/router-link&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Like the other patterns, you get the benefit that you can share this instance between views:</p>\n\n<pre><code class=\"language-javascript\">// App.vue\nimport state from \"@/state\";\n\nexport default defineComponent({\n  setup() {\n    return {\n      state\n    };\n  },\n})\n</code></pre>\n\n<p>Then this can bind to what is the same object (whether it is a parent of the <code>Home.vue</code> or another page in the router):</p>\n\n<pre><code class=\"language-javascript\">&lt;!-- App.vue --&gt;\n  &lt;div class=\"container mx-auto bg-gray-100 p-1\"&gt;\n    &lt;router-link to=\"/\"&gt;&lt;h1&gt;Bookcase&lt;/h1&gt;&lt;/router-link&gt;\n    &lt;div class=\"alert bg-gray-200 text-gray-900\"   \n         v-if=\"state.isBusy\"&gt;Loading...&lt;/div&gt;\n    &lt;router-view :key=\"$route.fullPath\"&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n</code></pre>\n\n<p>Whether you use the factory pattern or the shared instance, they both have a common issue: mutable state. You can have accidental side effects of bindings or code changing state when you don’t want them to. In a trivial example like I’m using here, it isn’t complex enough to worry about. But as you’re building larger and larger apps, you will want to think about state mutation more carefully. That’s where Vuex can come to the rescue.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4 id=\"vuex4\">Vuex 4</h4>\n\n<p><em>The code for this section is in the “Vuex4” branch of the example project on <a href=\"https://github.com/smashingmagazine/SmashingBookcase/tree/Vuex4\">GitHub</a>.</em></p>\n\n<p>Vuex is state manager for Vue. It was built by the core team though it is managed as a separate project. The purpose of Vuex is to separate the state from the actions you want to do to the state. All changes of state has to go through Vuex which means it is more complex, but you get protection from accidental state change.</p>\n\n<p>The idea of Vuex is to provide a predictable flow of state management. Views flow to Actions which, in turn, use Mutations to change State which, in turn, updates the View. By limiting the flow of state change, you should have fewer side effects that change the state of your applications; therefore be easier to build larger applications. Vuex has a learning curve, but with that complexity you get predictability.</p>\n\n<p>Additionally, Vuex does support development-time tools (via the Vue Tools) to work with the state management including a feature called time-travel. This allows you to view a history of the state and move back and forward to see how it affects the application.</p>\n\n<p>There are times, too, when Vuex is important too.</p>\n\n<p>To add it to your Vue 3 project, you can either add the package to the project:</p>\n\n<pre><code class=\"language-javascript\">&gt; npm i vuex\n</code></pre>\n\n<p>Or, alternatively you can add it by using the Vue CLI:</p>\n\n<pre><code class=\"language-javascript\">&gt; vue add vuex\n</code></pre>\n\n<p>By using the CLI, it will create a starting point for your Vuex store, otherwise you’ll need to wire it up manually to the project. Let’s walk through how this works.</p>\n\n<p>First, you’ll need a state object that is created with Vuex’s createStore function:</p>\n\n<pre><code class=\"language-javascript\">import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {},\n  mutations: {},\n  actions: {},\n  getters: {}\n});\n</code></pre>\n\n<p>As you can see, the store requires several properties to be defined. State is just a list of the data you want to give your application access to:</p>\n\n<pre><code class=\"language-javascript\">import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    books: [],\n    isBusy: false\n  },\n  mutations: {},\n  actions: {}\n});\n</code></pre>\n\n<p>Note that the state shouldn’t use <strong>ref</strong> or <strong>reactive</strong> wrappers. This data is the same kind of share data that we used with Shared Instances or Factories. This store will be a singleton in your application, therefore the data in state is also going to be shared.</p>\n\n<p>Next, let’s look at actions. Actions are operations that you want to enable that involve the state. For example:</p>\n\n<pre><code class=\"language-javascript\">  actions: {\n    async loadBooks(store) {\n      const response = await bookService.getBooks(store.state.currentTopic,\n      if (response.status === 200) {\n        // ...\n      }\n    }\n  },\n</code></pre>\n\n<p>Actions are passed an instance of the store so that you can get at the state and other operations. Normally, we’d destructure just the parts we need:</p>\n\n<pre><code class=\"language-javascript\">  actions: {\n    async loadBooks({ state }) {\n      const response = await bookService.getBooks(state.currentTopic,\n      if (response.status === 200) {\n        // ...\n      }\n    }\n  },\n</code></pre>\n\n<p>The last piece of this are Mutations. Mutations are functions that can mutate state. Only mutations can affect state. So, for this example, we need mutations that change change the state:</p>\n\n<pre><code class=\"language-javascript\">  mutations: {\n    setBusy: (state) =&gt; state.isBusy = true,\n    clearBusy: (state) =&gt; state.isBusy = false,\n    setBooks(state, books) {\n      state.books.splice(0, state.books.length, ...books);\n    }\n },\n</code></pre>\n\n<p>Mutation functions always pass in the state object so that you can mutate that state. In the first two examples, you can see that we’re explicitly setting the state. But in the third example, we’re passing in the state to set. Mutations always take two parameters: state and the argument when calling the mutation.</p>\n\n<p>To call a mutation, you’d use the <strong>commit</strong> function on the store. In our case, I’ll just add it to the destructuring:</p>\n\n<pre><code class=\"language-javascript\">  actions: {\n    async loadBooks({ state, commit }) {\n      commit(\"setBusy\");\n      const response = await bookService.getBooks(state.currentTopic, \n      if (response.status === 200) {\n        commit(\"setBooks\", response.data);\n      }\n      commit(\"clearBusy\");\n    }\n  },\n</code></pre>\n\n<p>What you’ll see here is how <strong>commit</strong> requires the name of the action. There are tricks to make this not just use magic strings, but I’m going to skip that for now. This use of magic strings is one of the limitations of using Vuex.</p>\n\n<p>While using commit may seem like an unnecessary wrapper, remember that Vuex is not going to let you mutate state except inside the mutation, therefore only calls through <strong>commit</strong> will.</p>\n\n<p>You can also see that the call to <strong>setBooks</strong> takes a second argument. This is the second argument that is calling the mutation. If you were to need more information, you’d need to pack it into a single argument (another limitation of Vuex currently). Assuming you needed to insert a book into the books list, you could call it like this:</p>\n\n<pre><code class=\"language-javascript\">commit(\"insertBook\", { book, place: 4 }); // object, tuple, etc.\n</code></pre>\n\n<p>Then you could just destructure into the pieces you need:</p>\n\n<pre><code class=\"language-javascript\">mutations: {\n  insertBook(state, { book, place }) =&gt; // ...    \n}\n</code></pre>\n\n<p>Is this elegant? Not really, but it works.</p>\n\n<p>Now that we have our action working with mutations, we need to be able to use the Vuex store in our code. There are really two ways to get at the store. First, by registering the store with application (e.g. main.ts/js), you’ll have access to a centralized store that you have access to everywhere in your application:</p>\n\n<pre><code class=\"language-javascript\">// main.ts\nimport store from './store'\n\ncreateApp(App)\n  .use(store)\n  .use(router)\n  .mount('#app')\n</code></pre>\n\n<p>Note that this isn’t adding Vuex, but your actual store that you’re creating. Once this is added, you can just call <code>useStore</code> to get the store object:</p>\n\n<pre><code class=\"language-javascript\">import { useStore } from \"vuex\";\n\nexport default defineComponent({\n  components: {\n    BookInfo,\n  },\n  setup() {\n    const store = useStore();\n    const books = computed(() =&gt; store.state.books);\n    // ...\n  </code></pre>\n\n<p>This works fine, but I prefer to just import the store directly:</p>\n\n<pre><code class=\"language-javascript\">import store from \"@/store\";\n\nexport default defineComponent({\n  components: {\n    BookInfo,\n  },\n  setup() {\n    const books = computed(() =&gt; store.state.books);\n    // ...\n  </code></pre>\n\n<p>Now that you have access to the store object, how do you use it? For state, you’ll need to wrap them with computed functions so that changes will be propagated to your bindings:</p>\n\n<pre><code class=\"language-javascript\">export default defineComponent({\n  setup() {\n\n    const books = computed(() =&gt; store.state.books);\n\n    return {\n      books\n    };\n  },\n});\n</code></pre>\n\n<p>To call actions, you will need to call the <strong>dispatch</strong> method:</p>\n\n<pre><code class=\"language-javascript\">export default defineComponent({\n  setup() {\n\n    const books = computed(() =&gt; store.state.books);\n\n    onMounted(async () =&gt; await store.dispatch(\"loadBooks\"));\n\n    return {\n      books\n    };\n  },\n});\n</code></pre>\n\n<p>Actions can have parameters that you add after the name of the method. Lastly, to change state, you’ll need to call commit just like we did inside the Actions. For example, I have a paging property in the store, and then I can change the state with <strong>commit</strong>:</p>\n\n<pre><code class=\"language-javascript\">const incrementPage = () =&gt;\n  store.commit(\"setPage\", store.state.currentPage + 1);\nconst decrementPage = () =&gt;\n  store.commit(\"setPage\", store.state.currentPage - 1);\n</code></pre>\n\n<p>Note, that calling it like this would throw an error (because you can’t change state manually):</p>\n\n<pre><code class=\"language-javascript\">const incrementPage = () =&gt; store.state.currentPage++;\n  const decrementPage = () =&gt; store.state.currentPage--;\n</code></pre>\n\n<p>This is the real power here, we’d want control where state is changed and not have side effects that produce errors further down the line in development.</p>\n\n<p>You may be overwhelmed with number of moving pieces in Vuex, but it can really help manage state in larger, more complex projects. I would not say you need it in every case, but there will be large projects where it helps you overall.</p>\n\n<p>The big problem with Vuex 4 is that working with it in a TypeScript project leaves a lot to be desired. You can certainly make TypeScript types to help development and builds, but it requires a lot of moving pieces.</p>\n\n<p>That’s where Vuex 5 is meant to simplify how Vuex works in TypeScript (and in JavaScript projects in general). Let’s see how that will work once it’s released next.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4 id=\"vuex5\">Vuex 5</h4>\n\n<p><strong>Note</strong>: <em>The code for this section is in the “Vuex5” branch of the example project on <a href=\"https://github.com/smashingmagazine/SmashingBookcase/tree/Vuex5\">GitHub</a>.</em></p>\n\n<p>At the time of this article, Vuex 5 isn’t real. It’s a RFC (Request for Comments). It’s a plan. It’s a starting point for discussion. So a lot of what I may explain here likely will change somewhat. But to prepare you for the change in Vuex, I wanted to give you a view of where it’s going. Because of this the code associated with this example doesn’t build.</p>\n\n<p>The basic concepts of how Vuex works have been somewhat unchanged since it’s inception. With the introduction of Vue 3, Vuex 4 was created to mostly allow Vuex to work in new projects. But the team is trying to look at the real pain-points with Vuex and solve them. To this end they are planning some important changes:</p>\n\n<ul>\n<li>No more mutations: actions can mutate state (and possibly anyone).</li>\n<li>Better TypeScript support.</li>\n<li>Better multi-store functionality.</li>\n</ul>\n\n<p>So how would this work? Let’s start with creating the store:</p>\n\n<pre><code class=\"language-javascript\">export default createStore({\n  key: 'bookStore',\n  state: () =&gt; ({\n    isBusy: false,\n    books: new Array&lt;Work&gt;()\n  }),\n  actions: {\n    async loadBooks() {\n      try {\n        this.isBusy = true;\n        const response = await bookService.getBooks();\n        if (response.status === 200) {\n          this.books = response.data.works;\n        }\n      } finally {\n        this.isBusy = false;\n      }\n    }\n  },\n  getters: {\n    findBook(key: string): Work | undefined {\n      return this.books.find(b =&gt; b.key === key);\n    }\n  }\n});\n</code></pre>\n\n<p>First change to see is that every store now needs it own key. This is to allow you to retrieve multiple stores. Next you’ll notice that the state object is now a factory (e.g. returns from a function, not created on parsing). And there is no mutations section any more. Lastly, inside the actions, you can see we’re accessing state as just properties on the <code>this</code> pointer. No more having to pass in state and commit to actions. This helps not only in simplifying development, but also makes it easier to infer types for TypeScript.</p>\n\n<p>To register Vuex into your application, you’ll register Vuex instead of your global store:</p>\n\n<pre><code class=\"language-javascript\">import { createVuex } from 'vuex'\n\ncreateApp(App)\n  .use(createVuex())\n  .use(router)\n  .mount('#app')\n</code></pre>\n\n<p>Finally, to use the store, you’ll import the store then create an instance of it:</p>\n\n<pre><code class=\"language-javascript\">import bookStore from \"@/store\";\n\nexport default defineComponent({\n  components: {\n    BookInfo,\n  },\n  setup() {\n    const store = bookStore(); // Generate the wrapper\n    // ...\n  </code></pre>\n\n<p>Notice that what is returned from the store is a factory object that returns thsi instance of the store, no matter how many times you call the factory. The returned object is just an object with the actions, state and getters as first class citizens (with type information):</p>\n\n<pre><code class=\"language-javascript\">onMounted(async () =&gt; await store.loadBooks());\n\nconst incrementPage = () =&gt; store.currentPage++;\nconst decrementPage = () =&gt; store.currentPage--;\n</code></pre>\n\n<p>What you’ll see here is that state (e.g. <code>currentPage</code>) are just simple properties. And actions (e.g. <code>loadBooks</code>) are just functions. The fact that you’re using a store here is a side effect. You can treat the Vuex object as just an object and go about your work. This is a significant improvement in the API.</p>\n\n<p>Another change that’s important to point out is that you could also generate your store using a Composition API-like syntax:</p>\n\n<pre><code class=\"language-javascript\">export default defineStore(\"another\", () =&gt; {\n\n  // State\n  const isBusy = ref(false);\n  const books = reactive(new Array&gl;Work&gt;());\n\n  // Actions\n  async function loadBooks() {\n    try {\n      this.isBusy = true;\n      const response = await bookService.getBooks(this.currentTopic, this.currentPage);\n      if (response.status === 200) {\n        this.books = response.data.works;\n      }\n    } finally {\n      this.isBusy = false;\n    }\n  }\n\n  findBook(key: string): Work | undefined {\n    return this.books.find(b =&gt; b.key === key);\n  }\n\n  // Getters\n  const bookCount = computed(() =&gt; this.books.length);\n\n  return {\n    isBusy,\n    books,\n    loadBooks,\n    findBook,\n    bookCount\n  }\n});\n</code></pre>\n\n<p>This allows you to build your Vuex object just like you would your views with the Composition API and arguably it’s simpler.</p>\n\n<p>One main drawback in this new design is that you lose the non-mutability of the state. There are discussions happening around being able to enable this (for development only, just like Vuex 4) but there isn’t consensus how important this is. I personally think it’s a key benefit for Vuex, but we’ll have to see how this plays out.</p>\n\n<h3 id=\"where-are-we\">Where Are We?</h3>\n\n<p>Managing shared state in single page applications is a crucial part of development for most apps. Having a game plan on how you want to go about it in Vue is an important step in designing your solution. In this article, I’ve shown you several patterns for managing shared state including what’s coming for Vuex 5. Hopefully you’ll now have the knowledge to make the right decision for you own projects.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, yk, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Nele about ideal job requirements, the desire to do something meaningful and the motivational effect of anger 🎙"
        ],
        "author": [
            "Annika_H"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:36:41 +0000"
        ],
        "link": [
            "https://dev.to/s2engineers/nele-about-ideal-job-requirements-the-desire-to-do-something-meaningful-and-the-motivational-effect-of-anger-15bo"
        ],
        "guid": [
            "https://dev.to/s2engineers/nele-about-ideal-job-requirements-the-desire-to-do-something-meaningful-and-the-motivational-effect-of-anger-15bo"
        ],
        "description": [
            "<p><em>Illustration by <a href=\"https://dribbble.com/stephaniecase\">Stephanie Case</a></em></p>\n\n<h2>\n  <a href=\"#tell-us-about-yourself\">\n  </a>\n  Tell us about yourself!🤗\n</h2>\n\n<p>My name is Nele, my pronouns are she/her and I’m based in Hamburg. About 3 years ago I started as a Quality Assurance Engineer at SinnerSchrader and just recently, I switched my position to Scrum Master/ Agile Coach. Besides that, I'm the lead of our Diversity Skill Group and part of several cool change &amp; social initiatives at SinnerSchrader. What sparks my joy is video games, music, french fries and intersectional feminism.</p>\n\n<h2>\n  <a href=\"#thats-a-great-variety-of-interests-what-made-you-want-to-switch-from-being-a-quality-assurance-engineer-to-doing-something-else\">\n  </a>\n  That's a great variety of interests!🍟 What made you want to switch from being a Quality Assurance Engineer to doing something else?\n</h2>\n\n<p>I loved being a tester and I still do have feelings for it. I mean I really like the aspect of analyzing the shit out of things, thinking outside of the box to catch all cases, trying out things that weren’t expected, bothering developers… but over time I simply realized that I hit the ceiling of possibilities when it came to developing and using my soft skills in the QA. </p>\n\n<h2>\n  <a href=\"#how-come-you-decided-that-being-a-scrum-master-agile-coach-would-be-the-right-fit\">\n  </a>\n  How come you decided that being a Scrum Master/ Agile Coach would be the right fit?\n</h2>\n\n<p>While I’ve been a QA tester in a cross-functional and agile team, and watching my Scrum Masters doing their job, I eventually found many of the traits I craved in them and their daily work. I like the idea of servant leadership, empowering others to become an autonomous collective and fostering their professional relationships. And I’m really happy that SinnerSchrader gave me the opportunity to do this switch (unpaid ad...🥺).</p>\n\n<h2>\n  <a href=\"#how-did-you-realize-that-you-needed-a-job-that-would-fulfill-you-in-a-different-way-as-well\">\n  </a>\n  How did you realize that you needed a job that would fulfill you in a different way as well?\n</h2>\n\n<p>To be honest, all the social initiatives I did in parallel to my daily QA job started to spark more joy than working as a tester. Engaging for people &amp; equal opportunities, driving change, motivating others to join in, questioning status quos, creating processes and being there for my peers and my team made me grow way more than I expected, so that slowly but surely, it shifted what I thought were my ideal job requirements. Somehow it was a logical consequence for me to dig into the idea of becoming some kind of coach.</p>\n\n<h2>\n  <a href=\"#can-you-share-some-details-about-the-initiatives-youre-working-on-next-to-your-daily-job\">\n  </a>\n  Can you share some details about the initiatives you’re working on next to your daily job?\n</h2>\n\n<p>To give a little context, the SinnerSchrader Skill Groups are usually a mix between a topic-related study group and a task force, which can be joined by people of all disciplines, levels and studios. They are an independent, non-hierarchical place where people can share knowledge, learnings, groom their soft- and hard skills and drive internal projects next to their normal jobs. We have several of them and when I found that <a href=\"https://dev.to/kotzendekrabbe\">Feli Kugland</a> initiated a Skill Group that focussed on pushing diversity topics in our work environment, I joined and never left, knowing that there’s still a ton of work to do when it comes to diversity in our society. Since then, the skill group organized talks, workshops, discussion rounds and much more, all under the umbrella of creating a safe and welcoming environment for the people of SinnerSchrader. <br>\nConsidering that the Skill Group handles topics in an overarching and SinnerSchrader-wide manner and therefore decision paths are naturally longer, I’m also part of a studio based Change Team which is tackling similar topics, but in a more decentralized way, focussing on our studio in Hamburg and driving innovation from within. This team is responsible for analyzing pain points within the studio, forming initiatives and promoting change for the overall wellbeing of the people working in our studio in Hamburg.</p>\n<h2>\n  <a href=\"#can-you-name-some-topics-the-skill-group-and-the-change-team-are-working-on\">\n  </a>\n  Can you name some topics the Skill Group and the Change Team are working on?\n</h2>\n\n<p>Among other tasks, we’re currently working on concepts for trainings addressing anti-racism &amp; allyship, we’re deriving next steps for gender pay gap prevention and educating on unconscious bias. We also implemented regular employee happiness surveys, guidelines for inclusive language &amp; meeting culture, celebrated the International Women’s Day and formed alliances with several departments in the company to gather the necessary tools and support, so that we’re able to tackle all these things.</p>\n<h2>\n  <a href=\"#what-is-it-that-drives-your-engagement\">\n  </a>\n  What is it that drives your engagement?🚀\n</h2>\n\n<p>Anger and impulsiveness, I guess...😄<br>\nI know this sounds hackneyed now, but what I’ve learned about anger is that this emotion has such a negative connotation although anger ≠ aggression. We tend to equate anger with destruction, violence and even becoming blind from anger when in fact, it’s a powerful vehicle for being consequent and passionate about something that bothers us. It’s all just depending on the driver of this vehicle, and how they’re capable of expressing their anger in a healthy way. There’s so much more to anger than blind rage. Angriness is transformative and potent; the response to it isn’t necessarily fear or dismissal. Once you’re on the anger train, you can be super determined, fast and brave. And since anger is a particularly honest emotion, it holds the power of motivating others to jump onto it, uplifting awareness for things that matter to you, empowering solidarity and creating a stir that simply can’t be unseen. <br>\nWell, and same goes for impulsivity. At first glance, reacting on impulses might appear unreflected or hasty when in fact, impulsivity is an intuitive response that comes along with a shitload of bravery. It took me some time to learn not to feel bad for being impulsive and reflect the source of my reactions, so as a result, I could start trusting my intuition instead of suppressing it. As long as we’re being respectful and minding basic human decency, impulsivity and impromptu actions have a high potential of serving a good purpose. If something doesn’t seem quite right or feels unfair, we should normalize releasing our concerns and immediately address them where they belong. Even if it sometimes seems like you’re creating a fuss, trust your gut feeling and learn in the process.</p>\n<h2>\n  <a href=\"#so-is-this-something-that-youd-like-to-share-with-everyone\">\n  </a>\n  So is this something that you’d like to share with everyone?\n</h2>\n\n<p>Yeah, just own it and grow. Be progressive. <br>\nDare to<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;rant&gt;\n</code></pre>\n\n</div>\n\n\n\n<p>I’m well aware that this is easier said than done. Sadly, both anger and impulsiveness are united by one aspect which makes it difficult for some people to harness from them; it’s the fact that as women and girls in a patriarchal society, we are still constantly told that anger isn’t suitable for us and impulsiveness is not a “feminine” trait. That we should prevent at all costs to make others feel uncomfortable. That we have to hold back ourselves in order for others to come forward and that this is the definition of kindness. That women and girls have to be nothing else but modest, gentle and nurturing. <br>\nThroughout history, our assertive traits are belittled by sentences like “You’re cute when you’re angry”. Being loud and determined about something that bothers us evokes subliminal oppression like tone policing or gaslighting, for instance by calling us crazy, falsely accusing us of being hysterical/ overreacting/ being on our period or a high maintenance Medusa (as if that was something bad!), so that eventually we turn our anger inwards or towards ourselves. It’s striking how deeply all this is interwoven with our identity. And how much we submit to it, without ever calling it into question. Systematically reproduced, we’ve internalized all of it as it was a natural condition. <br>\nNah. I don’t want me, my peers and the future generation to approve of those limitations any longer. I know I’m capable of being headstrong and kind at the same time! Let’s start fighting for each other and allow us to be gentle to ourselves, too. I want us to naturally trust our intuitions, express our emotions and learn from our own mistakes. Let’s normalize failure and stop striving for perfection. And lastly, let’s realize that sometimes, a woman’s anger is a reflection of a collective yearning to break with normative bonds of social control. Let’s start owning and reclaiming our emotions and reactions the way we want, the way we need to. So that we can become our authentic selves again.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;/rant&gt;\n</code></pre>\n\n</div>\n\n\n\n<p>I’m looking forward to meeting these selves.❤️</p>\n\n<h2>\n  <a href=\"#well-that-got-deep-fast\">\n  </a>\n  Well, that got deep fast!🤯\n</h2>\n\n<p>Yeah, let me know if you need a party crasher!🤡</p>\n\n"
        ],
        "category": [
            "interview",
            "womenintech",
            "career",
            "motivation"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Issue #457"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/ZlVXVGhaHHQ/"
        ],
        "pubDate": [
            "Tue, 27 Apr 2021 21:42:40 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-457/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to use new CSS pseudo-class selectors today, how to build an effective design system, how to create split text animations, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/04/guide-supported-modern-css-pseudo-class-selectors/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">A Guide To Newly Supported, Modern CSS Pseudo-Class Selectors</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://www.smashingmagazine.com/2021/04/guide-supported-modern-css-pseudo-class-selectors/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/guide-supported-modern-css-pseudo-class-selectors.jpg\" alt=\"A Guide To Newly Supported, Modern CSS Pseudo-Class Selectors\" /></a>\n\t\t\t\t\t\t<p>Stephanie Eckles created a guide that covers new CSS pseudo-class selectors that currently have the best support, along with examples to demonstrate how you can start using them today.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/04/guide-supported-modern-css-pseudo-class-selectors/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://thegymnasium.com/courses/course-v1:GYM+019+0/about?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Design Systems for Developers</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://thegymnasium.com/courses/course-v1:GYM+019+0/about?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/design-systems-for-developers.png\" alt=\"Design Systems for Developers\" /></a>\n\t\t\t\t\t\t<p>Ethan Marcotte made a course that will help you learn how to use your development skills to build and support an effective and thriving design system.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://thegymnasium.com/courses/course-v1:GYM+019+0/about?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"https://css-weekly.com/advertise/\" target=\"_blank\">From Our Sponsor <small style=\"text-decoration:underline;\">(via Paved)</small></a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/free-chat-and-activity-feed-apis\">Free Chat & Activity Feed APIs for Qualifying Teams</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/free-chat-and-activity-feed-apis\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/free-chat-and-activity-feed-apis-for-qualifying-teams.jpg\" alt=\"Free Chat & Activity Feed APIs for Qualifying Teams\" /></a>\n\t\t\t\t\t\t<p>Activate your free Stream Chat trial to start building today. Qualifying small teams and personal dev projects can also apply for the free-forever Stream Maker Account. <img src='https://www.vpdae.com/open/2220.gif?opens=1' width='1' height='1'></p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/free-chat-and-activity-feed-apis\">Start building today!</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/building-split-text-animations/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Building Split Text Animations</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Adam Argyle shares how to solve split text animations and interactions for the web that are minimal, accessible, and work across browsers.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/building-split-text-animations/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Understanding Easing Functions For CSS Animations And Transitions</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Adrian Bece takes a deep dive into easing functions and explains how you can use them to create natural and stunning animations.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/intrinsic-typography-is-the-future-of-styling-text-on-the-web/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Intrinsic Typography is the Future of Styling Text on the Web</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Scott Kellum explains how intrinsic typography enables designs to adapt the text to respond to the area in which it is placed.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/intrinsic-typography-is-the-future-of-styling-text-on-the-web/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://jessbpeck.com/posts/completecls/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">The Almost-Complete Guide to Cumulative Layout Shift</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Jess B Peck gives a comprehensive view of Cumulative Layout Shift: what it is, what it measures, how it measures, how you can see it, and how you can fix it.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://jessbpeck.com/posts/completecls/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://adrianroselli.com/2021/04/sortable-table-columns.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Sortable Table Columns</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Adrian Roselli explains how to create an accessible and usable sortable table.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://adrianroselli.com/2021/04/sortable-table-columns.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/polypane\">Polypane — Build Responsive & Accessible Websites 5x Faster</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/polypane\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/build-responsive-and-accessible-websites-5x-faster.jpg\" alt=\"Polypane — Build Responsive & Accessible Websites 5x Faster\" /></a>\n\t\t\t\t\t\t<p>Polypane is a standalone browser to guide your web development workflow every step of the way with built-in tools for responsive design, accessibility, meta information, and so much more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/polypane\">Try Polypane for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://github.com/matuzo/DevToolsSnippets?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">DevToolsSnippets</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>A collection of front-end debugging script snippets to be used in the Sources panel in Chrome DevTools.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://github.com/matuzo/DevToolsSnippets?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://themes.vscode.one/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Theme Studio for VS Code</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>The Theme Studio for VS Code lets you easily design and deploy your own VS Code themes from scratch.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://themes.vscode.one/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/ricardoolivaalonso/full/LYxMWQN?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">3D Kitchen - Pure CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/ricardoolivaalonso/full/LYxMWQN?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/3d-kitchen-pure-css.jpg\" alt=\"3D Kitchen - Pure CSS\" /></a>\n\t\t\t\t\t\t<p>Ricardo Oliva Alonso created a stunning, interactive 3d model of a kitchen using CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/ricardoolivaalonso/full/LYxMWQN?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/ZlVXVGhaHHQ\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-457/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "How to Create a Firefox Add-on"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/create-firefox-add-on/?utm_source=rss\"\n              title=\"How to Create a Firefox Add-on\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622428286firefox-add-on.png\"\n        alt=\"How to Create a Firefox Add-on\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622428286firefox-add-on-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622428286firefox-add-on.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this tutorial, we’ll go over how to create a Firefox add-on that allows the user to create alarms at specified times with custom text. We’ll cover how to create a basic add-on, adding a popup and an options page, adding permissions, storing information, sending notifications, and creating a background script for sending the notifications.</strong></p>\n<p>This tutorial doesn’t require any prior experience with creating Firefox add-ons or any browser extensions. You’ll only need to know some JavaScript basics. You can find the code to this tutorial in <a href=\"https://github.com/sitepoint-editors/firefox-alarms-addon\">this GitHub Repository</a> and you can also find the created add-on published <a href=\"https://addons.mozilla.org/en-US/firefox/addon/personalized-alarms/\">here</a>.</p>\n<h2 id=\"settingupourfirefoxaddon\">Setting Up Our Firefox Add-on</h2>\n<p>The first step to create a Firefox add-on is to create the <code>manifest.json</code> file. This file is the only file required for a Firefox add-on. The basic format of a <code>manifest.json</code> file should include the following keys:</p>\n<ul>\n<li><code>name</code>: the name of the add-on in slug format — such as <code>my-extension</code>.</li>\n<li><code>version</code>: the current version of the add-on. When updating anything in the extension, you&#8217;ll need to update this version, so it’s recommended to start low.</li>\n<li><code>manifest_version</code>: at the time of writing, Firefox only supports Manifest V2, so the value for this should be <code>2</code>. However, if future support for V3 is added, the value can be <code>3</code> as well.</li>\n</ul>\n<p>These&#8217;re the mandatory fields for any add-on. The following two are optional but recommended:</p>\n<ul>\n<li><code>description</code>: a short description for your add-on that explains its purpose.</li>\n<li><code>icons</code>: a list of icons of different sizes. These icons will be used in the settings, toolbar of the browser, and other places as well. Recommended sizes to add are <code>16px</code>, <code>32px</code>, <code>48px</code>, and <code>128px</code>.</li>\n</ul>\n<p>For our add-on, let&#8217;s start by creating a folder named <code>firefox-alarms-addon</code>. Then add a <code>manifest.json</code> with the following content:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"name\": \"personalized-alarms\",\r\n  \"version\": \"0.0.1\",\r\n  \"description\": \"Create personalized alarms\",\r\n  \"manifest_version\": 2,\r\n  \"icons\": {\r\n    \"16\": \"assets/images/icon16.png\",\r\n    \"32\": \"assets/images/icon32.png\",\r\n    \"48\": \"assets/images/icon48.png\",\r\n    \"128\": \"assets/images/icon128.png\"\r\n  }\r\n}\r\n</code></pre>\n<p>As you can see, the <code>icons</code> key is an object with keys of the file size and the path to it. The path is relative to the root of the add-on, which is where <code>manifest.json</code> resides. For this tutorial, I’m using an icon downloaded from <a href=\"https://iconscout.com/icon/alarm-clock-time-watch-ringing-ring\">iconscout</a> by <a href=\"https://iconscout.com/contributors/twitter-inc\">Twitter Emoji</a> where I can download the different sizes needed as well.</p>\n<p>If you&#8217;re following along, grab these files from <a href=\"https://github.com/sitepoint-editors/firefox-alarms-addon/tree/master/assets/images\">our repo</a> and place them in the appropriate directory (<code>assets/images/</code>).</p>\n<p>That’s all that’s needed to create a Firefox add-on!</p>\n<h3 id=\"loadingtheaddoninfirefox\">Loading the Add-on in Firefox</h3>\n<p>To test our Firefox add-on and be able to debug it later on before uploading it to Mozilla’s Developer Hub, open Firefox, then choose Add-ons and Themes from the right menu, or using the shortcut <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>A</kbd>. Then, Click on the “Settings” icon next to <strong>Manage Your Extensions</strong> and choose <strong>Debug Add-ons</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350121s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621238839975_Screenshotfrom2021-05-1710-42-46.png\" alt=\"Manage Your Extension\" /></p>\n<p>A new page&#8217;ll open for <strong>Temporary Extensions</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350187s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621239082746_Screenshotfrom2021-05-1710-42-55.png\" alt=\"Temporary Extensions\" /></p>\n<p>Click on <strong>Load Temporary Add-on</strong> button and choose the <code>manifest.json</code> file you just created. If everything was done correctly, you’ll see the newly created add-on with some information about it and the icon we specified in the <code>manifest.json</code>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350248s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621239120552_Screenshotfrom2021-05-1710-44-41.jpg\" alt=\"Personalized Alarms add-on\" /></p>\n<h2 id=\"addingapopup\">Adding a Popup</h2>\n<p>Firefox add-ons can be made accessible via different methods, and one of them is by adding a popup page. When adding a popup page, the icon for your extension will show up in the toolbar and once the user clicks on it, the popup page you specify will show up.</p>\n<p>We&#8217;ll use the popup page to show the user the list of upcoming alarms and a link to add a new alarm that takes the user to the options page (which we&#8217;ll talk about in the next section).</p>\n<p>Create a <code>popup.html</code> file in the project root with the following content:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;Personalized Alarms&lt;/title&gt;\r\n    &lt;link href=\"assets/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\r\n  &lt;/head&gt;\r\n  &lt;body class=\"p-3\"&gt;\r\n    &lt;h1&gt;Upcoming Alarms&lt;/h1&gt;\r\n    &lt;ul class=\"list-group\" id=\"alarmsList\"&gt;\r\n    &lt;/ul&gt;\r\n    &lt;div class=\"mt-3\"&gt;\r\n      &lt;a href=\"#\" class=\"link-primary\" id=\"optionsLink\"&gt;Add an Alarm&lt;/a&gt;\r\n    &lt;/div&gt;\r\n    &lt;script src=\"assets/js/jquery.min.js\"&gt;&lt;/script&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>As you can see, it’s just an HTML document. We’ve also added <code>bootstrap.min.css</code> to <code>assets/css</code> and linked it here, and <code>jquery.min.js</code> under <code>assets/js/jquery.min.js</code> and linked it as well. These two libraries are just to make things easier, but you don’t have to actually use them. You can grab them from our repo <a href=\"https://github.com/sitepoint-editors/firefox-alarms-addon/tree/master/assets/css\">here</a> and <a href=\"https://github.com/sitepoint-editors/firefox-alarms-addon/tree/master/assets/js\">here</a>.</p>\n<p>In the content of the page, we&#8217;ll show the list of alarms that are upcoming and a link to the options page.</p>\n<p>The next step to make a popup work is to add the following in <code>manifest.json</code>:</p>\n<pre><code class=\"javascript language-javascript\">\"browser_action\": {\r\n  \"default_popup\": \"popup.html\",\r\n  \"browser_style\": true\r\n}\r\n</code></pre>\n<p><code>browser_action</code> is an object that has a <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/browser_action\">number of options</a>, but the only mandatory one is <code>default_popup</code>, which is the relative path to the popup from the add-on root directory. <code>browser_style</code> isn&#8217;t mandatory, but it’s recommended that it be set to <code>true</code>. This means that Firefox will inject the browser’s default styles to make sure the add-on’s popup styling is similar to the rest of the browser.</p>\n<p>That’s all that&#8217;s required to add a popup. Go to the Temporary Add-ons page that we went to before and click on the <strong>Reload</strong> button for the add-on. This will make Firefox check <code>manifest.json</code> for any changes and apply them.</p>\n<p>Once you do, you&#8217;ll be able to see an icon of your extension in the toolbar menu.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350324s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621243747105_Screenshotfrom2021-05-1712-27-46.png\" alt=\"Add-on in toolbar\" /></p>\n<p>If you click on it, you can see the popup page we just created.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350434s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621243769825_Screenshotfrom2021-05-1712-27-50.png\" alt=\"Add-on Popup\" /></p>\n<p>Two things are still left in our popup to make it fully functional: using storage to get the upcoming alarms, and making the “Add an Alarm” link take the user to the options page.</p>\n<h2 id=\"usingstorage\">Using Storage</h2>\n<p>Storage in browser extensions allows us to store data relevant to the extension or the user, either locally on the machine, or in sync based on their account. Local storage stores information locally in the browser, which means that if the user is logged in to Firefox with the same email from another machine, this stored information will not be present there. <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/sync\">Sync storage</a> stores information for the current user logged, which allows this information to be available wherever the user is logged in.</p>\n<p>Sync storage should be used for certain settings the user wants to have available everywhere, whereas local storage should be used for information or options that are relevant for the current browser installation only.</p>\n<p>In our example, we&#8217;ll make alarms available everywhere the user is logged in, so we&#8217;ll store them in sync storage. But let’s say we want to add a “temporary disable” option that mutes the alarms for a while. In that case it would probably be more suitable to use local storage.</p>\n<p>Storage can be accessed easily through the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage\">Storage API</a> through <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/get\">get</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/set\">set</a> methods, but first, we need to request permission to use <code>storage</code> in our add-on. This can be done inside <code>manifest.json</code>:</p>\n<pre><code class=\"javascript language-javascript\">\"permissions\": [\r\n  \"storage\"\r\n],\r\n</code></pre>\n<p>When the user installs your add-on, they&#8217;ll get to see what permissions you require and need them to accept to install your add-on.</p>\n<p>There’s one other thing we need to add in order to be able to test the add-on locally: an explicit add-on ID <a href=\"https://extensionworkshop.com/documentation/develop/extensions-and-the-add-on-id/#when-do-you-need-an-add-on-id\">to be able to use the storage</a>. To do so, add this in the <code>manifest.json</code> as well:</p>\n<pre><code class=\"javascript language-javascript\">\"browser_specific_settings\": {\r\n  \"gecko\": {\r\n    \"id\": \"addon@example.com\",\r\n    \"strict_min_version\": \"42.0\"\r\n  }\r\n}\r\n</code></pre>\n<p>This is just to be able to test it locally. Once we publish it, we’ll remove this from the manifest.</p>\n<p>The next thing we&#8217;ll do is create a new <code>assets/js/popup.js</code> file, which will get the alarms from storage and display them.</p>\n<p>To get items from the storage, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/get\">browser.storage.sync.get</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/get\">browser.storage.local.get</a>. This depends on whether you&#8217;re storing the information in sync storage or local storage. In our case, we&#8217;re storing alarms in sync storage, so we&#8217;ll use <code>browser.storage.sync.get</code>. It should be noted that all methods under <code>browser.storage.sync.*</code> and <code>browser.storage.local.*</code> have the same signature and accept/return the same types.</p>\n<p><code>browser.storage.sync.get</code> takes one parameter: an array of strings that are the keys of the data we&#8217;re retrieving. These keys are defined when we set the storage (which we&#8217;ll talk about in the next section). This function returns a promise that resolves to a <code>results</code> object containing the keys we specified in the first parameters and their values, if they exist.</p>\n<p><em>Note: if you&#8217;re making the add-on compatible with Chrome, be sure to check out the <a href=\"#makingaddonscompatiblewithchrome\">“Making Add-ons Compatible with Chrome”</a> section.</em></p>\n<p>Create <code>assets/js/popup.js</code> with the following content:</p>\n<pre><code class=\"javascript language-javascript\">$(document).ready(() =&gt; {\r\n  const listElement = $('#alarmsList');\r\n\r\n  browser.storage.sync.get(['alarms'])\r\n    .then((result) =&gt; {\r\n      if (result.alarms &amp;&amp; result.alarms.length) {\r\n        //loop over the alarms and display them\r\n        result.alarms.forEach((alarm) =&gt; {\r\n          appendItem(alarm.content, alarm.time);\r\n        });\r\n      } else {\r\n        //show no items available\r\n        appendItem('No alarms are available');\r\n      }\r\n    });\r\n\r\n  function appendItem(content, badgeContent = null) {\r\n    listElement.append(`\r\n      &lt;li class=\"list-group-item d-flex justify-content-between align-items-center\"&gt;\r\n        ${content}\r\n        ${badgeContent ? `&lt;span class=\"badge bg-primary rounded-pill\"&gt;${badgeContent}&lt;/span&gt;` : ''}\r\n      &lt;/li&gt;\r\n    `);\r\n  }\r\n});\r\n</code></pre>\n<p>You&#8217;ll also need to include this file in <code>popup.html</code>:</p>\n<pre><code class=\"markup language-markup\">  ...\r\n  &lt;script src=\"assets/js/popup.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>When the document is ready, we&#8217;re using <code>browser.storage.sync.get</code> to get the alarms created by the user. We&#8217;re then checking if there are any alarms. If there are, we&#8217;re looping over them and displaying them using the <code>appendItem</code> helper function, which just appends an HTML list element <code>li</code> to <code>#alarmsList</code>. If there are no alarms available, we&#8217;re just showing “no items available”.</p>\n<p>If we reload the add-on now, you’ll notice a new installation of the add-on has been added. This is because we explicitly specified the ID in the <code>manifest.json</code>. You can remove the old one to avoid conflict.</p>\n<p>You’ll notice that nothing has changed in our popup, since we don’t have any alarms added yet. We’ll do this in the next section.</p>\n<h2 id=\"addinganoptionspage\">Adding an Options Page</h2>\n<p>To allow your users to customize or edit options or settings in the add-on, you create an HTML page that holds the options and the logic behind setting or changing them. Then you link to it in the <code>manifest.json</code> file.</p>\n<p>In our add-on, we&#8217;ll use the Options page to allow the user to create alarms. Let’s first create the file <code>options.html</code>. You can create it anywhere in the add-on project directory. We&#8217;ll create it in the root of the project with the following content:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"UTF-8\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n  &lt;title&gt;Options&lt;/title&gt;\r\n  &lt;link href=\"assets/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\r\n&lt;/head&gt;\r\n&lt;body class=\"p-3\"&gt;\r\n  &lt;h1&gt;Add Alarm&lt;/h1&gt;\r\n  &lt;form&gt;\r\n    &lt;div class=\"form-group\"&gt;\r\n      &lt;label for=\"name\"&gt;Alarm Name&lt;/label&gt;\r\n      &lt;input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" placeholder=\"Wake up\" /&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=\"form-group\"&gt;\r\n      &lt;label for=\"time\"&gt;Time&lt;/label&gt;\r\n      &lt;input type=\"time\" class=\"form-control\" name=\"time\" id=\"time\" /&gt;\r\n    &lt;/div&gt;\r\n    &lt;button type=\"submit\" class=\"btn btn-primary mt-3\"&gt;\r\n      Add a New Alarm\r\n    &lt;/button&gt;\r\n  &lt;/form&gt;\r\n  &lt;script src=\"assets/js/jquery.min.js\"&gt;&lt;/script&gt;\r\n  &lt;script src=\"assets/js/options.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>Here, we’re just displaying a form with two input fields: “Alarm Name”, which will be the text displayed in the alarm when the notification is sent, and “Time”, which is the time to set the alarm at.</p>\n<p>We&#8217;ll need to create <code>assets/js/options.js</code>, which will listen for the <code>submit</code> event for the <code>form</code> and set <code>alarms</code> in the sync storage, adding a new alarm to the array.</p>\n<p>Similarly to our use of the <code>get</code> method, to set the storage we can use <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/set\">browser.storage.sync.set</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/set\">browser.storage.local.set</a>, depending on whether we’re storing the data just locally or in sync between all logged-in instances. Since we&#8217;re storing our alarms in <code>sync</code>, we&#8217;ll use <code>browser.storage.sync.set</code>.</p>\n<p>The <code>set</code> method takes one parameter that&#8217;s an object of keys and values. The key is what we use to retrieve the value later on, just like we did earlier with <code>get</code>.</p>\n<p>Create <code>assets/js/options.js</code> with the following content:</p>\n<pre><code class=\"javascript language-javascript\">$(document).ready(() =&gt; {\r\n  const nameElm = $('#name');\r\n  const timeElm = $('#time');\r\n  const formElm = $('form');\r\n  formElm.on('submit', () =&gt; {\r\n    $('.alert').remove(); //remove previous success alerts, if any\r\n    //get existing alarms\r\n    browser.storage.sync.get(['alarms'])\r\n      .then((result) =&gt; {\r\n        let alarms = result.alarms;\r\n        const alarmName = nameElm.val().trim() + '_' + (Math.random() * 100);\r\n        if (!alarms) {\r\n          alarms = [];\r\n        }\r\n        alarms.push({\r\n          content: nameElm.val().trim(),\r\n          time: timeElm.val(),\r\n          alarmName\r\n        });\r\n\r\n        //set alarms in the storage\r\n        browser.storage.sync.set({alarms})\r\n          .then(() =&gt; {\r\n            //TODO schedule notification\r\n            formElm.prepend('&lt;div class=\"alert alert-success\"&gt;Alarm added successfully&lt;/div&gt;');\r\n            nameElm.val('');\r\n            timeElm.val('');\r\n          });\r\n      });\r\n    return false; //disable default form submit action\r\n  });\r\n});\r\n</code></pre>\n<p>On form submission, we&#8217;re first retrieving stored alarms, if there are any. Then, we&#8217;re pushing the new alarm we&#8217;re creating through the form to the <code>alarms</code> array. Notice how we&#8217;re also creating an <code>alarmName</code> variable. We&#8217;ll be using this variable to create a unique alarm, then cancel it when the user deletes it. Finally, we&#8217;re using <code>browser.storage.sync.set</code> to set the new <code>alarms</code> array.</p>\n<p>You might also notice that we added a <code>TODO</code> comment, which is where we&#8217;ll schedule notifications in the next section.</p>\n<p>Our options page is now ready. To make it available, we first need to add the following to <code>manifest.json</code>:</p>\n<pre><code class=\"javascript language-javascript\">\"options_ui\": {\r\n  \"page\": \"options.html\",\r\n  \"browser_style\": false\r\n}\r\n</code></pre>\n<p>This tells Firefox where to find our Options page. We&#8217;re also setting <code>browser_style</code> to <code>false</code> because we don’t want Firefox’s styling to override the Bootstrap styling.</p>\n<p>Second, we&#8217;ll now make the link in the popup take the user to the options page. To do this, we use the method <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/openOptionsPage\">browser.runtime.openOptionsPage()</a> in a new event listener attached to <code>#optionsLink</code>. We’ll add the following to <code>assets/js/popup.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">$(document).ready(() =&gt; {\r\n  ...\r\n\r\n  // New code here\r\n  $('#optionsLink').on('click', () =&gt; {\r\n    browser.runtime.openOptionsPage();\r\n  });\r\n\r\n  function appendItem(content, badgeContent = null) { ... }\r\n});\r\n</code></pre>\n<p>Now, when the user clicks the “Add an Alarm” link, it will take them to the Options page.</p>\n<p>Go to the Temporary Add-ons page, and click the reload button. Now, our options page will be registered.</p>\n<p>Let’s test it out. Open the popup and click on “Add an Alarm”. It should take you to the <strong>Preferences</strong> tab in the add-on’s page, and the content will be the content we added in the <code>options.html</code> page.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350582s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621248909682_Screenshotfrom2021-05-1713-54-36.png\" alt=\"Options Page\" /></p>\n<p>Now, try to add a test alarm with any name and time and click on “Add an Alarm”. You should be able to see it in the popup after that.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621350635s_ED818300CF5E841672F2C3FF9866554D5DA217143A51AE9342F11F975CA32D8E_1621249061188_Screenshotfrom2021-05-1713-57-17.png\" alt=\"Add-on Popup\" /></p>\n<p>We still need to make one change to <code>assets/js/popups.js</code>, which is to show alarms whose time is later than the current time. Change the call to <code>browser.storage.sync.get</code> to the following:</p>\n<pre><code class=\"javascript language-javascript\">browser.storage.sync.get(['alarms'])\r\n  .then((result) =&gt; {\r\n    if (result.hasOwnProperty('alarms') &amp;&amp; result.alarms) {\r\n      //get current time\r\n      const minutes = (new Date).getMinutes().toString().padStart(2, '0');\r\n      const hours = (new Date).getHours().toString().padStart(2, '0');\r\n      const now = new Date('1970-01-01T' + hours + ':' + minutes + 'Z').getTime();\r\n\r\n      //loop over the alarms and display them\r\n      result.alarms.forEach((alarm) =&gt; {\r\n        const alarmTime = new Date('1970-01-01T' + alarm.time + 'Z').getTime();\r\n        if (alarmTime &gt; now) {\r\n          appendItem(alarm.content, alarm.time);\r\n        }\r\n      });\r\n    } else {\r\n      //show no items available\r\n      appendItem('No alarms are available');\r\n    }\r\n  });\r\n</code></pre>\n<p>This checks for each alarm if its time is greater than the current time and then displays it. The reason we’re formatting the time as <code>'1970-01-01T' + alarm.time + 'Z'</code> is because we’re creating the alarms independent of the date. This is just to make the tutorial simpler. We’re also padding <code>hours</code> and <code>minutes</code> with zeros when they’re one digit when calculating the current time, since the required format for <code>new Date</code> should have two digits for both numbers.</p>\n<p>If you check now, you’ll notice that the previous alarm we added is shown or not depending on when its time is. You can also test adding a new alarm at another time to see whether it appears in the popup or not.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/create-firefox-add-on/?utm_source=rss\">How to Create a Firefox Add-on</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/create-firefox-add-on/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=190517",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Shahed Nasser"
        ],
        "pubDate": [
            "Mon, 31 May 2021 17:00:16 GMT"
        ],
        "metaDesc": [
            "Need to create a Firefox add-on? It's easy! Learn how to create your first add-on, test it, share it, and even adapt it for Chrome."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "What does `font: 110%/1.4 system-ui` mean?"
        ],
        "link": [
            "https://css-tricks.com/what-does-font-110-1-4-system-ui-mean/"
        ],
        "comments": [
            "https://css-tricks.com/what-does-font-110-1-4-system-ui-mean/#respond"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Tue, 29 Jun 2021 22:43:50 +0000"
        ],
        "category": [
            "Article"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343470",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I use this line, or one like it, in a lot of quick demos. Not that it&#8217;s not a production-worthy line of code—I just tend to be a bit more explicit on bigger projects. </p>\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  font: 110%/1.4 system-ui;\n}</code></pre>\n<p>&#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/what-does-font-110-1-4-system-ui-mean/\">What does `font: 110%/1.4 system-ui` mean?</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I use this line, or one like it, in a lot of quick demos. Not that it&#8217;s not a production-worthy line of code—I just tend to be a bit more explicit on bigger projects. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  font: 110%/1.4 system-ui;\n}</code></pre>\n\n\n\n<p>Someone wrote in confused by it, and I could see how a line like that is a bit bewildering at first.</p>\n\n\n\n<span id=\"more-343470\"></span>\n\n\n\n<p>The first thing to know is that it is called <strong>shorthand</strong>. The <code>font</code> property in CSS gives you the opportunity to set a bunch of <code>font-*</code> properties all at once. In this case, we&#8217;re setting:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  font-family: system-ui;\n  font-size: 110%;\n  line-height: 1.4;\n}</code></pre>\n\n\n\n<p>There are a few more little specific things to know. For example, the order matters.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* invalid */\nhtml {\n  font: system-ui 100%/1.4;\n}</code></pre>\n\n\n\n<p>You also can&#8217;t set the <code>line-height</code> without also setting the <code>font-size</code>. If you&#8217;re going to set <code>line-height</code>, you have to set both. Be extra careful there because something like <code>20px</code> is both a valid l<code>ine-height</code> and <code>font-size</code>, and if you only set one, it&#8217;ll be the <code>font-size</code>. If you go for a unitless number, which is a <a href=\"https://css-tricks.com/unitless-not-unitless/\">great idea</a> for <code>line-height</code>, and try to set it alone, it&#8217;ll just fail.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">/* invalid */\nhtml {\n  font: 1.5 system-ui;\n}</code></pre>\n\n\n\n<p>Of course, we&#8217;ve got all this detailed in <a href=\"https://css-tricks.com/almanac/properties/f/font/\">the Almanac entry for <code>font</code></a>. But I&#8217;ll also give a shout to Mateusz Hadryś who has a detailed article titled <a href=\"https://medium.com/swlh/full-text-styling-with-a-single-line-of-css-838e8c666f4d\">&#8220;Full Text Styling With a Single Line of CSS&#8221;</a> with some detailed figures like this that are helpful in understanding everything:</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1360\" height=\"572\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/1_DD-QoVZx93gIM2BQUfBCqw.png?resize=1360%2C572&#038;ssl=1\" alt=\"Showing the font property declaration. Style, variant and weight are in yellow with a label above that says order doesn't matter and a label beneath saying these have to be first. Next is size with a forward slash then line-height in red. Above them is a label that says these have to be next to each other. Next is family in light blue with a label that says it has to be last. There is an additional white label that connects size and family that says they are required.\" class=\"wp-image-343472\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/1_DD-QoVZx93gIM2BQUfBCqw.png?w=1360&amp;ssl=1 1360w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/1_DD-QoVZx93gIM2BQUfBCqw.png?resize=300%2C126&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/1_DD-QoVZx93gIM2BQUfBCqw.png?resize=1024%2C431&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/1_DD-QoVZx93gIM2BQUfBCqw.png?resize=768%2C323&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/1_DD-QoVZx93gIM2BQUfBCqw.png?resize=1000%2C421&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>Lastly, if <code>system-ui</code> was part of the confusion there, that&#8217;s one of those <a href=\"https://css-tricks.com/system-things/\">System Things</a>.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/what-does-font-110-1-4-system-ui-mean/\">What does `font: 110%/1.4 system-ui` mean?</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/what-does-font-110-1-4-system-ui-mean/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "343470",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Lightweight Autocomplete Controls with the HTML5 Datalist"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/html5-datalist-autocomplete/?utm_source=rss\"\n              title=\"Lightweight Autocomplete Controls with the HTML5 Datalist\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612660068html5-datalist.png\"\n        alt=\"Lightweight Autocomplete Controls with the HTML5 Datalist\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612660068html5-datalist-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612660068html5-datalist.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this tutorial, we’ll take a deep-dive into the little-used HTML5 <code>&lt;datalist&gt;</code> element. It can implement a lightweight, accessible, cross-browser autocomplete form control that doesn&#8217;t require JavaScript.</strong></p>\n<h2 id=\"whatswrongwithselect\">What&#8217;s Wrong with <code>&lt;select&gt;</code>?</h2>\n<p>HTML5 <code>&lt;select&gt;</code> controls are ideal when you want the user to choose from a small range of options. They&#8217;re less practical when:</p>\n<ul>\n<li>there are lots of options, such as countries or job titles</li>\n<li>the user wants to enter their own option which is not on the list</li>\n</ul>\n<p>The obvious solution is an autocomplete control. This allows the user to enter a few characters, which limits the options available for quicker selection.</p>\n<p><code>&lt;select&gt;</code> will jump to the right location as you start typing, but that&#8217;s not always obvious. It won&#8217;t work on all devices (such as touchscreens), and it resets within a second or two.</p>\n<p>Developers often turn to one of the <a href=\"https://vuejsexamples.com/tag/autocomplete/\">many</a> <a href=\"https://material-ui.com/components/autocomplete/\">JavaScript-powered</a> <a href=\"https://www.npmjs.com/package/simple-svelte-autocomplete\">solutions</a>, but a custom autocomplete control is not always necessary. The HTML5 <code>&lt;datalist&gt;</code> element is lightweight, accessible, and has no JavaScript dependencies. You may have heard it&#8217;s buggy or lacks support. That&#8217;s not true in 2021, but there are browser inconsistencies and caveats.</p>\n<h2 id=\"datalistquickstart\"><code>&lt;datalist&gt;</code> Quick Start</h2>\n<p>Picking your country from a list containing more than 200 options is an ideal candidate for an autocomplete control. Define a <code>&lt;datalist&gt;</code> with child <code>&lt;option&gt;</code> elements for <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">every country</a> directly in an HTML page:</p>\n<pre><code class=\"markup language-markup\">&lt;datalist id=\"countrydata\"&gt;\r\n  &lt;option&gt;Afghanistan&lt;/option&gt;\r\n  &lt;option&gt;Åland Islands&lt;/option&gt;\r\n  &lt;option&gt;Albania&lt;/option&gt;\r\n  &lt;option&gt;Algeria&lt;/option&gt;\r\n  &lt;option&gt;American Samoa&lt;/option&gt;\r\n  &lt;option&gt;Andorra&lt;/option&gt;\r\n  &lt;option&gt;Angola&lt;/option&gt;\r\n  &lt;option&gt;Anguilla&lt;/option&gt;\r\n  &lt;option&gt;Antarctica&lt;/option&gt;\r\n  ...etc...\r\n&lt;/datalist&gt;\r\n</code></pre>\n<p>The datalist&#8217;s <code>id</code> can then be referenced by a <code>list</code> attribute in any <code>&lt;input&gt;</code> field:</p>\n<pre><code class=\"markup language-markup\">&lt;label for=\"country\"&gt;country&lt;/label&gt;\r\n\r\n&lt;input type=\"text\"\r\n  list=\"countrydata\"\r\n  id=\"country\" name=\"country\"\r\n  size=\"50\"\r\n  autocomplete=\"off\" /&gt;\r\n</code></pre>\n<p>Confusingly, it&#8217;s best to set <code>autocomplete=\"off\"</code>. This ensures the user is shown values in the <code>&lt;datalist&gt;</code> but not values they previously entered in the browser.</p>\n<p>The result:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611572201datalist-country.gif\" alt=\"datalist auto-complete\" /></p>\n<p>This is the default rendering in Microsoft Edge. Other applications implement similar functionality, but the look differs across platforms and browsers.</p>\n<h2 id=\"optionoptions\"><code>&lt;option&gt;</code> Options</h2>\n<p>Using the label as a text child of an <code>&lt;option&gt;</code> is common:</p>\n<pre><code class=\"markup language-markup\">&lt;datalist id=\"mylist\"&gt;\r\n  &lt;option&gt;label one&lt;/option&gt;\r\n  &lt;option&gt;label two&lt;/option&gt;\r\n  &lt;option&gt;label three&lt;/option&gt;\r\n&lt;/datalist&gt;\r\n</code></pre>\n<p>Using a <code>value</code> attribute produces identical results:</p>\n<pre><code class=\"markup language-markup\">&lt;datalist id=\"mylist\"&gt;\r\n  &lt;option value=\"label one\" /&gt;\r\n  &lt;option value=\"label two\" /&gt;\r\n  &lt;option value=\"label three\" /&gt;\r\n&lt;/datalist&gt;\r\n</code></pre>\n<p><em>Note: the closing <code>/&gt;</code> slash is optional in HTML5, although it could help prevent coding errors.</em></p>\n<p>You can also set a value according to a chosen label using either of the following formats.</p>\n<p><strong>Option 1:</strong></p>\n<pre><code class=\"markup language-markup\">&lt;datalist id=\"mylist\"&gt;\r\n  &lt;option value=\"1\"&gt;label one&lt;/option&gt;\r\n  &lt;option value=\"2\"&gt;label two&lt;/option&gt;\r\n  &lt;option value=\"3\"&gt;label three&lt;/option&gt;\r\n&lt;/datalist&gt;\r\n</code></pre>\n<p><strong>Option 2:</strong></p>\n<pre><code class=\"markup language-markup\">&lt;datalist id=\"mylist\"&gt;\r\n  &lt;option value=\"1\" label=\"label one\" /&gt;\r\n  &lt;option value=\"2\" label=\"label two\" /&gt;\r\n  &lt;option value=\"3\" label=\"label three\" /&gt;\r\n&lt;/datalist&gt;\r\n</code></pre>\n<p>In both cases, the input field is set to <code>1</code>, <code>2</code> or <code>3</code> when a valid option is chosen, but the UI varies across browsers:</p>\n<ul>\n<li>Chrome shows a list with both the value and the label. Only the value remains once an option is chosen.</li>\n<li>Firefox shows a list with the label only. It switches to the value once an option is chosen.</li>\n<li>Edge shows the value only.</li>\n</ul>\n<p>The following CodePen example shows all variations:</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"jOVqGaJ\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"HTML5 &amp;lt;datalist&amp;gt; autocomplete examples\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/jOVqGaJ\"><br />\nHTML5 &lt;datalist&gt; autocomplete examples</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Implementations will evolve but, for now, I&#8217;d advise you do not use a value and label since it&#8217;s likely to confuse users. <em>(<a href=\"#creating-an-ajax-enhanced-datalist\">A workaround is discussed below</a>.)</em></p>\n<h2 id=\"datalistbrowsersupportandfallbacks\"><code>&lt;datalist&gt;</code> Browser Support and Fallbacks</h2>\n<p>The <a href=\"https://caniuse.com/datalist\"><code>&lt;datalist&gt;</code> element is well supported in modern browsers</a> as well as Internet Explorer 10 and 11:</p>\n<p class=\"ciu_embed\" data-feature=\"datalist\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\">\n<picture><source type=\"image/webp\" srcset=\"https://caniuse.bitsofco.de/image/datalist.webp\"/><source type=\"image/png\" srcset=\"https://caniuse.bitsofco.de/image/datalist.png\"/><img src=\"https://caniuse.bitsofco.de/image/datalist.jpg\" alt=\"Data on support for the datalist feature across the major browsers from caniuse.com\"/>\n</picture></p>\n<p><script src=\"https://cdn.jsdelivr.net/gh/ireade/caniuse-embed/public/caniuse-embed.min.js\"></script></p>\n<p>There are several implementation notes, but they won&#8217;t affect most usage. The worst that could happen is a field reverts to a standard text input.</p>\n<p>If you absolutely must support IE9 and below, there’s a fallback pattern which uses a standard <code>&lt;select&gt;</code> in conjunction with a text input when the <code>&lt;datalist&gt;</code> fails. Adapting the country example:</p>\n<pre><code class=\"markup language-markup\">&lt;label for=\"country\"&gt;country&lt;/label&gt;\r\n\r\n&lt;datalist id=\"countrydata\"&gt;\r\n\r\n  &lt;select name=\"countryselect\"&gt;\r\n    &lt;option&gt;&lt;/option&gt;\r\n    &lt;option&gt;Afghanistan&lt;/option&gt;\r\n    &lt;option&gt;Åland Islands&lt;/option&gt;\r\n    &lt;option&gt;Albania&lt;/option&gt;\r\n    &lt;option&gt;Algeria&lt;/option&gt;\r\n    &lt;option&gt;American Samoa&lt;/option&gt;\r\n    &lt;option&gt;Andorra&lt;/option&gt;\r\n    &lt;option&gt;Angola&lt;/option&gt;\r\n    &lt;option&gt;Anguilla&lt;/option&gt;\r\n    &lt;option&gt;Antarctica&lt;/option&gt;\r\n    ...etc...\r\n  &lt;/select&gt;\r\n\r\n  &lt;label for=\"country\"&gt;or other&lt;/label&gt;\r\n\r\n&lt;/datalist&gt;\r\n\r\n&lt;input type=\"text\"\r\n  id=\"country\" name=\"country\"\r\n  size=\"50\"\r\n  list=\"countrydata\"\r\n  autocomplete=\"off\" /&gt;\r\n</code></pre>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"GRNZMyx\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"HTML5 &amp;lt;datalist&amp;gt; autocomplete fallback\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/GRNZMyx\"><br />\nHTML5 &lt;datalist&gt; autocomplete fallback</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>In modern browsers, the <code>&lt;option&gt;</code> elements become part of the <code>&lt;datalist&gt;</code> and the <em>&#8220;or  other&#8221;</em> label is not shown. It looks identical to the <a href=\"#datalistquickstart\">example above</a>, but a <code>countryselect</code> form value will be set to an empty string.</p>\n<p>In IE9 and below, both the (very long) <code>&lt;select&gt;</code> and text input fields are active:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611574933datalist-fallback.png\" alt=\"IE9 datalist fallback\" /></p>\n<p>Both values could be entered in old IEs. Your application must either:</p>\n<ul>\n<li>decide which is most valid, or</li>\n<li>use a small JavaScript function to reset one when the other is changed</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/html5-datalist-autocomplete/?utm_source=rss\">Lightweight Autocomplete Controls with the HTML5 Datalist</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/html5-datalist-autocomplete/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181014",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "HTML & CSS",
            "HTML & CSS",
            "HTML5"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Sun, 07 Feb 2021 15:00:36 GMT"
        ],
        "metaDesc": [
            "Too many options in your HTML Select list? Try a Datalist! Learn how to work with this lightweight, accessible, cross-browser autocomplete form control."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Extending Flarum: Adding a Web3 Address to a User’s Profile"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/flarum-add-web3-address-to-user-profile/?utm_source=rss\"\n              title=\"Extending Flarum: Adding a Web3 Address to a User’s Profile\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610683566flarum-web3-address.png\"\n        alt=\"Extending Flarum: Adding a Web3 Address to a User's Profile\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610683566flarum-web3-address-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610683566flarum-web3-address.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Flarum is incredibly fast, extensible, free and open-source forum software. In our first Flarum tutorial — “<a style=\"font-weight:bold\" href=\"https://www.sitepoint.com/writing-a-flarum-extension-building-a-custom-field/\">Writing a Flarum Extension: Building a Custom Field</a>” — we covered how to add a new custom field to a user&#8217;s profile in a blazing fast and extremely extensible open-source forum software called <a style=\"font-weight:bold\" href=\"https://flarum.org\">Flarum</a>. The field we added was <code>web3address</code>, the account of a user&#8217;s Web3 identity.</strong></p>\n<p>In this second tutorial, we take things a step further by allowing users to add a Web3 address to their profile.</p>\n<p><em>Note ℹ: The Web3 ecosystem is a new internet of decentralized hosting, self-owned data, and censorship-resistant communication. For a primer on Web3, please see <a href=\"https://www.youtube.com/watch?v=St8x8hewc30\">this 15 minute talk at FOSDEM</a>.</em></p>\n<h2 id=\"cryptographicallyaddingweb3\">Cryptographically Adding Web3</h2>\n<p>At this point, our custom field works, is settable by users, and is editable by administrators of the forum. Now let&#8217;s make sure users can add their address in a cryptographically sound way. </p>\n<p>This means a user will only be able to add an address they have proven to own. You prove ownership of an address by signing a message with that address&#8217; private key. Only the person who has the private key of a public–private keypair is considered to be the owner of that keypair. The public part of a public–private keypair is the base from which a Web3 address is mathematically derived.</p>\n<p>To own some address(es), a user should install the <a href=\"https://github.com/polkadot-js/extension\">Polkadot JS extension</a> and create an account. The UI should be self-explanatory, but there’s a more detailed guide <a href=\"https://wiki.polkadot.network/docs/en/learn-account-generation#polkadotjs-browser-plugin\">here</a> if needed.</p>\n<p>The field we added in the previous tutorial currently lets users manually set any value, but this means users can enter anyone&#8217;s address or even some gibberish. We want them to only add their own, so we&#8217;ll replace it with a button that will:</p>\n<ul>\n<li>ask for permission to access the browser extension containing the account(s)</li>\n<li>load the accounts and offer a dropdown to select one of them</li>\n<li>ask the user to sign a message with that address and verify that signature</li>\n<li>register that account as the user&#8217;s Web3 address</li>\n</ul>\n<p>Let&#8217;s dive in.</p>\n<h3 id=\"button\">Button</h3>\n<p>First we need to change our Web3 input field into a <a href=\"https://api.docs.flarum.org/js/v0.1.0-beta.14/class/src/common/components/dropdown.js~dropdown\">Dropdown</a>. Let&#8217;s create <code>components/Web3Dropdown.js</code>:</p>\n<pre><code class=\"javascript= language-javascript=\">import Component from \"flarum/Component\";\r\nimport Dropdown from \"flarum/components/Dropdown\";\r\n\r\nexport default class Web3Dropdown extends Component {\r\n  view() {\r\n    return (\r\n      &lt;Dropdown\r\n        buttonClassName=\"Button\"\r\n        onclick={this.handleClick.bind(this)}\r\n        label=\"Add Web3 Account\"\r\n      &gt;\r\n      &lt;/Dropdown&gt;\r\n    );\r\n  }\r\n\r\n  handleClick(e) {\r\n    console.log(\"Pick something\");\r\n  }\r\n}\r\n</code></pre>\n<p>We create a new component in the style of <code>Web3Field.js</code> we created earlier, but now we return an instance of the Dropdown component. The Dropdown component is one of several standard JS components in Flarum. You can find a full list <a href=\"https://api.docs.flarum.org/js/v0.1.0-beta.14/identifiers.html#common-components\">here</a>. We also give it the class &#8220;Button&#8221; to match its style with the rest of the forum. On click, we print a message.</p>\n<p>The component is a button with the ability to summon a dropdown from passed-in items, much like the &#8220;Controls&#8221; menu that an admin of the forum can see on a user&#8217;s profile:</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1610681542button.png\" alt=\"the simple button\" width=\"261\" height=\"143\" class=\"alignnone size-full wp-image-180661\" /></p>\n<h3 id=\"dependencies\">Dependencies</h3>\n<p>In our extension&#8217;s JS folder, we&#8217;ll add two dependencies:</p>\n<pre><code class=\"bash= language-bash=\">yarn add @polkadot/util-crypto @polkadot/util @polkadot/extension-dapp\r\n</code></pre>\n<p><em>Note ⚠: don&#8217;t forget to stop the process if you&#8217;re still running <code>yarn dev</code> and don&#8217;t forget to start it again after having installed these dependencies!</em></p>\n<p><code>util-crypto</code> contains some utility functions for cryptographic operations.<code>util</code> contains some basic utilities, like turning strings into bytes etc. (There are <a href=\"https://github.com/polkadot-js/common/tree/master/packages/util-crypto\">docs for both here</a>.) <code>extension-dapp</code> is a helper layer that lets the JS we write interact with the Polkadot JS extension we’ve installed. (Visit the <a href=\"https://github.com/polkadot-js/extension\">docs here</a>.)</p>\n<h3 id=\"askingpermissionandgettingaccounts\">Asking Permission and Getting Accounts</h3>\n<p>Let&#8217;s modify our Dropdown now to ask the user for permission to access their Web3 accounts:</p>\n<pre><code class=\"javascript= language-javascript=\">  import { web3Accounts, web3Enable } from \"@polkadot/extension-dapp\";\r\n\r\n  // ...\r\n\r\n  async handleClick(e) {\r\n    await web3Enable(\"Flarum Web3 Address Extension\");\r\n    const accounts = await web3Accounts();\r\n    console.log(accounts);\r\n  }\r\n</code></pre>\n<p>Notice that we changed the <code>handleClick</code> function to be <code>async</code>! We need this to be able to <code>await</code> promises in the code. Otherwise, we&#8217;d get stuck with nesting <code>then</code> calls.</p>\n<p>First we call <code>web3Enable</code>, which asks us for permission to access the extension. Then we grab all of a user&#8217;s accounts and output them in the console. If you have the Polkadot JS extension installed and some accounts loaded, feel free to try this out now.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1610681578authorize-reject.png\" alt=\"Authorize or reject\" width=\"554\" height=\"625\" class=\"alignnone size-full wp-image-180662\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610681578authorize-reject.png 554w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610681578authorize-reject-266x300.png 266w\" sizes=\"(max-width: 554px) 100vw, 554px\" /></p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1610681615console.png\" alt=\"Output in the console\" width=\"561\" height=\"180\" class=\"alignnone size-full wp-image-180664\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610681615console.png 561w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610681615console-300x96.png 300w\" sizes=\"(max-width: 561px) 100vw, 561px\" /></p>\n<p>But what if someone doesn&#8217;t have the extension installed? We could have an admin-level setting which lets us choose whether to hide the button if the extension isn&#8217;t around or to redirect the user to its URL, but for now, let&#8217;s choose the latter:</p>\n<pre><code class=\"javascript= language-javascript=\">  import { web3Accounts, web3Enable, isWeb3Injected } from \"@polkadot/extension-dapp\";\r\n\r\n  // ...\r\n\r\n  async handleClick(e) {\r\n    await web3Enable(\"Flarum Web3 Address Extension\");\r\n    if (isWeb3Injected) {\r\n      const accounts = await web3Accounts();\r\n      console.log(accounts);\r\n    } else {\r\n      window.location = \"https://github.com/polkadot-js/extension\";\r\n    }\r\n  }\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/flarum-add-web3-address-to-user-profile/?utm_source=rss\">Extending Flarum: Adding a Web3 Address to a User’s Profile</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/flarum-add-web3-address-to-user-profile/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180659",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Bruno Skvorc"
        ],
        "pubDate": [
            "Thu, 14 Jan 2021 14:00:49 GMT"
        ],
        "metaDesc": [
            "Using Flarum? Extend it! In this tutorial, you'll learn how to set up a custom field that allows users to add a Web3 address to their profile."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Guide to Variable Assignment and Mutation in JavaScript"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/variable-assignment-mutation-javascript/?utm_source=rss\"\n              title=\"A Guide to Variable Assignment and Mutation in JavaScript\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032861Fountain.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032861Fountain-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032861Fountain-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032861Fountain-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032861Fountain-1536x808.jpg 1536w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032861Fountain.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Mutations are something you hear about fairly often in the world of JavaScript, but what exactly are they, and are they as evil as they&#8217;re made out to be?</strong></p>\n<p>In this article, we&#8217;re going to cover the concepts of variable assignment and mutation and see why — together — they can be a real pain for developers. We&#8217;ll look at how to manage them to avoid problems, how to use as few as possible, and how to keep your code predictable.</p>\n<p><em>If you&#8217;d like to explore this topic in greater detail, or get up to speed with modern JavaScript, check out my new book <a href=\"https://www.sitepoint.com/premium/books/learn-to-code-with-javascript/\"><strong>Learn to Code with JavaScript</strong></a>.</em></p>\n<p>Let&#8217;s start by going back to the very basics of value types …</p>\n<h2 id=\"datatypes\">Data Types</h2>\n<p>Every value in JavaScript is either a primitive value or an object. There are seven different primitive data types:</p>\n<ul>\n<li>numbers, such as <code>3</code>, <code>0</code>, <code>-4</code>, <code>0.625</code></li>\n<li>strings, such as <code>'Hello'</code>, <code>\"World\"</code>, <code>`Hi`</code>, <code>''</code></li>\n<li>Booleans, <code>true</code> and <code>false</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li>symbols — a unique token that’s guaranteed never to clash with another symbol</li>\n<li><code>BigInt</code> — for dealing with large integer values</li>\n</ul>\n<p>Anything that isn&#8217;t a primitive value is an <strong>object</strong>, including arrays, dates, regular expressions and, of course, object literals. Functions are a special type of object. They are definitely objects, since they have properties and methods, but they&#8217;re also able to be called.</p>\n<h2 id=\"variableassignment\">Variable Assignment</h2>\n<p>Variable assignment is one of the first things you learn in coding. For example, this is how we would assign the number <code>3</code> to the variable <code>bears</code>:</p>\n<pre><code class=\"javascript language-javascript\">const bears = 3;\r\n</code></pre>\n<p>A common metaphor for variables is one of boxes with labels that have values placed inside them. The example above would be portrayed as a box containing the label &#8220;bears&#8221; with the value of 3 placed inside. </p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618935514daz-diagram1.png\" alt=\"variables like a box\" /></p>\n<p>An alternative way of thinking about what happens is as a reference, that maps the label <code>bears</code> to the value of <code>3</code>:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618935524daz-diagram2.png\" alt=\"variables like a reference\" /></p>\n<p>If I assign the number <code>3</code> to another variable, it&#8217;s referencing the same value as bears:</p>\n<pre><code class=\"javascript language-javascript\">let musketeers = 3;\r\n</code></pre>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618935541daz-diagram3.png\" alt=\"variables referencing the same value\" /></p>\n<p>The variables <code>bears</code> and <code>musketeers</code> both reference the same primitive value of 3. We can verify this using the strict equality operator, <code>===</code>:</p>\n<pre><code class=\"javascript language-javascript\">bears === musketeers\r\n&lt;&lt; true\r\n</code></pre>\n<p>The equality operator returns <code>true</code> if both variables are referencing the same value.</p>\n<h3 id=\"somegotchaswhenworkingwithobjects\">Some gotchas when working with objects</h3>\n<p>The previous examples showed primitive values being assigned to variables. The same process is used when assigning objects:</p>\n<pre><code class=\"javascript language-javascript\">const ghostbusters = { number: 4 };\r\n</code></pre>\n<p>This assignment means that the variable <code>ghostbusters</code> references an object:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618935563daz-diagram4a.png\" alt=\"variables referencing different objects\" /></p>\n<p>A big difference when assigning objects to variables, however, is that if you assign another object literal to another variable, it will reference a completely different object — even if both object literals look exactly the same! For example, the assignment below looks like the variable <code>tmnt</code> (Teenage Mutant Ninja Turtles) references the same object as the variable <code>ghostbusters</code>:</p>\n<pre><code class=\"javascript language-javascript\">let tmnt = { number: 4 };\r\n</code></pre>\n<p>Even though the variables <code>ghostbusters</code> and <code>tmnt</code> look like they reference the same object, they actually both reference a completely different object, as we can see if we check with the strict equality operator:</p>\n<pre><code class=\"javascript language-javascript\">ghostbusters === tmnt\r\n&lt;&lt; false\r\n</code></pre>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618935555daz-diagram4.png\" alt=\"variables referencing different objects\" /></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/variable-assignment-mutation-javascript/?utm_source=rss\">A Guide to Variable Assignment and Mutation in JavaScript</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/variable-assignment-mutation-javascript/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=183806",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Darren Jones"
        ],
        "pubDate": [
            "Mon, 17 May 2021 19:00:05 GMT"
        ],
        "metaDesc": [
            "Mutation can be a real pain when assigning variables in JavaScript. Learn how it works, how to manage it, and how to avoid traps!"
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Tobias Günther"
        ],
        "title": [
            "A Guide To Undoing Mistakes With Git (Part 2)"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/undoing-mistakes-git-part2/"
        ],
        "pubDate": [
            "Tue, 25 May 2021 14:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/undoing-mistakes-git-part2/"
        ],
        "description": [
            "In this second part of our series on &ldquo;Undoing Mistakes with Git&rdquo;, we’ll bravely look danger in the eye again: I’ve prepared four new doomsday scenarios &mdash; including, of course, some clever ways to save our necks! But before we dive in: take a look at the check out previous articles on Git for even more self-rescue methods that help you undo your mistakes with Git!\nLet’s go!\nRecovering a Deleted Branch Using the Reflog Have you ever deleted a branch and, shortly after, realized that you shouldn’t have?"
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/undoing-mistakes-git-part2/\" />\n              <title>A Guide To Undoing Mistakes With Git (Part 2)</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>A Guide To Undoing Mistakes With Git (Part 2)</h1>\n                  \n                    \n                    <address>Tobias Günther</address>\n                  \n                  <time datetime=\"2021-05-25T14:00:00&#43;00:00\" class=\"op-published\">2021-05-25T14:00:00+00:00</time>\n                  <time datetime=\"2021-05-25T14:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>In this second part of our series on &ldquo;Undoing Mistakes with Git&rdquo;, we’ll bravely look danger in the eye again: I’ve prepared four new doomsday scenarios &mdash; including, of course, some clever ways to save our necks! But before we dive in: take a look at the check out <a href=\"http://smashingmagazine.com/category/git/\">previous articles on Git</a> for even more self-rescue methods that help you undo your mistakes with Git!</p>\n\n<p>Let’s go!</p>\n\n<h3 id=\"recovering-a-deleted-branch-using-the-reflog\">Recovering a Deleted Branch Using the Reflog</h3>\n\n<p>Have you ever deleted a branch and, shortly after, realized that you shouldn’t have? In the unlikely event that you don’t know this feeling, I can tell you that it’s not a good one. A mixture of sadness and anger creeps up on you, while you think of all the hard work that went into that branch’s commits, all the valuable code that you’ve now lost.</p>\n\n<p>Luckily, there’s a way to bring that branch back from the dead &mdash; with the help of a Git tool named &ldquo;Reflog&rdquo;. We had used this tool in the <a href=\"https://www.smashingmagazine.com/2021/05/undoing-mistakes-git-part1/\">first part of our series</a>, but here’s a little refresher: the Reflog is like a journal where Git notes every movement of the HEAD pointer in your local repository. In other, less nerdy words: any time you checkout, commit, merge, rebase, cherry-pick, and so on, a journal entry is created. This makes the Reflog a perfect safety net when things go wrong!</p>\n\n<p>Let’s take a look at a concrete example:</p>\n\n<pre><code class=\"language-bash\">$ git branch\n* feature/login\nmaster\n</code></pre>\n\n<p>We can see that we currently have our branch <code>feature/login</code> checked out. Let’s say that this is the branch we’re going to delete (inadvertently). Before we can do that, however, we need to switch to a different branch because we cannot delete our current HEAD branch!</p>\n\n<pre><code class=\"language-bash\">$ git checkout master\n$ git branch -d feature/login\n</code></pre>\n\n<p>Our valuable feature branch is now gone &mdash; and I’ll give you a minute to (a) understand the gravity of our mistake and (b) to mourn a little. After you’ve wiped away the tears, we need to find a way to bring back this branch! Let’s open the Reflog (simply by typing <code>git reflog</code>) and see what it has in store for us:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"266\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Git’s Reflog protocols all major actions in our local repository\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Git’s Reflog protocols all major actions in our local repository. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/9ee79e32-1818-4bf4-8aa3-68f194545b54/reflog-deleted-branch-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Here are some comments to help you make sense of the output:</p>\n\n<ul>\n<li>First of all, you need to know that the Reflog sorts its entries chronologically: the newest items are at the top of the list.</li>\n<li>The topmost (and therefore newest) item is the <code>git checkout</code> command that we performed before deleting the branch. It’s logged here in the Reflog because it’s one of these &ldquo;HEAD pointer movements&rdquo; that the Reflog so dutifully records.</li>\n<li>To undo our grave mistake, we can simply return to the state <em>before</em> that &mdash; which is also cleanly and clearly recorded in the Reflog!</li>\n</ul>\n\n<p>So let’s try this, by creating a new branch (with the name of our &ldquo;lost&rdquo; branch) that starts at this &ldquo;before&rdquo; state SHA-1 hash:</p>\n\n<pre><code class=\"language-bash\">$ git branch feature/login 776f8ca\n</code></pre>\n\n<p>And voila! You’ll be delighted to see that we’ve now restored our seemingly lost branch! 🎉</p>\n\n<p>If you’re using a <a href=\"https://www.git-tower.com/?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=undoing-mistakes-02\">Git desktop GUI like &ldquo;Tower&rdquo;</a>, you can take a nice shortcut: simply hit <kbd>CMD</kbd> + <kbd>Z</kbd> on your keyboard to undo the last command &mdash; even if you’ve just violently deleted a branch!</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554256230\"\n\t\t\tvideotitle=\"A desktop GUI like Tower can make the process of undoing mistakes easier.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>A desktop GUI like Tower can make the process of undoing mistakes easier.</figcaption>\n\t\n</figure>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\n\n\n<h3 id=\"moving-a-commit-to-a-different-branch\">Moving a Commit to a Different Branch</h3>\n\n<p>In many teams, there’s an agreement to not commit on long-running branches like <code>main</code> or <code>develop</code>: branches like these <strong>should only receive new commits through integrations</strong> (e.g. merges or rebases). And yet, of course, mistakes are inevitable: we sometimes forget and commit on these branches nonetheless! So how can we clean up the mess we made?</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"343\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Moving a commit to its correct destination branch\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Our commit landed on the wrong branch. How can we move it to its correct destination branch? (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8df4871c-b565-48af-8446-2ec35dcb0f86/commit-on-wrong-branch-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Luckily, these types of problems can be easily corrected. Let’s roll up our sleeves and get to work.</p>\n\n<p>The first step is to switch to the correct destination branch and then move the commit overusing the <code>cherry-pick</code> command:</p>\n\n<pre><code class=\"language-bash\">$ git checkout feature/login\n$ git cherry-pick 776f8caf\n</code></pre>\n\n<p>You will now have the commit on the desired branch, where it should have been in the first place. Awesome!</p>\n\n<p>But there’s still one thing left to do: we need to clean up the branch where it <em>accidentally</em> landed at first! The <code>cherry-pick</code> command, so to speak, created a copy of the commit &mdash; but the original is still present on our long-running branch:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"619\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A copy of the commit on the correct branch, but the original is still shown to be on the wrong branch\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      We’ve successfully created a copy of the commit on the correct branch, but the original is still here &mdash; on the wrong branch. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d362e9cd-0b1a-4a8c-ad97-e03d083b243a/remove-commit-from-branch-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>This means we have to switch back to our long-running branch and use <code>git reset</code> to remove it:</p>\n\n<pre><code class=\"language-bash\">$ git checkout main\n$ git reset --hard HEAD~1\n</code></pre>\n\n<p>As you can see, we’re using the <code>git reset</code> command here to erase the faulty commit. The <code>HEAD~1</code> parameter tells Git to &ldquo;go back 1 revision behind HEAD&rdquo;, effectively erasing the topmost (and in our case: unwanted) commit from the history of that branch.</p>\n\n<p>And voila: the commit is now where it should have been in the first place <em>and</em> our long-running branch is clean &mdash; as if our mistake had never happened!</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"editing-the-message-of-an-old-commit\">Editing the Message of an Old Commit</h3>\n\n<p>It’s all too easy to smuggle a typo into a commit message &mdash; and only discover it much later. In such a case, the good old <code>--amend</code> option of <code>git commit</code> cannot be used to fix this problem, because it only works for the very last commit. To correct any commit that is older than that, we have to resort to a Git tool called &ldquo;Interactive Rebase&rdquo;.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"516\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A commit message worth changing\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Here’s a commit message worth changing. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ea8f2b3b-17e4-46e4-bafa-ee428927cc8d/edit-commit-message-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>First, we have to tell Interactive Rebase which part of the commit history we want to edit. This is done by feeding it a commit hash: the <em>parent</em> commit of the one we want to manipulate.</p>\n\n<pre><code class=\"language-bash\">$ git rebase -i 6bcf266b\n</code></pre>\n\n<p>An editor window will then open up. It contains a list of all commits <em>after</em> the one we provided as a basis for the Interactive Rebase in the command:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"367\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Showing the range of commits we selected for editing in our Interactive Rebase session\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The range of commits we selected for editing in our Interactive Rebase session. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b1b82e30-28e1-46d9-b526-ec3f17c78286/interactive-rebase-reword-commit-list-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Here, it’s important that you <em>don’t</em> follow your first impulse: in this step, we do <em>not</em> edit the commit message, yet. Instead, we only tell Git what <em>kind of manipulation</em> we want to do with which commit(s). Quite conveniently, there’s a list of action keywords noted in the comments at the bottom of this window. For our case, we mark up line #1 with <code>reword</code> (thereby replacing the standard <code>pick</code>).</p>\n\n<p>All that’s left to do in this step is to save and close the editor window. In return, a new editor window will open up that contains the current message of the commit we marked up. And <em>now</em> is finally the time to make our edits!</p>\n\n<p>Here’s the whole process at a glance for you:</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554255938\"\n\t\t\tvideotitle=\"Using Interactive Rebase to edit an old commit’s message, from start to finish.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Using Interactive Rebase to edit an old commit’s message, from start to finish.</figcaption>\n\t\n</figure>\n\n<h3 id=\"correcting-a-broken-commit-in-a-very-elegant-way\">Correcting a Broken Commit (in a Very Elegant Way)</h3>\n\n<p>Finally, we’re going to take a look at <code>fixup</code>, the Swiss Army Knife of undoing tools. Put simply, it allows you to fix a broken/incomplete/incorrect commit after the fact. It’s truly a wonderful tool for two reasons:</p>\n\n<ol>\n<li><strong>It doesn’t matter what the problem is.</strong><br />\nYou might have forgotten to add a file, should have deleted something, made an incorrect change, or simply a typo. <code>fixup</code> works in all of these situations!</li>\n<li><strong>It is extremely elegant.</strong><br />\nOur normal, instinctive reaction to a bug in a commit is to produce a <em>new</em> commit that fixes the problem. This way of working, however intuitive it may seem, makes your commit history look very chaotic, very soon. You have &ldquo;original&rdquo; commits and then these little &ldquo;band-aid&rdquo; commits that fix the things that went wrong in the original commits. Your history is littered with small, meaningless band-aid commits which makes it hard to understand what happened in your codebase.</li>\n</ol>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"458\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Your commit history can be very hard to read if you constantly fix small mistakes with so-called band-aid commits\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Constantly fixing small mistakes with “band-aid commits” makes your commit history very hard to read. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a362d6e3-489b-4eee-a5c6-c773206f1ee9/fixing-commits-with-bandaids-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>This is where <code>fixup</code> comes in. It allows you to still make this correcting band-aid commit. But here comes the magic: it then applies it to the original, broken commit (repairing it that way) and then discards the ugly band-aid commit completely!</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"435\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Fixup applies your corrections to the original commit and then disposes of the superfluous band-aid commit\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Fixup applies your corrections to the original commit and then disposes of the superfluous band-aid commit. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b6122872-491a-4a24-83ac-2db6331f9956/fixup-workflow-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>We can go through a practical example together! Let’s say that the selected commit here is broken.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"500\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Fixing the selected incorrect commit in an elegant way\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The selected commit is incorrect &mdash; and we’re going to fix it in an elegant way. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dc43d8cf-8e3b-45c9-8a6d-6a30d1ebfe1c/fixup-broken-commit-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Let’s <em>also</em> say that I have prepared changes in a file named <code>error.html</code> that will solve the problem. Here’s the first step we need to make:</p>\n\n<pre><code class=\"language-bash\">$ git add error.html\n$ git commit --fixup 2b504bee\n</code></pre>\n\n<p>We’re creating a new commit, but we’re telling Git this is a special one: it’s a fix for an old commit with the specified SHA-1 hash (<code>2b504bee</code> in this case).</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<p>The second step, now, is to start an Interactive Rebase session &mdash; because <code>fixup</code> belongs to the big toolset of Interactive Rebase.</p>\n\n<pre><code class=\"language-bash\">$ git rebase -i --autosquash 0023cddd\n</code></pre>\n\n<p>Two things are worth explaining about this command. First, why did I provide <code>0023cddd</code> as the revision hash here? Because we need to start our Interactive Rebase session at the parent commit of our broken fellow.</p>\n\n<p>Second, what is the <code>--autosquash</code> option for? It takes a lot of work off our shoulders! In the editor window that now opens, everything is already prepared for us:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"293\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"The Interactive Rebase session window\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The Interactive Rebase session window (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e1e78ea1-12dc-4879-807a-7eb5b623ea68/fixup-editor-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Thanks to the <code>--autosquash</code> option, Git has already done the heavy lifting for us:</p>\n\n<ol>\n<li>It marked our little band-aid commit with the <code>fixup</code> action keyword. That way, Git will combine it with the commit directly <em>above</em> and then discard it.</li>\n<li>It also reordered the lines accordingly, moving our band-aid commit directly below the commit we want to fix (again: <code>fixup</code> works by combining the marked-up commit with the one <em>above</em>!).</li>\n</ol>\n\n<p>In short: There’s nothing to do for us but close the window!</p>\n\n<p>Let’s take a final look at the end result.</p>\n\n<ul>\n<li>The formerly broken commit is fixed: it now contains the changes we prepared in our band-aid commit.</li>\n<li>The ugly band-aid commit itself has been discarded: the commit history is clean and easy to read &mdash; as if no mistake had occurred at all.</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"377\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"An example of how a clean commit history looks like\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The end result after using the fixup tool: a clean commit history! (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b96df80d-96e0-4a90-ba35-f616eccc8e5c/fixup-end-situation-2x.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<h3 id=\"knowing-how-to-undo-mistakes-is-a-superpower\">Knowing How to Undo Mistakes is a Superpower</h3>\n\n<p>Congratulations! You are now able to save your neck in many difficult situations! We cannot really avoid these situations: no matter how experienced we are as developers, mistakes are simply part of the job. But now that you know how to deal with them, you can face them with a laid-back heart rate. 💚</p>\n\n<p>If you want to learn more about undoing mistakes with Git, I can recommend the free &ldquo;<a href=\"https://www.git-tower.com/learn/git/first-aid-kit?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=undoing-mistakes-02\">First Aid Kit for Git</a>&rdquo;, a series of short videos about exactly this topic.</p>\n\n<p>Have fun making mistakes &mdash; and, of course, undoing them with ease!</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "The 5 Most Popular Front-end Frameworks Compared"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/most-popular-frontend-frameworks-compared/?utm_source=rss\"\n              title=\"The 5 Most Popular Front-end Frameworks Compared\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2018/08/1618034470popular-js-front-end-frameworks.jpg\"\n        alt=\"The 5 Most Popular Front-end Frameworks Compared\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2018/08/1618034470popular-js-front-end-frameworks-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2018/08/1618034470popular-js-front-end-frameworks-768x403.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2018/08/1618034470popular-js-front-end-frameworks-1024x538.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2018/08/1618034470popular-js-front-end-frameworks.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>There&#8217;s a large number of front-end frameworks available today, each with different strengths and weaknesses. This makes it tricky to decide which one you should invest your time in learning, or which is most suitable for your next project.</strong></p>\n<p>In this article, I&#8217;ll compare five of the most popular front-end JavaScript frameworks out there. I&#8217;ll offer a high-level overview of each, examining their main features, tooling, learning curve, and other pros and cons to take into account.</p>\n<p>Of course, I won&#8217;t be able to tell you which is <em>the</em> best framework: that&#8217;s subjective, and depends on factors like your current level of JavaScript experience and what kind of app you&#8217;re working on. What I will do, though, is quickly get you up to speed with the main players and help you make an informed decision about which framework you should start digging into more.</p>\n<h2 id=\"howdidimeasurepopularity\">How Did I Measure Popularity?</h2>\n<p>Popularity was determined by framework usage according to the <a href=\"https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/\">State of JavaScript Survey 2020</a>. The survey was completed by 23,765 respondents and saw the contenders stack up like this:</p>\n<ol>\n<li>React: 80%</li>\n<li>Angular: 56%</li>\n<li>Vue.js: 49%</li>\n<li>Svelte: 15%</li>\n<li>Preact : 13%</li>\n</ol>\n<p>I&#8217;ve also taken into account &#8220;framework awareness&#8221; from the same survey:</p>\n<ol>\n<li>React: 100%</li>\n<li>Angular: 100%</li>\n<li>Vue.js: 99%</li>\n<li>Ember: 88%</li>\n<li>Svelte: 86%</li>\n</ol>\n<p>And I&#8217;ve cross-referenced these results with framework usage according to the <a href=\"https://insights.stackoverflow.com/survey/2020#technology-web-frameworks-all-respondents2\">Stack Overflow developer survey, 2020</a>. This was completed by 65,000 respondents, and it pretty much corroborates the findings from the State of JavaScript — although, unfortunately, it doesn&#8217;t distinguish between front-end and back-end frameworks.</p>\n<p>There are, of course, many other metrics one could draw upon, such as job availability, GitHub stars, npm downloads, GitHub &#8220;Used by&#8221;, and so on. If you&#8217;d like an overview of some of these (for the big three, at least), please <a href=\"https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190\">consult this GitHub Gist</a>.</p>\n<p>For an interactive view of how the frameworks stack up against each other, you can consult <a href=\"https://www.npmtrends.com/react-vs-@angular/core-vs-vue-vs-svelte-vs-ember-source-vs-preact\">this graph from npmtrends</a>.</p>\n<h2 id=\"howarewedefiningfrontendframework\">How Are We Defining Front-end Framework?</h2>\n<p>The elephant in the room is that the most popular framework on the list (React) defines itself as a &#8220;library&#8221;.</p>\n<p>I don&#8217;t want to go too deep down this rabbit hole, as there are <a href=\"https://betterprogramming.pub/libraries-vs-frameworks-whats-the-difference-5f28c53dcffe\">complete articles</a> dedicated to explaining the difference between frameworks and libraries. For the purposes of this article, I&#8217;ll use the following definition <a href=\"https://martinfowler.com/bliki/InversionOfControl.html\">provided by Martin Fowler</a>:</p>\n<blockquote>\n<p>A library is essentially a set of functions that you can call, these days usually organized into classes. Each call does some work and returns control to the client.</p>\n<p>A framework embodies some abstract design, with more behavior built in. In order to use it you need to insert your behavior into various places in the framework either by subclassing or  by plugging in your own classes. The framework&#8217;s code then calls your code at these points.</p>\n</blockquote>\n<p>In my opinion, React conforms more to the behavior of a framework than a library. And while it technically isn&#8217;t one, developers normally adopt a number of tools and packages from its ecosystem to make it function as such.</p>\n<h2 id=\"1react\">1. React</h2>\n<p><img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/release/facebook/react/stable\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/stars/facebook/react\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/open-issues/facebook/react\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/bundlephobia/minzip/react\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/npm/dy/react\" /></p>\n<ul>\n<li>Website: <a href=\"https://reactjs.org/\">https://reactjs.org/</a></li>\n<li>GitHub: <a href=\"https://github.com/facebook/react/\">https://github.com/facebook/react/</a></li>\n</ul>\n<p>Initially released by Facebook in 2013, React is far and away the most popular front-end JavaScript framework available today. React is used in production by companies such as Facebook, Netflix and Airbnb, and it has a <em>huge</em> developer following — meaning that it&#8217;s easy to find help and resources online.</p>\n<p>The main purpose of React is to compose interactive user interfaces from reusable components. It uses  <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a> (a syntax extension to JavaScript) for templating, and implements a one-way data flow model to populate components with data. Whenever component data changes, React uses its <a href=\"https://reactjs.org/docs/faq-internals.html\">virtual DOM</a> to quickly and efficiently update the page.</p>\n<p>Developer tooling is good. The React team has built and maintains a CLI (<a href=\"https://create-react-app.dev/\">Create React App</a>) to quickly and easily scaffold out a new project, as well as a <a href=\"https://www.npmjs.com/package/react-devtools\">developer tools extension</a> for both Chrome and Firefox. There are very many third-party packages available to accomplish a wide array of tasks (such as routing, dealing with forms, and animation), as well as several React-based frameworks, such as <a href=\"https://nextjs.org/\">Next.js</a> and <a href=\"https://www.gatsbyjs.com/\">Gatsby</a>.</p>\n<p>React subscribes to a &#8220;Learn once, write anywhere&#8221; philosophy. It can power mobile apps using <a href=\"https://reactnative.dev/\">React Native</a>, and it can render on the server using Node. This means excellent SEO support, which will only get better as something called <a href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\">server components</a> makes its way down the pipeline.</p>\n<p>One of the main criticisms of React is that it is too unopinionated: it&#8217;s only concerned with the view layer of your application and leaves everything else to the developer. Some people like the freedom this offers, but others — especially new developers — can become overwhelmed by the unstructured approach to coding a React app this encourages.</p>\n<p>React has a moderate learning curve. It encourages the use of various functional programming paradigms (such as immutability and pure functions), meaning that developers would do well to have a basic grasp of these concepts before attempting to build anything serious. </p>\n<p>If you&#8217;re comfortable with React&#8217;s unopinionated approach and the fact that it leaves a sizable part of the development process to the developer, then it&#8217;s an excellent choice for data-driven apps of any size.</p>\n<h2 id=\"2angular\">2. Angular</h2>\n<p><img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/release/angular/angular/stable\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/stars/angular/angular\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/open-issues/angular/angular\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/bundlephobia/minzip/@angular/core\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/npm/dy/@angular/core\" /></p>\n<ul>\n<li>Website: <a href=\"https://angular.io/\">https://angular.io/</a></li>\n<li>GitHub: <a href=\"https://github.com/angular/angular/\">https://github.com/angular/angular/</a></li>\n</ul>\n<p>Angular is Google&#8217;s offering in the front-end framework space. It started life in 2010 as AngularJS (or Angular 1) and was an immediate hit, primarily because it was the first framework that enabled developers to build what we now refer to as single-page applications.</p>\n<p>To address performance concerns and the challenges of building large-scale JavaScript applications, Google rewrote AngularJS from the ground up and, in 2016, released Angular 2 (nowadays just Angular). There was no easy migration path between the two, and consequently AngularJS and Angular became two separate frameworks. AngularJS is now end-of-life and <em>shouldn&#8217;t</em> be used for new projects.</p>\n<p>As for Angular, it&#8217;s something of a heavyweight in the front-end framework world. It&#8217;s used by companies such as Google and Microsoft in production, so is definitely well battle tested. There are also many resources available online (such as the excellent <a href=\"https://angular.io/tutorial/\">Tour of Heroes tutorial</a>) and there are a good number of <a href=\"https://stackoverflow.com/questions/tagged/angular\">Angular-related questions</a> on Stack Overflow.</p>\n<p>Unlike React, which only handles the view layer, Angular offers a complete solution for building single-page client applications. Angular components can implement a two-way data binding, which allows them to listen for events and update values simultaneously between parent and child components. Templates are chunks of HTML that permit the use of special syntax to leverage many of Angular&#8217;s features. TypeScript is the primary language for Angular development, making the framework particularly suited to enterprise-grade applications.</p>\n<p>Tooling is good. Angular offers a highly polished <a href=\"https://angular.io/cli\">CLI</a> to initialize, develop, scaffold, and maintain Angular applications. There are also <a href=\"https://augury.rangle.io/\">Chrome and Firefox Dev Tools extensions</a> available for debugging Angular applications. Out of the box, Angular has a solution for handling many common tasks, such as forms and routing, but there&#8217;s still a rich <a href=\"https://angular.io/resources?category=development\">ecosystem of third-party libraries</a>.</p>\n<p>In my opinion, Angular has the steepest learning curve of all the frameworks listed here. Developers will need to be familiar with TypeScript, as well as concepts like decorators and dependency injection, to be able to work effectively with the framework. For this reason, it&#8217;s not a good choice for new developers. Rather, it lends itself more to building large-scale apps as part of a team.</p>\n<p>If you&#8217;d like a full rundown of the differences between React and Angular, please see “<a href=\"https://www.sitepoint.com/react-vs-angular/\">React vs Angular: An In-depth Comparison</a>”.</p>\n<h2 id=\"3vuejs\">3. Vue.js</h2>\n<p><img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/release/vuejs/vue/stable\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/stars/vuejs/vue\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/github/open-issues/vuejs/vue\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/bundlephobia/minzip/vue\" /> <img style=\"display:inline-block; margin-right: 10px;\" src=\"https://flat.badgen.net/npm/dy/vue\" /></p>\n<p><em>Please note that these stats are for Vue v2. Version 3 is available, but has to be installed as <code>vue@next</code>.</em></p>\n<ul>\n<li>Website: <a href=\"https://vuejs.org/\">https://vuejs.org/</a></li>\n<li>GitHub: <a href=\"https://github.com/vuejs/vue\">https://github.com/vuejs/vue</a></li>\n</ul>\n<p>Third on our list is Vue.js, a <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\">Model–view–viewmodel (MVVM)</a> front-end framework used for building user interfaces and single-page applications. It was written by <a href=\"https://twitter.com/youyuxi\">Evan You</a> and saw its first release in 2014. Vue has a very dedicated following of developers (it has more GitHub stars than React, for example), which is possibly due to the fact that it slotted so nicely into the gap left by AngularJS when this was rewritten to become Angular.</p>\n<p>Vue is developed and maintained by a core team of some twenty developers, and although it&#8217;s not directly backed by one of the internet giants, it&#8217;s used in production by companies such as Alibaba, Gitlab and Adobe. Vue has arguably the best documentation of any of the frameworks on the list, and its <a href=\"https://forum.vuejs.org/\">forums</a> are a great resource for getting help with coding issues. Vue is also popular in the PHP world and ships as part of the Laravel framework.</p>\n<p>One of Vue&#8217;s selling points is that it&#8217;s designed from the ground up to be incrementally adoptable. This means that you can sprinkle Vue into regular web pages to enhance their functionality, or you can go all in and use it to build a full-blown single-page app. Vue.js uses an HTML-based template syntax which allows you to effortlessly bind attributes to the underlying data model. It also offers <a href=\"https://v3.vuejs.org/guide/single-file-component.html#introduction\">single file components</a> which keep template, JavaScript code and scoped CSS in the same file.</p>\n<p>Tooling around Vue is superb. There&#8217;s an official <a href=\"https://cli.vuejs.org/\">CLI</a> to scaffold and develop Vue apps, and there&#8217;s a <a href=\"https://github.com/vuejs/vue-devtools\">devtools extension</a> available for both Chrome and Firefox to aid in debugging. In sharp contrast to React, Vue offers official packages for  <a href=\"https://github.com/vuejs/vue-router\">routing</a> and <a href=\"https://github.com/vuejs/vuex\">state management</a>, which presents a pleasingly standardized way of doing things. There&#8217;s also a wide range of third-party tools, as well as frameworks based upon Vue, such as <a href=\"https://nuxtjs.org/\">Nuxt.js</a> and <a href=\"https://gridsome.org/\">Gridsome</a> (Vue&#8217;s answer to React&#8217;s Next.js and Gatsby).</p>\n<p>The barrier to entry for working with Vue is low, partly due to its incremental approach to building apps, and partly due to the fact that it&#8217;s based on HTML, CSS and JavaScript — technologies that should be familiar to any developer. </p>\n<p>Vue is an excellent choice for apps of all sizes. It&#8217;s suitable for less experienced devs, as well as those that prefer a little more structure and guidance from their framework. </p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/most-popular-frontend-frameworks-compared/?utm_source=rss\">The 5 Most Popular Front-end Frameworks Compared</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/most-popular-frontend-frameworks-compared/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=96327",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Frameworks",
            "JavaScript"
        ],
        "dc:creator": [
            "James Hibbard"
        ],
        "pubDate": [
            "Mon, 12 Apr 2021 21:00:57 GMT"
        ],
        "metaDesc": [
            "Learn about the features, the pros and the cons of the five most popular JavaScript front-end frameworks, and how to choose the one that's right for you."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "9 Best JavaScript and TypeScript ORMs for 2021"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/javascript-typescript-orms/?utm_source=rss\"\n              title=\"9 Best JavaScript and TypeScript ORMs for 2021\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616123254solarsystem.jpg\"\n        alt=\"9 Best JavaScript and TypeScript ORMs for 2021\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616123254solarsystem-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616123254solarsystem-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616123254solarsystem-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616123254solarsystem.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This article will briefly explain what object relational mapping (ORM) is, what an ORM <em>library</em> is, and why you should consider using one with your next JavaScript project. We&#8217;ll also help you evaluate the best JavaScript and TypeScript ORM libraries based on your needs as a project developer and maintainer.</strong></p>\n<p>We&#8217;ll look at each of the following tools:</p>\n<ul>\n<li><a href=\"#knexjssqlquerybuilder\">Knex.js: SQL Query Builder</a></li>\n<li><a href=\"#sequelize\">Sequelize</a></li>\n<li><a href=\"#bookshelf\">Bookshelf</a></li>\n<li><a href=\"#waterline\">Waterline</a></li>\n<li><a href=\"#objectionjs\">Objection.js</a></li>\n<li><a href=\"#mongoose\">Mongoose</a></li>\n<li><a href=\"#typegoose\">Typegoose</a></li>\n<li><a href=\"#typeorm\">TypeORM</a></li>\n<li><a href=\"#mikroorm\">MikroORM</a></li>\n<li><a href=\"#prisma\">Prisma</a></li>\n</ul>\n<h2 id=\"objectrelationalmapping\">Object Relational Mapping</h2>\n<p>Object relational mapping might seem complex, but its purpose is to make your life as a programmer easier. To get data out of a database, you need to write a query. Does that mean you have to learn SQL? Well, no. Object relational mapping makes it possible for you to write queries in the language of your choice.</p>\n<p>Object relational mapping is a technique for converting a database query result into entity class instances. An <strong>entity</strong> is simply an object wrapper for a database table. It contains attributes that are mapped to columns of a database table. Entity instances have ways of performing CRUD operations and have support for additional functions that contain custom logic such as validation and data encryption.</p>\n<p>If you&#8217;re building a small project, installing an ORM library isn&#8217;t required. Using SQL statements to drive your application should be sufficient. An ORM is quite beneficial for medium- to large-scale projects that source data from hundreds of database tables. In such a situation, you need a framework that allows you to operate and maintain your application&#8217;s data layer in a consistent and predictable way.</p>\n<p>Entity classes are the building blocks of business applications, as they&#8217;re designed to encapsulate logic for implementing business rules. A business rule is defined to ensure that an automated process only executes within the boundaries of a business policy. Examples of business rules include:</p>\n<ul>\n<li>customer discounts</li>\n<li>loan approvals</li>\n<li>sales commissions</li>\n<li>shipping and tax calculations</li>\n</ul>\n<h2 id=\"ormlibraries\">ORM Libraries</h2>\n<p>Object relational mapping is commonly undertaken with help of a <strong>library</strong>. The term ORM most commonly refers to an actual ORM library — an object relational <em>mapper</em> — that carries out the work of object relational mapping for you. </p>\n<p>Often business rules require the execution of multiple SQL statements that need to run in batches. If a single SQL statement fails, it can leave the database in an inconsistent state. Most ORM libraries support a feature known as <strong>Transactions</strong>, which prevents such an incidents from happening. If an SQL statement fails to run within the context of a transaction, all other SQL statements that had successfully executed within that batch are reversed through an operation known as <strong>roll back</strong>.</p>\n<p>Hence, using an ORM library to build your data layer helps ensure that the database will always remain in a consistent state. ORM libraries often contain many more essential features, such as:</p>\n<ul>\n<li>query builders</li>\n<li>migration scripts</li>\n<li>a CLI tool for generating boilerplate code</li>\n<li>a seeding feature for pre-populating tables with test data</li>\n</ul>\n<p>In this article, I&#8217;ll provide snippets on how each ORM library does:</p>\n<ul>\n<li>initial setup and configuration</li>\n<li>basic CRUD operations</li>\n<li>advance query operations</li>\n</ul>\n<p>I&#8217;ve also included important information such as the launch dates, number of users and links to documentation, and support channels if available. I&#8217;ll also be discussing important issues relating to query performance, library maintenance and architecture philosophy that you should weigh heavily when making your decision.</p>\n<p>I&#8217;ve ordered the list based on launch date from the earliest to the newest. I&#8217;ve split the list into two sections based on the primary supported language: JavaScript and TypeScript.</p>\n<p>Before we begin our evaluation, let&#8217;s first take a look at Knex.js, a popular SQL <strong>Query Builder</strong> that comes already integrated with a number of ORM libraries listed here. Knex.js is very flexible and often performs better than some of the ORM libraries that have their own built-in implementation of a Query Builder. Consider this an advantage when choosing an ORM library that uses Knex.js as its foundation.</p>\n<h3 id=\"knexjssqlquerybuilder\">Knex.js: SQL Query Builder</h3>\n<ul>\n<li><strong>Launch</strong>: Dec, 2012</li>\n<li><a href=\"http://knexjs.org/\">Website</a></li>\n<li><a href=\"https://github.com/knex/knex\">GitHub</a>: Used by 158.6k</li>\n<li><strong>Databases:</strong> Postgres, MSSQL, MySQL, MariaDB, SQLite3, Oracle, and Amazon Redshift</li>\n</ul>\n<p>Knex.js is currently the most mature JavaScript SQL Query builder that can run in both Node.js and the browser (via webpack or Browserify). It&#8217;s capable of generating highly performant SQL queries that are on par with manually written SQL statements.</p>\n<p>So what&#8217;s a Query Builder?</p>\n<p>It&#8217;s simply an API that provides a set of functions that can be chained together to form a query. Here&#8217;s an example:</p>\n<pre><code class=\"sql language-sql\">knex({ a: 'table', b: 'table' })\r\n  .select({\r\n    aTitle: 'a.title',\r\n    bTitle: 'b.title'\r\n  })\r\n  .whereRaw('?? = ??', ['a.column_1', 'b.column_2'])\r\n\r\nSQL Output:\r\nselect `a`.`title` as `aTitle`, `b`.`title` as `bTitle` from `table`\r\nas `a`, `table` as `b` where `a`.`column_1` = `b`.`column_2`\r\n</code></pre>\n<p>This begs the question of why should one use a Query Builder instead of writing raw SQL statements. I&#8217;ll give you four reasons:</p>\n<ul>\n<li>It helps you abstract your code from your database&#8217;s SQL dialect, making switching easier.</li>\n<li>It eliminates, or greatly reduces, the chances of SQL injection attacks on your application.</li>\n<li>It allows easy building of queries with dynamic conditions.</li>\n<li>It comes with additional features and CLI tools for performing database development operations.</li>\n</ul>\n<p>Those features include:</p>\n<ul>\n<li>connection pooling</li>\n<li>callback and Promise interfaces</li>\n<li>stream interface</li>\n<li>transaction support</li>\n<li>schema support</li>\n<li>migration</li>\n<li>seeding</li>\n</ul>\n<p>Installing it in your application requires you to install the Knex.js package, along with the driver of the database you&#8217;re using:</p>\n<pre><code class=\"bash language-bash\">$ npm install knex --save\r\n\r\n# Then add one of the following (adding a --save) flag:\r\n$ npm install pg\r\n$ npm install sqlite3\r\n$ npm install mysql\r\n$ npm install mysql2\r\n$ npm install oracledb\r\n$ npm install mssql\r\n</code></pre>\n<p>Here&#8217;s an example of setup code:</p>\n<pre><code class=\"javascript language-javascript\">const knex = require('knex')({\r\n  client: 'mysql',\r\n  connection: {\r\n    host : '127.0.0.1',\r\n    user : 'your_database_user',\r\n    password : 'your_database_password',\r\n    database : 'myapp_test'\r\n  }\r\n});\r\n\r\nknex.schema.createTable('users', function (table) {\r\n  table.increments();\r\n  table.string('name');\r\n  table.timestamps();\r\n})\r\n\r\nOutputs:\r\ncreate table `users` (`id` int unsigned not null auto_increment primary key, `name` varchar(255),\r\n`created_at` datetime, `updated_at` datetime)\r\n</code></pre>\n<p>Here&#8217;s an example of a basic query:</p>\n<pre><code class=\"javascript language-javascript\">knex('users').where({\r\n  first_name: 'Test',\r\n  last_name:  'User'\r\n}).select('id')\r\n\r\nOutputs:\r\nselect `id` from `users` where `first_name` = 'Test' and `last_name` = 'User'\r\n</code></pre>\n<p>Raw SQL statements are also supported. Here&#8217;s an example of a complex query:</p>\n<pre><code class=\"JavaScript language-JavaScript\">const subcolumn = knex.raw('select avg(salary) from employee where dept_no = e.dept_no')\r\n.wrap('(', ') avg_sal_dept');\r\n\r\nknex.select('e.lastname', 'e.salary', subcolumn)\r\n.from('employee as e')\r\n.whereRaw('dept_no = e.dept_no')\r\n\r\nOutputs:\r\nselect `e`.`lastname`, `e`.`salary`, (select avg(salary) from employee where dept_no = e.dept_no)\r\navg_sal_dept from `employee` as `e` where dept_no = e.dept_no\r\n</code></pre>\n<p>Knex.js also supports TypeScript, which is great, as it allows you to write code like this:</p>\n<pre><code class=\"typescript language-typescript\">import { Knex, knex } from 'knex'\r\n\r\ninterface User {\r\n  id: number;\r\n  age: number;\r\n  name: string;\r\n  active: boolean;\r\n  departmentId: number;\r\n}\r\n\r\nconst config: Knex.Config = {\r\n  client: 'sqlite3',\r\n  connection: {\r\n    filename: './data.db',\r\n  },\r\n});\r\n\r\nconst knexInstance = knex(config);\r\n\r\ntry {\r\n  const users = await knex&lt;User&gt;('users').select('id', 'age');\r\n} catch (err) {\r\n  // error handling\r\n}\r\n</code></pre>\n<p>In the above TypeScript example, Knex.js is almost acting like an ORM. However, entity object instances aren&#8217;t being created. Instead, the interface definition is being used to create JavaScript objects with type-safe properties.</p>\n<p>Do note a number of ORM libraries listed in this article use Knex.js under the hood. These include:</p>\n<ul>\n<li>Bookshelf</li>\n<li>Objection.js</li>\n<li>MikroORM</li>\n</ul>\n<p>ORM libraries often provide additional features on top of Knex.js. Let&#8217;s have a look at them in the next section.</p>\n<h2 id=\"javascriptormlibraries\">JavaScript ORM Libraries</h2>\n<p>In this category, all libraries listed here are written in JavaScript and can run directly in Node.js. TypeScript support is provided either through built-in types or through <a href=\"https://www.npmjs.com/package/@types/node\">@types/node</a> definitions package. If you want first-class support for TypeScript projects, you should skip to the <strong><a href=\"#typescriptormlibraries\">TypeScript ORM Libraries</a></strong> section.</p>\n<p>In the data access layer, there are two popular architectural patterns that are used:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Data_mapper_pattern\">Data Mapper</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Active_record_pattern\">Active Record</a></li>\n</ul>\n<p>With the <strong>Data Mapper pattern</strong>, entity classes are pure and only contain attributes. CRUD operations and business rules are implemented in containers known as <strong>repositories</strong>. Here&#8217;s an example:</p>\n<pre><code class=\"javascript language-javascript\">const repository = connection.getRepository(User);.\r\n\r\nconst user = new User();\r\nuser.firstName = \"Timber\";\r\nawait repository.save(user);\r\n\r\nconst allUsers = await repository.find();\r\n</code></pre>\n<p>With <strong>Active record pattern</strong>, logic for CRUD operations and business rules are implemented within entity classes. Here&#8217;s a similar example implementation of the above:</p>\n<pre><code class=\"javascript language-javascript\">const user = new User();\r\nuser.firstName = \"Timber\";\r\nawait user.save();\r\n\r\nconst allUsers = await User.find();\r\n</code></pre>\n<p>There are pros and cons of using either pattern. These patterns were named by Martin Fowler in his 2003 book <em>Patterns of Enterprise Application Architecture</em>. You should check the book out if you want more detailed information on the subject. Most ORM libraries listed in this article support one or both patterns.</p>\n<p>Let&#8217;s start looking at them now.</p>\n<h3 id=\"sequelize\">Sequelize</h3>\n<ul>\n<li><strong>Launch</strong>: July 2010</li>\n<li><a href=\"https://sequelize.org/\">Website</a></li>\n<li><a href=\"https://sequelize.org/\">GitHub</a>: used by 271k</li>\n<li><a href=\"https://sequelize-slack.herokuapp.com/\">Slack</a></li>\n<li><strong>Databases</strong>: Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server</li>\n</ul>\n<p>Sequelize is a very mature and popular Node.js ORM library with excellent documentation containing well explained code examples. It supports many of the data layer features that we&#8217;ve already mentioned before in previous libraries. Unlike Bookshelf, it has its own Query Builder which performs just as well as Knex.js</p>\n<p>Installing the library is quite simple, and the database driver is quite straightforward:</p>\n<pre><code class=\"bash language-bash\">$ npm i sequelize # This will install v6\r\n\r\n# And one of the following:\r\n$ npm i pg pg-hstore # Postgres\r\n$ npm i mysql2\r\n$ npm i mariadb\r\n$ npm i sqlite3\r\n$ npm i tedious # Microsoft SQL Server\r\n</code></pre>\n<p>Below is an example of the setup code along with examples of CRUD and basic query statements:</p>\n<pre><code class=\"javascript language-javascript\">const { Sequelize } = require('sequelize');\r\n\r\n// Connect to database\r\nconst sequelize = new Sequelize('database', 'username', 'password', {\r\n  host: 'localhost',\r\n  dialect: /* one of 'mysql' | 'mariadb' | 'postgres' | 'mssql' */\r\n});\r\n\r\n// Create Model\r\nconst User = sequelize.define('User', {\r\n  // Model attributes are defined here\r\n  firstName: {\r\n    type: DataTypes.STRING,\r\n    allowNull: false\r\n  },\r\n  lastName: {\r\n    type: DataTypes.STRING\r\n    // allowNull defaults to true\r\n  }\r\n}, {\r\n  // Other model options go here\r\n});\r\n\r\n// Create instance\r\nconst jane = User.build({ firstName: \"Jane\", lastName: \"Doe\" });\r\nawait jane.save(); // save to database\r\n\r\n// Shortcut for creating instance and saving to database at once\r\nconst jane = await User.create({ firstName: \"Jane\", lastName: \"Doe\" });\r\n\r\n// Find all users\r\nconst users = await User.findAll();\r\nconsole.log(users.every(user =&gt; user instanceof User)); // true\r\nconsole.log(\"All users:\", JSON.stringify(users, null, 2));\r\n</code></pre>\n<p>The following is an example of how a complex query is written:</p>\n<pre><code class=\"javascript language-javascript\">// What if you wanted to obtain something like WHERE char_length(\"content\") = 7?\r\nPost.findAll({\r\n  where: sequelize.where(sequelize.fn('char_length', sequelize.col('content')), 7)\r\n});\r\n// SELECT ... FROM \"posts\" AS \"post\" WHERE char_length(\"content\") = 7\r\n\r\n// A more complex example\r\nPost.findAll({\r\n  where: {\r\n    [Op.or]: [\r\n      sequelize.where(sequelize.fn('char_length', sequelize.col('content')), 7),\r\n      {\r\n        content: {\r\n          [Op.like]: 'Hello%'\r\n        }\r\n      },\r\n      {\r\n        [Op.and]: [\r\n          { status: 'draft' },\r\n          sequelize.where(sequelize.fn('char_length', sequelize.col('content')), {\r\n            [Op.gt]: 10\r\n          })\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n});\r\n</code></pre>\n<p>In the last complex query example, the SQL output was:</p>\n<pre><code class=\"sql language-sql\">SELECT\r\n  ...\r\nFROM \"posts\" AS \"post\"\r\nWHERE (\r\n  char_length(\"content\") = 7\r\n  OR\r\n  \"post\".\"content\" LIKE 'Hello%'\r\n  OR (\r\n    \"post\".\"status\" = 'draft'\r\n    AND\r\n    char_length(\"content\") &gt; 10\r\n  )\r\n)\r\n</code></pre>\n<p>Sequelize supports raw SQL statements, which gives developers the flexibility to write complex and highly performant SQL statements. The results can also be mapped to object entity instances. Here&#8217;s an example:</p>\n<pre><code class=\"javascript language-javascript\">// Callee is the model definition. This allows you to easily map a query to a predefined model\r\nconst projects = await sequelize.query('SELECT * FROM projects', {\r\n  model: Projects,\r\n  mapToModel: true // pass true here if you have any mapped fields\r\n});\r\n// Each element of `projects` is now an instance of Project\r\n</code></pre>\n<p>The main downside of Sequelize is that development has slowed down and that <a href=\"https://github.com/sequelize/sequelize/issues/12956\">issues</a> have piled up without being resolved. Fortunately, one of the maintainers has <a href=\"https://github.com/sequelize/sequelize/issues/12956\">announced</a> that the library will get the attention it deserves from 2021. Do note that all ORM library projects in this article are open source and that they do need help from developers to make them better.</p>\n<h3 id=\"bookshelf\">Bookshelf</h3>\n<ul>\n<li><strong>Launch</strong>: March, 2013</li>\n<li><a href=\"https://bookshelfjs.org/\">Website</a></li>\n<li><a href=\"https://github.com/bookshelf/bookshelf\">GitHub</a>: Used by 22.4k</li>\n<li><a href=\"https://bookshelfjs.org/#official-plugins\">Plugins</a></li>\n<li><strong>Databases</strong> : PostgreSQL, MySQL, and SQLite3</li>\n</ul>\n<p>Bookshelf is one of the oldest and most basic ORM JavaScript library we have available. It&#8217;s built on top of Knex.js SQL Query Builder, and it takes a lot of ideas from the Data Mapper pattern. It provides additional features, such as:</p>\n<ul>\n<li>eager and nested-eager relation loading</li>\n<li>polymorphic associations</li>\n<li>support for one-to-one, one-to-many, and many-to-many relations.</li>\n</ul>\n<p>It&#8217;s unfortunate there&#8217;s no built-in support for validation. However, it can be implemented in code via a third-party library such as <a href=\"https://github.com/tgriesser/checkit\"><code>checkit</code></a>.</p>\n<p>Installing Bookshelf in your project is as follows:</p>\n<pre><code class=\"bash language-bash\">$ npm install knex\r\n$ npm install bookshelf\r\n\r\n# Then add one of the following:\r\n$ npm install pg\r\n$ npm install mysql\r\n$ npm install sqlite3\r\n</code></pre>\n<p>Setup code looks like this:</p>\n<pre><code class=\"javascript language-javascript\">// Setting up the database connection\r\nconst knex = require('knex')({\r\n  client: 'mysql',\r\n  connection: {\r\n    host     : '127.0.0.1',\r\n    user     : 'your_database_user',\r\n    password : 'your_database_password',\r\n    database : 'myapp_test',\r\n    charset  : 'utf8'\r\n  }\r\n})\r\nconst bookshelf = require('bookshelf')(knex)\r\n\r\n// Define User model\r\nconst User = bookshelf.model('User', {\r\n  tableName: 'users',\r\n  posts() {\r\n    return this.hasMany(Posts)\r\n  }\r\n})\r\n\r\n// Define Post model\r\nconst Post = bookshelf.model('Post', {\r\n  tableName: 'posts',\r\n  tags() {\r\n    return this.belongsToMany(Tag)\r\n  }\r\n})\r\n\r\n// Define Tag model\r\nconst Tag = bookshelf.model('Tag', {\r\n  tableName: 'tags'\r\n})\r\n\r\n// Unfortunate example of unreadable code\r\nnew User({id: 1}).fetch({withRelated: ['posts.tags']}).then((user) =&gt; {\r\n  console.log(user.related('posts').toJSON())\r\n}).catch((error) =&gt; {\r\n  console.error(error)\r\n})\r\n</code></pre>\n<p>You&#8217;ll need to look up the Knex.js documentation to see how to perform queries and CRUD transactions. Bookshelf&#8217;s documentation doesn&#8217;t cover this.</p>\n<p>Interestingly, <a href=\"https://strapi.io/\">Strapi</a>, a headless CMS, uses <a href=\"https://www.npmjs.com/package/strapi-connector-bookshelf\">Bookshelf</a> as its default database connector. However, it&#8217;s worth noting the following issues:</p>\n<ul>\n<li>the documentation is not particularly helpful</li>\n<li>at the time of writing, the library hadn&#8217;t been updated for five months</li>\n</ul>\n<h3 id=\"waterline\">Waterline</h3>\n<ul>\n<li><strong>Launch</strong>: May 2013</li>\n<li><a href=\"https://waterlinejs.org\">Website</a></li>\n<li><a href=\"https://github.com/balderdashy/waterline\">GitHub</a>: Used by 8.5k</li>\n<li><a href=\"https://sailsjs.com/documentation/concepts/models-and-orm\">Documentation</a></li>\n<li><strong>Databases</strong> : Local disk/memory, MySQL, MongoDB, and Postgres(official adapters)</li>\n<li><a href=\"https://sailsjs.com/documentation/concepts/extending-sails/adapters/available-adapters\">Community Database Adapters</a>: Oracle, SAP, Cassandra, IBM, Apache Derby, Redis, Solr and more</li>\n</ul>\n<p>Waterline is the default ORM used by <a href=\"https://sailsjs.com/\">Sails.js</a>, a Node.js framework. When using Sails.js to develop your project, the amount of code you need to write to build your own database API is greatly reduced. This is achieved using convention-over-configuration philosophy and the <a href=\"https://sailsjs.com/documentation/concepts/blueprints\">Blueprints API</a> that contains boilerplate code for accessing the database and performing CRUD functions. In addition, Sails.js provides a command-line interface that helps developers generate API routes, perform migrations and other data layer functions. Typescript support is available via the <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">Typed definitions</a> package.</p>\n<p>In this article, we&#8217;re going to assume you&#8217;d want to use the Waterline ORM as a standalone, which is possible. Let&#8217;s look at how to install and set it up.</p>\n<p>Installation requires you to install the Waterline library, then one of the database adapters:</p>\n<pre><code class=\"bash language-bash\">$ npm install --save waterline\r\n\r\n# Install database adapters\r\n$ npm install --save sails-mysql\r\n$ npm install --save-dev sails-disk\r\n</code></pre>\n<p>Here&#8217;s a partial sample of the setup code:</p>\n<pre><code class=\"javascript language-javascript\">const Waterline = require('waterline');\r\nconst sailsDiskAdapter = require('sails-disk');\r\nconst waterline = new Waterline();\r\n\r\nconst userCollection = Waterline.Collection.extend({\r\n  identity: 'user',\r\n  datastore: 'default',\r\n  primaryKey: 'id',\r\n\r\n  attributes: {\r\n    id: {\r\n        type: 'number',\r\n        autoMigrations: {autoIncrement: true}\r\n    },\r\n    firstName: {type:'string'},\r\n    lastName: {type:'string'},\r\n\r\n    // Add a reference to Pets\r\n    pets: {\r\n      collection: 'pet',\r\n      via: 'owner'\r\n    }\r\n  }\r\n});\r\n\r\nwaterline.registerModel(userCollection);\r\n</code></pre>\n<p>Here&#8217;s a partial sample of some CRUD code:</p>\n<pre><code class=\"javascript language-javascript\">(async ()=&gt;{\r\n    // First we create a user\r\n    var user = await User.create({\r\n      firstName: 'Neil',\r\n      lastName: 'Armstrong'\r\n    });\r\n\r\n    // Then we create the pet\r\n    var pet = await Pet.create({\r\n      breed: 'beagle',\r\n      type: 'dog',\r\n      name: 'Astro',\r\n      owner: user.id\r\n    });\r\n\r\n    // Then we grab all users and their pets\r\n    var users = await User.find().populate('pets');\r\n  })()\r\n</code></pre>\n<p>Here&#8217;s a sample of a basic query code:</p>\n<pre><code class=\"javascript language-javascript\">var thirdPageOfRecentPeopleNamedMary = await Model.find({\r\n  where: { name: 'mary' },\r\n  skip: 20,\r\n  limit: 10,\r\n  sort: 'createdAt DESC'\r\n});\r\n</code></pre>\n<p>When it comes to handling complex queries, the documentation seems to be missing that part. If you plan on using Sails.js, using Waterline ORM is a no brainer. But as a standalone, the ORM library faces the following issues:</p>\n<ul>\n<li>Documentation is mixed in with Sails.js documentation.</li>\n<li>At the time of writing, the library package hadn&#8217;t been updated in nine months.</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/javascript-typescript-orms/?utm_source=rss\">9 Best JavaScript and TypeScript ORMs for 2021</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/javascript-typescript-orms/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181674",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Michael Wanyoike"
        ],
        "pubDate": [
            "Sun, 21 Mar 2021 15:00:16 GMT"
        ],
        "metaDesc": [
            "An ORM library simplifies the job of writing database queries. Learn about nine JS and TypeScript ORMs and how they could help you with your next project."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "The Best Markdown Editors for Mac"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/the-best-markdown-editors-for-mac/?utm_source=rss\"\n              title=\"The Best Markdown Editors for Mac\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622033354Markdown.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622033354Markdown-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622033354Markdown-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622033354Markdown-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622033354Markdown-1536x808.jpg 1536w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622033354Markdown.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Markdown provides a convenient way to add formatting to a plain text document, while leaving it in plain text. It’s simpler and faster than adding HTML markup, and doesn’t have the lock-in of using something like Microsoft Word.</strong></p>\n<p>The syntax was created by John Gruber way back in 2004 and became popular in blogs and forums. It’s certainly an easy and efficient way to create online content, and <a href=\"https://www.sitepoint.com/writers-bloggers-can-make-markdown-wordpress/\">has a number of benefits for writers and bloggers</a>. It’s now also used in a wide variety of applications, as we’ll explore below. </p>\n<p>Because Markdown is just plain text, you can create it with any text editor. That’s part of its appeal. But using an editor designed for writing in Markdown has a lot of advantages, depending on your needs.</p>\n<p>Here are some features you might expect to find in a Markdown editor:</p>\n<ul>\n<li>Syntax highlighting and a preview pane to show you how your final document will look.</li>\n<li>Familiar keyboard shortcuts, like <kbd>command</kbd> + <kbd>B</kbd> for bold.</li>\n<li>Export and conversion features that easily transform your document from Markdown to HTML, PDF, DOCX or a number of other formats. Some Markdown editors can publish directly to WordPress, Medium and more.</li>\n<li>A distraction-free mode that takes advantage of features like full-screen editing, dark mode and typewriter mode.</li>\n<li>Features that appeal to writers, including word count, readability scores, and versions.</li>\n<li>A document library to organize your content and sync between devices. Some editors have an iOS version so you can keep working while you’re on the move.</li>\n<li>Advanced formatting, including tables and mathematical expressions.</li>\n</ul>\n<p>There’s a rich landscape of Mac options, and the best choice for me may not be the best choice for you. Not all editors support every feature, so the trick is to find the one that does what you need.</p>\n<p>So let’s start by looking at popular text editors that support Markdown. Then we’ll cover the other alternatives, starting with file-based editors, then moving to library-based applications.</p>\n<h2 id=\"12texteditorswithmarkdownsupport\">12 Text Editors with Markdown Support</h2>\n<p>I’m sure you already have a favorite Mac text editor, and you might prefer to use that for writing Markdown as well. Because Markdown is really just text, any text editor will do. But many text editors have additional support for Markdown, either natively or through an extension or plugin. These may give syntax highlighting, a preview pane and other features.</p>\n<p>Here are some examples:</p>\n<ol>\n<li><a href=\"https://www.barebones.com/products/bbedit/\">BBEdit</a> 13.1 has built-in support for several flavors of Markdown.</li>\n<li><a href=\"https://www.sublimetext.com/\">Sublime Text</a> can be turned into a full-featured Markdown editor. <a href=\"https://www.sitepoint.com/sublime-text-perfect-blogging-6-ways/\">We show you how here</a>.</li>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> offers a number of <a href=\"https://code.visualstudio.com/docs/languages/markdown\">Markdown extensions</a> that offer previewing and compiling of Markdown files, as well as an outline view that folds headers.</li>\n<li><a href=\"https://nova.app/\">Nova</a> has built-in support for Markdown, including preview and style sheets.</li>\n<li><a href=\"https://macromates.com/\">TextMate 2</a> offers live Markdown preview and the <a href=\"https://github.com/textmate/markdown.tmbundle\">Markdown bundle</a> adds features like convert, preview, cheat sheet and “generate output and open in browser”.</li>\n<li><a href=\"https://atom.io/\">Atom</a> supports Markdown out of the box, with features like syntax highlighting and preview. This functionality can be expanded by several community-generated packages, including <a href=\"https://atom.io/packages/markdown-writer\">Markdown-Writer</a>, <a href=\"https://atom.io/packages/markdown-scroll-sync\">Markdown-Scroll-Sync</a> and <a href=\"https://atom.io/packages/markdown-format\">Markdown-Format</a>.</li>\n<li><a href=\"https://chocolatapp.com/\">Chocolat</a> provides Markdown syntax highlighting and preview out of the box.</li>\n<li><a href=\"https://www.textasticapp.com/mac.html\">Textastic</a> also includes Markdown syntax highlighting and preview out of the box.</li>\n<li><a href=\"https://coderunnerapp.com/\">CodeRunner 4</a> has included Markdown support since version 2.1.1.</li>\n<li><a href=\"https://getdrafts.com/\">Drafts</a>, the text editor with powerful actions, has built-in support for Markdown.</li>\n<li><a href=\"http://macvim-dev.github.io/macvim/\">MacVim</a> has a <a href=\"https://github.com/plasticboy/vim-markdown\">Vim-Markdown</a> plugin that features syntax highlighting and folding.</li>\n<li><a href=\"http://emacsformacosx.com/\">GNU Emacs</a> has a <a href=\"http://jblevins.org/projects/markdown-mode/\">Markdown Mode for Emacs</a> package that includes shortcut keys and syntax highlighting.</li>\n</ol>\n<h2 id=\"9filebasedmarkdowneditors\">9 File-based Markdown Editors</h2>\n<p>Here are nine applications that let you work with one Markdown file at a time.</p>\n<h3 id=\"1byword\">1. Byword</h3>\n<ul>\n<li>Cost: $10.99</li>\n<li>Demo: No</li>\n<li>Other platforms: iOS</li>\n</ul>\n<blockquote>\n<p>Markdown app for writing in plain text efficiently.</p>\n</blockquote>\n<p><a href=\"https://bywordapp.com/\">Byword</a> is a minimalistic app for efficient Markdown writing, striking a good balance between simplicity and functionality. There are just enough features to do the job without becoming a distraction.</p>\n<p>The app has subtle syntax highlighting, and you can format with Markdown using keyboard shortcuts and autocomplete. There’s a word count with live update, and a quick preview option.</p>\n<p>My take: Byword’s low cost, attractive looks and frictionless interface make it a popular choice. If you’re not in need of a lot of features, and simplicity aids your productivity, this might be the one for you.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861356byword.jpeg\" alt=\"A screen shot of the Byword editor\" /></p>\n<h3 id=\"2iawriter\">2. iA Writer</h3>\n<ul>\n<li>Cost: $29.99</li>\n<li>Demo: 14-day free trial</li>\n<li>Other platforms: Windows, iOS, Android</li>\n</ul>\n<blockquote>\n<p>Get focused. The simple, award-winning design of iA Writer delivers the essential writing experience.</p>\n</blockquote>\n<p><a href=\"https://ia.net/writer/\">iA Writer</a> is a distraction-free Markdown editor that puts the focus on your content. It’s like Byword, but with a few more features and a little less simplicity.</p>\n<p>The app uses a light gray background, monospaced font and blue cursor. In focus mode, surrounding lines of text fade to emphasize the line you’re typing.</p>\n<p>Images, tables and content blocks are all supported — all features that Byword lacks. Other features include preview, live sync, a document library, file export (HTML, PDF, DOCX) and custom templates.</p>\n<p>My take: this popular, distraction-free Markdown editor loses some of Byword’s simplicity in order to gain additional features that you may need.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861420iawriter-1024x633.png\" alt=\"A screen shot of the IA Writer editor\" /></p>\n<h3 id=\"3typora\">3. Typora</h3>\n<ul>\n<li>Cost: Free (during beta)</li>\n<li>Demo: n/a</li>\n<li>Other platforms: Windows, Linux</li>\n</ul>\n<blockquote>\n<p>A truly minimal Markdown editor</p>\n</blockquote>\n<p><a href=\"https://typora.io/\">Typora</a> is possibly the most minimalistic editor we’re covering. It even removes the Markdown syntax as you type, replacing it with a preview of the formatting. What you see is what you get. It looks cleaner, removes the need for a preview pane, and makes reading easier.</p>\n<p>Despite its simplicity, Typora supports images, lists, tables, code fences, math blocks, table of contents and more. Shortcuts do what you expect, and the themes are beautiful and fully configurable by CSS. Geeks will find a lot to love here.</p>\n<p>My take: Typora seems to have been in beta forever. But it works, is beautiful, and offers loads of features. If you like the idea of not seeing Markdown syntax in your document, this app may be for you.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861491typora-1024x965.png\" alt=\"A screen shot of the Typora editor\" /></p>\n<h3 id=\"4caret\">4. Caret</h3>\n<ul>\n<li>Cost: $29</li>\n<li>Demo: Yes</li>\n<li>Other platforms: Windows, Linux</li>\n</ul>\n<blockquote>\n<p>Caret is a Markdown editor for Mac, Windows and Linux. It stands out with its clean interface, productivity features and obsessive attention to detail.</p>\n</blockquote>\n<p><a href=\"https://caret.io/\">Caret</a> is beautiful and distraction-free, but hides lots of power under the hood. It would appeal to writers and devs alike.</p>\n<p>The app makes entering complex Markdown simple. Syntax assistance is available for tables, lists, quotes, fences, links and emphasis, and there’s auto-completion for images, keywords and emoji. A file manager is available, and navigation through long documents is made simple with the popup “go to heading” feature.</p>\n<p>For the mathematically-minded, LaTeX expressions are supported, and they’re rendered on-screen as soon as the cursor leaves them. For distraction-free writing, dark mode, focus mode and typewriter mode are all supported.</p>\n<p>My take: for a minimalistic editor, Caret seems to have a lot of power under the hood. Writing, rather than exporting, is its strength. Former SitePoint editor Bruno Skvorc is a heavy user of the app, and couldn’t be happier.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861556caret.png\" alt=\"A screen shot of the Caret editor\" /></p>\n<h3 id=\"5focused\">5. Focused</h3>\n<ul>\n<li>Cost: $19.99, or subscribe via <a href=\"https://setapp.com/apps/focused\">SetApp</a></li>\n<li>Demo: Yes</li>\n<li>Other platforms: No</li>\n</ul>\n<blockquote>\n<p>Get Focused, start writing!</p>\n</blockquote>\n<p><a href=\"http://codebots.co.uk/\">Focused</a> is an attractive, minimalistic writing app with an interface designed to keep you writing without distraction.</p>\n<p>The app offers an uncluttered interface with few features, a choice of attractive themes, typewriter mode and a choice of eight relaxing soundtracks. Other features include word count, versions, export to HTML and RTF, and customizable typefaces and styles.</p>\n<p>My take: if you’re looking for a beautiful, minimalistic app to write in, and you value a focused writing experience over a multitude of features, this is worth considering.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861624focused-1024x640.jpg\" alt=\"A screen shot of the Focused editor\" /></p>\n<h3 id=\"6macdown\">6. MacDown</h3>\n<ul>\n<li>Cost: free (open source)</li>\n<li>Demo: n/a</li>\n<li>Other platforms: No</li>\n</ul>\n<blockquote>\n<p>The open source Markdown editor for macOS.</p>\n</blockquote>\n<p><a href=\"https://macdown.uranusjr.com/\">MacDown</a> is heavily inspired by <a href=\"http://25.io/mou/\">Mou</a>, and was created once Mou development stalled. Like Mou, it’s designed with web developers in mind.</p>\n<p>Features include a configurable syntax highlighting, live preview, TeX-like math syntax, and autocompletion.</p>\n<p>My take: ff you’re a web developer looking for a lean, fast, configurable editor, MacDown might be the one for you.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861805macdown-1024x583.png\" alt=\"A screen shot of the MacDown editor\" /></p>\n<h3 id=\"7haroopad\">7. Haroopad</h3>\n<ul>\n<li>Cost: Donationware</li>\n<li>Demo: n/a</li>\n<li>Other platforms: Windows, Linux</li>\n</ul>\n<blockquote>\n<p>The Markdown enabled Next Document Processor</p>\n</blockquote>\n<p><a href=\"http://pad.haroopress.com/\">Haroopad</a> is designed for creating web-friendly documents with Markdown. Use it to create professional-looking documents for your blog posts, slides, presentations, reports and email.</p>\n<p>The app has some advanced features, including support for LaTeX mathematical expressions, Vim key bindings and embedding of audio and video. Themes and skins are available, and you can export your document to HTML and PDF, with more formats in the works.</p>\n<p>My take: Haroopad is another app that’s been in beta for years, and the English documentation is still lacking. But it’s flexible and has a ton of features, as well as supporting the major desktop operating systems. And the price is right.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/07/1500861861haroopad.png\" alt=\"A screen shot of the Haroopad editor\" /></p>\n<h3 id=\"8markdownpro\">8. Markdown Pro</h3>\n<ul>\n<li>Cost: $5.99</li>\n<li>Demo: No</li>\n<li>Other platforms: No</li>\n</ul>\n<blockquote>\n<p>A beautiful and easy-to-use editor for the popular Markdown markup language, combined with a themed live preview feature, you will never have to write boring documents again.</p>\n</blockquote>\n<p><a href=\"http://www.markdownpro.com/\">Markdown Pro</a> is a basic, Mac-only editor that offers templates and a preview pane. Markup in the edit window is not rendered nor syntax highlighted. It looks a little dated.</p>\n<p>Templates are available. You can downloaded more online or add your own custom templates. Files are automatically saved and versioning is supported.</p>\n<p>My take: Markdown Pro isn’t the slickest Markdown editor out there, but it’s inexpensive and offers the combination of an edit window, templates, and versioning.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619163723markdownmac-markdownpro.jpeg\" alt=\"A screen shot of the Markdown Pro editor\" /></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/the-best-markdown-editors-for-mac/?utm_source=rss\">The Best Markdown Editors for Mac</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/the-best-markdown-editors-for-mac/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=157685",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Adrian Try"
        ],
        "pubDate": [
            "Mon, 10 May 2021 15:00:37 GMT"
        ],
        "metaDesc": [
            "Markdown is a simple but powerful markup language for text. We review the best Markdown tools for Mac, from humble code editors to full-featured workhorses."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "HTML5 Template: A Basic Boilerplate for Any Project"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/a-basic-html5-template/?utm_source=rss\"\n              title=\"HTML5 Template: A Basic Boilerplate for Any Project\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2020/03/1624497596html5-boilerplate.png\"\n        alt=\"HTML5 Template: A Basic Boilerplate for Any Project\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2020/03/1624497596html5-boilerplate-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2020/03/1624497596html5-boilerplate.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>As you learn HTML5 and add new techniques to your toolbox, you’re likely going to want to build yourself an HTML boilerplate to start off all future projects. This is definitely worth doing, and there are many starting points online to help you build your own HTML5 template.</strong></p>\n<p>In this article, we&#8217;ll look at how to get started with building your own HTML5 boilerplate. We&#8217;ll walk through the essential elements of an HTML template, ending with a basic template that you can take with you and build upon. </p>\n<p>If you&#8217;d rather just grab the code now and read this article later, <a href=\"#thecompletehtml5boilerplate\"><strong>here&#8217;s our finished HTML5 template</strong></a>.</p>\n<h2 id=\"theanatomyofanhtml5template\">The Anatomy of an HTML5 Template</h2>\n<p>An HTML template typically includes the following parts:</p>\n<ol>\n<li><a href=\"#thehtml5doctype\">The document type declaration</a> (or doctype)</li>\n<li><a href=\"#thehtmlelement\">The <code>&lt;html&gt;</code> Element</a></li>\n<li><a href=\"#htmldocumentcharacterencoding\">The character encoding</a></li>\n<li><a href=\"#theviewportmetaelement\">The viewport meta element</a></li>\n<li><a href=\"#thetitledescriptionandauthor\"><code>&lt;title&gt;</code>, <code>description</code>, and <code>author</code></a></li>\n<li><a href=\"#opengraphmetaelementsforsocialcards\">Open Graph meta elements for social cards</a></li>\n<li><a href=\"#faviconsandtouchicons\">Favicons and touch icons</a></li>\n<li><a href=\"#includingastylesheetandscripts\">Links to stylesheets and scripts</a></li>\n</ol>\n<p>Other than the document type declaration and <code>&lt;html&gt;</code> element, the elements listed above will mostly be found inside the <code>&lt;head&gt;</code> section of the HTML template.</p>\n<h2 id=\"thehtml5doctype\">The HTML5 Doctype</h2>\n<p>Your HTML5 template needs to start with a document type declaration, or <em>doctype</em>. A doctype is simply a way to tell the browser — or any other parser — what type of document it&#8217;s looking at. In the case of HTML files, it means the specific version and flavor of HTML. The doctype should always be the first item at the top of any HTML file. Many years ago, the doctype declaration was an ugly and hard-to-remember mess, often specified as &#8220;XHTML Strict&#8221; or &#8220;HTML Transitional&#8221;.</p>\n<p>With the advent of HTML5, those indecipherable eyesores are gone and now all you need is this:</p>\n<pre><code class=\"markup language-markup\">&lt;!doctype html&gt;\r\n</code></pre>\n<p>Simple, and to the point. The doctype can be written in uppercase, lowercase, or mixed case. You’ll notice that the “5” is conspicuously missing from the declaration. Although the current iteration of web markup is known as “HTML5”, it really is just an evolution of previous HTML standards — and future specifications will simply be a development of what we have today. There&#8217;s never going to be an &#8220;HTML6&#8221;, so it&#8217;s common to refer to the current state of web markup as simply &#8220;HTML&#8221;.</p>\n<p>Because browsers are required to support older content on the Web, there’s no reliance on the doctype to tell browsers which features should be supported in a given document. In other words, the doctype alone isn&#8217;t going to make your pages compliant with modern HTML features. It&#8217;s really up to the browser to determine feature support on a case-by-case basis, regardless of the doctype used. In fact, you can use one of the older doctypes with new HTML5 elements on a page and the page will render the same as it would if you used the new doctype.</p>\n<h2 id=\"thehtmlelement\">The <code>&lt;html&gt;</code> Element</h2>\n<p>Following the doctype in any HTML document is the <code>&lt;html&gt;</code> element:</p>\n<pre><code class=\"markup language-markup\">&lt;html lang=\"en\"&gt;\r\n</code></pre>\n<p>This hasn&#8217;t undergone any significant change since the advent of HTML5. In the code snippet above, we’ve included the <code>lang</code> attribute with a value of <code>en</code>, which specifies that the document is in English. This isn&#8217;t required for a page to validate, but you&#8217;ll get a warning from most validators if you don&#8217;t include it.</p>\n<p>The <code>&lt;html&gt;</code> element is divided into two parts, the <code>&lt;head&gt;</code> and <code>&lt;body&gt;</code> sections. The <code>&lt;head&gt;</code> section contains important information about the document that isn&#8217;t displayed to the end user — such as the <a href=\"#htmldocumentcharacterencoding\">character encoding</a>, and <a href=\"#includingastylesheetandscripts\">links to CSS files and possibly JavaScript</a>. The <code>&lt;body&gt;</code> section contains everything that&#8217;s displayed in the browser — text, images, and so on.</p>\n<h2 id=\"htmldocumentcharacterencoding\">HTML Document Character Encoding</h2>\n<p>The first line inside the <code>&lt;head&gt;</code> section of an HTML document is the one that defines the character encoding for the document. This is an optional feature and won&#8217;t cause any warnings in validators, but it&#8217;s recommended for most HTML pages:</p>\n<pre><code class=\"markup language-markup\">&lt;meta charset=\"utf-8\"&gt;\r\n</code></pre>\n<p>In nearly all cases, <code>utf-8</code> is the value you’ll be using in your documents. A full explanation of character encoding is beyond the scope of this article, and it probably won’t be that interesting to you, either. Nonetheless, if you want to delve a little deeper, you can <a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#encoding-terminology\">read about character encoding in the HTML specification</a>.</p>\n<p><em>Note: to ensure that certain older browsers read the character encoding correctly, the entire character encoding declaration must be included somewhere within the first 512 characters of your document. It should also appear before any content-based elements (like the <code>&lt;title&gt;</code> element that appears later in our example)</em>.</p>\n<p>There’s much more we could write about this subject, but for now, we’re content to accept this simplified declaration and move on to the next part of our document.</p>\n<h2 id=\"theviewportmetaelement\">The Viewport Meta Element</h2>\n<p>The viewport meta element is a feature you&#8217;ll see in just about every HTML5 template. It&#8217;s important for responsive web design and mobile-first design:</p>\n<pre><code class=\"markup language-markup\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\r\n</code></pre>\n<p>This <code>&lt;meta&gt;</code> element includes two attributes that work together as a name/value set. In this case, the <code>name</code> is set to <code>viwport</code> and the value is <code>width=device-width, initial-scale=1</code>. This is used by mobile devices only. You&#8217;ll notice the value has two parts to it, described here:</p>\n<ul>\n<li><code>width=device-width</code>: the pixel width of the viewport that you want the website to be rendered at.</li>\n<li><code>initial-scale</code>: this should be a positive number between 0.0 and 10.0. A value of &#8220;1&#8221; indicates that there&#8217;s a 1:1 ratio between the device width and the viewport size.</li>\n</ul>\n<p>You can read up a little more on these meta element features <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name#standard_metadata_names_defined_in_other_specifications\">on MDN</a>, but for now just know that, in most cases, this meta element with these settings is best for mobile-first, responsive websites.</p>\n<h2 id=\"thetitledescriptionandauthor\">The <code>&lt;title&gt;</code>, <code>description</code>, and <code>author</code></h2>\n<p>The next section of the HTML template contains the following three lines:</p>\n<pre><code class=\"markup language-markup\">&lt;title&gt;A Basic HTML5 Template&lt;/title&gt;\r\n&lt;meta name=\"description\" content=\"A simple HTML5 Template for new projects.\"&gt;\r\n&lt;meta name=\"author\" content=\"SitePoint\"&gt;\r\n</code></pre>\n<p>These elements have been part of HTML for a long time, so there&#8217;s nothing too new here. The <code>&lt;title&gt;</code> is what&#8217;s displayed in the browser&#8217;s title bar (such as when you hover over a browser tab). This element is the only mandatory element inside the <code>&lt;head&gt;</code>.</p>\n<p>The other two are optional <code>&lt;meta&gt;</code> elements defining a description for SEO purposes along with an author. All elements inside <code>&lt;head&gt;</code> are optional with the exception of <code>&lt;title&gt;</code>. In fact, you can put <a href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element\">as many valid <code>&lt;meta&gt;</code> elements</a> in the <code>&lt;head&gt;</code> as you like.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/a-basic-html5-template/?utm_source=rss\">HTML5 Template: A Basic Boilerplate for Any Project</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/a-basic-html5-template/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=38462",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "HTML",
            "HTML & CSS"
        ],
        "dc:creator": [
            "Louis Lazaris"
        ],
        "pubDate": [
            "Wed, 23 Jun 2021 15:00:47 GMT"
        ],
        "metaDesc": [
            "Tired of building HTML5 templates from scratch? Learn the key elements of an HTML5 document, and grab our free, ready-to-use boilerplate."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "12 Best WordPress Themes for Your 2021 Projects"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/12-best-wordpress-themes-for-your-2021-projects/?utm_source=rss\"\n              title=\"12 Best WordPress Themes for Your 2021 Projects\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612411447wp-themes.jpg\"\n        alt=\"12 Best WordPress Themes for Your 2021 Projects\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612411447wp-themes-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612411447wp-themes.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><em>This sponsored article was created by our content partner, <a href=\"https://bawmedia.com\" rel=\"sponsored\">BAW Media</a>. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p><strong>Virtually any WordPress theme you choose will have its advantages and limitations. Naturally, you’ll want to look for a theme that has a maximum number of the former and few or none of the latter.</strong></p>\n<p>Finding the &#8220;best&#8221; among many is not without its challenges. Because there are so many popular WordPress themes on the market today, sifting through them to find exactly what you’re looking for can be a daunting task, not to mention a time-consuming one.</p>\n<p>The purpose of this article is to make the search easy for you. Here, we’re presenting you with 12 top WordPress themes for 2021 — more than one of which could be precisely the one for you.</p>\n<p>Instead of a lengthy search, the only problem you may encounter now is deciding among two or three great WordPress themes — unless, of course, there’s one that obviously stands out above the rest.</p>\n<p>That said, let’s give it a try.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/12-best-wordpress-themes-for-your-2021-projects/?utm_source=rss\">12 Best WordPress Themes for Your 2021 Projects</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/12-best-wordpress-themes-for-your-2021-projects/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180970",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "SitePoint Sponsors"
        ],
        "pubDate": [
            "Wed, 03 Feb 2021 14:00:51 GMT"
        ],
        "metaDesc": [
            "Need a fully-featured WordPress theme? Check out these 12 outstanding, powerful WordPress themes that will save you time and supercharge your next website."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Facundo Giuliani"
        ],
        "title": [
            "How To Implement Authentication In Next.js With Auth0"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/"
        ],
        "pubDate": [
            "Thu, 20 May 2021 11:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/"
        ],
        "description": [
            "“Authentication” is the action of validating that a user is who he or she claims to be. We usually do this by implementing a credentials system, like user/password, security questions, or even facial recognition.\n“Authorization” determines what a user can (or can’t) do. If we need to handle authentication and authorization in our web application, we will need a security platform or module. We can develop our own platform, implement it, and maintain it."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/implement-authentication-nextjs-auth0/\" />\n              <title>How To Implement Authentication In Next.js With Auth0</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>How To Implement Authentication In Next.js With Auth0</h1>\n                  \n                    \n                    <address>Facundo Giuliani</address>\n                  \n                  <time datetime=\"2021-05-20T11:00:00&#43;00:00\" class=\"op-published\">2021-05-20T11:00:00+00:00</time>\n                  <time datetime=\"2021-05-20T11:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>“Authentication” is the action of validating that a user is who he or she claims to be. We usually do this by implementing a credentials system, like user/password, security questions, or even facial recognition.</p>\n\n<p>“Authorization” determines what a user can (or can’t) do. If we need to handle authentication and authorization in our web application, we will need a security platform or module. We can develop our own platform, implement it, and maintain it. Or we can take the advantage of existing authentication and authorization platforms in the market that are offered as services.</p>\n\n<p>When evaluating whether it’s better for us to create our own platform, or to use a third-party service, there are some things that we should consider:</p>\n\n<ul>\n<li>Designing and creating authentication services is not our core skill. There are people working specially focused on security topics that can create better and more secure platforms than us;</li>\n<li>We can save time relying on an existing authentication platform and spend it adding value to the products and services that we care about;</li>\n<li>We don’t store sensitive information in our databases. We separate it from all the data involved in our apps;</li>\n<li>The tools third-party services offer have improved usability and performance, which makes it easier for us to administrate the users of our application.</li>\n</ul>\n\n<p>Considering these factors, we can say that relying on third-party authentication platforms can be easier, cheaper, and even more secure than creating our own security module.</p>\n\n<p>In this article, we will see how to implement authentication and authorization in our Next.js applications using one of the existing products in the market: Auth0.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p><p>Meet <a data-instant href=\"/the-smashing-newsletter/\"><strong>Smashing Email Newsletter</strong></a> with useful tips on front-end, design &amp; UX. Subscribe and <strong>get “Smart Interface Design Checklists”</strong> &mdash; a <strong>free PDF deck</strong> with 150+ questions to ask yourself when designing and building almost anything.</p><div><section class=\"nlbf\"><form action=\"//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0\" method=\"post\"><div class=\"nlbwrapper\"><label for=\"mce-EMAIL-hp\" class=\"sr-only\">Your (smashing) email</label><div class=\"nlbgroup\"><input type=\"email\" name=\"EMAIL\" class=\"nlbf-email\" id=\"mce-EMAIL-hp\" placeholder=\"Your email\">\n<input type=\"submit\" value=\"Meow!\" name=\"subscribe\" class=\"nlbf-button\"></div></div></form><style>.nlbf{display:flex;padding-bottom:.25em;padding-top:.5em;text-align:center;letter-spacing:-.5px;color:#fff;font-size:1.15em}.nlbgroup:hover{box-shadow:0 1px 7px -5px rgba(50,50,93,.25),0 3px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025)}.nlbf .nlbf-button,.nlbf .nlbf-email{flex-grow:1;flex-shrink:0;width:auto;margin:0;padding:.75em 1em;border:0;border-radius:11px;background:#fff;font-size:1em;box-shadow:none}.promo-box .nlbf-button:focus,.promo-box input.nlbf-email:active,.promo-box input.nlbf-email:focus{box-shadow:none}.nlbf-button:-ms-input-placeholder,.nlbf-email:-ms-input-placeholder{color:#777;font-style:italic}.nlbf-button::-webkit-input-placeholder,.nlbf-email::-webkit-input-placeholder{color:#777;font-style:italic}.nlbf-button:-ms-input-placeholder,.nlbf-button::-moz-placeholder,.nlbf-button::placeholder,.nlbf-email:-ms-input-placeholder,.nlbf-email::-moz-placeholder,.nlbf-email::placeholder{color:#777;font-style:italic}.nlbf .nlbf-button{transition:all .2s ease-in-out;color:#fff;background-color:#0168b8;font-weight:700;box-shadow:0 1px 1px rgba(0,0,0,.3);width:100%;border:0;border-left:1px solid #ddd;flex:2;border-top-left-radius:0;border-bottom-left-radius:0}.nlbf .nlbf-email{border-top-right-radius:0;border-bottom-right-radius:0;width:100%;flex:4;min-width:150px}@media all and (max-width:650px){.nlbf .nlbgroup{flex-wrap:wrap;box-shadow:none}.nlbf .nlbf-button,.nlbf .nlbf-email{border-radius:11px;border-left:none}.nlbf .nlbf-email{box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);min-width:100%}.nlbf .nlbf-button{margin-top:1em;box-shadow:0 1px 1px rgba(0,0,0,.5)}}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus,.nlbf .nlbf-button:hover{cursor:pointer;color:#fff;background-color:#0168b8;border-color:#dadada;box-shadow:0 1px 1px rgba(0,0,0,.3)}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus{outline:0!important;text-shadow:1px 1px 1px rgba(0,0,0,.3);box-shadow:inset 0 3px 3px rgba(0,0,0,.3)}.nlbgroup{display:flex;box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);border-radius:11px;transition:box-shadow .2s ease-in-out}.nlbwrapper{display:flex;flex-direction:column;justify-content:center}.nlbf form{width:100%}.nlbf .nlbgroup{margin:0}.nlbcaption{font-size:.9em;line-height:1.5em;color:#fff;border-radius:11px;padding:.5em 1em;display:inline-block;background-color:#0067b859;text-shadow:1px 1px 1px rgba(0,0,0,.3)}.wf-loaded-stage2 .nlbf .nlbf-button{font-family:Mija}</style></section><p class=\"mtn mbn\"><small class=\"promo-box__footer mtm block grey\"><em>Once a week. Useful tips on <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">front-end &amp; UX</a>. Trusted by 190.000 friendly folks.</em></small></p></div></p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-firechat.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"310\"\n\t\t\t\t\t\t\t\t\t\theight=\"400\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"what-is-auth0\">What Is Auth0?</h3>\n\n<p>It allows you to add security to apps developed using any programming language or technology.</p>\n\n<blockquote> “Auth0 is a flexible, drop-in solution to add authentication and authorization services to your applications.”<br /><br />&mdash; <a href=\"https://auth0.com/blog/developing-a-secure-api-with-nestjs-adding-authorization/\">Dan Arias</a>, auth0.com</blockquote>\n\n<p>Auth0 has several interesting features, such as:</p>\n\n<ul>\n<li><strong>Single Sign-On</strong>: Once you log into an application that uses Auth0, you won’t have to enter your credentials again when entering another one that also uses it. You will be automatically logged in to all of them;</li>\n<li><strong>Social login</strong>: Authenticate using your preferred social network profile;</li>\n<li><strong>Multi-Factor Authentication</strong>;</li>\n<li><strong>Multiple standard protocols</strong> are allowed, such as OpenID Connect, JSON Web Token, or OAuth 2.0;</li>\n<li><strong>Reporting and analytics tools</strong>.</li>\n</ul>\n\n<p>There is a free plan that you can use to start securing your web applications, covering up to 7000 monthly active users. You will start paying when the amount of users increases.</p>\n\n<p>Another cool thing about Auth0 is that we have a <a href=\"https://github.com/auth0/nextjs-auth0\">Next.js SDK</a> available to use in our app. With this library, created especially for Next.js, we can easily connect to the Auth0 API.</p>\n\n<h3 id=\"auth0-sdk-for-next-js\">Auth0 SDK For Next.js</h3>\n\n<p>As we mentioned before, Auth0 created (and maintains) a Next.js focused SDK, among other SDKs available to connect to the API using various programming languages. We just need to download the <a href=\"https://www.npmjs.com/package/@auth0/nextjs-auth0\">NPM package</a>, configure some details about our Auth0 account and connection, and we are good to go.</p>\n\n<p>This SDK gives us tools to implement authentication and authorization with both client-side and server-side methods, using API Routes on the backend and React Context with React Hooks on the frontend.</p>\n\n<p>Let’s see how some of them work in an example Next.js application.</p>\n\n<h3 id=\"example-next-js-app-using-auth0\">Example Next.js App Using Auth0</h3>\n\n<p>Let’s go back to our previous video platform example, and create a small app to show how to use Auth0 Next.js SDK. We will set up <a href=\"https://auth0.com/universal-login/\">Auth0’s Universal Login</a>. We will have some YouTube video URLs. They will be hidden under an authentication platform. Only registered users will be able to see the list of videos through our web application.</p>\n\n<p><strong>Note</strong>: <em>This article focuses on the configuration and use of Auth0 in your Next.js application. We won’t get into details like CSS styling or database usage. If you want to see the complete code of the example app, you can go to <a href=\"https://github.com/smashingmagazine/next-auth0-example\">this GitHub repository</a>.</em></p>\n\n<h4 id=\"create-auth0-account-and-configure-app-details\">Create Auth0 Account And Configure App Details</h4>\n\n<p>First of all, we need to create an Auth0 account using the <a href=\"https://auth0.com/signup\">Sign Up page</a>.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"597\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"creation of an Auth0 account using the Sign Up page\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bd629a09-ac90-4338-ac63-b1be242fc97d/1-authentication-authorization-next-js-auth0.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>After that, let’s go to the <a href=\"https://manage.auth0.com/\">Auth0 Dashboard</a>. Go to <strong>Applications</strong> and create a new app of type [&ldquo;Regular Web Applications&rdquo;].</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"515\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"creation of a new app of type &#39;Regular Web Applications&#39;.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1fcbac0b-b1a0-4ae2-9a86-29199c915284/2-authentication-authorization-next-js-auth0.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Now let’s go to the <strong>Settings</strong> tab of the application and, under the <strong>Application URIs</strong> section, configure the following details and save the changes:</p>\n\n<ul>\n<li><strong>Allowed Callback URLs</strong>: add <code>http://localhost:3000/api/auth/callback</code></li>\n<li><strong>Allowed Logout URLs</strong>: add <code>http://localhost:3000/</code></li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"628\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Settings tab of the application.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/104b4c0f-8c6b-48c9-b63f-b19743ab0a7e/4-authentication-authorization-next-js-auth0.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>By doing this, we are configuring the URL where we want to redirect the users after they login our site (Callback), and the URL where we redirect the users after they log out (Logout). We should add the production URLs when we deploy the final version of our app to the hosting server.</p>\n\n<p>Auth0 Dashboard has many configurations and customizations we can apply to our projects. We can change the type of authentication we use, the login/sign-up page, the data we request for the users, enable/disable new registrations, configure users&rsquo; databases, and so on.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4 id=\"create-next-js-app\">Create Next.js App</h4>\n\n<p>To create a brand new Next.js app, we will use <a href=\"https://www.npmjs.com/package/create-next-app\">create-next-app</a>, which sets up everything automatically for you. To create the project, run:</p>\n\n<pre><code class=\"language-bash\">npx create-next-app [name-of-the-app]\n</code></pre>\n\n<p>Or</p>\n\n<pre><code class=\"language-bash\">yarn create next-app [name-of-the-app]\n</code></pre>\n\n<p>To start the develop server locally and see the site just created in your browser, go to the new folder that you created:</p>\n\n<pre><code class=\"language-bash\">cd [name-of-the-app]</code></pre>\n\n<p>And run:</p>\n\n<pre><code class=\"language-bash\">npm run dev\n</code></pre>\n\n<p>Or</p>\n\n<pre><code class=\"language-bash\">yarn dev\n</code></pre>\n\n<h4 id=\"install-and-configure-the-auth0-next-js-sdk\">Install And Configure The Auth0 Next.js SDK</h4>\n\n<p>Let’s install the Auth0 Next.js SDK in our app:</p>\n\n<pre><code class=\"language-bash\">npm install @auth0/nextjs-auth0\n</code></pre>\n\n<p>Or</p>\n\n<pre><code class=\"language-bash\">yarn add @auth0/nextjs-auth0\n</code></pre>\n\n<p>Now, in our env.local file (or the environment variables menu of our hosting platform), let’s add these variables:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-bash\">AUTH0_SECRET=\"[A 32 characters secret used to encrypt the cookies]\"\nAUTH0_BASE_URL=\"http://localhost:3000\"\nAUTH0_ISSUER_BASE_URL=\"https://[Your tenant domain. Can be found in the Auth0 dashboard under settings]\"\nAUTH0_CLIENT_ID=\"[Can be found in the Auth0 dashboard under settings]\"\nAUTH0_CLIENT_SECRET=\"[Can be found in the Auth0 dashboard under settings]\"\n</code></pre>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"458\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"configuration options for the Auth0 Next.js SDK.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23ca996e-3e47-4acd-9855-9d7b5236c03b/3-authentication-authorization-next-js-auth0.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>If you want more configuration options, you can <a href=\"https://auth0.github.io/nextjs-auth0/modules/config.html\">take a look at the docs</a>.</p>\n\n<h4 id=\"create-the-dynamic-api-route\">Create the Dynamic API Route</h4>\n\n<p>Next.js offers a way to create serverless APIs: <a href=\"https://nextjs.org/docs/api-routes/introduction\">API Routes</a>. With this feature, we can create code that will be executed in every user request to our routes. We can define fixed routes, like <code>/api/index.js</code>. But we can also have <a href=\"https://nextjs.org/docs/api-routes/dynamic-api-routes\">dynamic API routes</a>, with params that we can use in our API routes code, like <code>/api/blog/[postId].js</code>.</p>\n\n<p>Let’s create the file <code>/pages/api/auth/[...auth0].js</code>, which will be a dynamic API route. Inside of the file, let’s import the <code>handleAuth</code> method from the Auth0 SDK, and export the result:</p>\n\n<pre><code class=\"language-javascript\">import { handleAuth } from '@auth0/nextjs-auth0';\n\nexport default handleAuth();</code></pre>\n\n<p>This will create and handle the following routes:</p>\n\n<ul>\n<li><code>/api/auth/login</code><br />\nTo perform login or sign up with Auth0.</li>\n<li><code>/api/auth/logout</code><br />\nTo log the user out.</li>\n<li><code>/api/auth/callback</code><br />\nTo redirect the user after a successful login.</li>\n<li><code>/api/auth/me</code><br />\nTo get the user profile information.</li>\n</ul>\n\n<p>And that would be the server-side part of our app. If we want to log in to our application or sign up for a new account, we should visit <code>http://localhost:3000/api/auth/login</code>. We should add a link to that route in our app. Same for logging out from our site: Add a link to <code>http://localhost:3000/api/auth/logout</code>.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4 id=\"add-the-userprovider-component\">Add The UserProvider Component</h4>\n\n<p>To handle user authentication state on the frontend of our web application we can use <code>UserProvider</code> React component, available on Auth0 Next.js SDK. the component uses <a href=\"https://reactjs.org/docs/context.html\">React Context</a> internally.</p>\n\n<p>If you want to access the user authentication state on a Component, you should wrap it with a <code>UserProvider</code> component.</p>\n\n<pre><code class=\"language-javascript\">&lt;UserProvider&gt;\n  &lt;Component {...props} /&gt;\n&lt;/UserProvider&gt;</code></pre>\n\n<p>If we want to access all of the pages in our application, we should add the component to the <code>pages/_app.js</code> file. <code>pages/_app.js</code> overrides the React <code>App</code> component. It’s a feature that Next.js exposes to customize our application. You can read more about it <a href=\"https://nextjs.org/docs/advanced-features/custom-app\">here</a>.</p>\n\n<pre><code class=\"language-javascript\">import React from 'react';\nimport { UserProvider } from '@auth0/nextjs-auth0';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;UserProvider&gt;\n      &lt;Component {...pageProps} /&gt;\n    &lt;/UserProvider&gt;\n  );\n}</code></pre>\n\n<p>We have a React hook <code>useUser</code> that accesses to the authentication state exposed by <code>UserProvider</code>. We can use it, for instance, to create a kind of welcome page. Let’s change the code of the <code>pages/index.js</code> file:</p>\n\n<pre><code class=\"language-javascript\">import { useUser } from \"@auth0/nextjs-auth0\";\n\nexport default () =&gt; {\n const { user, error, isLoading } = useUser();\n\n if (isLoading) return &lt;div&gt;Loading...&lt;/div&gt;;\n\n if (error) return &lt;div&gt;{error.message}&lt;/div&gt;;\n\n if (user) {\n   return (\n     &lt;div&gt;\n       &lt;h2&gt;{user.name}&lt;/h2&gt;\n       &lt;p&gt;{user.email}&lt;/p&gt;\n       &lt;a href=\"/api/auth/logout\"&gt;Logout&lt;/a&gt;\n     &lt;/div&gt;\n   );\n }\n return &lt;a href=\"/api/auth/login\"&gt;Login&lt;/a&gt;;\n};</code></pre>\n\n<p>The <code>user</code> object contains information related to the user’s identity. If the person visiting the page is not logged in (we don’t have a <code>user</code> object available), we will display a link to the login page. If the user is already authenticated, we will display <code>user.name</code> and <code>user.email</code> properties on the page, and a Logout link.</p>\n\n<p>Let’s create a videos.js file, with a list of three YouTube video URLs that will only be visible for registered people. To only allow logged users to see this page, we will use <code>withPageAuthRequired</code> method from the SDK.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import { withPageAuthRequired } from \"@auth0/nextjs-auth0\";\n\nexport default () =&gt; {\n return (\n   &lt;div&gt;\n     &lt;a href=\"https://www.youtube.com/watch?v=5qap5aO4i9A\"&gt;LoFi Music&lt;/a&gt;\n     &lt;a href=\"https://www.youtube.com/watch?v=fEvM-OUbaKs\"&gt;Jazz Music&lt;/a&gt;\n     &lt;a href=\"https://www.youtube.com/watch?v=XULUBg_ZcAU\"&gt;Piano Music&lt;/a&gt;\n   &lt;/div&gt;\n );\n};\n\nexport const getServerSideProps = withPageAuthRequired();</code></pre>\n</div>\n\n<p>Take into consideration that our web application allows any person to sign up for an account, using the Auth0 platform. The user can also re-use an existing Auth0 account, as we’re implementing Universal Login.</p>\n\n<p>We can create our own registration page to request more details about the user or add payment information to bill them monthly for our service. We can also use the methods exposed in the SDK to handle authorization in an automatic way.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>In this article, we saw how to secure our Next.js applications using Auth0, an authentication and authorization platform. We evaluate the benefits of using a third-party service for the authentication of our web applications compared to creating our own security platform. We created an example Next.js app and we secured it using Auth0 free plan and Auth0 Next.js SDK.</p>\n\n<p>If you want to deploy an Auth0 example application to <a href=\"https://vercel.com/\">Vercel</a>, you can do it <a href=\"https://github.com/vercel/next.js/tree/canary/examples/auth0\">here</a>.</p>\n\n<h4 id=\"further-reading-and-resources\">Further Reading And Resources</h4>\n\n<ul>\n<li><a href=\"https://github.com/auth0/nextjs-auth0#documentation\">Auth0 Next.js SDK</a> GitHub repository, Auth0, GitHub</li>\n<li>“<a href=\"https://auth0.com/blog/ultimate-guide-nextjs-authentication-auth0\">The Ultimate Guide To Next.js Authentication With Auth0</a>,” Sandrino Di Mattia, Auth0 Blog<br />\n<em>In our example app, we used server-side rendering, with API routes and a serverless approach. If you’re using Next.js for a static site, or a custom server to host your app, this article has some details about how to implement authentication.</em></li>\n<li>“<a href=\"https://auth0.com/docs/universal-login/new-experience\">New Universal Login Experience</a>,” Auth0 Universal Login, Auth0 Docs</li>\n<li>“<a href=\"https://auth0.com/docs/universal-login/universal-vs-embedded-login\">Centralized Universal Login vs. Embedded Login</a>,” Auth0 Universal Login, Auth0 Docs</li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, yk, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Inline to Menu Link Animation"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/23/inline-to-menu-link-animation/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Wed, 23 Jun 2021 11:15:17 +0000"
        ],
        "category": [
            "Playground",
            "animation",
            "link",
            "menu",
            "Navigation",
            "typography"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=55044",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>An experimental inline-to-menu-link animation based on a concept by Matthew Hall.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/23/inline-to-menu-link-animation/\">Inline to Menu Link Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>Inspired by this fantastic <a href=\"https://dribbble.com/shots/15501380-Image-Carousel\">Dribbble shot</a> by <a href=\"https://dribbble.com/mattkombo\">Matthew Hall</a>, I wanted to experiment with this kind of inline link to menu block animation. So here&#8217;s a little experimental effect that does exactly that and then shows some images. </p>\n\n\n\n<p>Here is Matthew&#8217;s original animation:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/Dribbble_Carousel_opt.mp4\"></video><figcaption><a href=\"https://dribbble.com/shots/15501380-Image-Carousel\">&#8220;Image Carousel&#8221;</a> by <a href=\"https://dribbble.com/mattkombo\">Matthew Hall</a></figcaption></figure>\n\n\n\n<p>With the focus on recreating the inline link to menu link animation, I also wanted to explore some kind of animations on the images. I found the staggering appearance the most fitting on here, but there are lots of possibilities.</p>\n\n\n\n<p>So, the initial content view looks as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink01.jpg\" alt=\"\" class=\"wp-image-55093\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink01.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink01-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink01-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>When clicking on one of the inline links, each link moves to the right while all the other text moves to the left and disappears:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink02.jpg\" alt=\"\" class=\"wp-image-55094\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink02.jpg 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink02-400x250.jpg 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink02-768x480.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>So here&#8217;s the result of the whole concept:</p>\n\n\n\n<figure class=\"wp-block-video\"><video autoplay controls loop src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink.mp4\"></video></figure>\n\n\n\n<p>I really hope you enjoy this and find it inspirational!</p>\n\n\n\n<p>Thanks for checking by and let me know your feedback <a href=\"https://twitter.com/crnacura\">@crnacura</a> or <a href=\"https://twitter.com/codrops\">@codrops</a>.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/23/inline-to-menu-link-animation/\">Inline to Menu Link Animation</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "enclosure": [
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/Dribbble_Carousel_opt.mp4",
                    "length": "1281957",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/InlinetoMenuLink.mp4",
                    "length": "2944592",
                    "type": "video/mp4"
                }
            }
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "Build a Web App with Modern JavaScript and Web Components"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/build-frameworkless-web-app-modern-javascript-web-components/?utm_source=rss\"\n              title=\"Build a Web App with Modern JavaScript and Web Components\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617580788framework-less-web-app.png\"\n        alt=\"Build a Web App with Modern JavaScript and Web Components\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617580788framework-less-web-app-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617580788framework-less-web-app.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>JavaScript in the browser has evolved. Developers who want to take advantage of the latest features have the option of going framework-less with less hassle. Options normally reserved to front-end frameworks, such as a component-based approach, is now feasible in plain old JavaScript.</strong></p>\n<p>In this take, I&#8217;ll showcase all the latest JavaScript features, using a UI that features author data with a grid and a search filter. To keep it simple, once a technique gets introduced, I&#8217;ll move on to the next technique so as not to belabor the point. For this reason, the UI will have an Add option, and a dropdown search filter. The author model will have three fields: name, email, and an optional topic. Form validation will be included mostly to show this framework-less technique without being thorough.</p>\n<p>The once plucky language has grown up with many modern features such as Proxies, import/export, the optional chain operator, and web components. This fits perfectly within the <a href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a>, because the app renders on the client via HTML and vanilla JavaScript.</p>\n<p>I&#8217;ll leave out the API to stay focused on the app, but I&#8217;ll point to where this integration can occur within the app.</p>\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<p>The app is a typical JavaScript app with two dependencies: an http-server and Bootstrap. The code will only run in the browser, so there&#8217;s no back end other than one to host static assets. The code is <a href=\"https://github.com/sitepoint-editors/framework-less-web-components\">up on GitHub</a> for you to play with.</p>\n<p>Assuming you have the <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">latest Node LTS installed</a> on the machine:</p>\n<pre><code class=\"shell language-shell\">mkdir framework-less-web-components\r\ncd framework-less-web-components\r\nnpm init\r\n</code></pre>\n<p>This should end up with a single <code>package.json</code> file where to put dependencies.</p>\n<p>To install the two dependencies:</p>\n<pre><code class=\"shell language-shell\">npm i http-server bootstrap@next --save-exact\r\n</code></pre>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/http-server\">http-server</a>: an HTTP server to host static assets in the Jamstack</li>\n<li><a href=\"https://www.npmjs.com/package/bootstrap\">Bootstrap</a>: a sleek, powerful set of CSS styles to ease web development</li>\n</ul>\n<p>If you feel <code>http-server</code> isn’t a dependency, but a requirement for this app to run, there&#8217;s the option to install it globally via <code>npm i -g http-server</code>. Either way, this dependency isn&#8217;t shipped to the client, but only serves static assets to the client.</p>\n<p>Open the <code>package.json</code> file and set the entry point via <code>\"start\": \"http-server\"</code> under <code>scripts</code>. Go ahead and fire up the app via <code>npm start</code>, which will make <code>http://localhost:8080/</code> available to the browser. Any <code>index.html</code> file put in the root folder gets automatically hosted by the HTTP server. All you do is a refresh on the page to get the latest bits.</p>\n<p>The folder structure looks like this:</p>\n<pre><code class=\"text language-text\">┳\r\n┣━┓ components\r\n┃ ┣━━ App.js\r\n┃ ┣━━ AuthorForm.js\r\n┃ ┣━━ AuthorGrid.js\r\n┃ ┗━━ ObservableElement.js\r\n┣━┓ model\r\n┃ ┣━━ actions.js\r\n┃ ┗━━ observable.js\r\n┣━━ index.html\r\n┣━━ index.js\r\n┗━━ package.json\r\n</code></pre>\n<p>This is what each folder is meant for:</p>\n<ul>\n<li><code>components</code>: HTML web components with an <code>App.js</code> and custom elements that inherit from <code>ObservableElement.js</code></li>\n<li><code>model</code>: app state and mutations that listen for UI state changes</li>\n<li><code>index.html</code>: main static asset file that can be hosted anywhere</li>\n</ul>\n<p>To create the folders and files in each folder, run the following:</p>\n<pre><code class=\"shell language-shell\">mkdir components model\r\ntouch components/App.js components/AuthorForm.js components/AuthorGrid.js components/ObservableElement.js model/actions.js model/observable.js index.html index.js\r\n</code></pre>\n<h2 id=\"integratewebcomponents\">Integrate Web Components</h2>\n<p>In a nutshell, web components are custom HTML elements. They define the custom element that can be put in the markup, and declare a callback method that renders the component.</p>\n<p>Here&#8217;s a quick rundown of a custom web component:</p>\n<pre><code class=\"javascript language-javascript\">class HelloWorldComponent extends HTMLElement {\r\n  connectedCallback() { // callback method\r\n    this.innerHTML = 'Hello, World!'\r\n  }\r\n}\r\n\r\n// Define the custom element\r\nwindow.customElements.define('hello-world', HelloWorldComponent)\r\n\r\n// The markup can use this custom web component via:\r\n// &lt;hello-world&gt;&lt;/hello-world&gt;\r\n</code></pre>\n<p>If you feel you need a more gentle introduction to web components, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements\">MDN article</a>. At first, they may feel magical, but a good grasp of the callback method makes this perfectly clear.</p>\n<p>The main <code>index.html</code> static page declares the HTML web components. I&#8217;ll use Bootstrap to style HTML elements and bring in the <code>index.js</code> asset that becomes the app’s main entry point and gateway into JavaScript.</p>\n<p>Bust open the <code>index.html</code> file and put this in place:</p>\n<pre><code class=\"markup language-markup\">&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\r\n  &lt;link href=\"node_modules/bootstrap/dist/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\r\n  &lt;title&gt;Framework-less Components&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;template id=\"html-app\"&gt;\r\n  &lt;div class=\"container\"&gt;\r\n    &lt;h1&gt;Authors&lt;/h1&gt;\r\n    &lt;author-form&gt;&lt;/author-form&gt;\r\n    &lt;author-grid&gt;&lt;/author-grid&gt;\r\n    &lt;footer class=\"fixed-bottom small\"&gt;\r\n      &lt;p class=\"text-center mb-0\"&gt;\r\n        Hit Enter to add an author entry\r\n      &lt;/p&gt;\r\n      &lt;p class=\"text-center small\"&gt;\r\n        Created with ❤ By C R\r\n      &lt;/p&gt;\r\n    &lt;/footer&gt;\r\n  &lt;/div&gt;\r\n&lt;/template&gt;\r\n&lt;template id=\"author-form\"&gt;\r\n  &lt;form&gt;\r\n    &lt;div class=\"row mt-4\"&gt;\r\n      &lt;div class=\"col\"&gt;\r\n        &lt;input type=\"text\" class=\"form-control\" placeholder=\"Name\" aria-label=\"Name\"&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"col\"&gt;\r\n        &lt;input type=\"email\" class=\"form-control\" placeholder=\"Email\" aria-label=\"Email\"&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"col\"&gt;\r\n        &lt;select class=\"form-select\" aria-label=\"Topic\"&gt;\r\n          &lt;option&gt;Topic&lt;/option&gt;\r\n          &lt;option&gt;JavaScript&lt;/option&gt;\r\n          &lt;option&gt;HTMLElement&lt;/option&gt;\r\n          &lt;option&gt;ES7+&lt;/option&gt;\r\n        &lt;/select&gt;\r\n      &lt;/div&gt;\r\n      &lt;div class=\"col\"&gt;\r\n        &lt;select class=\"form-select search\" aria-label=\"Search\"&gt;\r\n          &lt;option&gt;Search by&lt;/option&gt;\r\n          &lt;option&gt;All&lt;/option&gt;\r\n          &lt;option&gt;JavaScript&lt;/option&gt;\r\n          &lt;option&gt;HTMLElement&lt;/option&gt;\r\n          &lt;option&gt;ES7+&lt;/option&gt;\r\n        &lt;/select&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  &lt;/form&gt;\r\n&lt;/template&gt;\r\n&lt;template id=\"author-grid\"&gt;\r\n  &lt;table class=\"table mt-4\"&gt;\r\n    &lt;thead&gt;\r\n      &lt;tr&gt;\r\n        &lt;th&gt;Name&lt;/th&gt;\r\n        &lt;th&gt;Email&lt;/th&gt;\r\n        &lt;th&gt;Topic&lt;/th&gt;\r\n      &lt;/tr&gt;\r\n    &lt;/thead&gt;\r\n    &lt;tbody&gt;\r\n    &lt;/tbody&gt;\r\n  &lt;/table&gt;\r\n&lt;/template&gt;\r\n&lt;template id=\"author-row\"&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;&lt;/td&gt;\r\n    &lt;td&gt;&lt;/td&gt;\r\n    &lt;td&gt;&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/template&gt;\r\n&lt;nav class=\"navbar navbar-expand-lg navbar-light bg-dark\"&gt;\r\n  &lt;div class=\"container-fluid\"&gt;\r\n    &lt;a class=\"navbar-brand text-light\" href=\"/\"&gt;\r\n      Framework-less Components with Observables\r\n    &lt;/a&gt;\r\n  &lt;/div&gt;\r\n&lt;/nav&gt;\r\n&lt;html-app&gt;&lt;/html-app&gt;\r\n&lt;script type=\"module\" src=\"index.js\"&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>Pay close attention to the <code>script</code> tag with a <code>type</code> attribute set to <code>module</code>. This is what unlocks import/export in vanilla JavaScript in the browser. The <code>template</code> tag with an <code>id</code> defines the HTML elements that enable web components. I’ve broken up the app into three main components: <code>html-app</code>, <code>author-form</code>, and <code>author-grid</code>. Because nothing’s defined in JavaScript yet, the app will render the navigation bar without any of the custom HTML tags.</p>\n<p>To start off easy, place this in <code>ObservableElement.js</code>. It&#8217;s the parent element to all the author components:</p>\n<pre><code class=\"javascript language-javascript\">export default class ObservableElement extends HTMLElement {\r\n}\r\n</code></pre>\n<p>Then, define the <code>html-app</code> component in <code>App.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">export default class App extends HTMLElement {\r\n  connectedCallback() {\r\n    this.template = document\r\n      .getElementById('html-app')\r\n\r\n    window.requestAnimationFrame(() =&gt; {\r\n      const content = this.template\r\n        .content\r\n        .firstElementChild\r\n        .cloneNode(true)\r\n\r\n      this.appendChild(content)\r\n    })\r\n  }\r\n}\r\n</code></pre>\n<p>Note the use of <code>export default</code> to declare JavaScript classes. This is the capability I enabled via the <code>module</code> type when I referenced the main script file. To use web components, inherit from <code>HTMLElement</code> and define the <code>connectedCallback</code> class method. The browser takes care of the rest. I’m using <code>requestAnimationFrame</code> to render the main template before the next repaint in the browser.</p>\n<p>This is a common technique you’ll see with web components. First, grab the template via an element ID. Then, clone the template via <code>cloneNode</code>. Lastly, <code>appendChild</code> the new <code>content</code> into the DOM. If you run into any problems where web components don’t render, be sure to check that the cloned content got appended to the DOM first.</p>\n<p>Next, define the <code>AuthorGrid.js</code> web component. This one will follow a similar pattern and manipulate the DOM a bit:</p>\n<pre><code class=\"javascript language-javascript\">import ObservableElement from './ObservableElement.js'\r\n\r\nexport default class AuthorGrid extends ObservableElement {\r\n  connectedCallback() {\r\n    this.template = document\r\n      .getElementById('author-grid')\r\n    this.rowTemplate = document\r\n      .getElementById('author-row')\r\n    const content = this.template\r\n      .content\r\n      .firstElementChild\r\n      .cloneNode(true)\r\n    this.appendChild(content)\r\n\r\n    this.table = this.querySelector('table')\r\n    this.updateContent()\r\n  }\r\n\r\n  updateContent() {\r\n    this.table.style.display =\r\n      (this.authors?.length ?? 0) === 0\r\n        ? 'none'\r\n        : ''\r\n\r\n    this.table\r\n      .querySelectorAll('tbody tr')\r\n      .forEach(r =&gt; r.remove())\r\n  }\r\n}\r\n</code></pre>\n<p>I defined the main <code>this.table</code> element with a <code>querySelector</code>. Because this is a class, it&#8217;s possible to keep a nice reference to the target element by using <code>this</code>. The <code>updateContent</code> method mostly nukes the main table when there are no authors to show in the grid. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">optional chaining operator</a> (<code>?.</code>) and null coalescing takes care of setting the <code>display</code> style to none.</p>\n<p>Take a look at the <code>import</code> statement, because it brings in the dependency with a fully qualified extension in the file name. If you&#8217;re used to Node development, this is where it differs from the browser implementation, which follows the standard, where this does require a file extension like <code>.js</code>. Learn from me and be sure to put the file extension while working in the browser.</p>\n<p>Next, the <code>AuthorForm.js</code> component has two main parts: render the HTML and wire up element events to the form.</p>\n<p>To render the form, open <code>AuthorForm.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">import ObservableElement from './ObservableElement.js'\r\n\r\nexport default class AuthorForm extends ObservableElement {\r\n  connectedCallback() {\r\n    this.template = document\r\n      .getElementById('author-form')\r\n    const content = this.template\r\n      .content\r\n      .firstElementChild\r\n      .cloneNode(true)\r\n\r\n    this.appendChild(content)\r\n\r\n    this.form = this.querySelector('form')\r\n    this.form.querySelector('input').focus()\r\n  }\r\n\r\n  resetForm(inputs) {\r\n    inputs.forEach(i =&gt; {\r\n      i.value = ''\r\n      i.classList.remove('is-valid')\r\n    })\r\n    inputs[0].focus()\r\n  }\r\n}\r\n</code></pre>\n<p>The <code>focus</code> guides the user to start typing on the first input element available in the form. Be sure to place any DOM selectors <em>after</em> the <code>appendChild</code>, as otherwise this technique won’t work. The <code>resetForm</code> isn’t used right now but will reset the state of the form when the user presses Enter.</p>\n<p>Wire up events via <code>addEventListener</code> by appending this code inside the <code>connectedCallback</code> method. This can be added to the very end of the <code>connectedCallback</code> method:</p>\n<pre><code class=\"javascript language-javascript\">this.form\r\n  .addEventListener('keypress', e =&gt; {\r\n    if (e.key === 'Enter') {\r\n      const inputs = this.form.querySelectorAll('input')\r\n      const select = this.form.querySelector('select')\r\n\r\n      console.log('Pressed Enter: ' +\r\n        inputs[0].value + '|' +\r\n        inputs[1].value + '|' +\r\n        (select.value === 'Topic' ? '' : select.value))\r\n\r\n      this.resetForm(inputs)\r\n    }\r\n  })\r\n\r\nthis.form\r\n  .addEventListener('change', e =&gt; {\r\n    if (e.target.matches('select.search')\r\n      &amp;&amp; e.target.value !== 'Search by') {\r\n      console.log('Filter by: ' + e.target.value)\r\n    }\r\n  })\r\n</code></pre>\n<p>These are typical event listeners that get attached to the <code>this.form</code> element in the DOM. The <code>change</code> event uses event delegation to listen for all change events in the form but targets only the <code>select.search</code> element. This is an effective way to delegate a single event to as many target elements in the parent element. With this in place, typing anything in the form and hitting Enter resets the form back to zero state.</p>\n<p>To get these web components to render on the client, open <code>index.js</code> and put this in:</p>\n<pre><code class=\"javascript language-javascript\">import AuthorForm from './components/AuthorForm.js'\r\nimport AuthorGrid from './components/AuthorGrid.js'\r\nimport App from './components/App.js'\r\n\r\nwindow.customElements.define('author-form', AuthorForm)\r\nwindow.customElements.define('author-grid', AuthorGrid)\r\nwindow.customElements.define('html-app', App)\r\n</code></pre>\n<p>Feel free to refresh the page in the browser now and play with the UI. Open up your developer tools and look at the console messages as you click and type in the form. Pressing the <kbd>Tab</kbd> key should help you navigate between input elements in the HTML document.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/build-frameworkless-web-app-modern-javascript-web-components/?utm_source=rss\">Build a Web App with Modern JavaScript and Web Components</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/build-frameworkless-web-app-modern-javascript-web-components/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182013",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Camilo Reyes"
        ],
        "pubDate": [
            "Sun, 04 Apr 2021 16:00:00 GMT"
        ],
        "metaDesc": [
            "Web apps don't require a JS framework! Learn how to build a feature-rich, lightweight and dependency-free web app with web components and observables."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "7 Reasons NOT to Use a Static Site Generator"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/7-reasons-not-use-static-site-generator/?utm_source=rss\"\n              title=\"7 Reasons NOT to Use a Static Site Generator\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1620094934ssg3_result_1200.jpg\"\n        alt=\"7 Reasons NOT to Use a Static Site Generator\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1620094934ssg3_result_1200-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1620094934ssg3_result_1200-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1620094934ssg3_result_1200-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1620094934ssg3_result_1200.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Static site generators (SSGs) are popular and offer many benefits, but this article discusses reasons why they may not be a suitable replacement for your content management system (CMS).</strong></p>\n<p>In my <a href=\"https://www.sitepoint.com/7-reasons-use-static-site-generator/\">previous article</a>, we discussed how your site could benefit from using a static site generator:</p>\n<ul>\n<li>A <strong>static site</strong> is a collection of pages contained in basic HTML files. You could hand-write these in a text editor, but managing assets and repeated elements such as navigation can become problematic.</li>\n<li>A <strong>content management system</strong> stores page content in a database and provides facilities to edit and apply themes. Management becomes easier at the expense of flexibility, performance, server requirements, security, and backups.</li>\n<li>A <strong>static site generator</strong> is a compromise between using a hand-coded static site and a full CMS. You generate the full site once using raw data (such as Markdown files) and templates. The resulting set of files is transferred to your live server.</li>\n<li>The term &#8220;Jamstack&#8221; (JavaScript, APIs, and Markup) is used in relation to static sites. It refers to the rise in frameworks, serverless functions, and associated tools which generate static files but allow complex interactivity to be added.</li>\n</ul>\n<p>Popular static site generators include <a href=\"https://jekyllrb.com/\">Jekyll</a>, <a href=\"https://11ty.dev/\">Eleventy</a>, <a href=\"http://gatsbyjs.org/\">Gatsby</a>, <a href=\"http://gohugo.io/\">Hugo</a>, and <a href=\"http://www.metalsmith.io/\">Metalsmith</a>. SSGs are available for most languages; see <a href=\"http://www.staticgen.com/\">StaticGen</a> for many more.</p>\n<p>SSGs appear to offer the benefits of both CMS and static worlds, but they may not be suitable for every project &hellip;</p>\n<h2 id=\"1youreonyourown\">1. You&#8217;re On Your Own</h2>\n<p>You won&#8217;t get far using a static site generator without some development expertise. The process is more difficult than using a CMS, there are fewer resources, and you could struggle to find pre-built plugins and templates.</p>\n<p>Contrast that with WordPress. A non-technical user may require installation assistance but, once that&#8217;s complete, they can edit a site and install one of the many thousands of themes and plugins available. They may not have the best bespoke website, but they&#8217;re running with minimal intervention.</p>\n<h2 id=\"2choiceparalysis\">2. Choice Paralysis</h2>\n<p>There are many <a href=\"http://www.staticgen.com/\">static site generators</a>, but even the most popular tools are used by a tiny proportion of the web community. You&#8217;ll need time to research, investigate, and evaluate the options. One of the first SSGs was the Ruby-based <a href=\"http://jekyllrb.com/\">Jekyll</a> but, while you don&#8217;t necessarily require Ruby expertise, it will help if you&#8217;ve used the language before.</p>\n<p>There are many CMSs, but there&#8217;s one obvious choice: <em>WordPress</em>. It powers <a href=\"https://w3techs.com/technologies/details/cm-wordpress\">more than 40% of the Web</a>, so help is abundant. Again, it will help if you have some PHP experience, but even a non-developer can create a reasonable website using off-the-shelf themes and plugins.</p>\n<h2 id=\"3theinitialsetuptime\">3. The Initial Setup Time</h2>\n<p>Creating your first static site will take time. You&#8217;ll need to learn the build process, and much of the template code will need to be developed. Deployment scripts may also be necessary.</p>\n<p>Developing a custom CMS theme can also be complicated, but pre-built templates are available and assistance is easier to find. Further development may not be required following the initial installation.</p>\n<h2 id=\"4noadministrationinterface\">4. No Administration Interface</h2>\n<p>Clients may be cautious when faced with a complex CMS interface. Asking them to create and edit a set of Markdown files may terrify many. You can make the process easier by perhaps:</p>\n<ul>\n<li>using their existing CMS as an SSG data source, or</li>\n<li>providing simpler workflows, such as editing Git-based files in <a href=\"https://stackedit.io/\">StackEdit</a> or <a href=\"https://hackmd.io/\">Hackmd.io</a>.</li>\n</ul>\n<p>But this will further impact your initial development time.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/7-reasons-not-use-static-site-generator/?utm_source=rss\">7 Reasons NOT to Use a Static Site Generator</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/7-reasons-not-use-static-site-generator/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=126689",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Content",
            "Open Source",
            "Software",
            "Web",
            "WordPress"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Wed, 05 May 2021 16:00:21 GMT"
        ],
        "metaDesc": [
            "Static sites can have benefits, but they aren't right for every project! Learn seven reasons why an SSG might not be the best choice for your next project."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "10 Web Developer Resumé Tweaks to Get More Interviews"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/10-web-developer-resume-tweaks-to-get-more-interviews/?utm_source=rss\"\n              title=\"10 Web Developer Resumé Tweaks to Get More Interviews\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613001634dev-job-interview.png\"\n        alt=\"10 Web Developer Resumé Tweaks to Get More Interviews\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613001634dev-job-interview-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613001634dev-job-interview.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>There’s no shortage of <a style=\"font-weight:bold\" href=\"https://www.sitepoint.com/jobs/search?query=web%20developer\">remote web development jobs</a>, especially at a time when so many companies have made the shift to remote working. But without a strong resumé, your chances of landing a developer job interview are reduced, or worse, non-existent.</strong> </p>\n<p>In this article, we cover ten simple tweaks you can make to your resumé in order to improve your chances of being invited to an interview.</p>\n<h2 id=\"1resumlinks\">1. Resumé Links</h2>\n<p>Add links in your resumé to your profile on platforms such as GitHub, Stack Overflow, or HackerRank, that prove your coding abilities and experience. Let your public code tell the recruiter/potential employer all about you. </p>\n<h2 id=\"2tailoringyourresum\">2. Tailoring Your Resumé</h2>\n<p><em>Tailor your resumé</em> to each specific job you’re applying for. You don’t have to completely redo the resumé each time, but investing a few minutes each time to add specific terminology used in the job description can boost your chances of getting called for an interview. For instance, Google, Facebook and Netflix have their own criteria, with a focus in the terminology on <em>code optimization, security, or high-availability</em>.</p>\n<h2 id=\"3detailyourskills\">3. Detail Your Skills</h2>\n<p>Provide detailed descriptions of the key tech skills required by the company. For example:</p>\n<ul>\n<li>MySQL (stored procedures, caching, logging, replication)</li>\n<li>CSS (sprites, styled-components, scroll snapping, text animations)</li>\n</ul>\n<p>The point here is to highlight both the depth and breadth of your knowledge, and hence your ability to fulfill their needs.</p>\n<h2 id=\"4detailyourimpact\">4. Detail Your Impact</h2>\n<p>Don’t just describe your responsibilities. Instead, list the <em>concrete ways in which you had an impact on every project</em>. Employers look for people who can deliver results, and they want to see examples of how you’ve done this in the past. </p>\n<p>Focus on the impact itself. The &#8220;what” is so much more impactful than the &#8220;how&#8221; (although both are important). Back up your statements with <em>numbers</em> and metrics wherever possible. </p>\n<p>For example: </p>\n<blockquote>\n<p>Increased test coverage to 60% with RSpec.</p>\n</blockquote>\n<blockquote>\n<p>Improved monitoring, failure recovery, and observability of all systems by migrating code to a Kubernetes cluster.</p>\n</blockquote>\n<p>Your ability to deliver results is what can persuade your potential employer to invite you for an interview.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/10-web-developer-resume-tweaks-to-get-more-interviews/?utm_source=rss\">10 Web Developer Resumé Tweaks to Get More Interviews</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/10-web-developer-resume-tweaks-to-get-more-interviews/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181061",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Andrew Stetsenko"
        ],
        "pubDate": [
            "Wed, 10 Feb 2021 15:00:33 GMT"
        ],
        "metaDesc": [
            "Not landing as many job interviews as you hoped? Learn these ten simple resumé tweaks that will improve your chances of getting a developer job interview."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Demystifying JavaScript Variable Scope and Hoisting"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/demystifying-javascript-variable-scope-hoisting/?utm_source=rss\"\n              title=\"Demystifying JavaScript Variable Scope and Hoisting\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2014/12/1615853674javascript-scope.jpg\"\n        alt=\"Demystifying JavaScript Variable Scope and Hoisting\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2014/12/1615853674javascript-scope-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2014/12/1615853674javascript-scope.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Storing values in variables is a fundamental concept in programming. A variable&#8217;s &#8220;scope&#8221; determines when it is and isn&#8217;t available throughout your program. Understanding variable scope in JavaScript is one of the keys to building a solid foundation in the language.</strong></p>\n<p>This article will explain how JavaScript’s scoping system works. You&#8217;ll learn about the different ways to declare variables, the differences between local scope and global scope, and about something called &#8220;hoisting&#8221; — a JavaScript quirk that can turn an innocent-looking variable declaration into a subtle bug.</p>\n<h2 id=\"variablescope\">Variable Scope</h2>\n<p>In JavaScript, the scope of a variable is controlled by the location of the variable declaration, and it defines the part of the program where a particular variable is accessible.</p>\n<p>Currently, there are <strong>three</strong> ways to declare a variable in JavaScript: by using the old <code>var</code> keyword, and by using the new <code>let</code> and <code>const</code> keywords. Prior to ES6, using the <code>var</code> keyword was the only way to declare a variable, but now we can use <code>let</code> and <code>const</code>, which have stricter rules and make the code less error prone. We&#8217;ll explore the differences between all three keywords below.</p>\n<p>Scoping rules vary from language to language. JavaScript has <strong>two</strong> scopes: <em>global</em> and <em>local</em>. Local scope has two variations: the old <em>function scope</em>, and the new <em>block scope</em> introduced with ES6. It&#8217;s worth noting that function scope is actually a special type of a block scope. </p>\n<h3 id=\"globalscope\">Global Scope</h3>\n<p>In a script, the outermost scope is the global scope. Any variables declared in this scope become global variables and are accessible from anywhere in the program:</p>\n<pre><code class=\"javascript language-javascript\">// Global Scope\r\n\r\nconst name = \"Monique\";\r\n\r\nfunction sayHi() {\r\n  console.log(`Hi ${name}`);\r\n}\r\n\r\nsayHi();\r\n// Hi Monique\r\n</code></pre>\n<p>As this simple example shows, the variable <code>name</code> is global. It&#8217;s defined in the global scope, and is accessible throughout the program. </p>\n<p>But as handy as this might seem, the use of global variables is discouraged in JavaScript. This is, for example, because they can potentially be overwritten by other scripts, or from elsewhere in your program. </p>\n<h3 id=\"localscope\">Local Scope</h3>\n<p>Any variables declared inside a block belong to that particular block and become local variables.</p>\n<p>A function in JavaScript defines a scope for variables declared using <code>var</code>, <code>let</code> and <code>const</code>. Any variable declared within that function is only accessible from that function and any nested functions. </p>\n<p>A code block (<code>if</code>, <code>for</code>, etc.) defines a scope only for variables declared with the  <code>let</code> and <code>const</code> keywords. The <code>var</code> keyword is limited to function scope, meaning that new scope can only be created inside functions. </p>\n<p>The <code>let</code> and <code>const</code> keywords have block scope, which creates a new, local scope for any block where they&#8217;re declared. You can also define standalone code blocks in JavaScript, and they similarly delimit a scope:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  // standalone block scope\r\n}\r\n</code></pre>\n<p>Function and block scopes can be nested. In such a situation, with multiple nested scopes, a variable is accessible within its own scope or from inner scope. But outside of its scope, the variable is inaccessible.</p>\n<h2 id=\"asimpleexampletohelpvisualizescope\">A Simple Example to Help Visualize Scope</h2>\n<p>To make things clear, let&#8217;s use a simple metaphor. Every country in our world has frontiers. Everything inside these frontiers belongs to the country&#8217;s scope. In every country there are many cities, and each one of them has its own city&#8217;s scope. The countries and cities are just like JavaScript functions or blocks. They have their local scopes. The same is true for the continents. Although they are huge in size, they also can be defined as locales. </p>\n<p>On the other hand, the world&#8217;s oceans can&#8217;t be defined as having local scope, because they actually wrap all local objects — continents, countries, and cities — and thus, their scope is defined as global. Let&#8217;s visualize this in the next example:</p>\n<pre><code class=\"javascript language-javascript\">var locales = {\r\n  europe: function() {          // The Europe continent's local scope\r\n    var myFriend = \"Monique\";\r\n\r\n    var france = function() {   // France country's local scope\r\n      var paris = function() {  // The Paris city's local scope\r\n        console.log(myFriend);  // output: Monique\r\n      };\r\n\r\n      paris();\r\n    };\r\n\r\n    france();\r\n  }\r\n};\r\n\r\nlocales.europe();\r\n</code></pre>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"bGBJeoL\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Variable Scope: 1\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/bGBJeoL\"><br />\nVariable Scope: 1</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Here, the <code>myFriend</code> variable is available from the <code>paris</code> function, as it was defined in the <code>france</code> function&#8217;s outer scope. If we swap the <code>myFriend</code> variable and the console statement, we&#8217;ll get <code>ReferenceError: myFriend is not defined</code>, because we can&#8217;t reach the inner scope from the outer scope.</p>\n<p>Now that we understand what local and global scopes are, and how they&#8217;re created, it&#8217;s time to learn how the JavaScript interpreter uses them to find a particular variable.</p>\n<p>Back to the given metaphor, let&#8217;s say I want to find a friend of mine whose name is Monique. I know that she lives in Paris, so I start my searching from there. When I can&#8217;t find her in Paris, I go one level up and expand my searching in all of France. But again, she&#8217;s not there. Next, I expand my searching again by going another level up. Finally, I find her in Italy, which in our case is the local scope of Europe.</p>\n<p>In the previous example, my friend Monique is represented by the variable <code>myFriend</code>. In the last line we call the <code>europe()</code> function, which calls <code>france()</code>, and finally when the <code>paris()</code> function is called, the searching begins. The JavaScript interpreter works from the currently executing scope and works its way out until it finds the variable in question. If the variable is not found in any scope, an exception is thrown.</p>\n<p>This type of lookup is called <a href=\"http://en.wikipedia.org/wiki/Lexical_scoping#Lexical_scoping\">lexical (static) scope</a>. The static structure of a program determines the variable scope. The scope of a variable is defined by its location within the source code, and nested functions have access to variables declared in their outer scope. No matter where a function is called from, or even how it&#8217;s called, its lexical scope depends only on where the function was declared.</p>\n<p>Now let&#8217;s see how the new block scope works:</p>\n<pre><code class=\"javascript language-javascript\">function testScope(n) {\r\n  if (true) {\r\n    const greeting = 'Hello';\r\n    let name = n;\r\n    console.log(greeting + \" \" + name); // output: Hello [name]\r\n  }\r\n  console.log(greeting + \" \" + name); // output: ReferenceError: greeting is not defined\r\n}\r\n\r\ntestScope('David');   \r\n</code></pre>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"LYbvZeG\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Variable Scope: 2\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/LYbvZeG\"><br />\nVariable Scope: 2</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>In this example, we can see that the <code>greeting</code> and <code>name</code> variables declared with <code>const</code> and <code>let</code> are inaccessible outside the <code>if</code> block.</p>\n<p>Let&#8217;s now replace the <code>const</code> and <code>let</code> with <code>var</code> and see what happens:</p>\n<pre><code class=\"javascript language-javascript\">function testScope(n) {\r\n  if (true) {\r\n    var greeting = 'Hello';\r\n    var name = n;\r\n    console.log(greeting + \" \" + name); // output: Hello [name]\r\n  }\r\n  console.log(greeting + \" \" + name); // output: Hello [name]\r\n}\r\n\r\ntestScope('David');\r\n</code></pre>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"qBqwNxO\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Variable Scope: 3\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/qBqwNxO\"><br />\nVariable Scope: 3</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>As you can see, when we use the <code>var</code> keyword the variables are reachable in the entire function scope.</p>\n<p>In JavaScript, variables with the same name can be specified at multiple layers of nested scope. In such a situation, local variables gain priority over global variables. If you declare a local variable and a global variable with the same name, the local variable will take precedence when you use it inside a function or block. This type of behavior is called <strong>shadowing</strong>. Simply put, the inner variable shadows the outer.</p>\n<p>That&#8217;s the exact mechanism used when a JavaScript interpreter is trying to find a particular variable. It starts at the innermost scope being executed at the time, and continues until the first match is found, no matter whether there are other variables with the same name in the outer levels or not. Let&#8217;s see an example:</p>\n<pre><code class=\"javascript language-javascript\">var test = \"I'm global\";\r\n\r\nfunction testScope() {\r\n  var test = \"I'm local\";\r\n\r\n  console.log (test);     \r\n}\r\n\r\ntestScope();           // output: I'm local\r\n\r\nconsole.log(test);     // output: I'm global\r\n</code></pre>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"MWbReQL\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Variable Scope: 4\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/MWbReQL\"><br />\nVariable Scope: 4</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Even with the same name, the local variable doesn&#8217;t overwrite the global one after the execution of the <code>testScope()</code> function. But this is not always the case. Let&#8217;s consider this:</p>\n<pre><code class=\"javascript language-javascript\">var test = \"I'm global\";\r\n\r\nfunction testScope() {\r\n  test = \"I'm local\";\r\n\r\n  console.log(test);     \r\n}\r\n\r\nconsole.log(test);     // output: I'm global\r\n\r\ntestScope();           // output: I'm local\r\n\r\nconsole.log(test);     // output: I'm local (the global variable is reassigned)\r\n</code></pre>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"vYyMKRx\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Variable Scope: 5\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/vYyMKRx\"><br />\nVariable Scope: 5</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>This time, the local variable <code>test</code> overwrites the global variable with the same name. When we run the code inside the <code>testScope()</code> function, the global variable is reassigned. If a local variable is assigned without first being declared with the <code>var</code> keyword, it becomes a global variable. To avoid such unwanted behavior, you should always declare your local variables before you use them. Any variable declared with the <code>var</code> keyword inside a function is a local variable. It&#8217;s considered best practice to declare your variables.</p>\n<p><em>Note: in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode</a>, it&#8217;s an error if you assign value to variable without first declaring the variable.</em></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/demystifying-javascript-variable-scope-hoisting/?utm_source=rss\">Demystifying JavaScript Variable Scope and Hoisting</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/demystifying-javascript-variable-scope-hoisting/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=95668",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Raw JavaScript"
        ],
        "dc:creator": [
            "Ivaylo Gerchev"
        ],
        "pubDate": [
            "Mon, 01 Feb 2021 00:15:22 GMT"
        ],
        "metaDesc": [
            "How does JavaScript's scoping system work? Learn how to declare variables, tell the difference between local scope and global scope, and what hoisting is."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "PHP Authorization with JWT (JSON Web Tokens)"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/php-authorization-jwt-json-web-tokens/?utm_source=rss\"\n              title=\"PHP Authorization with JWT (JSON Web Tokens)\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2015/06/1615432008php-uthorization-jwt.jpg\"\n        alt=\"PHP Authorization with JWT (JSON Web Tokens)\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2015/06/1615432008php-uthorization-jwt-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2015/06/1615432008php-uthorization-jwt-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2015/06/1615432008php-uthorization-jwt-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2015/06/1615432008php-uthorization-jwt.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>There was a time when the only way to authenticate yourself with an application was by providing your credentials (usually a username or email address and a password) and a session was then used to maintain user state until the user logged out. A little while later, we started using authentication APIs. And in yet more recent times, JWTs, or JSON Web Tokens, have been increasingly used as another way to authenticate requests to a server.</strong></p>\n<p>In this article, you’ll learn what JWTs are and how to use them with PHP to make authenticated user requests.</p>\n<h2 id=\"jwtsversussessions\">JWTs versus Sessions</h2>\n<p>But first, why are sessions not <em>such</em> a good thing? Well, there are three key reasons:</p>\n<ul>\n<li><strong>Data is stored in plain text on the server</strong>.<br />\nEven though the data is usually not stored in a public folder, anyone with sufficient access to the server can read the contents of session files.</li>\n<li><strong>They involve filesystem read/write requests</strong>.<br />\nEvery time a session starts or its data is modified, the server needs to update the session file. The same goes for every time the application sends a session cookie. If you have a large number of users, you can end up with a slow server unless you use alternative session storage options, such as Memcached and Redis.</li>\n<li><strong>Distributed/Clustered applications</strong>.<br />\nSince session files are, by default, stored on the file system, it&#8217;s hard to have a distributed or clustered infrastructure for high availability applications — ones that require the use of technologies such as load balancers and clustered servers. Other storage media and special configurations have to be implemented — and be done so in full awareness of their implications.</li>\n</ul>\n<h2 id=\"jwt\">JWT</h2>\n<p>Now, let’s start learning about JWTs. <a href=\"http://www.rfc-editor.org/info/rfc7519\">The JSON Web Token specification (RFC 7519)</a> was first published on December 28, 2010, and was most recently updated in May 2015.</p>\n<p>JWTs have many advantages over API keys, including:</p>\n<ul>\n<li>API keys are random strings, whereas JWTs contain information and metadata. This information and metadata can describe a wide range of things, such as a user&#8217;s identity, authorization data, and the validity of the token within a time frame or to a domain. <!-- RM: not quite sure how \"to a domain\" fits in the sentence. Should it be \"in relation to a domain\"? --></li>\n<li>JWTs don&#8217;t require a centralized issuing or revoking authority.</li>\n<li>JWTs are OAUTH2 compatible.</li>\n<li>JWT data can be inspected.</li>\n<li>JWTs have expiration controls.</li>\n<li>JWTs are intended for space-constrained environments, such as HTTP Authorization headers.</li>\n<li>Data is transmitted in JavaScript Object Notation format (JSON).</li>\n<li>JWTs are represented using <a href=\"http://www.herongyang.com/Encoding/Base64URL-Encoding-Algorithm.html\">Base64url encoding</a></li>\n</ul>\n<h2 id=\"whatdoesajwtlooklike\">What Does a JWT Look Like?</h2>\n<p>Here is a sample JWT:</p>\n<pre><code class=\"text language-text\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE0MTY5MjkxMDksImp0aSI6ImFhN2Y4ZDBhOTVjIiwic2NvcGVzIjpbInJlcG8iLCJwdWJsaWNfcmVwbyJdfQ.XCEwpBGvOLma4TCoh36FU7XhUbcskygS81HE1uHLf0E\r\n</code></pre>\n<p>At first glance, it appears that the string is just random groups of characters concatenated with a period or dot character. As such, it may not seem very different from an API key. However, if you look more closely, there are three separate strings.</p>\n<h3 id=\"thejwtheader\">The JWT Header</h3>\n<p>The first string is the JWT header. It&#8217;s a <a href=\"http://en.wikipedia.org/wiki/Base64\">Base64</a>, URL-encoded JSON string. It specifies which cryptographic algorithm was used to generate the signature, and the token&#8217;s type, which is always set to <code>JWT</code>. The algorithm can be either <em>symmetric</em> or <em>asymmetric</em>.</p>\n<p>A <strong>symmetric algorithm</strong> uses a single key to both create and verify the token. The key is shared between the creator of the JWT and the consumer of it. It&#8217;s essential that you make sure only the creator and consumer knows the secret. Otherwise, <em>anyone</em> can create a valid token.</p>\n<p>An <strong>asymmetric algorithm</strong> uses a private key to sign the token and a public key to verify it. These algorithms should be used when a shared secret is impractical or other parties only need to verify the integrity of the token.</p>\n<h3 id=\"thejwtspayload\">The JWT&#8217;s Payload</h3>\n<p>The second string is the JWT&#8217;s payload. It&#8217;s also a Base64, URL-encoded JSON string. It contains some standard fields, which are referred to as &#8220;claims&#8221;. There are three types of claims: <em>registered</em>, <em>public</em>, and <em>private</em>.</p>\n<p><strong>Registered claims</strong> are predefined. You can find a list of them in <a href=\"https://tools.ietf.org/html/rfc7519#page-9\">the JWT&#8217;s RFC</a>. Here are some commonly used ones:</p>\n<ul>\n<li><code>iat</code>: the timestamp of token issuing.</li>\n<li><code>key</code>: a unique string, which could be used to validate a token, but goes against not having a centralized issuer authority.</li>\n<li><code>iss</code>: a string containing the name or identifier of the issuer. Can be a domain name and can be used to discard tokens from other applications.</li>\n<li><code>nbf</code>: a timestamp of when the token should start being considered valid. Should be equal to or greater than <code>iat</code>.</li>\n<li><code>exp</code>: a timestamp of when the token should cease to be valid. Should be greater than <code>iat</code> and <code>nbf</code>.</li>\n</ul>\n<p><strong>Public claims</strong> can be defined as you see fit. However, they can&#8217;t be the same as registered claims, or claims of <a href=\"https://tools.ietf.org/html/rfc7519#page-9\">already existing public claims</a>. You can create private claims at will. They&#8217;re only for use between two parties: a producer and a consumer.</p>\n<h3 id=\"thejwtssignature\">The JWT&#8217;s Signature</h3>\n<p>The JWT&#8217;s signature is a cryptographic mechanism designed to secure the JWT&#8217;s data with a digital signature unique to the contents of the token. The signature ensures the JWT&#8217;s integrity so that consumers can verify it hasn’t been tampered with by a malicious actor.</p>\n<p>The JWT&#8217;s signature is a combination of three things:</p>\n<ul>\n<li>the JWT&#8217;s header</li>\n<li>the JWT&#8217;s payload</li>\n<li>a secret value</li>\n</ul>\n<p>These three are digitally signed (<em>not encrypted</em>) using the algorithm specified in the JWT&#8217;s header. If we decode the example above, we&#8217;ll have the following JSON strings:</p>\n<p><strong>The JWT&#8217;s Header</strong></p>\n<pre><code class=\"javascript language-javascript\">{\r\n    \"alg\": \"HS256\",\r\n    \"typ\": \"JWT\"\r\n}\r\n</code></pre>\n<p><strong>The JWT&#8217;s Data</strong></p>\n<pre><code class=\"javascript language-javascript\">{\r\n    \"iat\": 1416929109,\r\n    \"jti\": \"aa7f8d0a95c\",\r\n    \"scopes\": [\r\n        \"repo\",\r\n        \"public_repo\"\r\n    ]\r\n}\r\n</code></pre>\n<p>Try out <a href=\"http://jwt.io/\">jwt.io</a> for yourself, where you can play around with encoding and decoding your own JWTs.</p>\n<h2 id=\"letsusejwtsinaphpbasedapplication\">Let&#8217;s Use JWTs in a PHP-based Application</h2>\n<p>Now that you&#8217;ve learned what JWTs are, it&#8217;s now time to learn how to use them in a PHP app. Before we dive in, feel free <a href=\"https://github.com/sitepoint-editors/basic-php-jwt-auth-example\">to clone the code for this article</a>, or follow along and create it as we go. </p>\n<p>There are many ways that you can approach integrating JWTs, but here&#8217;s how we&#8217;re going to do it.</p>\n<p>All requests to the application, except for the login and logout page, need to be authenticated via a JWT. If a user makes a request without a JWT, they&#8217;ll be redirected to the login page.</p>\n<p>After a user fills out and submits the login form, the form will be submitted via JavaScript to the login endpoint, <code>authenticate.php</code>, in our application. The endpoint will then extract the credentials (a username and password) from the request and check if they&#8217;re valid.</p>\n<p>If they are, it will generate a JWT and send it back to the client. When the client receives a JWT, it will store it and use it with every future request to the application.</p>\n<p>For a simplistic scenario, there&#8217;ll only be one resource the user can request — a PHP file aptly named <code>resource.php</code>. It won&#8217;t do much, just returning a string, containing the current timestamp at the time of the request.</p>\n<p>There&#8217;s couple of ways to use JWTs when making requests. In our application, the JWT will be sent in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">the Bearer authorization header</a>.</p>\n<p>If you’re not familiar with Bearer Authorization, it’s a form of HTTP authentication, where a token (such as a JWT) is sent in a request header. The server can inspect the token and determine if access should be given to the “bearer” of the token.</p>\n<p>Here’s an example of the header:</p>\n<pre><code class=\"bash language-bash\">Authorization: Bearer ab0dde18155a43ee83edba4a4542b973\r\n</code></pre>\n<p>For each request received by our application, PHP will attempt to extract the token from the Bearer header. If it&#8217;s present, it&#8217;s then validated. If it&#8217;s valid, the user will see the normal response for that request. If the JWT is invalid, however, the user won&#8217;t be allowed to access the resource.</p>\n<p>Please note that JWT was <em>not</em> designed to substitute session cookies.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/php-authorization-jwt-json-web-tokens/?utm_source=rss\">PHP Authorization with JWT (JSON Web Tokens)</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/php-authorization-jwt-json-web-tokens/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=106378",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "CMS & Frameworks",
            "Meta",
            "Miscellaneous",
            "Patterns & Practices",
            "PHP"
        ],
        "dc:creator": [
            "Miguel Ibarra Romero, Matthew Setter"
        ],
        "pubDate": [
            "Wed, 10 Mar 2021 19:00:11 GMT"
        ],
        "metaDesc": [
            "Need to authenticate requests to a server? Learn what JWTs are and how to use them instead of sessions to authenticate your users via API calls."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Deploy a Rust Web App With Rocket"
        ],
        "author": [
            "Edouard Bonlieu"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:13:46 +0000"
        ],
        "link": [
            "https://dev.to/koyeb/deploy-a-rust-web-app-with-rocket-j3e"
        ],
        "guid": [
            "https://dev.to/koyeb/deploy-a-rust-web-app-with-rocket-j3e"
        ],
        "description": [
            "<h2>\n  <a href=\"#introduction\">\n  </a>\n  Introduction\n</h2>\n\n<p>Rust is a popular programming language offering blazingly fast performance, and guaranteeing memory and thread safety.</p>\n\n<p>In this tutorial, we will explain how to deploy a Rust web application using Rocket, a fast, easy, and flexible web framework.<br>\nWe will then deploy the Rust web application on the Koyeb serverless platform offering a simple way to deploy Rust applications and offering native autoscaling, automatic HTTPS (SSL), auto-healing, and global load-balancing across our edge network with zero configuration.</p>\n<h2>\n  <a href=\"#requirements\">\n  </a>\n  Requirements\n</h2>\n\n<p>To successfully follow and complete this guide, you need:</p>\n\n<ul>\n<li>\n<a href=\"https://docs.docker.com/get-docker/\">Docker</a> installed on your machine\n\n<ul>\n<li>A <a href=\"https://app.koyeb.com\">Koyeb account</a> to deploy and run the Rust web application</li>\n<li>The <a href=\"https://github.com/koyeb/koyeb-cli\">Koyeb CLI</a> installed to interact with Koyeb from the command line</li>\n<li>Have a registry we will use to store our Rust web app Docker image and deploy it on Koyeb</li>\n</ul>\n</li>\n</ul>\n<h2>\n  <a href=\"#steps\">\n  </a>\n  Steps\n</h2>\n\n<p>To successfully deploy a Rust web application on Koyeb Serverless Platform, you need to follow these steps:</p>\n\n<ol>\n<li><a href=\"#create-a-rust-web-app-using-rocket\"><strong>Create a Rust web app using Rocket</strong></a></li>\n<li><a href=\"#dockerize-the-rust-web-app\"><strong>Dockerize the Rust web app</strong></a></li>\n<li><a href=\"#push-the-docker-image-to-a-container-registry\"><strong>Push the Docker image to a container registry</strong></a></li>\n<li><a href=\"#deploy-the-dockerized-rust-web-app-on-koyeb\"><strong>Deploy the Dockerized Rust web app on Koyeb</strong></a></li>\n</ol>\n<h2>\n  <a href=\"#create-a-rust-web-app-using-rocket\">\n  </a>\n  Create a Rust web app using Rocket\n</h2>\n<h3>\n  <a href=\"#install-rust\">\n  </a>\n  Install Rust\n</h3>\n\n<p>To get started, let's start by configuring a Rust environment we will use to create the application.</p>\n\n<p>If you do not have Rust installed on your machine, you can install using rustup. In your terminal, run the command below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>curl <span class=\"nt\">--proto</span> <span class=\"s1\">'=https'</span> <span class=\"nt\">--tlsv1</span>.2 <span class=\"nt\">-sSf</span> https://sh.rustup.rs | sh\n</code></pre>\n\n</div>\n\n\n\n<p>Once rustup is installed, you may need to restart your current shell to reload your <code>PATH</code> environment variable. You can avoid this by configuring your current shell running:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">source</span> <span class=\"nv\">$HOME</span>/.cargo/env\n</code></pre>\n\n</div>\n\n\n\n<p>To ensure the latest toolchain is properly installed, in your terminal run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>rustup default stable\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  <a href=\"#write-the-rust-web-app-using-rocket\">\n  </a>\n  Write the Rust web app using Rocket\n</h3>\n\n<p>To create our application, in your terminal run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>cargo new rust-rocket-app <span class=\"nt\">--bin</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The command above uses Cargo, the Rust package manager to create a new package. The <code>--bin</code> option indicates to make a binary program.<br>\nCargo created a <code>rust-rocket-app</code> directory containing two files:</p>\n\n<ul>\n<li>\n<strong>Cargo.toml</strong>: containing the metadata Cargo needs to compile our package</li>\n<li>\n<strong>src/main.rs</strong>: a \"hello world\" program Cargo generated for us\n</li>\n</ul>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$ </span><span class=\"nb\">cd </span>rust-rocket-app\n<span class=\"nv\">$ </span>tree <span class=\"nb\">.</span>\n<span class=\"nb\">.</span>\n├── Cargo.toml\n└── src\n    └── main.rs\n\n1 directory, 2 files\n</code></pre>\n\n</div>\n\n\n<p>As our web app uses Rocket, we need to add it as a package dependency. In the <code>rust-rocket-app</code> directory, open the <code>Cargo.toml</code> file and add rocket as a dependency under the <code>[dependencies]</code> section.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight yaml\"><code><span class=\"pi\">[</span><span class=\"nv\">dependencies</span><span class=\"pi\">]</span>\n<span class=\"s\">rocket = \"0.5.0-rc.1\"</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Open and modify the <code>src/main.rs</code> with the code below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight rust\"><code><span class=\"nd\">#[macro_use]</span> <span class=\"k\">extern</span> <span class=\"n\">crate</span> <span class=\"n\">rocket</span><span class=\"p\">;</span>\n\n<span class=\"nd\">#[get(</span><span class=\"s\">\"/\"</span><span class=\"nd\">)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">index</span><span class=\"p\">()</span> <span class=\"k\">-&gt;</span> <span class=\"o\">&amp;</span><span class=\"nv\">'static</span> <span class=\"nb\">str</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Hello, world!\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">#[get(</span><span class=\"s\">\"/hello/&lt;name&gt;\"</span><span class=\"nd\">)]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">-&gt;</span> <span class=\"nb\">String</span> <span class=\"p\">{</span>\n    <span class=\"nd\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, {}!\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nd\">#[launch]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">rocket</span><span class=\"p\">()</span> <span class=\"k\">-&gt;</span> <span class=\"mi\">_</span> <span class=\"p\">{</span>\n    <span class=\"nn\">rocket</span><span class=\"p\">::</span><span class=\"nf\">build</span><span class=\"p\">()</span>\n        <span class=\"nf\">.mount</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"nd\">routes!</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">])</span>\n        <span class=\"nf\">.mount</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"nd\">routes!</span><span class=\"p\">[</span><span class=\"n\">hello</span><span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The code above creates two routes: <code>/</code>, returning \"Hello, world!\" and <code>/hello/&lt;name&gt;</code> returning \"Hello, name!\" where \"name\" is the route parameter. Then it mounts the routes and launches the application.</p>\n\n<p>Finally, create a Rocket.to</p>\n\n<p>To run and test the application locally, run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>cargo run\n</code></pre>\n\n</div>\n\n\n\n<p>If everything goes fine, your app starts and you can test the routes using curl:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$curl</span> localhost:8000/\nHello, world!\n<span class=\"nv\">$curl</span> localhost:8000/hello/koyeb\nHello, koyeb!\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  <a href=\"#dockerize-the-rust-web-app\">\n  </a>\n  Dockerize the Rust web app\n</h2>\n\n<p>To Dockerize our Rust web app, create a <code>Dockerfile</code> in your project directory.<br>\nIn this guide, we use <a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\">Docker multi-stage build</a> to keep the image layers size as small as possible and to ensure our image contains only what is needed to run.</p>\n\n<p>In your Dockerfile, copy the content below:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight docker\"><code><span class=\"k\">FROM</span><span class=\"s\"> rust:1 as builder</span>\n<span class=\"k\">WORKDIR</span><span class=\"s\"> /app</span>\n<span class=\"k\">COPY</span><span class=\"s\"> . .</span>\n<span class=\"k\">RUN </span>cargo <span class=\"nb\">install</span> <span class=\"nt\">--path</span> .\n\n\n<span class=\"k\">FROM</span><span class=\"s\"> debian:buster-slim as runner</span>\n<span class=\"k\">COPY</span><span class=\"s\"> --from=builder /usr/local/cargo/bin/rust-rocket-app /usr/local/bin/rust-rocket-app</span>\n<span class=\"k\">ENV</span><span class=\"s\"> ROCKET_ADDRESS=0.0.0.0</span>\n<span class=\"k\">EXPOSE</span><span class=\"s\"> 8000</span>\n<span class=\"k\">CMD</span><span class=\"s\"> [\"rust-rocket-app\"]</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The first stage is used to build our application, in the second one we copy the application binary from stage one and use it to run the application.</p>\n\n<p>To build the Docker image execute the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker build <span class=\"nb\">.</span> <span class=\"nt\">-t</span> &lt;DOCKER_HUB_USERNAME&gt;/rust-rocket-app\n</code></pre>\n\n</div>\n\n\n\n<p><em>In this guide we will push the Docker image to the Docker Hub. You are free to use another different registry as Koyeb allows you to deploy from any container registry.</em></p>\n\n<p>Once the build is completed, you can run a container using the image locally to validate everything is working as expected running:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker run <span class=\"nt\">-p</span> 8000:8000 &lt;DOCKER_HUB_USERNAME&gt;/rust-rocket-app\n</code></pre>\n\n</div>\n\n\n\n<p>If everything goes fine, your container starts properly and you can test the routes using curl:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$curl</span> localhost:8000/\nHello, world!\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  <a href=\"#push-the-docker-image-to-a-container-registry\">\n  </a>\n  Push the Docker image to a container registry\n</h2>\n\n<p>With the Docker image built and functional, we can now upload it to the Docker Hub container registry.<br>\nIn your terminal run the command below to push the image:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>docker push &lt;DOCKER_HUB_USERNAME&gt;/rust-rocket-app\n</code></pre>\n\n</div>\n\n\n\n<p>Once the push command is completed, you will see your Docker image available on the Docker Hub.</p>\n\n<h2>\n  <a href=\"#deploy-the-dockerized-rust-web-app-on-koyeb\">\n  </a>\n  Deploy the Dockerized Rust web app on Koyeb\n</h2>\n\n<p>We are now ready to deploy our Rust web application on Koyeb. First, create a Koyeb Secret to store your container registry configuration.<br>\nIn this guide, we will deploy our app from the Docker Hub. For other container registries example, check out the related <a href=\"https://dev.to/docs/apps/private-container-registry-secrets\">documentation</a>.</p>\n\n<p><em>If your Docker image is public, there is no need to create a secret containing your container registry configuration.</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">echo</span> <span class=\"se\">\\</span>\n<span class=\"s1\">'{ \\\n  \"auths\": { \\\n    \"index.docker.io/v1/\": { \\\n      \"username\": \"&lt;REPLACE_ME_WITH_DOCKER_HUB_USERNAME&gt;\", \\\n      \"password\": \"&lt;REPLACE_ME_WITH_DOCKER_HUB_TOKEN&gt;\" \\\n    } \\\n  } \\\n}'</span> | koyeb secrets create docker-hub-credentials\n</code></pre>\n\n</div>\n\n\n\n<p>We can now deploy the Rust web application on Koyeb Serverless Platform running:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>koyeb app init rust-rocket-app <span class=\"nt\">--docker</span> <span class=\"s2\">\"&lt;REPLACE_ME_WITH_DOCKER_HUB_USERNAME&gt;/rust-rocket-app\"</span> <span class=\"nt\">--ports</span> 8000:http <span class=\"nt\">--routes</span> /:8000 <span class=\"nt\">--docker-private-registry-secret</span> docker-hub-credentials\n</code></pre>\n\n</div>\n\n\n\n<p>This command creates a new Koyeb App and deploys our Rust application exposing port 8000 and making it publicly accessible on the <code>/</code> route of your Koyeb App URL.</p>\n\n<p>To retrieve your Koyeb App URL and access your application, run:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nv\">$koyeb</span> app get rust-rocket-app\nID                                      NAME            DOMAINS                                 UPDATED AT\nd58ebed1-48c0-46b7-a2f1-91f3ffdbccf2    rust-rocket-app rust-rocket-app-&lt;YOUR_ORG&gt;.koyeb.app    2021-06-23 09:46:55.411403 +0000 UTC\n</code></pre>\n\n</div>\n\n\n\n<p>Open the URL in your browser to access your application running on Koyeb and natively offering autoscaling, automatic HTTPS (SSL), auto-healing, and global load-balancing across our edge network.</p>\n\n"
        ],
        "category": [
            "rust",
            "webdev",
            "docker",
            "tutorial"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Build a Twitter Clone Using TypeScript, Prisma and Next.js"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/nextjs-prisma-twitter-clone/?utm_source=rss\"\n              title=\"Build a Twitter Clone Using TypeScript, Prisma and Next.js\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614128347nextjs-prisma.jpg\"\n        alt=\"Build a Twitter Clone Using TypeScript, Prisma and Next.js\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614128347nextjs-prisma-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614128347nextjs-prisma.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>The best way to learn a tool like React is to build something with it. <a style=\"font-weight:bold\" href=\"https://nextjs.org/\">Next.js</a> is a powerful framework that helps you build for production. In this tutorial, we&#8217;ll learn how to build a clone of Twitter using <a style=\"font-weight:bold\" href=\"https://nextjs.org/\">Next.js</a> and <a href=\"https://www.prisma.io/\">Prisma</a>.</strong> </p>\n<p>Our app will have the following features:</p>\n<ul>\n<li>authentication using <a href=\"https://next-auth.js.org/\">NextAuth</a> and Twitter OAuth</li>\n<li>an option to add a new tweet</li>\n<li>an option to view a list of tweets</li>\n<li>an option to view the profile of a user with only their tweets</li>\n</ul>\n<p>The code for the app we&#8217;ll be building is available on <a href=\"https://github.com/sitepoint-editors/twitter-clone-using-nextjs-and-prisma\">GitHub</a>. We&#8217;ll be using <a href=\"https://www.typescriptlang.org/\">TypeScript</a> to build our app.</p>\n<h2 id=\"preliminaries\">Preliminaries</h2>\n<p><a href=\"https://nextjs.org/\">Next.js</a> is one of the most popular <a href=\"https://reactjs.org/\">React.js</a> frameworks. It has a lot of features like server-side rendering, <a href=\"https://nextjs.org/docs/basic-features/typescript\">TypeScript support</a>, <a href=\"https://nextjs.org/docs/basic-features/image-optimization\">image optimization</a>, <a href=\"https://nextjs.org/docs/advanced-features/i18n-routing\">I18n support</a>, <a href=\"https://nextjs.org/docs/routing/introduction\">file-system routing</a>, and more.</p>\n<p>Prisma is an <a href=\"https://stackoverflow.com/questions/1279613/what-is-an-orm-how-does-it-work-and-how-should-i-use-one\">ORM</a> for Node.js and TypeScript. It also provides a lot of features like raw database access, seamless relation API, native database types, and so on.</p>\n<h3 id=\"softwarerequired\">Software required</h3>\n<p>We&#8217;ll need the following installed for the purposes of running our app:</p>\n<ul>\n<li><a href=\"https://docs.docker.com/get-docker/\">Docker</a></li>\n<li><a href=\"https://nodejs.org/en/download/\">npm</a></li>\n<li><a href=\"https://classic.yarnpkg.com/en/docs/install/\">yarn</a></li>\n<li><a href=\"https://git-scm.com/downloads\">git</a></li>\n</ul>\n<p>These technologies will be used in the app:</p>\n<ul>\n<li><a href=\"https://nextjs.org/\">Next.js</a>: for building our app</li>\n<li><a href=\"https://www.prisma.io/\">Prisma</a>: for fetching and saving data into the database</li>\n<li><a href=\"http://chakra-ui.com/\">Chakra UI</a>: for adding styles to our app</li>\n<li><a href=\"https://next-auth.js.org/\">NextAuth</a>: for handling authentication</li>\n<li><a href=\"https://react-query.tanstack.com/\">React Query</a>: for fetching and updating data in our app</li>\n</ul>\n<h2 id=\"creatinganewnextjsapp\">Creating a new Next.js App</h2>\n<p>Now, let&#8217;s get started! We&#8217;ll first create a new Next.js app by running the following command from our terminal:</p>\n<pre><code class=\"bash language-bash\">yarn create next-app\r\n</code></pre>\n<p>We&#8217;ll need to enter the name of the app when the command prompts for it. We can name it anything we want. However, in this case, I&#8217;ll name it <strong>twitter-clone</strong>. We should be able to see a similar output on our terminal:</p>\n<pre><code class=\"bash language-bash\">$ yarn create next-app\r\n\r\nyarn create v1.22.5\r\n[1/4] 🔍  Resolving packages...\r\n[2/4] 🚚  Fetching packages...\r\n[3/4] 🔗  Linking dependencies...\r\n[4/4] 🔨  Building fresh packages...\r\n\r\nsuccess Installed \"create-next-app@10.0.4\" with binaries:\r\n      - create-next-app\r\n✔ What is your project named? twitter-clone\r\nCreating a new Next.js app in /twitter-clone.\r\n\r\n....\r\n\r\nInitialized a git repository.\r\n\r\nSuccess! Created twitter-clone at /twitter-clone\r\nInside that directory, you can run several commands:\r\n\r\n  yarn dev\r\n    Starts the development server.\r\n\r\n  yarn build\r\n    Builds the app for production.\r\n\r\n  yarn start\r\n    Runs the built app in production mode.\r\n\r\nWe suggest that you begin by typing:\r\n\r\n  cd twitter-clone\r\n  yarn dev\r\n</code></pre>\n<p>We can now go inside the <strong>twitter-clone</strong> directory and start our app by running the following command:</p>\n<pre><code class=\"bash language-bash\">cd twitter-clone &amp;&amp; yarn dev\r\n</code></pre>\n<p>Our Next.js app should be up and running on <a href=\"http://localhost:3000/\">http://localhost:3000</a>. We should be able to see the following screen:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476215screely-1609848944956.png\" alt=\"Next.js app running on localhost:3000\" /></p>\n<h2 id=\"addingadockerizedpostgresqldatabase\">Adding a Dockerized PostgreSQL Database</h2>\n<p>Next, let&#8217;s add a <a href=\"https://hub.docker.com/_/postgres\">Dockerized</a> <a href=\"https://www.postgresql.org/\">PostgreSQL</a> database so that we can save the users and tweets into it. We can create a new <code>docker-compose.yml</code> file in the root of our app with the following content:</p>\n<pre><code class=\"yaml language-yaml\">version: \"3\"\r\n\r\nservices:\r\n  db:\r\n    container_name: db\r\n    image: postgres:11.3-alpine\r\n    ports:\r\n      - \"5432:5432\"\r\n    volumes:\r\n      - db_data:/var/lib/postgresql/data\r\n    restart: unless-stopped\r\n\r\nvolumes:\r\n  db_data:\r\n</code></pre>\n<p>If Docker is running on our machine, we can execute the following command from the root of our app to start our PostgreSQL container:</p>\n<pre><code class=\"yaml language-yaml\">docker-compose up\r\n</code></pre>\n<p>The above command will start the PostgreSQL container and it can be accessed on <code>postgresql://postgres:@localhost:5432/postgres</code>. Note that you can also use a <a href=\"https://www.postgresql.org/download/\">local installation of Postgres</a> instead of a Dockerized one.</p>\n<h2 id=\"addingchakraui\">Adding Chakra UI</h2>\n<p><a href=\"https://chakra-ui.com/\">Chakra UI</a> is a very simple React.js component library. It&#8217;s very popular and has the features like accessibility, support for both light and dark mode, and more. We&#8217;ll be using Chakra UI for styling our user interface. We can install that package by running the following command from the root of our app:</p>\n<pre><code class=\"bash language-bash\">yarn add @chakra-ui/react @emotion/react @emotion/styled framer-motion\r\n</code></pre>\n<p>Let&#8217;s rename our <code>_app.js</code> file to <code>_app.tsx</code> inside the <code>pages</code> directory and replace its content with the following:</p>\n<pre><code class=\"ts language-ts\">// pages/_app.tsx\r\n\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport { AppProps } from \"next/app\";\r\nimport Head from \"next/head\";\r\nimport React from \"react\";\r\n\r\nconst App = ({ Component, pageProps }: AppProps) =&gt; {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;Head&gt;\r\n        &lt;link rel=\"shortcut icon\" href=\"/images/favicon.ico\" /&gt;\r\n      &lt;/Head&gt;\r\n      &lt;ChakraProvider&gt;\r\n        &lt;Component {...pageProps} /&gt;\r\n      &lt;/ChakraProvider&gt;\r\n    &lt;/&gt;\r\n  );\r\n};\r\n\r\nexport default App;\r\n</code></pre>\n<p>Since we added a new TypeScript file, we&#8217;ll need to restart our Next.js server. Once we restart our server, we&#8217;ll get the following error:</p>\n<pre><code class=\"bash language-bash\">$ yarn dev\r\n\r\nyarn run v1.22.5\r\n$ next dev\r\nready - started server on http://localhost:3000\r\nIt looks like you're trying to use TypeScript but do not have the required package(s) installed.\r\n\r\nPlease install typescript, @types/react, and @types/node by running:\r\n\r\n  yarn add --dev typescript @types/react @types/node\r\n\r\nIf you are not trying to use TypeScript, please remove the tsconfig.json file from your package root (and any TypeScript files in your pages directory).\r\n</code></pre>\n<p>This is because we added a new TypeScript file but didn&#8217;t add the necessary dependencies that are required to run them. We can fix that by installing the missing dependencies. From the root of our app, we can execute the following command to install the missing dependencies:</p>\n<pre><code class=\"bash language-bash\">yarn add --dev typescript @types/react @types/node\r\n</code></pre>\n<p>Now, if we start our Next.js server, our app should compile:</p>\n<pre><code class=\"bash language-bash\">$ yarn dev\r\n\r\nyarn run v1.22.5\r\n$ next dev\r\nready - started server on http://localhost:3000\r\nWe detected TypeScript in your project and created a tsconfig.json file for you.\r\n\r\nevent - compiled successfully\r\n</code></pre>\n<h2 id=\"addingnextauth\">Adding NextAuth</h2>\n<p><a href=\"https://next-auth.js.org/\">NextAuth</a> is an authentication library for Next.js. It&#8217;s simple and easy to understand, flexible and secure by default. To set up NextAuth in our app, we&#8217;ll need to install it by running the following command from the root of our app:</p>\n<pre><code class=\"bash language-bash\">yarn add next-auth\r\n</code></pre>\n<p>Next, we&#8217;ll have to update our <code>pages/_app.tsx</code> file with the following content:</p>\n<pre><code class=\"ts language-ts\">// pages/_app.tsx\r\n\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport { Provider as NextAuthProvider } from \"next-auth/client\";\r\nimport { AppProps } from \"next/app\";\r\nimport Head from \"next/head\";\r\nimport React from \"react\";\r\n\r\nconst App = ({ Component, pageProps }: AppProps) =&gt; {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;Head&gt;\r\n        &lt;link rel=\"shortcut icon\" href=\"/images/favicon.ico\" /&gt;\r\n      &lt;/Head&gt;\r\n      &lt;NextAuthProvider session={pageProps.session}&gt;\r\n        &lt;ChakraProvider&gt;\r\n          &lt;Component {...pageProps} /&gt;\r\n        &lt;/ChakraProvider&gt;\r\n      &lt;/NextAuthProvider&gt;\r\n    &lt;/&gt;\r\n  );\r\n};\r\n\r\nexport default App;\r\n</code></pre>\n<p>Here, we&#8217;re wrapping our app with <code>NextAuthProvider</code>. Next, we&#8217;ll have to create a new file named <code>[...nextauth].ts</code> inside the <code>pages/api/auth</code> directory with the following content:</p>\n<pre><code class=\"ts language-ts\">// pages/api/auth/[...nextauth].ts\r\n\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\nimport NextAuth from \"next-auth\";\r\nimport Providers from \"next-auth/providers\";\r\n\r\nconst options = {\r\n  providers: [\r\n    Providers.Twitter({\r\n      clientId: process.env.TWITTER_KEY,\r\n      clientSecret: process.env.TWITTER_SECRET,\r\n    }),\r\n  ],\r\n};\r\n\r\nexport default NextAuth(options);\r\n</code></pre>\n<p>The above file will be responsible for handling our authentication using <a href=\"https://nextjs.org/docs/api-routes/introduction\">Next.js API routes</a>. Next, we&#8217;ll create a new filed named <code>.env</code> in the root of our app to store all our environment variables with the following content:</p>\n<pre><code class=\"bash language-bash\">DATABASE_URL=\"postgresql://postgres:@localhost:5432/postgres?synchronize=true\"\r\nNEXTAUTH_URL=http://localhost:3000\r\nNEXT_PUBLIC_API_URL=http://localhost:3000\r\nTWITTER_KEY=\"\"\r\nTWITTER_SECRET=\"\"\r\n</code></pre>\n<p>The Twitter environment variables will be generated from the <a href=\"https://developer.twitter.com/en/portal/dashboard\">Twitter API</a>. We&#8217;ll be doing that next. We can create a new Twitter app from the <a href=\"https://developer.twitter.com/en/portal/apps/new\">Twitter Developer dashboard</a>.</p>\n<ol>\n<li>\n<p>Create a new Twitter app by entering its name and click on the <strong>Complete</strong> button.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476216screely-1609858160214.png\" alt=\"Create a new Twitter app\" /></p>\n</li>\n<li>\n<p>Copy the <strong>API key</strong>, <strong>API secret key</strong> and <strong>Bearer token</strong> in the next screen.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476223screely-1609858192520.png\" alt=\"The credentials of our Twitter app\" /></p>\n</li>\n<li>\n<p>Change the <strong>App permissions</strong> from <strong>Read Only</strong> to <strong>Read and Write</strong> in the next screen.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476222screely-1609858186775.png\" alt=\"Twitter app permissions\" /></p>\n</li>\n<li>\n<p>Click on the <strong>Edit</strong> button next to the <strong>Authentication settings</strong> to enable <strong>3-legged OAuth</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476221screely-1609858175436.png\" alt=\"Authentication settings for our Twitter app\" /></p>\n</li>\n<li>\n<p>Enable <strong>3-legged OAuth</strong> and <strong>Request email address from users</strong> and add <a href=\"http://localhost:3000/api/auth/callback/twitter\">http://localhost:3000/api/auth/callback/twitter</a> as a <strong>Callback URL</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476219screely-1609858170643.png\" alt=\"Edit the authentication settings of our Twitter app\" /></p>\n</li>\n<li>\n<p>The <strong>Website URL</strong>, <strong>Terms of service</strong> and <strong>Privacy policy</strong> files can be anything (such as <code>https://yourwebsite.com</code>, <code>https://yourwebsite.com/terms</code> and <code>https://yourwebsite.com/privacy</code> respectively).</p>\n</li>\n</ol>\n<p>Our 3-legged OAuth should be enabled now.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476218screely-1609858165876.png\" alt=\"Enable the 3-legged OAuth of our Twitter app\" /></p>\n<p>Paste the value of the <strong>API key</strong> from <strong>Step 2</strong> into the <strong>TWITTER_KEY</strong> environment variable and the value of <strong>API secret key</strong> into the <strong>TWITTER_SECRET</strong> environment variable.</p>\n<p>Our <code>.env</code> file should look like this now:</p>\n<pre><code class=\"bash language-bash\">DATABASE_URL=\"postgresql://postgres:@localhost:5432/postgres\"\r\nNEXTAUTH_URL=http://localhost:3000\r\nNEXT_PUBLIC_API_URL=http://localhost:3000\r\nTWITTER_KEY=\"1234\" // Replace this with your own API key\r\nTWITTER_SECRET=\"secret\" // Replaces this with your own API secret key\r\n</code></pre>\n<p>Now, if we restart our Next.js server and visit <a href=\"http://localhost:3000/api/auth/signin\">http://localhost:3000/api/auth/signin</a>, we should be able to see the <strong>Sign in with Twitter</strong> button:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610476226screely-1609859141912.png\" alt=\"Sign in with Twitter button\" /></p>\n<p>If we click on that button, we&#8217;ll be able to authorize our Twitter app but we won&#8217;t be able to log in to our app. Our terminal will show the following error:</p>\n<pre><code class=\"bash language-bash\">[next-auth][warn][jwt_auto_generated_signing_key]\r\nhttps://next-auth.js.org/warnings#jwt_auto_generated_signing_key\r\n</code></pre>\n<p>We&#8217;ll fix this issue next when we&#8217;ll be adding and configuring Prisma.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/nextjs-prisma-twitter-clone/?utm_source=rss\">Build a Twitter Clone Using TypeScript, Prisma and Next.js</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/nextjs-prisma-twitter-clone/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181193",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "React"
        ],
        "dc:creator": [
            "Nirmalya Ghosh"
        ],
        "pubDate": [
            "Sun, 21 Feb 2021 15:00:50 GMT"
        ],
        "metaDesc": [
            "The best way to explore React is by example. Learn how easy it is to build a React Twitter clone with Prisma and the powerful Next.js framework."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Add Scalable Vector Graphics to Your Web Page"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/add-svg-to-web-page/?utm_source=rss\"\n              title=\"How to Add Scalable Vector Graphics to Your Web Page\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2012/05/1617069182svg-web-page.jpg\"\n        alt=\"How to Add Scalable Vector Graphics (SVG) to Your Web Page\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2012/05/1617069182svg-web-page-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2012/05/1617069182svg-web-page.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this tutorial, we discuss ways you can add SVG images to your web page. Unlike bitmap images, SVGs are XML markup which describe shapes, lines, and fills so the document can be used in a variety of ways.</strong></p>\n<p>In this series, we&#8217;ve discussed <a href=\"https://www.sitepoint.com/svg-scalable-vector-graphics-overview/\">what SVGs are</a>, <a href=\"https://www.sitepoint.com/7-reasons-to-consider-svgs-instead-of-canvas/\">why you should consider them</a> and <a href=\"https://www.sitepoint.com/svg-drawing-basics/\">basic vector drawings</a>.</p>\n<p>At some point, you&#8217;ll want to embed your finely crafted SVG directly into a web page. There are at least six ways to achieve that goal — <em>but all methods have pros and cons</em>.</p>\n<h2 id=\"1inlinesvgxmldirectlyintoyourhtmlpage\">1. Inline SVG XML Directly Into Your HTML Page</h2>\n<p>An SVG image can be added as a code island directly within your HTML page using outer <code>&lt;svg&gt;</code> tags:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"UTF-8\" /&gt;\r\n  &lt;title&gt;Embedded SVG&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;h1&gt;Embedded SVG&lt;/h1&gt;\r\n\r\n  &lt;!-- SVG code --&gt;\r\n  &lt;svg width=\"300px\" height=\"300px\"\r\n    xmlns=\"https://www.w3.org/2000/svg\"&gt;\r\n    &lt;text x=\"10\" y=\"50\" font-size=\"30\"&gt;My SVG&lt;/text&gt;\r\n  &lt;/svg&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>This method works in all modern browsers. The SVG becomes part of the page DOM so it can be manipulated with CSS or JavaScript perhaps to add animation or react to click events. <em>(Note that any JavaScript embedded in the SVG itself will be blocked.)</em></p>\n<p>The main disadvantage is that the SVG must be embedded into every page which requires it, and may need to be repeated for reusable icons. This adds to the page weight and, although the HTML may be cached, the SVG code can&#8217;t be <em>(easily)</em> reused elsewhere.</p>\n<p>One solution to the repeated image issue is to create a hidden SVG block on each page (with CSS <code>display: none</code>). This can optionally contain multiple images referenced using an <code>id</code>:</p>\n<pre><code class=\"markup language-markup\">&lt;svg xmlns=\"https://www.w3.org/2000/svg\" style=\"display: none;\"&gt;\r\n  &lt;defs&gt;\r\n    &lt;symbol id=\"box\" viewBox=\"0 0 32 32\"&gt;\r\n      &lt;title&gt;box&lt;/title&gt;\r\n      &lt;rect width=\"32\" height=\"32\" fill=\"#00c\" /&gt;\r\n    &lt;/symbol&gt;\r\n    &lt;symbol id=\"circle\" viewBox=\"0 0 32 32\"&gt;\r\n      &lt;title&gt;circle&lt;/title&gt;\r\n      &lt;circle cx=\"16\" cy=\"16\" r=\"16\" fill=\"#c00\" /&gt;\r\n    &lt;/symbol&gt;\r\n  &lt;defs&gt;\r\n&lt;/svg&gt;\r\n</code></pre>\n<p>Individual items can then be used any number of times with an <a href=\"https://developer.mozilla.org/docs/Web/SVG/Element/use\">SVG <code>use</code> element</a>:</p>\n<pre><code class=\"markup language-markup\">&lt;svg width=\"20\" height=\"20\"&gt;\r\n  &lt;use xlink:href=\"#box\" /&gt;\r\n&lt;/svg&gt;\r\n\r\n&lt;svg width=\"30\" height=\"30\"&gt;\r\n  &lt;use xlink:href=\"#box\" /&gt;\r\n&lt;/svg&gt;\r\n\r\n&lt;svg width=\"40\" height=\"40\"&gt;\r\n  &lt;use xlink:href=\"#circle\" /&gt;\r\n&lt;/svg&gt;\r\n</code></pre>\n<p>The original image can still be styled using CSS, although it&#8217;s not possible to apply additional styles to the <code>&lt;use&gt;</code> itself.</p>\n<h2 id=\"2useanimgtag\">2. Use an <code>&lt;img&gt;</code> Tag</h2>\n<p>SVGs can be added to your web page like any other image:</p>\n<pre><code class=\"markup language-markup\">&lt;img src=\"image.svg\" alt=\"my image\" /&gt;\r\n</code></pre>\n<p>The usual <code>width</code>, <code>height</code>, <code>alt</code> and other <a href=\"https://developer.mozilla.org/docs/Web/HTML/Element/img#attributes\"><code>&lt;img&gt;</code> attributes</a> can be added should you require them.</p>\n<p>The browser treats the SVG like any other image. For security reasons, any scripts, external stylesheets, links, and other SVG interactivity will be disabled.</p>\n<p>A target anchor can be used if multiple images are defined within a single SVG — such as <code>myimage.svg#circle</code> — but this won&#8217;t work in older browsers.</p>\n<h2 id=\"3applyacssbackgroundimage\">3. Apply a CSS Background Image</h2>\n<p>SVGs can be used as a CSS background for any element:</p>\n<pre><code class=\"css language-css\">#myelement {\r\n  background-image: url('./image.svg');\r\n}\r\n</code></pre>\n<p>Inline data URIs with UTF8 encoding may also be practical for smaller, regularly used SVGs which are unlikely to change often (and invalidate the whole stylesheet):</p>\n<pre><code class=\"css language-css\">.myelement {\r\n  background: url('data:image/svg+xml;utf8,&lt;svg xmlns=\"https://www.w3.org/2000/svg\" viewBox=\"0 0 300 300\"&gt;&lt;circle cx=\"150\" cy=\"150\" r=\"100\" stroke-width=\"5\" stroke=\"#f00\" fill=\"#ff0\" /&gt;&lt;/svg&gt;');\r\n}\r\n</code></pre>\n<p>Like <code>&lt;img&gt;</code> tags, scripts, links, and other types of interactivity are disabled when you use this method.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/add-svg-to-web-page/?utm_source=rss\">How to Add Scalable Vector Graphics to Your Web Page</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/add-svg-to-web-page/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=54999",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Canvas & SVG",
            "CSS3",
            "HTML",
            "HTML & CSS"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 01 Feb 2021 01:55:44 GMT"
        ],
        "metaDesc": [
            "How should you add scalable vector graphics to a web page? Learn about six different methods, including inlining, image tags, iframes, and CSS backgrounds."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Shalabh Vyas"
        ],
        "title": [
            "Adding A Commenting System To A WYSIWYG Editor"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/commenting-system-wysiwyg-editor/"
        ],
        "pubDate": [
            "Fri, 28 May 2021 11:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/commenting-system-wysiwyg-editor/"
        ],
        "description": [
            "In recent years, we’ve seen Collaboration penetrate a lot of digital workflows and use-cases across many professions. Just within the Design and Software Engineering community, we see designers collaborate on design artifacts using tools like Figma, teams doing Sprint and Project Planning using tools like Mural and interviews being conducted using CoderPad. All these tools are constantly aiming to bridge the gap between an online and a physical world experience of executing these workflows and making the collaboration experience as rich and seamless as possible."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/commenting-system-wysiwyg-editor/\" />\n              <title>Adding A Commenting System To A WYSIWYG Editor</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Adding A Commenting System To A WYSIWYG Editor</h1>\n                  \n                    \n                    <address>Shalabh Vyas</address>\n                  \n                  <time datetime=\"2021-05-28T11:00:00&#43;00:00\" class=\"op-published\">2021-05-28T11:00:00+00:00</time>\n                  <time datetime=\"2021-05-28T11:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>In recent years, we’ve seen Collaboration penetrate a lot of digital workflows and use-cases across many professions. Just within the Design and Software Engineering community, we see designers collaborate on design artifacts using tools like <a href=\"https://www.figma.com/collaboration/\">Figma</a>, teams doing Sprint and Project Planning using tools like <a href=\"https://www.mural.co/?\">Mural</a> and interviews being conducted using <a href=\"https://coderpad.io/\">CoderPad</a>. All these tools are constantly aiming to bridge the gap between an online and a physical world experience of executing these workflows and making the collaboration experience as rich and seamless as possible.</p>\n\n<p>For the majority of the Collaboration Tools like these, the ability to share opinions with one another and have discussions about the same content is a must-have. A Commenting System that enables collaborators to annotate parts of a document and have conversations about them is at the heart of this concept. Along with building one for text in a WYSIWYG Editor, the article tries to engage the readers into how we try to weigh the pros and cons and attempt to find a balance between application complexity and user experience when it comes to building features for WYSIWYG Editors or Word Processors in general.</p>\n\n<h3 id=\"representing-comments-in-document-structure\">Representing Comments In Document Structure</h3>\n\n<p>In order to find a way to represent comments in a rich text document’s data structure, let’s look at a few scenarios under which comments could be created inside an editor.</p>\n\n<ul>\n<li>Comments created over text that has no styles on it (basic scenario);</li>\n<li>Comments created over text that may be bold/italic/underlined, and so on;</li>\n<li>Comments that overlap each other in some way (partial overlap where two comments share only a few words or fully-contained where one comment’s text is fully contained within text of another comment);</li>\n<li>Comments created over text inside a link (special because links are nodes themselves in our document structure);</li>\n<li>Comments that span multiple paragraphs (special because paragraphs are nodes in our document structure and comments are applied to text nodes which are paragraph’s children).</li>\n</ul>\n\n<p>Looking at the above use-cases, it seems like comments in the way they can come up in a rich text document are very similar to character styles (bold, italics etc). They can overlap with each other, go over text in other types of nodes like links and even span multiple parent nodes like paragraphs.</p>\n\n<p>For this reason, we use the same method to represent comments as we do for character styles, i.e. “Marks” (as they are so called in SlateJS terminology). Marks are just regular properties on nodes &mdash; speciality being that Slate’s API around marks (<code>Editor.addMark</code> and <code>Editor.removeMark</code>) handles changing of the node hierarchy as multiple marks get applied to the same range of text. This is extremely useful to us as we deal with a lot of different combinations of overlapping comments.</p>\n\n<h4 id=\"comment-threads-as-marks\">Comment Threads As Marks</h4>\n\n<p>Whenever a user selects a range of text and tries to insert a comment, technically, they’re starting a new comment thread for that text range. Because we would allow them to insert a comment and later replies to that comment, we treat this event as a new comment thread insertion in the document.</p>\n\n<p>The way we represent comment threads as marks is that each comment thread is represented by a mark named as <code>commentThread_threadID</code> where <code>threadID</code> is a unique ID we assign to each comment thread.  So, if the same range of text has two comment threads over it, it would have two properties set to the <code>true</code> &mdash; <code>commentThread_thread1</code> and <code>commentThread_thread2</code>. This is where comment threads are very similar to character styles since if the same text was bold and italic, it would have both the properties set to <code>true</code> &mdash; <code>bold</code> and <code>italic</code>.</p>\n\n<p>Before we dive into actually setting this structure up, it’s worth looking at how the text nodes change as comment threads get applied to them. The way this works (as it does with any mark) is that when a mark property is being set on the selected text, Slate’s <a href=\"https://github.com/ianstormtaylor/slate/blob/228f4fa94f61f42ca41feae2b3029ebb570e0480/packages/slate/src/create-editor.ts#L92\">Editor.addMark</a> API would split the text node(s) if needed such that in the resulting structure, text nodes are set up in a way that each text node has the exact same value of the mark.</p>\n\n<p>To understand this better, take a look at the following three examples that show the before-and-after state of the text nodes once a comment thread is inserted on the selected text:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"197\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Illustration showing how text node is split with a basic comment thread insertion\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      A text node getting split into three as a comment thread mark is inserted in the middle of the text. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ca21103b-cd8c-4868-8240-db95ceafb0ff/1-structure-uncommented-textt.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"323\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Illustration showing how text node is split in case of a partial overlap of comment threads\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Adding a comment thread over ‘text has’ creates two new text nodes. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8be36e26-f239-40a0-8393-f20875bf32b2/2-structure-partial-overlap.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"470\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Illustration showing how text node is split in case of a partial overlap of comment threads with links\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Adding a comment thread over ‘has link’ splits the text node inside the link too. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/69f3d6f6-557b-4b43-80c9-0b2db1e490c7/3-structure-thread-links.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\n\n\n<h3 id=\"highlighting-commented-text\">Highlighting Commented Text</h3>\n\n<p>Now that we know how we are going to represent comments in the document structure, let’s go ahead and add a few to the example document from the <a href=\"https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/\">first article</a> and configure the editor to actually show them as highlighted. Since we will have a lot of utility functions to deal with comments in this article, we create a <code>EditorCommentUtils</code> module that will house all these utils. To start with, we create a function that creates a mark for a given comment thread ID. We then use that to insert a few comment threads in our <code>ExampleDocument</code>.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nconst COMMENT_THREAD_PREFIX = \"commentThread_\";\n\nexport function getMarkForCommentThreadID(threadID) {\n  return `${COMMENT_THREAD_PREFIX}${threadID}`;\n}</code></pre>\n\n<p>Below image underlines in red the ranges of text that we have as example comment threads added in the next code snippet. Note that the text ‘Richard McClintock’ has two comment threads that overlap each other. Specifically, this is a case of one comment thread being fully contained inside another.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"322\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Picture showing which text ranges in the document are going to be commented upon - one of them being fully contained in another.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Text ranges that would be commented upon underlined in red. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f785c2a-4d29-4878-8c17-bce30b0cc6ee/highlight-comment-before.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/ExampleDocument.js\nimport { getMarkForCommentThreadID } from \"../utils/EditorCommentUtils\";\nimport { v4 as uuid } from \"uuid\";\n\nconst exampleOverlappingCommentThreadID = uuid();\n\nconst ExampleDocument = [\n   ...\n   {\n        text: \"Lorem ipsum\",\n        [getMarkForCommentThreadID(uuid())]: true,\n   },\n   ...\n   {\n        text: \"Richard McClintock\",\n        // note the two comment threads here.\n        [getMarkForCommentThreadID(uuid())]: true,\n        [getMarkForCommentThreadID(exampleOverlappingCommentThreadID)]: true,\n   },\n   {\n        text: \", a Latin scholar\",\n        [getMarkForCommentThreadID(exampleOverlappingCommentThreadID)]: true,\n   },\n   ...\n];</code></pre>\n</div>\n\n<p>We focus on the UI side of things of a Commenting System in this article so we assign them IDs in the example document directly using the npm package <a href=\"https://www.npmjs.com/package/uuid\">uuid</a>. Very likely that in a production version of an editor, these IDs are created by a backend service.</p>\n\n<p>We now focus on tweaking the editor to show these text nodes as highlighted. In order to do that, when rendering text nodes, we need a way to tell if it has comment threads on it. We add a util <code>getCommentThreadsOnTextNode</code> for that. We build on the <code>StyledText</code> component that we created in the first article to handle the case where it may be trying to render a text node with comments on. Since we have some more functionality coming that would be added to commented text nodes later, we create a component <code>CommentedText</code> that renders the commented text. <code>StyledText</code> will check if the text node it’s trying to render has any comments on it. If it does, it renders <code>CommentedText</code>. It uses a util <code>getCommentThreadsOnTextNode</code> to deduce that.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nexport function getCommentThreadsOnTextNode(textNode) {\n  return new Set(\n     // Because marks are just properties on nodes,\n    // we can simply use Object.keys() here.\n    Object.keys(textNode)\n      .filter(isCommentThreadIDMark)\n      .map(getCommentThreadIDFromMark)\n  );\n}\n\nexport function getCommentThreadIDFromMark(mark) {\n  if (!isCommentThreadIDMark(mark)) {\n    throw new Error(\"Expected mark to be of a comment thread\");\n  }\n  return mark.replace(COMMENT_THREAD_PREFIX, \"\");\n}\n\nfunction isCommentThreadIDMark(mayBeCommentThread) {\n  return mayBeCommentThread.indexOf(COMMENT_THREAD_PREFIX) === 0;\n}</code></pre>\n\n<p>The <a href=\"https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/\">first article</a> built a component <code>StyledText</code> that renders text nodes (handling character styles and so on). We extend that component to use the above util and render a <code>CommentedText</code> component if the node has comments on it.</p>\n\n<pre><code class=\"language-javascript\"># src/components/StyledText.js\n\nimport { getCommentThreadsOnTextNode } from \"../utils/EditorCommentUtils\";\n\nexport default function StyledText({ attributes, children, leaf }) {\n  ...\n\n  const commentThreads = getCommentThreadsOnTextNode(leaf);\n\n  if (commentThreads.size &gt; 0) {\n    return (\n      &lt;CommentedText\n      {...attributes}\n     // We use commentThreads and textNode props later in the article.\n      commentThreads={commentThreads}\n      textNode={leaf}\n      &gt;\n        {children}\n      &lt;/CommentedText&gt;\n    );\n  }\n\n  return &lt;span {...attributes}&gt;{children}&lt;/span&gt;;\n}</code></pre>\n\n<p>Below is the implementation of <code>CommentedText</code> that renders the text node and attaches the CSS that shows it as highlighted.</p>\n\n<pre><code class=\"language-javascript\"># src/components/CommentedText.js\n\nimport \"./CommentedText.css\";\n\nimport classNames from \"classnames\";\n\nexport default function CommentedText(props) {\n  const { commentThreads, ...otherProps } = props;\n  return (\n    &lt;span\n      {...otherProps}\n      className={classNames({\n        comment: true,\n      })}\n    &gt;\n      {props.children}\n    &lt;/span&gt;\n  );\n}\n\n# src/components/CommentedText.css\n\n.comment {\n  background-color: #feeab5;\n}</code></pre>\n\n<p>With all of the above code coming together, we now see text nodes with comment threads highlighted in the editor.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"336\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Commented text nodes appears as highlighted after comment threads have been inserted\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Commented text nodes appear as highlighted after comment threads have been inserted. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0a54ada8-f9fc-4cd6-b3b0-8dbbd9c11b45/highlight-comment-after.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p><strong>Note</strong>: <em>The users currently cannot tell if certain text has overlapping comments on it. The entire highlighted text range looks like a single comment thread. We address that later in the article where we introduce the concept of active comment thread which lets users select a specific comment thread and be able to see its range in the editor.</em></p>\n\n<h3 id=\"ui-storage-for-comments\">UI Storage For Comments</h3>\n\n<p>Before we add the functionality that enables a user to insert new comments, we first setup a UI state to hold our comment threads. In this article, we use <a href=\"https://recoiljs.org/\">RecoilJS</a> as our state management library to store comment threads, comments contained inside the threads and other metadata like creation time, status, comment author etc. Let’s add Recoil to our application:</p>\n\n<pre><code class=\"language-bash\">&gt; yarn add recoil</code></pre>\n\n<p>We use Recoil <a href=\"https://recoiljs.org/docs/basic-tutorial/atoms\">atoms</a> to store these two data structures. If you’re not familiar with Recoil, atoms are what hold the application state. For different pieces of application state, you’d usually want to set up different atoms. <a href=\"https://recoiljs.org/docs/api-reference/utils/atomFamily\">Atom Family</a> is a collection of atoms &mdash; it can be thought to be a <code>Map</code> from a unique key identifying the atom to the atoms themselves. It’s worth going through <a href=\"https://recoiljs.org/docs/introduction/core-concepts/\">core concepts</a> of Recoil at this point and familiarizing ourselves with them.</p>\n\n<p>For our use case, we store comment threads as an Atom family and then wrap our application in a <code>RecoilRoot</code> component. <a href=\"https://recoiljs.org/docs/api-reference/core/RecoilRoot\"><code>RecoilRoot</code></a> is applied to provide the context in which the atom values are going to be used. We create a separate module <code>CommentState</code> that holds our Recoil atom definitions as we add more atom definitions later in the article.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/CommentState.js\n\nimport { atom, atomFamily } from \"recoil\";\n\nexport const commentThreadsState = atomFamily({\n  key: \"commentThreads\",\n  default: [],\n});\n\nexport const commentThreadIDsState = atom({\n  key: \"commentThreadIDs\",\n  default: new Set([]),\n});</code></pre>\n\n<p>Worth calling out few things about these atom definitions:</p>\n\n<ul>\n<li>Each atom/atom family is uniquely identified by a <code>key</code> and can be set up with a default value.</li>\n<li>As we build further in this article, we are going to need a way to iterate over all the comment threads which would basically mean needing a way to iterate over <code>commentThreadsState</code> atom family. At the time of writing this article, the way to do that with Recoil is to set up another atom that holds all the IDs of the atom family. We do that with <code>commentThreadIDsState</code> above. Both these atoms would have to be kept in sync whenever we add/delete comment threads.</li>\n</ul>\n\n<p>We add a <code>RecoilRoot</code> wrapper in our root <code>App</code> component so we can use these atoms later. Recoil’s documentation also provides a helpful <a href=\"https://recoiljs.org/docs/guides/dev-tools/#observing-all-state-changes\">Debugger</a> component that we take as it is and drop into our editor. This component will leave <code>console.debug</code> logs to our Dev console as Recoil atoms are updated in real-time.</p>\n\n<pre><code class=\"language-javascript\"># src/components/App.js\n\nimport { RecoilRoot } from \"recoil\";\n\nexport default function App() {\n  ...\n\n  return (\n    &lt;RecoilRoot&gt;\n      &gt;\n         ...\n        &lt;Editor document={document} onChange={updateDocument} /&gt;\n    \n    &lt;/RecoilRoot&gt;\n  );\n}</code></pre>\n\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\nexport default function Editor({ ... }): JSX.Element {\n  .....\n\n  return (\n    &lt;&gt;\n      &lt;Slate&gt;\n         .....\n      &lt;/Slate&gt;\n      &lt;DebugObserver /&gt;\n   &lt;/&gt;\n);\n\nfunction DebugObserver(): React.Node {\n   // see API link above for implementation.\n}</code></pre>\n\n<p>We also need to need to add code that initializes our atoms with the comment threads that already exist on the document (the ones we added to our example document in the previous section, for instance). We do that at a later point when we build the Comments Sidebar that needs to read all the comment threads in a document.</p>\n\n<p>At this point, we load our application, make sure there are no errors pointing to our Recoil setup and move forward.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"adding-new-comments\">Adding New Comments</h3>\n\n<p>In this section, we add a button to the toolbar that lets the user add comments (viz. create a new comment thread) for the selected text range. When the user selects a text range and clicks on this button, we need to do the below:</p>\n\n<ol>\n<li>Assign a unique ID to the new comment thread being inserted.</li>\n<li>Add a new mark to Slate document structure with the ID so the user sees that text highlighted.</li>\n<li>Add the new comment thread to Recoil atoms we created in the previous section.</li>\n</ol>\n\n<p>Let’s add a util function to <code>EditorCommentUtils</code> that does #1 and #2.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nimport { Editor } from \"slate\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport function insertCommentThread(editor, addCommentThreadToState) {\n    const threadID = uuidv4();\n    const newCommentThread = {\n        // comments as added would be appended to the thread here.\n        comments: [],\n        creationTime: new Date(),\n        // Newly created comment threads are OPEN. We deal with statuses\n        // later in the article.\n        status: \"open\",\n    };\n    addCommentThreadToState(threadID, newCommentThread);\n    Editor.addMark(editor, getMarkForCommentThreadID(threadID), true);\n    return threadID;\n}</code></pre>\n</div>\n\n<p>By using the concept of marks to store each comment thread as its own mark, we’re able to simply use the <code>Editor.addMark</code> API to add a new comment thread on the text range selected. This call alone handles all the different cases of adding comments &mdash; some of which  we described in the earlier section &mdash; partially overlapping comments, comments inside/overlapping links, comments over bold/italic text, comments spanning paragraphs and so on. This API call adjusts the node hierarchy to create as many new text nodes as needed to handle these cases.</p>\n\n<p><code>addCommentThreadToState</code> is a callback function that handles step #3 &mdash; adding the new comment thread to Recoil atom . We implement that next as a custom callback hook so that it’s re-usable. This callback needs to add the new comment thread to both the atoms &mdash; <code>commentThreadsState</code> and <code>commentThreadIDsState</code>. To be able to do this, we use the <a href=\"https://recoiljs.org/docs/api-reference/core/useRecoilCallback\"><code>useRecoilCallback</code></a> hook. This hook can be used to construct a callback which gets a few things that can be used to read/set atom data. The one we’re interested in right now is the <code>set</code> function which can be used to update an atom value as <code>set(atom, newValueOrUpdaterFunction)</code>.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/hooks/useAddCommentThreadToState.js\n\nimport {\n  commentThreadIDsState,\n  commentThreadsState,\n} from \"../utils/CommentState\";\n\nimport { useRecoilCallback } from \"recoil\";\n\nexport default function useAddCommentThreadToState() {\n  return useRecoilCallback(\n    ({ set }) =&gt; (id, threadData) =&gt; {\n      set(commentThreadIDsState, (ids) =&gt; new Set([...Array.from(ids), id]));\n      set(commentThreadsState(id), threadData);\n    },\n    []\n  );\n}</code></pre>\n</div>\n\n<p>The first call to <code>set</code> adds the new ID to the existing set of comment thread IDs and returns the new <code>Set</code>(which becomes the new value of the atom).</p>\n\n<p>In the second call, we get the atom for the ID from the atom family &mdash; <code>commentThreadsState</code> as <code>commentThreadsState(id)</code> and then set the <code>threadData</code> to be its value. <code>atomFamilyName(atomID)</code> is how Recoil lets us access an atom from its atom family using the unique key. Loosely speaking, we could say that if <code>commentThreadsState</code> was a javascript Map, this call is basically &mdash; <code>commentThreadsState.set(id, threadData)</code>.</p>\n\n<p>Now that we have all this code setup to handle insertion of a new comment thread to the document and Recoil atoms, lets add a button to our toolbar and wire it up with the call to these functions.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n\nimport { insertCommentThread } from \"../utils/EditorCommentUtils\";\nimport useAddCommentThreadToState from \"../hooks/useAddCommentThreadToState\";\n\nexport default function Toolbar({ selection, previousSelection }) {\n  const editor = useEditor();\n  ...\n\n  const addCommentThread = useAddCommentThreadToState();\n\n  const onInsertComment = useCallback(() =&gt; {\n    const newCommentThreadID = insertCommentThread(editor, addCommentThread);\n  }, [editor, addCommentThread]);\n \nreturn (\n    &lt;div className=\"toolbar\"&gt;\n       ...\n      &lt;ToolBarButton\n        isActive={false}\n        label={&lt;i className={`bi ${getIconForButton(\"comment\")}`} /&gt;}\n        onMouseDown={onInsertComment}\n      /&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n</div>\n\n<p><strong>Note</strong>: <em>We use <code>onMouseDown</code> and not <code>onClick</code> which would have made the editor lose focus and selection to become <code>null</code>. We’ve discussed that in a little more detail in the link insertion section of the <a href=\"https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/\">first article</a>.</em></p>\n\n<p>In the below example, we see the insertion in action for a simple comment thread and an overlapping comment thread with links. Notice how we get updates from Recoil Debugger confirming our state is getting updated correctly. We also verify that new text nodes are created as threads are being added to the document.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554464535\"\n\t\t\tvideotitle=\"Inserting a comment thread splits the text node making the commented text its own node.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Inserting a comment thread splits the text node making the commented text its own node.</figcaption>\n\t\n</figure>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554465021\"\n\t\t\tvideotitle=\"More text nodes get created as we add overlapping comments.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>More text nodes get created as we add overlapping comments.</figcaption>\n\t\n</figure>\n\n<h3 id=\"overlapping-comments\">Overlapping Comments</h3>\n\n<p>Before we proceed with adding more features to our commenting system, we need to make some decisions around how we are going to deal with overlapping comments and their different combinations in the editor. To see why we need that, let’s take a sneak peek into how a Comment Popover works &mdash; a functionality we will build later in the article. When a user clicks on a certain text with comment thread(s) on it, we ‘select’ a comment thread and show a popover where the user can add comments to that thread.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554465973\"\n\t\t\tvideotitle=\"When the user clicks on a text node with overlapping comments, the editor needs to decide which comment thread to select.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>When the user clicks on a text node with overlapping comments, the editor needs to decide which comment thread to select.</figcaption>\n\t\n</figure>\n\n<p>As you can tell from the above video, the word ‘designers’ is now part of three comment threads. So we have two comment threads that overlap with each other over a word. And both these comment threads (#1 and #2) are fully contained inside a longer comment thread text range (#3). This raises a few questions:</p>\n\n<ol>\n<li>Which comment thread should we select and show when the user clicks on the word ‘designers’?</li>\n<li>Based on how we decide to tackle the above question, would we ever have a case of overlap where clicking on any word would never activate a certain comment thread and the thread cannot be accessed at all?</li>\n</ol>\n\n<p>This implies in the case of overlapping comments, the most important thing to consider is &mdash; once the user has inserted a comment thread, would there be a way for them to be able to select that comment thread in the future by clicking on some text inside it? If not, we probably don’t want to allow them to insert it in the first place. To ensure this principle is respected <strong>most</strong> of the time in our editor, we introduce two rules regarding overlapping comments and implement them in our editor.</p>\n\n<p>Before we define those rules, it’s worth calling out that different editors and word processors have different approaches when it comes to overlapping comments. To keep things simple, some editors do not allow overlapping comments whatsoever. In our case, we try to find a middle ground by not allowing too complicated cases of overlaps but still allowing overlapping comments so that users could have a richer Collaboration and Review experience.</p>\n\n<h4 id=\"shortest-comment-range-rule\">Shortest Comment Range Rule</h4>\n\n<p>This rule helps us answer the question #1 from above as to which comment thread to select if a user clicks on a text node that has multiple comment threads on it. The rule is:</p>\n\n<blockquote>“If the user clicks on text that has multiple comment threads on it, we find the comment thread of the shortest text range and select that.”</blockquote>\n\n<p>Intuitively, it makes sense to do this so that the user always has a way to get to the innermost comment thread that is fully contained inside another comment thread. For other conditions (partial overlap or no-overlap), there should be some text that has only one comment thread on it so it should be easy to use that text in order to select that comment thread. It’s the case of a full (or a <em>dense</em>) overlap of threads and why we need this rule.</p>\n\n<p>Let’s look at a rather complex case of overlap that allows us to use this rule and ‘do the right thing’ when selecting the comment thread.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"328\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example showing three comment threads overlapping each other in a way that the only way to select a comment thread is using the shortest length rule.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Following the Shortest Comment Thread Rule, clicking on ‘B’ selects comment thread #1. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/53fa0167-b5b0-4a19-9857-1e34b556dcf9/shortest-length-rule.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>In the above example, the user inserts the following comment threads in that order:</p>\n\n<ol>\n<li>Comment Thread #1 over character ‘B’ (length = 1).</li>\n<li>Comment Thread #2 over ‘AB’ (length = 2).</li>\n<li>Comment Thread #3 over ‘BC’ (length = 2).</li>\n</ol>\n\n<p>At the end of these insertions, because of the way Slate splits the text nodes with marks, we will have three text nodes &mdash; one for each character. Now, if the user clicks on ‘B’, going by the shortest length rule, we select thread #1 as it is the shortest of the three in length. If we don’t do that, we wouldn’t have a way to select Comment Thread #1 ever since it is only one-character in length and also a part of two other threads.</p>\n\n<p>Although this rule makes it easy to surface shorter-length comment threads, we could run into situations where longer comment threads become inaccessible since all the characters contained in them are part of some other shorter comment thread. Let’s look at an example for that.</p>\n\n<p>Let’s assume we have 100 characters (say, character ‘A’ typed 100 times that is) and the user inserts comment threads in the following order:</p>\n\n<ol>\n<li>Comment Thread # 1 of range 20,80</li>\n<li>Comment Thread # 2 of range 0,50</li>\n<li>Comment Thread # 3 of range 51,100</li>\n</ol>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"352\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example showing shortest length rule making a comment thread non-selectable as all of its text is covered by shorter comment threads.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      All text under Comment Thread #1 is also part of some other comment thread shorter than #1. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b0cd9e6-0722-4565-abf6-58a32fcb3f70/shortest-length-rule-exception.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>As you can see in the above example, if we follow the rule we just described here, clicking on any character between #20 and #80, would always select threads #2 or #3 since they are shorter than #1 and hence #1 would not be selectable. Another scenario where this rule can leave us undecided as to which comment thread to select is when there are more than one comment threads of the same shortest length on a text node.</p>\n\n<p>For such combination of overlapping comments and many other such combinations that one could think of where following this rule makes a certain comment thread inaccessible by clicking on text, we build a Comments Sidebar later in this article which gives user a view of all the comment threads present in the document so they can click on those threads in the sidebar and activate them in the editor to see the range of the comment. We still would want to have this rule and implement it as it should cover a lot of overlap scenarios except for the less-likely examples we cited above. We put in all this effort around this rule primarily because seeing highlighted text in the editor and clicking on it to comment is a more intuitive way of accessing a comment on text than merely using a list of comments in the sidebar.</p>\n\n<h4 id=\"insertion-rule\">Insertion Rule</h4>\n\n<p>The rule is:</p>\n\n<blockquote>“If the text user has selected and is trying to comment on is already fully covered by comment thread(s), don’t allow that insertion.”</blockquote>\n\n<p>This is so because if we did allow this insertion, each character in that range would end up having at least two comment threads (one existing and another the new one we just allowed) making it difficult for us to determine which one to select when the user clicks on that character later.</p>\n\n<p>Looking at this rule, one might wonder why we need it in the first place if we already have the Shortest Comment Range Rule that allows us to select the smallest text range. Why not allow all combinations of overlaps if we can use the first rule to deduce the right comment thread to show? As some of the examples we’ve discussed earlier, the first rule works for a lot of scenarios but not all of them. With the Insertion Rule, we try to minimize the number of scenarios where the first rule cannot help us and we have to fallback on the Sidebar as the only way for the user to access that comment thread. Insertion Rule also prevents exact-overlaps of comment threads. This rule is commonly implemented by a lot of popular editors.</p>\n\n<p>Below is an example where if this rule didn’t exist, we would allow the Comment Thread #3 and then as a result of the first rule, #3 would not be accessible since it would become the longest in length.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554477344\"\n\t\t\tvideotitle=\"Insertion Rule not allowing a third comment thread whose entire text range is covered by two other comment threads.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Insertion Rule not allowing a third comment thread whose entire text range is covered by two other comment threads.</figcaption>\n\t\n</figure>\n\n<p><strong>Note</strong>: <em>Having this rule doesn’t mean we would never have fully contained overlapping comments. The tricky thing about overlapping comments is that despite the rules, the order in which comments are inserted can still leave us in a state we didn’t want the overlap to be in. Referring back to our example of the comments on the word ‘designers’ earlier, the longest comment thread inserted there was the last one to be added so the Insertion Rule would allow it and we end up with a fully contained situation &mdash; #1 and #2 contained inside #3. That’s fine because the Shortest Comment Range Rule would help us out there.</em></p>\n\n<p>We’ll implement the Shortest Comment Range Rule in the <a href=\"#implementing-shortest-comment-range-rule\">next section</a> where we implement selecting of comment threads. Since we now have a toolbar button to insert comments, we can implement the Insertion Rule right away by checking the rule when the user has some text selected. If the rule is not satisfied, we would disable the Comment button so users cannot insert a new comment thread on the selected text. Let’s get started!</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nexport function shouldAllowNewCommentThreadAtSelection(editor, selection) {\n  if (selection == null || Range.isCollapsed(selection)) {\n    return false;\n  }\n\n  const textNodeIterator = Editor.nodes(editor, {\n    at: selection,\n    mode: \"lowest\",\n  });\n\n  let nextTextNodeEntry = textNodeIterator.next().value;\n  const textNodeEntriesInSelection = [];\n  while (nextTextNodeEntry != null) {\n    textNodeEntriesInSelection.push(nextTextNodeEntry);\n    nextTextNodeEntry = textNodeIterator.next().value;\n  }\n\n  if (textNodeEntriesInSelection.length === 0) {\n    return false;\n  }\n\n  return textNodeEntriesInSelection.some(\n    ([textNode]) =&gt; getCommentThreadsOnTextNode(textNode).size === 0\n  );\n}</code></pre>\n</div>\n\n<p>The logic in this function is relatively straightforward.</p>\n\n<ul>\n<li>If the user’s selection is a blinking caret, we don’t allow inserting a comment there as no text has been selected.</li>\n<li>If the user’s selection is not a collapsed one, we find all the text nodes in the selection. Note the use of the <code>mode: lowest</code> in the call to <code>Editor.nodes</code> (a helper function by SlateJS) that helps us select all the text nodes since text nodes are really the leaves of the document tree.</li>\n<li>If there is at least one text node that has no comment threads on it, we may allow the insertion. We use the util <code>getCommentThreadsOnTextNode</code> we wrote earlier here.</li>\n</ul>\n\n<p>We now use this util function inside the toolbar to control the disabled state of the button.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n\nexport default function Toolbar({ selection, previousSelection }) {\n  const editor = useEditor();\n  ....\n\n  return (\n   &lt;div className=\"toolbar\"&gt;\n     ....\n    &lt;ToolBarButton\n        isActive={false}\n        disabled={!shouldAllowNewCommentThreadAtSelection(\n          editor,\n          selection\n        )}\n        label={&lt;i className={`bi ${getIconForButton(\"comment\")}`} /&gt;}\n        onMouseDown={onInsertComment}\n      /&gt;\n  &lt;/div&gt;\n);</code></pre>\n</div>\n\n<p>Let’s test the implementation of the rule by recreating our example above.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554481310\"\n\t\t\tvideotitle=\"Insertion button in the toolbar disabled as user tries to insert comment over text range already fully covered by other comments.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Insertion button in the toolbar disabled as user tries to insert comment over text range already fully covered by other comments.</figcaption>\n\t\n</figure>\n\n<p>A fine user experience detail to call out here is that while we disable the toolbar button if the user has selected the entire line of text here, it doesn’t complete the experience for the user. The user may not fully understand why the button is disabled and is likely to get confused that we’re not responding to their intent to insert a comment thread there. We address this later as Comment Popovers are built such that even if the toolbar button is disabled, the popover for one of the comment threads would show up and the user would still be able to leave comments.</p>\n\n<p>Let’s also test a case where there is some uncommented text node and the rule allows inserting a new comment thread.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554481468\"\n\t\t\tvideotitle=\"Insertion Rule allowing insertion of comment thread when there is some uncommented text within user’s selection.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Insertion Rule allowing insertion of comment thread when there is some uncommented text within user’s selection.</figcaption>\n\t\n</figure>\n\n<h3 id=\"selecting-comment-threads\">Selecting Comment Threads</h3>\n\n<p>In this section, we enable the feature where the user clicks on a commented text node and we use the Shortest Comment Range Rule to determine which comment thread should be selected. The steps in the process are:</p>\n\n<ol>\n<li>Find the shortest comment thread on the commented text node that user clicks on.</li>\n<li>Set that comment thread to be the active comment thread. (We create a new Recoil atom which will be the source of truth for this.)</li>\n<li>The commented text nodes would listen to the Recoil state and if they are part of the active comment thread, they’d highlight themselves differently. That way, when the user clicks on the comment thread, the entire text range stands out as all the text nodes will update their highlight color.</li>\n</ol>\n\n<h4 id=\"implementing-shortest-comment-range-rule\">Step 1: Implementing Shortest Comment Range Rule</h4>\n\n<p>Let’s start with Step #1 which is basically implementing the Shortest Comment Range Rule. The goal here is to find the comment thread of the shortest range at the text node on which the user clicked. To find the shortest length thread, we need to compute the length of all the comment threads at that text node. Steps to do this are:</p>\n\n<ol>\n<li>Get all the comment threads at the text node in question.</li>\n<li>Traverse in either direction from that text node and keep updating the thread lengths being tracked.</li>\n<li>Stop the traversal in a direction when we’ve reached one of the below edges:\n\n<ul>\n<li>An uncommented text node (implying we’ve reached furthermost start/end edge of all the comment threads we’re tracking).</li>\n<li>A text node where all the comment threads we are tracking have reached an edge (start/end).</li>\n<li>There are no more text nodes to traverse in that direction (implying we’ve either reached the start or the end of the document or a non-text node).</li>\n</ul></li>\n</ol>\n\n<p>Since the traversals in forward and reverse direction are functionally the same, we’re going to write a helper function <code>updateCommentThreadLengthMap</code> that basically takes a text node iterator. It will keep calling the iterator and keep updating the tracking thread lengths. We’ll call this function twice &mdash; once for forward and once for backward direction. Let’s write our main utility function that will use this helper function.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nexport function getSmallestCommentThreadAtTextNode(editor, textNode) {\n\n  const commentThreads = getCommentThreadsOnTextNode(textNode);\n  const commentThreadsAsArray = [...commentThreads];\n\n  let shortestCommentThreadID = commentThreadsAsArray[0];\n\n  const reverseTextNodeIterator = (slateEditor, nodePath) =&gt;\n    Editor.previous(slateEditor, {\n      at: nodePath,\n      mode: \"lowest\",\n      match: Text.isText,\n    });\n\n  const forwardTextNodeIterator = (slateEditor, nodePath) =&gt;\n    Editor.next(slateEditor, {\n      at: nodePath,\n      mode: \"lowest\",\n      match: Text.isText,\n    });\n\n  if (commentThreads.size &gt; 1) {\n\n    // The map here tracks the lengths of the comment threads.\n    // We initialize the lengths with length of current text node\n    // since all the comment threads span over the current text node\n    // at the least.\n    const commentThreadsLengthByID = new Map(\n      commentThreadsAsArray.map((id) =&gt; [id, textNode.text.length])\n    );\n\n\n    // traverse in the reverse direction and update the map\n    updateCommentThreadLengthMap(\n      editor,\n      commentThreads,\n      reverseTextNodeIterator,\n      commentThreadsLengthByID\n    );\n\n    // traverse in the forward direction and update the map\n    updateCommentThreadLengthMap(\n      editor,\n      commentThreads,\n      forwardTextNodeIterator,\n      commentThreadsLengthByID\n    );\n\n    let minLength = Number.POSITIVE_INFINITY;\n\n\n    // Find the thread with the shortest length.\n    for (let [threadID, length] of commentThreadsLengthByID) {\n      if (length &lt; minLength) {\n        shortestCommentThreadID = threadID;\n        minLength = length;\n      }\n    }\n  }\n\n  return shortestCommentThreadID;\n}</code></pre>\n</div>\n\n<p>The steps we listed out are all covered in the above code. The comments should help follow how the logic flows there.</p>\n\n<p>One thing worth calling out is how we created the traversal functions. We want to give a traversal function to <code>updateCommentThreadLengthMap</code> such that it can call it while it is iterating text node’s path and easily get the previous/next text node. To do that, Slate’s traversal utilities <code>Editor.previous</code> and <code>Editor.next</code> (defined in the <a href=\"https://github.com/ianstormtaylor/slate/blob/0b0328b2d0a595d48905b41c6afcc4f65bc352c6/packages/slate/src/interfaces/editor.ts#L237\">Editor</a> interface) are very helpful. Our iterators <code>reverseTextNodeIterator</code> and <code>forwardTextNodeIterator</code> call these helpers with two options <code>mode: lowest</code> and the match function <code>Text.isText</code> so we know we’re getting a text node from the traversal, if there is one.</p>\n\n<p>Now we implement <code>updateCommentThreadLengthMap</code> which traverses using these iterators and updates the lengths we’re tracking.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nfunction updateCommentThreadLengthMap(\n  editor,\n  commentThreads,\n  nodeIterator,\n  map\n) {\n  let nextNodeEntry = nodeIterator(editor);\n\n  while (nextNodeEntry != null) {\n    const nextNode = nextNodeEntry[0];\n    const commentThreadsOnNextNode = getCommentThreadsOnTextNode(nextNode);\n\n    const intersection = [...commentThreadsOnNextNode].filter((x) =&gt;\n      commentThreads.has(x)\n    );\n\n     // All comment threads we're looking for have already ended meaning\n    // reached an uncommented text node OR a commented text node which\n    // has none of the comment threads we care about.\n    if (intersection.length === 0) {\n      break;\n    }\n\n\n    // update thread lengths for comment threads we did find on this\n    // text node.\n    for (let i = 0; i &lt; intersection.length; i++) {\n      map.set(intersection[i], map.get(intersection[i]) + nextNode.text.length);\n    }\n\n\n    // call the iterator to get the next text node to consider\n    nextNodeEntry = nodeIterator(editor, nextNodeEntry[1]);\n  }\n\n  return map;\n}\n</code></pre>\n</div>\n\n<p>One might wonder why do we wait until the <code>intersection</code> becomes <code>0</code> to stop iterating in a certain direction. Why can’t we just stop if we’re reached the edge of at least one comment thread &mdash; that would imply we’ve reached the shortest length in that direction, right? The reason we can’t do that is that we know that a comment thread can span over multiple text nodes and we wouldn’t know which of those text nodes did the user click on and we started our traversal from. We wouldn’t know the range of all comment threads in question without fully traversing to the farthest edges of the union of the text ranges of the comment threads in both the directions.</p>\n\n<p>Check out the below example where we have two comment threads ‘A’ and ‘B’ overlapping each other in some way resulting into three text nodes 1,2 and 3 &mdash; #2 being the text node with the overlap.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example of multiple comment threads overlapping on a text node.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Two comment threads overlapping over the word ‘text’. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4babfb22-4448-4706-8f29-ab11bf43800b/select-comment-thread-example.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>In this example, let’s assume we don’t wait for intersection to become 0 and just stop when we reach the edge of a comment thread. Now, if the user clicked on #2 and we start traversal in reverse direction, we’d stop at the start of text node #2 itself since that’s the start of the comment thread A. As a result, we might not compute the comment thread lengths correctly for A &amp; B. With the implementation above traversing the farthest edges (text nodes 1,2, and 3), we should get B as the shortest comment thread as expected.</p>\n\n<p>To see the implementation visually, below is a walkthrough with a slideshow of the iterations. We have two comment threads A and B that overlap each other over text node #3 and the user clicks on the overlapping text node #3.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554484825\"\n\t\t\tvideotitle=\"Slideshow showing iterations in the implementation of Shortest Comment Thread Rule.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Slideshow showing iterations in the implementation of Shortest Comment Thread Rule.</figcaption>\n\t\n</figure>\n\n<h4 id=\"steps-2-3-maintaining-state-of-the-selected-comment-thread-and-highlighting-it\">Steps 2 &amp; 3: Maintaining State Of The Selected Comment Thread And Highlighting It</h4>\n\n<p>Now that we have the logic for the rule fully implemented, let’s update the editor code to use it. For that, we first create a Recoil atom that’ll store the active comment thread ID for us. We then update the <code>CommentedText</code> component to use our rule’s implementation.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/CommentState.js\n\nimport { atom } from \"recoil\";\n\nexport const activeCommentThreadIDAtom = atom({\n  key: \"activeCommentThreadID\",\n  default: null,\n});\n\n\n# src/components/CommentedText.js\n\nimport { activeCommentThreadIDAtom } from \"../utils/CommentState\";\nimport classNames from \"classnames\";\nimport { getSmallestCommentThreadAtTextNode } from \"../utils/EditorCommentUtils\";\nimport { useRecoilState } from \"recoil\";\n\nexport default function CommentedText(props) {\n ....\nconst { commentThreads, textNode, ...otherProps } = props;\nconst [activeCommentThreadID, setActiveCommentThreadID] = useRecoilState(\n    activeCommentThreadIDAtom\n  );\n\n  const onClick = () =&gt; {\n    setActiveCommentThreadID(\n      getSmallestCommentThreadAtTextNode(editor, textNode)\n    );\n  };\n\n  return (\n    &lt;span\n      {...otherProps}\n      className={classNames({\n        comment: true,\n        // a different background color treatment if this text node's\n        // comment threads do contain the comment thread active on the\n        // document right now.   \n        \"is-active\": commentThreads.has(activeCommentThreadID),\n      })}\n      onClick={onClick}\n    &gt;\n      {props.children}\n    &gl;/span&gt;\n  );\n}</code></pre>\n</div>\n\n<p>This component uses <code>useRecoilState</code> that allows a component to subscribe to and also be able to set the value of Recoil atom. We need the subscriber to know if this text node is part of the active comment thread so it can style itself differently. Check out the screenshot below where the comment thread in the middle is active and we can see its range clearly.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"364\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Example showing how text node(s) under selected comment thread jump out.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Text node(s) under selected comment thread change in style and jump out. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4375dda-a6f9-40d7-9f88-bc19ffef04d0/select-comment-thread-range.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Now that we have all the code in to make selection of comment threads work, let’s see it in action. To test our traversal code well, we test some straightforward cases of overlap and some edge cases like:</p>\n\n<ul>\n<li>Clicking on a commented text node at the start/end of the editor.</li>\n<li>Clicking on a commented text node with comment threads spanning multiple paragraphs.</li>\n<li>Clicking on a commented text node right before an image node.</li>\n<li>Clicking on a commented text node overlapping links.</li>\n</ul>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554486191\"\n\t\t\tvideotitle=\"Selecting shortest comment thread for different overlap combinations.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Selecting shortest comment thread for different overlap combinations.</figcaption>\n\t\n</figure>\n\n<p>As we now have a Recoil atom to track the active comment thread ID, one tiny detail to take care of is setting the newly created comment thread to be the active one when the user uses the toolbar button to insert a new comment thread. This enables us, in the next section, to show the comment thread popover immediately on insertion so the user can start adding comments right away.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n\nimport useAddCommentThreadToState from \"../hooks/useAddCommentThreadToState\";\nimport { useSetRecoilState } from \"recoil\";\n\nexport default function Toolbar({ selection, previousSelection }) {\n  ...\n  const setActiveCommentThreadID = useSetRecoilState(activeCommentThreadIDAtom);\n .....\n  const onInsertComment = useCallback(() =&gt; {\n    const newCommentThreadID = insertCommentThread(editor, addCommentThread);\n    setActiveCommentThreadID(newCommentThreadID);\n  }, [editor, addCommentThread, setActiveCommentThreadID]);\n\n return &lt;div className='toolbar'&gt;\n              ....\n           &lt;/div&gt;;\n};</code></pre>\n</div>\n\n<p><strong>Note:</strong> <em>The use of <a href=\"https://recoiljs.org/docs/api-reference/core/useSetRecoilState\"><code>useSetRecoilState</code></a> here (a Recoil hook that exposes a setter for the atom but doesn’t subscribe the component to its value) is what we need for the toolbar in this case.</em></p>\n\n<h3 id=\"adding-comment-thread-popovers\">Adding Comment Thread Popovers</h3>\n\n<p>In this section, we build a Comment Popover that makes use of the concept of selected/active comment thread and shows a popover that lets the user add comments to that comment thread. Before we build it, let’s take a quick look at how it functions.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554488598\"\n\t\t\tvideotitle=\"Preview of the Comment Popover Feature.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Preview of the Comment Popover Feature.</figcaption>\n\t\n</figure>\n\n<p>When trying to render a Comment Popover close to the comment thread that is active, we run into some of the problems that we did in the first article with a Link Editor Menu. At this point, it is encouraged to read through the section in the <a href=\"https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/\">first article</a> that builds a Link Editor and the selection issues we run into with that.</p>\n\n<p>Let’s first work on rendering an empty popover component in the right place based on the what active comment thread is. The way popover would work is:</p>\n\n<ul>\n<li><strong>Comment Thread Popover</strong> is rendered only when there is an active comment thread ID. To get that information, we listen to the Recoil atom we created in the previous section.</li>\n<li>When it does render, we find the text node at the editor’s selection and render the popover close to it.</li>\n<li>When the user clicks anywhere outside the popover, we set the active comment thread to be <code>null</code> thereby de-activating the comment thread and also making the popover disappear.</li>\n</ul>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentThreadPopover.js\n\nimport NodePopover from \"./NodePopover\";\nimport { getFirstTextNodeAtSelection } from \"../utils/EditorUtils\";\nimport { useEditor } from \"slate-react\";\nimport { useSetRecoilState} from \"recoil\";\n\nimport {activeCommentThreadIDAtom} from \"../utils/CommentState\";\n\nexport default function CommentThreadPopover({ editorOffsets, selection, threadID }) {\n  const editor = useEditor();\n  const textNode = getFirstTextNodeAtSelection(editor, selection);\n  const setActiveCommentThreadID = useSetRecoilState(\n    activeCommentThreadIDAtom\n  );\n\n  const onClickOutside = useCallback(\n    () =&gt; {},\n    []\n  );\n\n  return (\n    &lt;NodePopover\n      editorOffsets={editorOffsets}\n      isBodyFullWidth={true}\n      node={textNode}\n      className={\"comment-thread-popover\"}\n      onClickOutside={onClickOutside}\n    &gt;\n      {`Comment Thread Popover for threadID:${threadID}`}\n    &lt;/NodePopover&gt;\n  );\n}</code></pre>\n</div>\n\n<p>Couple of things that should be called out for this implementation of the popover component:</p>\n\n<ul>\n<li>It takes the <code>editorOffsets</code> and the <code>selection</code> from the <code>Editor</code> component where it would be rendered. <code>editorOffsets</code> are the bounds of the Editor component so we could compute the position of the popover and <code>selection</code> could be current or previous selection in case the user used a toolbar button causing <code>selection</code> to become <code>null</code>. The section on the Link Editor from the first article linked above goes through these in detail.</li>\n<li>Since the <code>LinkEditor</code> from the first article and the <code>CommentThreadPopover</code> here, both render a popover around a text node, we’ve moved that common logic into a component <code>NodePopover</code> that handles rendering of the component aligned to the text node in question. Its implementation details are what <code>LinkEditor</code> component had in the first article.</li>\n<li><code>NodePopover</code> takes a <code>onClickOutside</code> method as a prop that is called if the user clicks somewhere outside the popover. We implement this by attaching <code>mousedown</code> event listener to the <code>document</code> &mdash; as explained in detail in <a href=\"https://www.smashingmagazine.com/2021/03/outside-focus-click-handler-react-component/\">this</a> Smashing article on this idea.</li>\n<li><code>getFirstTextNodeAtSelection</code> gets the first text node inside the user&rsquo;s selection which we use to render the popover against. The implementation of this function uses Slate’s helpers to find the text node.</li>\n</ul>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorUtils.js\n\nexport function getFirstTextNodeAtSelection(editor, selection) {\n  const selectionForNode = selection ?? editor.selection;\n\n  if (selectionForNode == null) {\n    return null;\n  }\n\n  const textNodeEntry = Editor.nodes(editor, {\n    at: selectionForNode,\n    mode: \"lowest\",\n    match: Text.isText,\n  }).next().value;\n\n  return textNodeEntry != null ? textNodeEntry[0] : null;\n}</code></pre>\n\n<p>Let’s implement the <code>onClickOutside</code> callback that should clear the active comment thread. However, we have to account for the scenario when the comment thread popover is open and a certain thread is active and the user happens to click on another comment thread. In that case, we don’t want the <code>onClickOutside</code> to reset the active comment thread since the click event on the other <code>CommentedText</code> component should set the other comment thread to become active. We don’t want to interfere with that in the popover.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<p>The way we do that is that is we find the Slate Node closest to the DOM node where the click event happened. If that Slate node is a text node and has comments on it, we skip resetting the active comment thread Recoil atom. Let’s implement it!</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentThreadPopover.js\n\nconst setActiveCommentThreadID = useSetRecoilState(activeCommentThreadIDAtom);\n\nconst onClickOutside = useCallback(\n    (event) =&gt; {\n      const slateDOMNode = event.target.hasAttribute(\"data-slate-node\")\n        ? event.target\n        : event.target.closest('[data-slate-node]');\n\n      // The click event was somewhere outside the Slate hierarchy.\n      if (slateDOMNode == null) {\n        setActiveCommentThreadID(null);\n        return;\n      }\n\n      const slateNode = ReactEditor.toSlateNode(editor, slateDOMNode);\n\n      // Click is on another commented text node =&gt; do nothing.\n      if (\n        Text.isText(slateNode) &&\n        getCommentThreadsOnTextNode(slateNode).size &gt; 0\n      ) {\n        return;\n      }\n\n      setActiveCommentThreadID(null);\n    },\n    [editor, setActiveCommentThreadID]\n  );</code></pre>\n</div>\n\n<p>Slate has a helper method <code>toSlateNode</code> that returns the Slate node that maps to a DOM node or its closest ancestor if itself isn’t a Slate Node. The current <a href=\"https://github.com/ianstormtaylor/slate/blob/1a4c67f5fad60b3a8df94c9a29568c02bfa1c18e/packages/slate-react/src/plugin/react-editor.ts#L367\">implementation</a> of this helper throws an error if it can’t find a Slate node instead of returning <code>null</code>. We handle that above by checking the <code>null</code> case ourselves which is a very likely scenario if the user clicks somewhere outside the editor where Slate nodes don’t exist.</p>\n\n<p>We can now update the <code>Editor</code> component to listen to the <code>activeCommentThreadIDAtom</code> and render the popover only when a comment thread is active.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\nimport { useRecoilValue } from \"recoil\";\nimport { activeCommentThreadIDAtom } from \"../utils/CommentState\";\n\nexport default function Editor({ document, onChange }): JSX.Element {\n\n  const activeCommentThreadID = useRecoilValue(activeCommentThreadIDAtom);\n  // This hook is described in detail in the first article\n  const [previousSelection, selection, setSelection] = useSelection(editor);\n\n  return (\n    &lt;&gt;\n               ...\n              &lt;div className=\"editor\" ref={editorRef}&gt;\n                 ...\n                {activeCommentThreadID != null ? (\n                  &lt;CommentThreadPopover\n                    editorOffsets={editorOffsets}\n                    selection={selection ?? previousSelection}\n                    threadID={activeCommentThreadID}\n                  /&gt;\n                ) : null}\n             &lt;/div&gt;\n               ...\n    &lt;/&gt;\n  );\n}</code></pre>\n</div>\n\n<p>Let’s verify that the popover loads at the right place for the right comment thread and does clear the active comment thread when we click outside.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554492643\"\n\t\t\tvideotitle=\"Comment Thread Popover correctly loads for the selected comment thread.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Comment Thread Popover correctly loads for the selected comment thread.</figcaption>\n\t\n</figure>\n\n<p>We now move on to enabling users to add comments to a comment thread and seeing all the comments of that thread in the popover. We are going to use the Recoil atom family &mdash; <code>commentThreadsState</code> we created earlier in the article for this.</p>\n\n<p>The comments in a comment thread are stored on the <code>comments</code> array. To enable adding a new comment, we render a Form input that allows the user to enter a new comment. While the user is typing out the comment, we maintain that in a local state variable &mdash; <code>commentText</code>. On the click of the button, we append the comment text as the new comment to the <code>comments</code> array.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentThreadPopover.js\n\nimport { commentThreadsState } from \"../utils/CommentState\";\nimport { useRecoilState } from \"recoil\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nexport default function CommentThreadPopover({\n  editorOffsets,\n  selection,\n  threadID,\n}) {\n\n  const [threadData, setCommentThreadData] = useRecoilState(\n    commentThreadsState(threadID)\n  );\n\n  const [commentText, setCommentText] = useState(\"\");\n\n  const onClick = useCallback(() =&gt; {\n    setCommentThreadData((threadData) =&gt; ({\n      ...threadData,\n      comments: [\n        ...threadData.comments,\n        // append comment to the comments on the thread.\n        { text: commentText, author: \"Jane Doe\", creationTime: new Date() },\n      ],\n    }));\n    // clear the input\n    setCommentText(\"\");\n  }, [commentText, setCommentThreadData]);\n\n  const onCommentTextChange = useCallback(\n    (event) =&gt; setCommentText(event.target.value),\n    [setCommentText]\n  );\n\n  return (\n    &lt;NodePopover\n      ...\n    &gt;\n      &lt;div className={\"comment-input-wrapper\"}&gt;\n        &lt;Form.Control\n          bsPrefix={\"comment-input form-control\"}\n          placeholder={\"Type a comment\"}\n          type=\"text\"\n          value={commentText}\n          onChange={onCommentTextChange}\n        /&gt;\n        &lt;Button\n          size=\"sm\"\n          variant=\"primary\"\n          disabled={commentText.length === 0}\n          onClick={onClick}\n        &gt;\n          Comment\n        &lt;/Button&gt;\n      &lt;/div&gt;\n    &lt;/NodePopover&gt;\n  );\n}</code></pre>\n</div>\n\n<p><strong>Note</strong>: <em>Although we render an input for the user to type in comment, we don’t necessarily let it take focus when the popover mounts. This is a User Experience decision that could vary from one editor to another. Some editors do not let users edit the text while the comment thread popover is open. In our case, we want to be able to let the user edit the commented text when they click on it.</em></p>\n\n<p>Worth calling out how we access the specific comment thread’s data from the Recoil atom family &mdash; by calling out the atom as &mdash; <code>commentThreadsState(threadID)</code>. This gives us the value of the atom and a setter to update just that atom in the family. If the comments are being lazy loaded from the server, Recoil also provides a <a href=\"https://recoiljs.org/docs/api-reference/core/useRecoilStateLoadable\"><code>useRecoilStateLoadable</code></a> hook that returns a <a href=\"https://recoiljs.org/docs/api-reference/core/Loadable\">Loadable</a> object which tells us about the loading state of the atom’s data. If it is still loading, we can choose to show a loading state in the popover.</p>\n\n<p>Now, we access the <code>threadData</code> and render the list of comments. Each comment is rendered by the <code>CommentRow</code> component.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentThreadPopover.js\n\nreturn (\n    &lt;NodePopover\n      ...\n    &gt;\n      &lt;div className={\"comment-list\"}&gt;\n        {threadData.comments.map((comment, index) =&gt; (\n          &lt;CommentRow key={`comment_${index}`} comment={comment} /&gt;\n        ))}\n      &lt;/div&gt;\n      ...\n    &lt;/NodePopover&gt;\n);</code></pre>\n</div>\n\n<p>Below is the implementation of <code>CommentRow</code> that renders the comment text and other metadata like author name and creation time. We use the <code>date-fns</code> module to show a formatted creation time.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentRow.js\n\nimport { format } from \"date-fns\";\n\nexport default function CommentRow({\n  comment: { author, text, creationTime },\n}) {\n  return (\n    &lt;div className={\"comment-row\"}&gt;\n      &lt;div className=\"comment-author-photo\"&gt;\n        &lt;i className=\"bi bi-person-circle comment-author-photo\"&gt;&lt;/i&gt;\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;span className=\"comment-author-name\"&gt;{author}&lt;/span&gt;\n        &lt;span className=\"comment-creation-time\"&gt;\n          {format(creationTime, \"eee MM/dd H:mm\")}\n        &lt;/span&gt;\n        &lt;div className=\"comment-text\"&gt;{text}&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n</div>\n\n<p>We’ve extracted this to be its own component as we re-use it later when we implement the Comment Sidebar.</p>\n\n<p>At this point, our Comment Popover has all the code it needs to allow inserting new comments and updating the Recoil state for the same. Let’s verify that. On the browser console, using the Recoil Debug Observer we added earlier, we’re able to verify that the Recoil atom for the comment thread is getting updated correctly as we add new comments to the thread.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554497047\"\n\t\t\tvideotitle=\"Comment Thread Popover loads on selecting a comment thread.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Comment Thread Popover loads on selecting a comment thread.</figcaption>\n\t\n</figure>\n\n<h3 id=\"adding-a-comments-sidebar\">Adding A Comments Sidebar</h3>\n\n<p>Earlier in the article, we’ve called out why occasionally, it may so happen that the rules we implemented prevent a certain comment thread to not be accessible by clicking on its text node(s) alone &mdash; depending upon the combination of overlap. For such cases, we need a Comments Sidebar that lets the user get to any and all comment threads in the document.</p>\n\n<p>A Comments Sidebar is also a good addition that weaves into a Suggestion &amp; Review workflow where a reviewer can navigate through all the comment threads one after the other in a sweep and be able to leave comments/replies wherever they feel the need to. Before we start implementing the sidebar, there is one unfinished task we take care of below.</p>\n\n<h4 id=\"initializing-recoil-state-of-comment-threads\">Initializing Recoil State Of Comment Threads</h4>\n\n<p>When the document is loaded in the editor, we need to scan the document to find all the comment threads and add them to the Recoil atoms we created above as part of the initialization process. Let’s write a utility function in <code>EditorCommentUtils</code> that scans the text nodes, finds all the comment threads and adds them to the Recoil atom.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/utils/EditorCommentUtils.js\n\nexport async function initializeStateWithAllCommentThreads(\n  editor,\n  addCommentThread\n) {\n  const textNodesWithComments = Editor.nodes(editor, {\n    at: [],\n    mode: \"lowest\",\n    match: (n) =&gt; Text.isText(n) && getCommentThreadsOnTextNode(n).size &gt; 0,\n  });\n\n  const commentThreads = new Set();\n\n  let textNodeEntry = textNodesWithComments.next().value;\n  while (textNodeEntry != null) {\n    [...getCommentThreadsOnTextNode(textNodeEntry[0])].forEach((threadID) =&gt; {\n      commentThreads.add(threadID);\n    });\n    textNodeEntry = textNodesWithComments.next().value;\n  }\n\n  Array.from(commentThreads).forEach((id) =&gt;\n    addCommentThread(id, {\n      comments: [\n        {\n          author: \"Jane Doe\",\n          text: \"Comment Thread Loaded from Server\",\n          creationTime: new Date(),\n        },\n      ],\n      status: \"open\",\n    })\n  );\n}</code></pre>\n</div>\n\n<h5 id=\"syncing-with-backend-storage-and-performance-consideration\">Syncing with Backend Storage and Performance Consideration</h5>\n\n<p>For the context of the article, as we’re purely focused on the UI implementation, we just initialize them with some data that lets us confirm the initialization code is working.</p>\n\n<p>In the real-world usage of the Commenting System, comment threads are likely to be stored separately from the document contents themselves. In such a case, the above code would need to be updated to make an API call that fetches all the metadata and comments on all the comment thread IDs in <code>commentThreads</code>. Once the comment threads are loaded, they are likely to be updated as multiple users add more comments to them in real time, change their status and so on. The production version of the Commenting System would need to structure the Recoil storage in a way that we can keep syncing it with the server. If you choose to use Recoil for state management, there are some <a href=\"https://recoiljs.org/docs/guides/atom-effects#state-synchronization-example\">examples</a> on the Atom Effects API (experimental as of writing this article) that do something similar.</p>\n\n<p>If a document is really long and has a lot of users collaborating on it on a lot of comment threads, we might have to optimize the initialization code to only load comment threads for the first few pages of the document. Alternatively, we may choose to only load the light-weight metadata of all the comment threads instead of the entire list of comments which is likely the heavier part of the payload.</p>\n\n<p>Now, let&rsquo;s move on to calling this function when the  <code>Editor</code> component mounts with the document so the Recoil state is correctly initialized.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\nimport { initializeStateWithAllCommentThreads } from \"../utils/EditorCommentUtils\";\nimport useAddCommentThreadToState from \"../hooks/useAddCommentThreadToState\";\n \nexport default function Editor({ document, onChange }): JSX.Element {\n   ...\n  const addCommentThread = useAddCommentThreadToState();\n\n  useEffect(() =&gt; {\n    initializeStateWithAllCommentThreads(editor, addCommentThread);\n  }, [editor, addCommentThread]);\n\n  return (\n     &lt;&gt;\n       ...\n     &lt;/&gt;\n  );\n}</code></pre>\n</div>\n\n<p>We use the same custom hook &mdash; <code>useAddCommentThreadToState</code> that we used with the Toolbar Comment Button implementation to add new comment threads. Since we have the popover working, we can click on one of pre-existing comment threads in the document and verify that it shows the data we used to initialize the thread above.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"344\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Clicking on a pre-existing comment thread loads the popover with their comments correctly.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Clicking on a pre-existing comment thread loads the popover with their comments correctly. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18412e7f-4e8c-4725-ac02-ee2819725b60/recoil-initialization.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Now that our state is correctly initialized, we can start implementing the sidebar. All our comment threads in the UI are stored in the Recoil atom family &mdash; <code>commentThreadsState</code>. As highlighted earlier, the way we iterate through all the items in a Recoil atom family is by tracking the atom keys/ids in another atom. We’ve been doing that with <code>commentThreadIDsState</code>.  Let’s add the <code>CommentSidebar</code> component that iterates through the set of ids in this atom and renders a <code>CommentThread</code> component for each.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentsSidebar.js\n\nimport \"./CommentSidebar.css\";\n\nimport {commentThreadIDsState,} from \"../utils/CommentState\";\nimport { useRecoilValue } from \"recoil\";\n\nexport default function CommentsSidebar(params) {\n  const allCommentThreadIDs = useRecoilValue(commentThreadIDsState);\n\n  return (\n    &lt;Card className={\"comments-sidebar\"}&gt;\n      &lt;Card.Header&gt;Comments&lt;/Card.Header&gt;\n      &lt;Card.Body&gt;\n        {Array.from(allCommentThreadIDs).map((id) =&gt; (\n          &lt;Row key={id}&gt;\n            &lt;Col&gt;\n              &lt;CommentThread id={id} /&gt;\n            &lt;/Col&gt;\n          &lt;/Row&gt;\n        ))}\n      &lt;/Card.Body&gt;\n    &lt;/Card&gt;\n  );\n}</code></pre>\n</div>\n\n<p>Now, we implement the <code>CommentThread</code> component that listens to the Recoil atom in the family corresponding to the comment thread it is rendering. This way, as the user adds more comments on the thread in the editor or changes any other metadata, we can update the sidebar to reflect that.</p>\n\n<p>As the sidebar could grow to be really big for a document with a lot of comments, we hide all comments but the first one when we render the sidebar. The user can use the ‘Show/Hide Replies’ button to show/hide the entire thread of comments.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentSidebar.js\n\nfunction CommentThread({ id }) {\n  const { comments } = useRecoilValue(commentThreadsState(id));\n\n  const [shouldShowReplies, setShouldShowReplies] = useState(false);\n  const onBtnClick = useCallback(() =&gt; {\n    setShouldShowReplies(!shouldShowReplies);\n  }, [shouldShowReplies, setShouldShowReplies]);\n\n  if (comments.length === 0) {\n    return null;\n  }\n\n  const [firstComment, ...otherComments] = comments;\n  return (\n    &lt;Card\n      body={true}\n      className={classNames({\n        \"comment-thread-container\": true,\n      })}\n    &gt;\n      &lt;CommentRow comment={firstComment} showConnector={false} /&gt;\n      {shouldShowReplies\n        ? otherComments.map((comment, index) =&gt; (\n            &lt;CommentRow key={`comment-${index}`} comment={comment} showConnector={true} /&gt;\n          ))\n        : null}\n      {comments.length &gt; 1 ? (\n        &lt;Button\n          className={\"show-replies-btn\"}\n          size=\"sm\"\n          variant=\"outline-primary\"\n          onClick={onBtnClick}\n        &gt;\n          {shouldShowReplies ? \"Hide Replies\" : \"Show Replies\"}\n        &lt;/Button&gt;\n      ) : null}\n    &lt;/Card&gt;\n  );\n}</code></pre>\n</div>\n\n<p>We’ve reused the <code>CommentRow</code> component from the popover although we added a design treatment using <code>showConnector</code> prop that basically makes all the comments look connected with a thread in the sidebar.</p>\n\n<p>Now, we render the <code>CommentSidebar</code> in the <code>Editor</code> and verify that it shows all the threads we have in the document and correctly updates as we add new threads or new comments to existing threads.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\nreturn (\n    &lt;&gt;\n      &lt;Slate ... &gt;\n       .....\n        &lt;div className={\"sidebar-wrapper\"}&gt;\n          &lt;CommentsSidebar /&gt;\n            &lt;/div&gt;\n      &lt;/Slate&gt;\n    &lt;/&gt;\n);</code></pre>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554503454\"\n\t\t\tvideotitle=\"Comments Sidebar with all the comment threads in the document.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Comments Sidebar with all the comment threads in the document.</figcaption>\n\t\n</figure>\n\n<p>We now move on to implementing a popular Comments Sidebar interaction found in editors:</p>\n\n<p>Clicking on a comment thread in the sidebar should select/activate that comment thread. We also add a differential design treatment to highlight a comment thread in the sidebar if it’s active in the editor. To be able to do so, we use the Recoil atom &mdash; <code>activeCommentThreadIDAtom</code>. Let’s update the <code>CommentThread</code> component to support this.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentsSidebar.js\n\nfunction CommentThread({ id }) {\n \nconst [activeCommentThreadID, setActiveCommentThreadID] = useRecoilState(\n    activeCommentThreadIDAtom\n  );\n\nconst onClick = useCallback(() =&gt; {   \n    setActiveCommentThreadID(id);\n  }, [id, setActiveCommentThreadID]);\n\n  ...\n\n  return (\n    &lt;Card\n      body={true}\n      className={classNames({\n        \"comment-thread-container\": true,\n        \"is-active\": activeCommentThreadID === id,      \n      })}\n      onClick={onClick}\n    &gt;\n    ....\n   &lt;/Card&gt;\n);</code></pre>\n</div>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554504775\"\n\t\t\tvideotitle=\"Clicking on a comment thread in Comments Sidebar selects it in the editor and highlights its range.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Clicking on a comment thread in Comments Sidebar selects it in the editor and highlights its range.</figcaption>\n\t\n</figure>\n\n<p>If we look closely, we have a bug in our implementation of sync-ing the active comment thread with the sidebar. As we click on different comment threads in the sidebar, the correct comment thread is indeed highlighted in the editor. However, the Comment Popover doesn’t actually move to the changed active comment thread. It stays where it was first rendered. If we look at the implementation of the Comment Popover, it renders itself against the first text node in the editor’s selection. At that point in the implementation, the only way to select a comment thread was to click on a text node so we could conveniently rely on the editor&rsquo;s selection since it was updated by Slate as a result of the click event. In the above <code>onClick</code> event, we don’t update the selection but merely update the Recoil atom value causing Slate’s selection to remain unchanged and hence the Comment Popover doesn’t move.</p>\n\n<p>A solution to this problem is to update the editor’s selection along with updating the Recoil atom when the user clicks on the comment thread in the sidebar. The steps do this are:</p>\n\n<ol>\n<li>Find all text nodes that have this comment thread on them that we are going to set as the new active thread.</li>\n<li>Sort these text nodes in the order in which they appear in the document (We use Slate’s <a href=\"https://github.com/ianstormtaylor/slate/blob/f7b6f438ef5ca504eebef39bfc11850ff2c39c3e/packages/slate/src/interfaces/path.ts#L15\"><code>Path.compare</code></a> API for this).</li>\n<li>Compute a selection range that spans from the start of the first text node to the end of the last text node.</li>\n<li>Set the selection range to be the editor’s new selection (using Slate’s <a href=\"https://github.com/ianstormtaylor/slate/blob/e4936c3f32711a646ecdb51d4a75462975861660/packages/slate/src/transforms/selection.ts#L20\"><code>Transforms.select</code></a> API).</li>\n</ol>\n\n<p>If we just wanted to fix the bug, we could just find the first text node in Step #1 that has the comment thread and set that to be the editor’s selection. However, it feels like a cleaner approach to select the entire comment range as we really are selecting the comment thread.</p>\n\n<p>Let’s update the <code>onClick</code> callback implementation to include the steps above.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">const onClick = useCallback(() =&gt; {\n\n    const textNodesWithThread = Editor.nodes(editor, {\n      at: [],\n      mode: \"lowest\",\n      match: (n) =&gt; Text.isText(n) && getCommentThreadsOnTextNode(n).has(id),\n    });\n\n    let textNodeEntry = textNodesWithThread.next().value;\n    const allTextNodePaths = [];\n\n    while (textNodeEntry != null) {\n      allTextNodePaths.push(textNodeEntry[1]);\n      textNodeEntry = textNodesWithThread.next().value;\n    }\n\n    // sort the text nodes\n    allTextNodePaths.sort((p1, p2) =&gt; Path.compare(p1, p2));\n\n    // set the selection on the editor\n    Transforms.select(editor, {\n      anchor: Editor.point(editor, allTextNodePaths[0], { edge: \"start\" }),\n      focus: Editor.point(\n        editor,\n        allTextNodePaths[allTextNodePaths.length - 1],\n        { edge: \"end\" }\n      ),\n    });\n\n   // Update the Recoil atom value.\n    setActiveCommentThreadID(id);\n  }, [editor, id, setActiveCommentThreadID]);</code></pre>\n</div>\n\n<p><strong>Note</strong>: <em><code>allTextNodePaths</code> contains the path to all the text nodes. We use the <a href=\"https://github.com/ianstormtaylor/slate/blob/f7b6f438ef5ca504eebef39bfc11850ff2c39c3e/packages/slate/src/interfaces/editor.ts#L213\"><code>Editor.point</code></a> API to get the start and end points at that path. The <a href=\"https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/\">first article</a> goes through Slate’s Location concepts. They’re also well-documented on Slate’s <a href=\"https://docs.slatejs.org/concepts/03-locations\">documentation</a>.</em></p>\n\n<p>Let’s verify that this implementation does fix the bug and the Comment Popover moves to the active comment thread correctly. This time, we also test with a case of overlapping threads to make sure it doesn’t break there.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554506474\"\n\t\t\tvideotitle=\"Clicking on a comment thread in Comments Sidebar selects it and loads Comment Thread Popover.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Clicking on a comment thread in Comments Sidebar selects it and loads Comment Thread Popover.</figcaption>\n\t\n</figure>\n\n<p>With the bug fix, we’ve enabled another sidebar interaction that we haven’t discussed yet. If we have a really long document and the user clicks on a comment thread in the sidebar that’s outside the viewport, we’d want to scroll to that part of the document so the user can focus on the comment thread in the editor. By setting the selection above using Slate’s API, we get that for free. Let’s see it in action below.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554506856\"\n\t\t\tvideotitle=\"Document scrolls to the comment thread correctly when clicked on in the Comments Sidebar.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Document scrolls to the comment thread correctly when clicked on in the Comments Sidebar.</figcaption>\n\t\n</figure>\n\n<p>With that, we wrap our implementation of the sidebar. Towards the end of the article, we list out some nice feature additions and enhancements we can do to the Comments Sidebar that help elevate the Commenting and Review experience on the editor.</p>\n\n<h3 id=\"resolving-and-re-opening-comments\">Resolving And Re-Opening Comments</h3>\n\n<p>In this section, we focus on enabling users to mark comment threads as ‘Resolved’ or be able to re-open them for discussion if needed. From an implementation detail perspective, this is the <code>status</code> metadata on a comment thread that we change as the user performs this action. From a user’s perspective, this is a very useful feature as it gives them a way to affirm that the discussion about something on the document has concluded or needs to be re-opened because there are some updates/new perspectives, and so on.</p>\n\n<p>To enable toggling the status, we add a button to the <code>CommentPopover</code> that allows the user to toggle between the two statuses: <code>open</code> and <code>resolved</code>.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentThreadPopover.js\n\nexport default function CommentThreadPopover({\n  editorOffsets,\n  selection,\n  threadID,\n}) {\n  …\n  const [threadData, setCommentThreadData] = useRecoilState(\n    commentThreadsState(threadID)\n  );\n\n  ...\n\n  const onToggleStatus = useCallback(() =&gt; {\n    const currentStatus = threadData.status;\n    setCommentThreadData((threadData) =&gt; ({\n      ...threadData,\n      status: currentStatus === \"open\" ? \"resolved\" : \"open\",\n    }));\n  }, [setCommentThreadData, threadData.status]);\n\n  return (\n    &lt;NodePopover\n      ...\n      header={\n        &lt;Header\n          status={threadData.status}\n          shouldAllowStatusChange={threadData.comments.length &gt; 0}\n          onToggleStatus={onToggleStatus}\n        /&gt;\n      }\n    &gt;\n      &lt;div className={\"comment-list\"}&gt;\n          ...\n      &lt;/div&gt;\n    &lt;/NodePopover&gt;\n  );\n}\n\nfunction Header({ onToggleStatus, shouldAllowStatusChange, status }) {\n  return (\n    &lt;div className={\"comment-thread-popover-header\"}&gt;\n      {shouldAllowStatusChange && status != null ? (\n        &lt;Button size=\"sm\" variant=\"primary\" onClick={onToggleStatus}&gt;\n          {status === \"open\" ? \"Resolve\" : \"Re-Open\"}\n        &lt;/Button&gt;\n      ) : null}\n    &lt;/div&gt;\n  );\n}</code></pre>\n</div>\n\n<p>Before we test this, let’s also give the Comments Sidebar a differential design treatment for resolved comments so that the user can easily detect which comment threads are un-resolved or open and focus on those if they want to.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\"># src/components/CommentsSidebar.js\n\nfunction CommentThread({ id }) {\n  ...\n  const { comments, status } = useRecoilValue(commentThreadsState(id));\n \n ...\n  return (\n    &lt;Card\n      body={true}\n      className={classNames({\n        \"comment-thread-container\": true,\n        \"is-resolved\": status === \"resolved\",\n        \"is-active\": activeCommentThreadID === id,\n      })}\n      onClick={onClick}\n    &gt;\n       ...  \n   &lt;/Card&gt;\n  );\n}</code></pre>\n</div>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"554508937\"\n\t\t\tvideotitle=\"Comment Thread Status being toggled from the popover and reflected in the sidebar.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Comment Thread Status being toggled from the popover and reflected in the sidebar.</figcaption>\n\t\n</figure>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>In this article, we built the core UI infrastructure for a Commenting System on a Rich Text Editor. The set of functionalities we add here act as a foundation to build a richer Collaboration Experience on an editor where collaborators could annotate parts of the document and have conversations about them. Adding a Comments Sidebar gives us a space to have more conversational or review-based functionalities to be enabled on the product.</p>\n\n<p>Along those lines, here are some of features that a Rich Text Editor could consider adding on top of what we built in this article:</p>\n\n<ul>\n<li>Support for <code>@</code> mentions so collaborators could tag one another in comments;</li>\n<li>Support for media types like images and videos to be added to comment threads;</li>\n<li>Suggestion Mode at the document level that allows reviewers to make edits to the document that appear as suggestions for changes. One could refer to this feature in <a href=\"https://support.google.com/docs/answer/6033474?co=GENIE.Platform%3DDesktop&amp;hl=en\">Google Docs</a> or <a href=\"https://support.microsoft.com/en-us/office/track-changes-in-word-197ba630-0f5f-4a8e-9a77-3712475e806a\">Change Tracking</a> in Microsoft Word as examples;</li>\n<li>Enhancements to the sidebar to search conversations by keyword, filter threads by status or comment author(s), and so on.</li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, yk, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Make a glass-morph card in less than 5 minutes!"
        ],
        "author": [
            "Shreyas Pahune"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:14:26 +0000"
        ],
        "link": [
            "https://dev.to/shreyazz/make-a-glass-morph-card-in-less-than-5-minutes-3ap6"
        ],
        "guid": [
            "https://dev.to/shreyazz/make-a-glass-morph-card-in-less-than-5-minutes-3ap6"
        ],
        "description": [
            "<p>Hey everyone 👋🏻, today we are going to make a glass morphism card using only HTML and CSS!</p>\n\n<p>Now what is <em>glass morphism</em>, it is a UI trend which was trending in recent times and is very very easy to make, so without wasting any time let's get started 👩🏻‍💻.</p>\n\n<p><iframe height=\"600\" src=\"https://codepen.io/shreyas13/embed/YzVXPYL?height=600&amp;default-tab=result&amp;embed-version=2\">\n</iframe>\n</p>\n\n<h2>\n  <a href=\"#steps-to-make-a-glassmorph-card-\">\n  </a>\n  Steps to make a glass-morph card :\n</h2>\n\n<ol>\n<li><p>Make a <code>div</code> with a linear gradient(not necessary) or make any shape, this shape will go behind the card to make it look translucent. </p></li>\n<li><p>Make the <code>div</code> with a class of <code>card</code>, give it some width and height, center it on the screen using <code>position: absolute;</code> or <code>display: flex</code> whichever method you like. </p></li>\n<li><p>Now there are 2 main properties to be applied on the card, which will make it look like translucent object, the properties are :<br>\n</p></li>\n</ol>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nt\">background</span><span class=\"o\">:</span> <span class=\"nt\">linear-gradient</span><span class=\"o\">(</span>\n    <span class=\"err\">101</span><span class=\"o\">.</span><span class=\"err\">96</span><span class=\"nt\">deg</span><span class=\"o\">,</span>\n    <span class=\"nt\">rgba</span><span class=\"o\">(</span><span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">0</span><span class=\"o\">.</span><span class=\"err\">261</span><span class=\"o\">)</span> <span class=\"nt\">-0</span><span class=\"o\">.</span><span class=\"err\">52</span><span class=\"o\">%,</span>\n    <span class=\"nt\">rgba</span><span class=\"o\">(</span><span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">0</span><span class=\"o\">.</span><span class=\"err\">0775668</span><span class=\"o\">)</span> <span class=\"err\">88</span><span class=\"o\">.</span><span class=\"err\">4</span><span class=\"o\">%,</span>\n    <span class=\"nt\">rgba</span><span class=\"o\">(</span><span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">249</span><span class=\"o\">,</span> <span class=\"err\">0</span><span class=\"o\">.</span><span class=\"err\">058</span><span class=\"o\">)</span> <span class=\"err\">100</span><span class=\"o\">.</span><span class=\"err\">25</span><span class=\"o\">%</span>\n  <span class=\"o\">);</span> \n</code></pre>\n\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code>  <span class=\"nt\">backdrop-filter</span><span class=\"o\">:</span> <span class=\"nt\">blur</span><span class=\"o\">(</span><span class=\"err\">20</span><span class=\"nt\">px</span><span class=\"o\">);</span> <span class=\"c\">/* some browsers don't support this property but if you still wanna try it out then use chrome */</span>\n</code></pre>\n\n</div>\n\n\n\n<p>That's it you have made a glass-morph card on your own 🥳!! Wasn't that easy?!!</p>\n\n\n\n\n<h2>\n  <a href=\"#thank-you-for-reading-the-whole-blog-and-if-you-found-it-helpful-then-do-implement-this-in-your-projects\">\n  </a>\n  Thank you for reading the whole blog 🎉, and if you found it helpful then do implement this in your projects!!\n</h2>\n\n<p>// connect: <br>\n<a href=\"https://linktr.ee/shreyazz\">My Socials</a></p>\n\n"
        ],
        "category": [
            "webdev",
            "html",
            "tutorial",
            "codepen"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "A Beginner’s Guide to NFTs (Non-fungible Tokens)"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/non-fungible-tokens-nft-beginner-guide/?utm_source=rss\"\n              title=\"A Beginner’s Guide to NFTs (Non-fungible Tokens)\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624135028nft_result_1200.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624135028nft_result_1200-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624135028nft_result_1200-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624135028nft_result_1200-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624135028nft_result_1200.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Non-fungible tokens (NFTs) have far more scope than what they&#8217;re currently popular for — that is, unreasonably expensive pieces of digital art. Their true power lies far away from the realm of Christie’s and Cryptopunks — so far, indeed, that it&#8217;s astonishing this is all the mainstream knows about what we can call NFT 1.0.</strong></p>\n<p>Before we talk about the different NFT versions, let’s first understand what they are.</p>\n<h2 id=\"definingnonfungibletokens\">Defining Non-fungible Tokens</h2>\n<p>The concept of fungibility can only be applied to a group of items. A group of items is <strong>fungible</strong> when every member of this group is identical to the other, such that no member possesses any individuality. This means that every member of that group can always be traded for another member without any friction.</p>\n<p>Some fungible tokens include fiat money, bitcoin (BTC), Ethereum (ETH), and Polkadot (DOT). BTC is regarded as a fungible token because every BTC is created equal. Further, no BTC is different from another BTC (with certain exceptions we won&#8217;t get into). The same goes for all the fungible tokens in the cryptosphere. With paper money, things are slightly different because we have various notes. Thus, all $20 bills are perfectly fungible with each other, but if they were to be swapped for, say, a $1 bill, we&#8217;d need more $1 bills to match up to $20. Thus, you could say that paper money is semi-fungible. But once you convert paper to digital dollars, you see that all dollars are the same.</p>\n<p><em>Note: fungibility is a spectrum; it&#8217;s subjective. A dollar to a shop owner is the same as another dollar, but might not be to the FBI, who are looking for specific dollar bills with specific serial numbers.</em></p>\n<p>Now, if fungibility is the quality of a thing to be interchangeable with other members of its group, then non-fungibility is its ability to have an identity, to be unique. That is all there is to it. Thus, a non-fungible token is a token that is unique unto itself, so long as only one copy was minted (created) when it was added to the blockchain. So when you hear of NFT collections today, it usually means that they&#8217;re a group of art pieces composed of unique individuals.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623473146emTbuSw.jpg\" alt=\"Unique Kanaria birds\" /></p>\n<p><small>Unique <a href=\"https://url.rmrk.app/sp\">Kanaria</a> birds</small></p>\n<p>If this is all there is to NFTs, then what’s the big deal and why are some of them ridiculously expensive?</p>\n<h2 id=\"thepriceofannft\">The Price of an NFT</h2>\n<p>Some paintings are worth millions of dollars, while others are worth less than a penny. Why? A combination of factors, but the most important one is this: <em>we are human beings — social creatures — who are controlled by subjective perception</em>.</p>\n<p>Some NFTs are ridiculously expensive because of the story behind them, either experienced, fabricated, or sold. Sometimes a thing is valuable because of who made it, when it was made, what people think about it, or the circumstances surrounding its early life. To define all the reasons is beyond the scope of this article.</p>\n<p>It’s enough to know that they&#8217;re expensive because people are willing to pay that much for them based on their subjective perception, even though that perception is heavily influenced by the world around them, particularly the media. Some people buy because of prestige, others because of speculation.</p>\n<p>Whatever the reason for the outrageous prices, it&#8217;s not relevant to the revolutionary potential of NFTs, so we can abandon this discussion and instead focus on learning more about how NFTs work and why they&#8217;re a game-changer.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/non-fungible-tokens-nft-beginner-guide/?utm_source=rss\">A Beginner’s Guide to NFTs (Non-fungible Tokens)</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/non-fungible-tokens-nft-beginner-guide/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191837",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Blockchain",
            "Programming",
            "Web"
        ],
        "dc:creator": [
            "Bruno Skvorc"
        ],
        "pubDate": [
            "Thu, 17 Jun 2021 16:00:48 GMT"
        ],
        "metaDesc": [
            "NFTs are becoming popular for staking a claim on digital artworks. Learn what NFTs are and the other amazing things they can be used for."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Canvas vs SVG: Choosing the Right Tool for the Job"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/canvas-vs-svg/?utm_source=rss\"\n              title=\"Canvas vs SVG: Choosing the Right Tool for the Job\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1614127705canvas-vs-svg.jpg\"\n        alt=\"Canvas vs SVG: Choosing the Right Tool for the Job\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1614127705canvas-vs-svg-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1614127705canvas-vs-svg.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>HTML5 Canvas and SVG are both standards-based HTML5 technologies that you can use to create amazing graphics and visual experiences. The question I&#8217;m asking in this article is the following: Should it matter which one you use in your project? In other words, are there any use cases for preferring HTML5 Canvas over SVG?</strong></p>\n<p>First, let’s spend a few words introducing HTML5 Canvas and SVG.</p>\n<h2 id=\"whatishtml5canvas\">What Is HTML5 Canvas?</h2>\n<p>Here’s how the <a href=\"https://html.spec.whatwg.org/multipage/scripting.html#the-canvas-element\">WHATWG specification introduces the <code>canvas</code> element</a>:</p>\n<blockquote>\n<p>The <code>canvas</code> element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, art, or other visual images on the fly.</p>\n</blockquote>\n<p>In other words, the <code>&lt;canvas&gt;</code> tag exposes a surface where you can create and manipulate rasterized images pixel by pixel using a JavaScript programmable interface.</p>\n<p>Here’s a basic code sample:</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"LYbOBgm\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Basic Canvas Shape Demo\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/LYbOBgm\"><br />\nBasic Canvas Shape Demo</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>The HTML:</p>\n<pre><code class=\"markup language-markup\">&lt;canvas id=\"myCanvas\" width=\"800\" height=\"800\"&gt;&lt;/canvas&gt;\r\n</code></pre>\n<p>The JavaScript:</p>\n<pre><code class=\"javascript language-javascript\">const canvas = document.getElementById('myCanvas');\r\nconst context = canvas.getContext('2d');\r\ncontext.fillStyle = '#c00';\r\ncontext.fillRect(10, 10, 100, 100);\r\n</code></pre>\n<p>You can take advantage of the HTML5 Canvas API methods and properties by getting a reference to the 2D context object. In the example above, I’ve drawn a simple red square, 100 x 100 pixels in size, placed 10px from the left and 10px from the top of the <code>&lt;canvas&gt;</code> <strong>drawing surface</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1458714028canvas-square.png\" alt=\"Red square drawn using HTML5 Canvas\" /></p>\n<p>Being <strong>resolution-dependent</strong>, images you create on <code>&lt;canvas&gt;</code> may lose quality when enlarged or displayed on Retina Displays.</p>\n<p>Drawing simple shapes is just the tip of the iceberg. The HTML5 Canvas API allows you to draw arcs, paths, text, gradients, etc. You can also manipulate your images pixel by pixel. This means that you can replace one color with another in certain areas of the graphics, you can animate your drawings, and even <a href=\"http://html5doctor.com/video-canvas-magic/\">draw a video onto the canvas</a> and change its appearance.</p>\n<h2 id=\"whatissvg\">What Is SVG?</h2>\n<p>SVG stands for Scalable Vector Graphics. <a href=\"https://svgwg.org/svg2-draft/intro.html\">According to the specification</a>:</p>\n<blockquote>\n<p>SVG is a language for describing two-dimensional graphics. As a standalone format or when mixed with other XML, it uses the XML syntax. When mixed with HTML5, it uses the HTML5 syntax. …</p>\n<p>SVG drawings can be interactive and dynamic. Animations can be defined and triggered either declaratively (i.e., by embedding SVG animation elements in SVG content) or via scripting.</p>\n</blockquote>\n<p>SVG is an XML file format designed to create vector graphics. Being scalable has the advantage of letting you increase or decrease a vector image while maintaining its crispness and high quality. (This can&#8217;t be done with HTML5 Canvas-generated images.)</p>\n<p>Here’s the same red square (previously created with HTML5 Canvas) this time drawn using SVG:</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"zYoPLeE\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Basic SVG Shape\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/zYoPLeE\"><br />\nBasic SVG Shape</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<pre><code class=\"markup language-markup\">&lt;svg xmlns=\"https://www.w3.org/2000/svg\" viewbox=\"0 0 600 600\"&gt;\r\n  &lt;desc&gt;Red rectangle shape&lt;/desc&gt;\r\n  &lt;rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"#c00\"  /&gt;  \r\n&lt;/svg&gt;\r\n</code></pre>\n<p>You can do with SVG most of the stuff you can do with Canvas — such as drawing shapes and paths, gradients, patterns, animation, and so on. However, these two technologies work in fundamentally different ways. Unlike a Canvas-based graphic, SVG has a DOM, and as such both CSS and JavaScript have access to it. For example, you can change the look and feel of an SVG graphic using CSS, animate its nodes with CSS or JavaScript, make any of its parts respond to a mouse or a keyboard event the same as a <code>&lt;div&gt;</code>. As it will become clearer in the following sections, this difference plays a significant part when you need to make a choice between Canvas and SVG for your next project.</p>\n<h2 id=\"immediatemodeandretainedmode\">Immediate Mode and Retained Mode</h2>\n<p>It’s crucial to distinguish between <a href=\"https://en.wikipedia.org/wiki/Immediate_mode_%28computer_graphics%29\">immediate mode</a> and <a href=\"https://en.wikipedia.org/wiki/Retained_mode\">retained mode</a>. HTML5 Canvas is an example of the former, SVG of the latter. </p>\n<p>Immediate mode means that, once your drawing is on the canvas, the canvas stops keeping track of it. In other words you, as the developer, you need to work out the commands to draw objects, create and maintain the model or scene of what the final output should look like, and specify what needs to be updated. The browser’s Graphics API simply communicates your drawing commands to the browser, which then executes them.</p>\n<p>SVG uses the retained approach, where you simply issue your drawing instructions of what you want to display on the screen, and the browser’s Graphics API creates an in-memory model or scene of the final output and translates it into drawing commands for your browser.</p>\n<p>Being an immediate graphics system, Canvas hasn’t got a DOM, or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">Document Object Model</a>. With Canvas, you draw your pixels and the system forgets all about them, thereby cutting down on the extra memory needed to maintain an internal model of your drawing. With SVG, each object you draw gets added to the browser&#8217;s internal model, which makes your life as a developer somewhat easier, but at some costs in terms of performance.</p>\n<p>On the basis of the distinction between immediate and retained mode, as well as other specific characteristics of Canvas and SVG respectively, it’s possible to outline some cases where using one technology over the other might better serve your project’s goals.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/canvas-vs-svg/?utm_source=rss\">Canvas vs SVG: Choosing the Right Tool for the Job</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/canvas-vs-svg/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=127195",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Canvas & SVG",
            "HTML",
            "HTML & CSS",
            "HTML5"
        ],
        "dc:creator": [
            "Maria Antonietta Perna"
        ],
        "pubDate": [
            "Tue, 23 Feb 2021 14:00:19 GMT"
        ],
        "metaDesc": [
            "Should you use Canvas or SVG? It depends! Let's walk through all the scenarios where Canvas and SVG are an option and work out which is the best choice."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Install PHP on Windows"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/how-to-install-php-on-windows/?utm_source=rss\"\n              title=\"How to Install PHP on Windows\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617674132install-php.png\"\n        alt=\"How to Install PHP on Windows\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617674132install-php-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617674132install-php.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This article explains how to install PHP 8 and Apache 2.4 on Windows 10 (64-bit).</strong></p>\n<p>Linux and macOS users often have Apache and PHP pre-installed or available via package managers. Windows 10 requires a little more effort. The steps below <em>may</em> work with other editions of Windows, PHP, and Apache, but check the documentation of each dependency for specific instructions.</p>\n<h2 id=\"whyphp\">Why PHP?</h2>\n<p>PHP remains the most widespread and popular server-side programming language on the Web. It&#8217;s installed by most web hosts, and has a simple learning curve, close ties with the MySQL database, superb documentation, and an excellent collection of libraries to cut your development time. PHP may not be perfect, but it should be considered as an option for your next web application. It&#8217;s the language of choice for Facebook, Slack, Wikipedia, MailChimp, Etsy, and WordPress — the Content Management System which <a href=\"https://w3techs.com/technologies/overview/content_management\">powers 40% of the web</a>.</p>\n<h2 id=\"whyinstallphplocally\">Why Install PHP Locally?</h2>\n<p>Installing PHP on your development PC allows you to safely create and test websites and applications without affecting the data or systems on your live server.</p>\n<h2 id=\"alternativeinstallationoptions\">Alternative Installation Options</h2>\n<p>Before you jump in, there may be a simpler installation options&hellip;</p>\n<h3 id=\"useanallinonepackage\">Use an All-in-One package</h3>\n<p>All-in-one packages are available for Windows which contain Apache, PHP, MySQL, and many other dependencies in a single installation file — such as <a href=\"http://www.apachefriends.org/xampp.html\">XAMPP</a>, <a href=\"http://www.wampserver.com/en/\">WampServer</a> and <a href=\"http://www.devside.net/server/webdeveloper\">Web.Developer</a>.</p>\n<p>These packages are easy to use, but they may not exactly match your live server. Installing Apache and PHP manually will help you learn more about the system and configuration options.</p>\n<h3 id=\"usealinuxvirtualmachine\">Use a Linux Virtual Machine</h3>\n<p>Microsoft Hyper-V (provided in Windows 10 Professional) and <a href=\"https://www.virtualbox.org/\">VirtualBox</a> are free hypervisors which emulate a PC so you can install another operating system.</p>\n<p>You can install any version of Linux, then follow its Apache and PHP installation instructions. Alternatively, distros such as <a href=\"https://ubuntu.com/download/server\">Ubuntu Server</a> provide them as standard (although they&#8217;re rarely the latest editions).</p>\n<h3 id=\"usewindowssubsystemforlinux2\">Use Windows Subsystem for Linux 2</h3>\n<p><a href=\"https://www.sitepoint.com/wsl2/\">WSL2</a> is also a virtual machine, but it&#8217;s tightly integrated into Windows so activities such as file sharing and <code>localhost</code> resolution is seamless. You can install several Linux distros, so refer to the appropriate Apache and PHP instructions.</p>\n<h3 id=\"usedocker\">Use Docker</h3>\n<p><a href=\"https://www.docker.com/\">Docker</a> creates a wrapper (known as a <em>container</em>) around pre-configured application dependencies such as Apache, PHP, MySQL, MongoDB, and most other web software. Containers look like full Linux Virtual Machines but are considerably more lightweight.</p>\n<p>Once you&#8217;ve installed <a href=\"https://dockerwebdev.com/tutorials/install-docker/#install-docker-on-windows\">Docker Desktop on Windows 10</a>, it&#8217;s easy to <a href=\"https://dockerwebdev.com/tutorials/docker-php-development/\">download, configure, and run Apache and PHP</a>.</p>\n<p>Docker is currently considered the best option for setting up a PHP development environment. Check out SitePoint&#8217;s article “<a href=\"https://www.sitepoint.com/docker-php-development-environment/\">Setting Up a Modern PHP Development Environment with Docker</a>” for a complete guide to setting it up.</p>\n<h2 id=\"installapacheoptional\">Install Apache (optional)</h2>\n<p>If you&#8217;re still reading, the following sections describe how to install Apache and PHP directly on Windows.</p>\n<p>PHP provides a built-in web server which can be launched by navigating to a folder and running the PHP executable with an <code>-S</code> parameter to set the <code>localhost</code> port. for example:</p>\n<pre><code class=\"bash language-bash\">cd \\myproject\r\nphp -S localhost:8000\r\n</code></pre>\n<p>PHP pages can then be viewed in a browser at <a href=\"http://localhost:8000\">http://localhost:8000</a>.</p>\n<p>This may be adequate for quick tests, but your live server will use Apache or similar web server software. Emulating that environment as closely as possible will prevent development errors.</p>\n<p>To install Apache, download the latest Win64 ZIP file from <a href=\"https://www.apachelounge.com/download/\">https://www.apachelounge.com/download/</a> and extract its <code>Apache24</code> folder to the root of your <code>C:</code> drive. You&#8217;ll also need to install the Visual C++ Redistributable for Visual Studio 2015–2019 (<code>vc_redist_x64</code>); a link is provided on the same page.</p>\n<p>Open a <code>cmd</code> command prompt (not PowerShell) and start Apache with:</p>\n<pre><code class=\"bash language-bash\">cd C:\\Apache24\\bin\r\nhttpd\r\n</code></pre>\n<p>You may need to accept a firewall exception before the server starts to run. Open <a href=\"http://localhost\">http://localhost</a> in a browser and an <em>&#8220;It works!&#8221;</em> message should appear. Note:</p>\n<ul>\n<li>If you need to change any settings, Apache&#8217;s configuration file is located at <code>C:\\Apache24\\conf\\httpd.conf</code>.</li>\n<li>The web server root folder is located at <code>C:\\Apache24\\htdocs</code>. Initially, it contains a single <code>index.html</code> file with the <em>&#8220;It works!&#8221;</em> message.</li>\n</ul>\n<p>Also not that, if Apache won&#8217;t start, it&#8217;s likely another application is hogging port 80. <em>(Skype is the prime candidate and the Windows 10 app won&#8217;t let you disable it!)</em> If this occurs, edit <code>C:\\Apache24\\conf\\httpd.conf</code> and change the line <code>Listen 80</code> to <code>Listen 8080</code> or any other free port. Restart Apache and, from that point onward, you can load web files at <a href=\"http://localhost:8080\">http://localhost:8080</a></p>\n<p>The server can be stopped with <kbd>Ctrl</kbd> + <kbd>C</kbd>. The <code>ReadMe</code> file in the ZIP also provides instructions for installing Apache as a Windows service.</p>\n<h2 id=\"installphp\">Install PHP</h2>\n<p>Install PHP by following the steps below. Note that there are several ways to configure Apache and PHP, but this is possibly the quickest method.</p>\n<h3 id=\"step1downloadthephpfiles\">Step 1: Download the PHP files</h3>\n<p>Get the latest PHP 8 <strong>x64 Thread Safe</strong> ZIP package from <a href=\"https://www.php.net/downloads.php\">https://www.php.net/downloads.php</a>.</p>\n<h3 id=\"step2extractthefiles\">Step 2: Extract the files</h3>\n<p>Create a new <code>php</code> folder in the root of your <code>C:\\</code> drive and extract the contents of the ZIP into it.</p>\n<p>PHP can be installed anywhere on your system, but you&#8217;ll need to change the paths referenced below if <code>C:\\php</code> isn&#8217;t used.</p>\n<h3 id=\"step3configurephpini\">Step 3: Configure <code>php.ini</code></h3>\n<p>PHP&#8217;s configuration file is named <code>php.ini</code>. This doesn&#8217;t exist initially, so copy <code>C:\\php\\php.ini-development</code> to <code>C:\\php\\php.ini</code>. This default configuration provides a development setup which reports all PHP errors and warnings.</p>\n<p>There are several lines you may need to change in a text editor (use search to find the current value). In most cases, you&#8217;ll need to remove a leading semicolon (<code>;</code>) to uncomment a setting.</p>\n<p>First, enable any required extensions. This will depend on the libraries you want to use, but the following extensions should be suitable for most applications:</p>\n<pre><code class=\"txt language-txt\">extension=curl\r\nextension=gd\r\nextension=mbstring\r\nextension=pdo_mysql\r\n</code></pre>\n<p>If you want to send emails using PHP&#8217;s <code>mail()</code> function, enter the details of an SMTP server in the <code>[mail function]</code> section (your ISP&#8217;s server should be suitable):</p>\n<pre><code class=\"txt language-txt\">[mail function]\r\n; For Win32 only.\r\n; http://php.net/smtp\r\nSMTP = mail.myisp.com\r\n; http://php.net/smtp-port\r\nsmtp_port = 25\r\n\r\n; For Win32 only.\r\n; http://php.net/sendmail-from\r\nsendmail_from = my@emailaddress.com\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/how-to-install-php-on-windows/?utm_source=rss\">How to Install PHP on Windows</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/how-to-install-php-on-windows/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/blogs/?p=7958",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "PHP"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 01 Mar 2021 00:51:58 GMT"
        ],
        "metaDesc": [
            "Looking for tips on how to install PHP on Windows? We walk step by step through how to install PHP 8 and Apache 2.4 on Windows 10 (64-bit)."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Form Handling for Jamstack Sites Using Cloudflare Workers"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/jamstack-form-handling-cloudflare-workers/?utm_source=rss\"\n              title=\"Form Handling for Jamstack Sites Using Cloudflare Workers\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619577189jamstack-form-handling.png\"\n        alt=\"Form Handling for Jamstack Sites Using Cloudflare Workers\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619577189jamstack-form-handling-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619577189jamstack-form-handling.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this tutorial, you&#8217;ll learn how to build a form-handling service for your Jamstack website or single page application (SPA) using <a style=\"font-weight:bold\" href=\"https://workers.cloudflare.com/\">Cloudlflare Workers</a>.</strong> </p>\n<p>With <a href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a> technology, HTML code is rendered at build time and then deployed to edge servers. This allows very fast load times for end users. In addition, businesses benefit by paying much significantly lower hosting fees. </p>\n<p>One issue with Jamstack technology is how to deal with site features that can only be implemented with server-side technologies. For example, form handling is relatively easy if you have access to a server-side technology like PHP, where you can just use <code>mail(&lt;to&gt;, &lt;from&gt;, &lt;message&gt;)</code> to collect and send mail data.</p>\n<p>Of course, Jamstack sites aren&#8217;t left out in the cold. You can run back-end applications on a Jamstack site using <a href=\"https://www.sitepoint.com/serverless-functions/\">serverless computing</a>. But you&#8217;ll need to implement a <a href=\"https://microservices.io/\"><strong>microservice architecture</strong></a> in your back-end development. Serverless computing requires that you build your logic into loosely coupled, independently deployable services.</p>\n<p>Serverless computing can be a lot more cost-effective than renting private servers often needed for running back-end apps. An added bonus of serverless computing is that you can start to create more complicated workflows using further services (such as using services like Airtable to store form data).</p>\n<p>For this tutorial, you&#8217;ll learn how to build and deploy a form-handling service for a React front-end SPA. Technically, any front-end framework will do. We&#8217;ll use Cloudflare Workers to develop our serverless function. Before we start working on the code, let&#8217;s first have an overview of why we&#8217;ll be using this technology stack. (If you&#8217;d rather get to the hands-on part straight away, jump to the <a href=\"#abouttheproject\">project section</a>.)</p>\n<h3 id=\"aboutthirdpartyformhandlingservices\">About Third-party Form-handling Services</h3>\n<p>There&#8217;s already a good number of API form-handling services that provides the features we need. These  include:</p>\n<ul>\n<li><a href=\"https://formspree.io/\">FormSpree</a></li>\n<li><a href=\"https://getform.io/\">Getform</a></li>\n<li><a href=\"https://www.form-data.com/\">FormData</a></li>\n<li><a href=\"https://www.netlify.com/products/forms/\">Netlify Forms</a></li>\n</ul>\n<p>The features they offer include:</p>\n<ul>\n<li>email notification</li>\n<li>spam blockage</li>\n<li>integration with other services through <a href=\"https://zapier.com/\">Zapier</a></li>\n<li>dashboard data view</li>\n<li>file upload and storage</li>\n<li>CSV export</li>\n</ul>\n<p>That&#8217;s a lot of value that frees you from having to build such a service yourself. Also, it only takes about five minutes or less to integrate the service with an existing web application. Most platforms offer a free plan that gives you about 50 to 100 free submissions per month with about 100MB of file storage.</p>\n<p>Paid plans start from $9 a month with 1,000 submissions and 1GB of file upload storage. If you&#8217;re using the service to capture leads, the price is quite fair. However, if you&#8217;re using it for a different purpose — such as collecting massive amounts field data — it can get expensive quickly.</p>\n<p>This is where building your own form-handling service can be advantageous. There are several benefits, which include:</p>\n<ul>\n<li>lower cost per form submission</li>\n<li>implementation of custom security policies</li>\n<li>unlimited integrations with other services</li>\n<li>reduction in latency, since you have control of how and where the service is hosted</li>\n<li>ability to add new features not currently offered by a form-handling provider</li>\n</ul>\n<p>In regards to lower cost per submission, transaction email service providers such as <a href=\"https://sendgrid.com/pricing/\"><strong>SendGrid</strong></a> and <a href=\"https://www.mailgun.com/pricing/\"><strong>Mailgun</strong></a> currently have an offer that allows you to send between 3,000 to 5,000 emails per month for free. The former&#8217;s offer is permanently free, while the latter&#8217;s offer only lasts for three months.</p>\n<p>This, of course, is already too much email for anyone&#8217;s inbox. You&#8217;d probably want to send form data straight to your database or an application service designed to handle that data. If that&#8217;s the case, you&#8217;ll probably <em>pay less than 10 dollars per a million submissions</em>.</p>\n<p>This pricing I&#8217;ve <a href=\"https://fauna.com/blog/comparison-faas-providers\">estimated</a> is based on combined average pricing for major serverless computing and serverless database offerings. If you need file storage, you can get <strong>250 Gigabytes</strong> of Linode Object Storage for <strong>$5 per month</strong>. You actually get so much more value when you spend the time to build the service yourself.</p>\n<p>I hope those are enough reasons. If not, then learn to build just for the fun of it. You can apply the knowledge gained in other areas. In the next section, we&#8217;ll look into why we chose to build our own service with Cloudflare Workers.</p>\n<h3 id=\"aboutcloudflareworkers\">About Cloudflare Workers</h3>\n<p>The first serverless computing platform to be introduced was <a href=\"https://cloud.google.com/appengine/docs\">Google App Engine</a>, which was launched in 2008. However, the first commercially successful serverless offering was <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a>, which was introduced by Amazon in 2014. Later, in 2016, Google introduced a second serverless offering known as <a href=\"https://cloud.google.com/functions\">Google Cloud Functions</a>. <a href=\"https://cloud.ibm.com/functions/\">IBM Cloud Functions</a> and <a href=\"https://azure.microsoft.com/en-us/services/functions/\">Azure Functions</a> followed soon after.</p>\n<p>While all these services provide the benefits of running back-end code at a significantly lower cost, most do suffer from a problem known as <strong>cold start</strong>. This is where an idle container hosting your function takes anywhere from <strong>1 to 10+ seconds</strong> to respond to a request. There are many workarounds that have been documented to improve the situation, but not to solve it entirely.</p>\n<p><strong>Cloudflare Workers</strong> is the latest entry into the serverless computing market. The company has solved the cold start problem where idle serverless functions experience <strong>0 millisecond boot time</strong> to respond to requests. They&#8217;ve achieved this by leveraging V8 runtime to execute serverless functions instead of running them in a Node.js environment. <a href=\"https://developers.cloudflare.com/workers/learning/how-workers-works\">This guide</a> explains more on how it works.</p>\n<p>In addition, Cloudflare is an <strong>Edge computing platform</strong>. This basically means code is executed on servers nearest to end users. This greatly reduces network latency even further, and makes your application response instant. </p>\n<p>Hopefully I&#8217;ve now convinced you that Cloudlflare Workers is the way to go. So let&#8217;s start building.</p>\n<h2 id=\"abouttheproject\">About the Project</h2>\n<p>The source code for the completed projects are included in the following links:</p>\n<ul>\n<li><a href=\"https://github.com/sitepoint-editors/cloudflare-form-ui\">Cloudflare form UI</a>: React single page application</li>\n<li><a href=\"https://github.com/sitepoint-editors/cloudflare-form-service\">Cloudflare form service</a>: Cloudflare Workers application</li>\n</ul>\n<p>We&#8217;ll go through building the Workers application step by step in this tutorial. Then we&#8217;ll download and configure the completed SPA (linked above) to connect to our completed Workers project.</p>\n<p>We won&#8217;t be building the UI. We&#8217;ll deploy the application and test it with the Workers application that we&#8217;re going to build. The following section describes all the prerequisites needed to follow along with the tutorial.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>This tutorial is intended for intermediate to advanced Node.js developers. I&#8217;ll assume you&#8217;re familiar with ES6+ notation and REST APIs. You&#8217;ll need the following setup in your development environment:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/download/\">Node.js</a></li>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></li>\n<li>the VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\">REST Client</a> extension</li>\n</ul>\n<p>The REST Client extension is a more convenient tool for testing REST interfaces as opposed to using external applications.</p>\n<h2 id=\"accountssetup\">Accounts Setup</h2>\n<p>In this section, we&#8217;ll set up all the service accounts we need to build our email-handling worker. Take note of all the API tokens and other IDs that we&#8217;ll use later on in the development process.</p>\n<h3 id=\"1customdomain\">1. Custom Domain</h3>\n<p>In order to follow along this tutorial, it&#8217;s highly recommended that you have access to a custom domain and an email address using that domain. However, you can manage to get the code working using a sandbox domain and the free subdomain that Cloudflare gives you when you sign up. Do note that credit card information is required when setting up a custom domain on Mailgun.</p>\n<p>Having a custom domain will allow you to:</p>\n<ul>\n<li>deploy your Cloudflare projects on a custom domain</li>\n<li>gain access to your deployed Workers logs in real time</li>\n<li>send authentic emails that won&#8217;t end up in the spam box</li>\n</ul>\n<p>If you don&#8217;t have access to a custom domain, I strongly suggest you purchase a new domain from <a href=\"https://www.fastcomet.com/domains/registration\">FastComet</a>. The reason I recommend them is because they&#8217;ll give you a <strong>free Lite Email package</strong> which you can use to set up your custom domain email address. Most providers will charge you extra for email hosting.</p>\n<p>In the next section, we&#8217;ll set up a Mailgun account.</p>\n<h3 id=\"2mailgunsetup\">2. Mailgun Setup</h3>\n<p>Mailgun is an Email API service that allows developers integrate email functionality into their apps via APIs. We&#8217;ll use their REST API interface to send and email from our Workers application to a recipient. Basically this means we only need to use <code>Fetch</code> or <code>Axios</code> to send an email. Use the following guide to set up your Mailgun account:</p>\n<ol>\n<li>Head over to the <a href=\"https://signup.mailgun.com/new/signup\">sign up</a> page and create a new account using the <a href=\"https://www.mailgun.com/pricing/\">free plan</a>.</li>\n<li>Verify your account using an email address and an SMS code sent to your phone.</li>\n<li>On Mailgun&#8217;s dashboard, go to <strong>Sending</strong> &gt; <strong>Domains</strong> and you&#8217;ll find a sandbox domain has been created for you. This is a free domain provided for you to test the sending of emails.</li>\n<li>With a sandbox domain, you&#8217;re only allowed to send an email to an <a href=\"https://help.mailgun.com/hc/en-us/articles/217531258-Authorized-Recipients\">authorized recipient</a>. On the current dashboard&#8217;s right sidebar, you&#8217;ll find a form where you can provide the email address of a recipient. Add one now. This will be the email address that will receive the emails sent from the Workers application that we&#8217;ll be building.</li>\n<li>An email will be sent to the authorized recipient&#8217;s inbox. Click confirm to complete step 4.</li>\n<li>On the sandbox&#8217;s <strong>Overview</strong> page, click on <strong>API</strong> &gt; <strong>Select</strong> button.</li>\n<li>Next, select the <strong>curl</strong> tab. Take note of your <code>API Key</code> and the <code>API base URL</code>.</li>\n<li>Send a test email using the cURL command provided for the sandboxed domain. Ensure that you replace the relevant fields with your API tokens and your authorized email recipient.</li>\n</ol>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617714978sandbox-sending-domain-setup.png\" alt=\"sandbox sending domain setup\" /></p>\n<p>Here&#8217;s a quick example of how you can send yours:</p>\n<pre><code class=\"curl language-curl\">curl -s --user 'api:key-0303d350c68aa534560ed0838bca66e' \\\r\n  https://api.mailgun.net/v3/sandbox9cfff108345efd4a15fd76.mailgun.org/messages \\\r\n  -F from='John Doe &lt;john.doe@gmail.com&gt;' \\\r\n  -F to=jane.doe@gmail.com \\\r\n  -F subject='Hello' \\\r\n  -F text='Message sent using Mailgun service'\r\n</code></pre>\n<p>If successful, you should receive output like that shown below:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"id\": \"&lt;20210406124818.1.7CAD4673034EEB0E@sandbox9cfff108345efd4a15fd76.mailgun.org&gt;\",\r\n  \"message\": \"Queued. Thank you.\"\r\n}\r\n</code></pre>\n<p>You should also receive an email either on your authorized recipient&#8217;s inbox or spam box. If this happens, you&#8217;ve successfully set up your Mailgun account.</p>\n<p>If you&#8217;d like to use a <strong>custom domain</strong> as your sending domain, do note that credit card information is required. You can follow the instructions <a href=\"https://www.youtube.com/watch?v=BmEj3EBo0vg\">here</a> to learn how to set that one up. Using a custom domain allows you to unlock sending limits, and also to have your email source validated such that they&#8217;ll always end up on users&#8217; inbox and not the spam box.</p>\n<p>At the end of this section, you should have access to the following:</p>\n<ul>\n<li><strong>an API KEY</strong>: for example, <code>api:key-0303d350c68aa534560ed0838bca66e</code></li>\n<li><strong>an API BASE URL</strong>: for example, <code>https://api.mailgun.net/v3/sandbox9cfff108345efd4a15fd76.mailgun.org</code></li>\n<li><strong>a FROM_EMAIL_ADDRESS</strong>: use any Gmail address or a custom domain address that you &#8216;ve registered with Mailgun</li>\n<li><strong>a TO_EMAIL_ADDRESS</strong>: an authorized recipient</li>\n</ul>\n<p>Do note that the API key is also found under <strong>Settings</strong> &gt; <strong>API Keys</strong> &gt; <strong>Private API key</strong>.</p>\n<h3 id=\"3cloudflareworkerssetup\">3. Cloudflare Workers Setup</h3>\n<p>To get started, simply <a href=\"https://dash.cloudflare.com/sign-up/workers\">sign up</a> for a Cloudflare Workers account. Follow the instructions provided:</p>\n<ol>\n<li>enter email address and password</li>\n<li>choose a subdomain for your account</li>\n<li>choose a plan: select free</li>\n<li>verify your email address</li>\n</ol>\n<p>Next, install and configure <a href=\"https://developers.cloudflare.com/workers/cli-wrangler/install-update\">Wrangler CLI</a>, which you&#8217;ll use to develop Workers projects:</p>\n<pre><code class=\"bash language-bash\"># Install wrangler CLI globally\r\nnpm install -g @cloudflare/wrangler\r\n\r\n# Confirm version\r\nwrangler --version\r\n\r\n# Login to your Workers account\r\nwrangler login\r\n\r\n# Confirm login status\r\nwrangler whoami\r\n</code></pre>\n<p>In case the login command fails for you, there are a few workarounds which have been documented on this <a href=\"https://github.com/cloudflare/wrangler/issues/1703\">GitHub issue</a>. These are the steps that worked for my machine:</p>\n<ol>\n<li>\n<p>Execute <code>wrangler login</code> again in the terminal.</p>\n</li>\n<li>\n<p>As soon as the Authorize page loads, Press F12 to open the Inspector, then switch it to Network tab.</p>\n</li>\n<li>\n<p>Click on the <code>Authorize Wrangler</code> button and wait till says &#8220;Wrangler is now authorized&#8221;.</p>\n</li>\n<li>\n<p>Under the Network tab within the Inspector console, locate the last POST request. Click on it to highlight it.</p>\n</li>\n<li>\n<p>A Request tab should appear. Click on it to access it. There should be some JSON data. The property &#8220;key&#8221; is the API token. Copy it.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/161713483601-wrangler-login-workaround.png\" alt=\"01-wrangler-login-workaround\" /></p>\n</li>\n<li>\n<p>Go back to the terminal and use <kbd>ctrl</kbd> + <kbd>c</kbd> to cancel the last command. Execute the command <code>wrangler config</code>. You&#8217;ll be asked to enter your API token. Paste the key you just copied, then press <kbd>enter</kbd>. It should return a &#8220;Successfully configured&#8221; message.</p>\n</li>\n<li>\n<p>Confirm authentication was successful by executing <code>wrangler whoami</code>.</p>\n</li>\n</ol>\n<p>In the next subsection, we&#8217;ll look at how to add a custom domain to your Cloudflare account. If you don&#8217;t have one, simply skip to the &#8220;<a href=\"#projectdevelopment\">Project Development</a>&#8221; section, where we can continue without one.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/jamstack-form-handling-cloudflare-workers/?utm_source=rss\">Form Handling for Jamstack Sites Using Cloudflare Workers</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/jamstack-form-handling-cloudflare-workers/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182991",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Michael Wanyoike"
        ],
        "pubDate": [
            "Sun, 02 May 2021 16:00:24 GMT"
        ],
        "metaDesc": [
            "What if your static Jamstack site needs a contact form? Learn how to build a form-handling service for your single page app using Cloudlflare Workers."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Devy Brew: Get your daily dose of featured articles on the popular dev platforms sent right to you"
        ],
        "author": [
            "arndom"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:11:28 +0000"
        ],
        "link": [
            "https://dev.to/arndom/devy-brew-get-your-daily-dose-of-featured-articles-on-the-popular-dev-platforms-sent-right-to-you-3dao"
        ],
        "guid": [
            "https://dev.to/arndom/devy-brew-get-your-daily-dose-of-featured-articles-on-the-popular-dev-platforms-sent-right-to-you-3dao"
        ],
        "description": [
            "<h2>\n  <a href=\"#hey-guys\">\n  </a>\n  Hey guys👋,\n</h2>\n\n<p>Been a while I've posted, lots of things have happened since February....graduated uni, got a fulltime and a part-time job then resigned from one(I'll leave the guess up to you guys). It's been a pretty eventful few months, anyway, this is my submission for #HarperDBHackathon, hope you like it. 🚀</p>\n\n<h3>\n  <a href=\"#tldr-github-demo\">\n  </a>\n  TLDR: <a href=\"https://github.com/arndom/devy-brew\">Github</a> /  <a href=\"https://dev.toLink\">Demo</a>\n</h3>\n\n<p><a href=\"https://i.giphy.com/media/7Sh3Pt6R9ELubdoH3K/giphy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://i.giphy.com/media/7Sh3Pt6R9ELubdoH3K/giphy.gif\" alt=\"giph\"></a></p>\n\n<h2>\n  <a href=\"#inspiration\">\n  </a>\n  Inspiration\n</h2>\n\n<p>So I found out about this hack about 2 weeks and was unsure of to make but the I wanted to participate and try something new. I spent so much time brainstorming and shooting down ideas, time wasn't on my side so I had to pick a project to work on.</p>\n\n<p>The idea came to me in a pretty funny way; while watching YouTube I came across this sponsored ad for a free service called  <a href=\"https://www.morningbrew.com/daily\">MorningBrew</a>, the product piqued my interest, it was a simple, useful and most important it was free way to get the news. The thing though it didn't for me...I don't know about the rest of you but consuming news in written form feels like a chore, so I thought up how to make it a bit personalized and that was how Devy Brew came about ( pretty derivative name....I know😅), a service to get featured articles from the top dev blogging platforms all from one place without jumping through so many links.</p>\n\n<h2>\n  <a href=\"#project-details\">\n  </a>\n  Project Details\n</h2>\n\n<p>I initially planned to build this in about a week so I could have time for other things but honestly the actual MVP you see here was dragged on and then rushed in a matter of 2-3days ( actually have 2hrs as of now until submission deadline 😅). </p>\n\n<p>I'll be giving  a summary of the tools used, features present &amp; those to be added and challenges faced.</p>\n\n<h2>\n  <a href=\"#tools\">\n  </a>\n  Tools\n</h2>\n\n<ul>\n<li>React, MUI, svg-loader-react for the design</li>\n<li>Axios for data fetching</li>\n<li>harperDB and mailChimp for the mail list</li>\n<li>Lorem picsum for nice res images</li>\n<li>Monster ⚡ energy drink 😉 </li>\n</ul>\n\n<h3>\n  <a href=\"#design\">\n  </a>\n  Design\n</h3>\n\n<p>The design was inspired by morning brew with  some tweaks here and there. The landing is made up of two sections as shown below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fMNqnwIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67ked26dpqofvzlcsaeq.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fMNqnwIX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67ked26dpqofvzlcsaeq.png\" alt=\"landing sec 1\"></a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--c080GxtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puqysfw014s92pg9t9gv.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--c080GxtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puqysfw014s92pg9t9gv.png\" alt=\"landing sec 2\"></a></p>\n\n<p>For this kind of project, a simple and intuitive design is all that's needed, so a bit of time was spent making it look nice and easy (though I believe I might have spent a bit too much). This design was implemented using React, CSS, flexbox for positioning and material UI for icons and buttons, svg-loader-react for loading screens.</p>\n\n<h3>\n  <a href=\"#implementation\">\n  </a>\n  Implementation\n</h3>\n\n<p>Now we go into the details.</p>\n\n<h2>\n  <a href=\"#features\">\n  </a>\n  Features\n</h2>\n\n<p>As of now Devy Brew is a simple way to easily get  access to articles from the most popular dev platforms. Initially, the app was also meant to have a comic strip, jokes sections, and crossword puzzle/word search(like a proper paper 😅), all which came with some complexities and bugs that I didn't have the time to build nor fix.<br>\nThis was meant to showcase the features on the landing: </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IxBOFwUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wc173o2sewi50smra5p.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IxBOFwUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wc173o2sewi50smra5p.png\" alt=\"features\"></a></p>\n\n<p>I had actually started working on them before I had to rethink due to  bugs &amp; time. So, yeah I had to cut them down 2 days ago and focus solely on the articles and mailing list.</p>\n\n<p><em>Articles</em><br>\nThe articles from dev.to, hashnode and product hunt were all gotten from their official APIs so it wasn't much of an issue apart from the graphql queries which I have very little experience using, all in all I was able to get what I needed and implement. <br>\nIn the app there is the daily brief which showcases the top featured articles and products on the platforms, I used react-mardown and svg loader to display the  data nicely on  the <a href=\"https://devybrew.web.app/latest\">page</a> </p>\n\n<p>pulse loader being used before display:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yzy9Ln62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twpkkwrpubab12rptnnb.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yzy9Ln62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twpkkwrpubab12rptnnb.png\" alt=\"pulse\"></a></p>\n\n<p>data shown after fetch:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nxMdUlwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdpxkbg5un4sin87jy65.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nxMdUlwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdpxkbg5un4sin87jy65.png\" alt=\"result\"></a></p>\n\n<h2>\n  <a href=\"#features-that-i-couldnt-add-future-features\">\n  </a>\n  Features that I couldn't add / Future features\n</h2>\n\n<ul>\n<li>Jokes/comic strip</li>\n<li>Word search / Crosswords</li>\n<li>More dev platforms</li>\n<li>Chrome extension</li>\n<li>More features are also welcome from anyone in the community, the more the merrier.</li>\n</ul>\n\n<h2>\n  <a href=\"#challenges-faced\">\n  </a>\n  Challenges faced\n</h2>\n\n<ul>\n<li><p>Time management/: I was so focused on creating the perfect project that I forgot to break it down into chunks and build upwards.</p></li>\n<li><p>I was pretty new to harperDB but it is actually very neat to use and get used to so I'm very grateful for that. Plus the docs are super easy to understand 👌👌.</p></li>\n<li><p>Getting the markdown to translate well to a clean design on the <a href=\"https://devybrew.web.app/latest\">daily brief</a> wasn't easy but it came together nicely.</p></li>\n<li><p>Then the harperDb and mailChimp syncing was something that took a while to get working but after some tweaking it worked.</p></li>\n</ul>\n\n<p>Overall it was a wonderful experience and I'll keep working on it to make it better. If you have any feedback I'll gladly accept for it. Also, some contributors on this would be nice, I believe it's a project worth working on.  <a href=\"https://github.com/arndom/devy-brew\">Contributors Wanted 🔔🔔</a> </p>\n\n<p>Hope you enjoyed it and have a nice day👋</p>\n\n<p><a href=\"https://i.giphy.com/media/KctrWMQ7u9D2du0YmD/giphy.gif\" class=\"article-body-image-wrapper\"><img src=\"https://i.giphy.com/media/KctrWMQ7u9D2du0YmD/giphy.gif\" alt=\"giph\"></a></p>\n\n<p>Stay <a href=\"https://devybrew.web.app/\">Creative</a></p>\n\n"
        ],
        "category": [
            "react",
            "firebase",
            "showdev",
            "sideprojects"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "React Query 3: A Guide to Fetching and Managing Data"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/react-query-fetch-manage-data/?utm_source=rss\"\n              title=\"React Query 3: A Guide to Fetching and Managing Data\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032782ReactQuery.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032782ReactQuery-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032782ReactQuery-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032782ReactQuery-768x405.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032782ReactQuery-1536x809.jpg 1536w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032782ReactQuery.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Building front-end CRUD applications often starts out easy then turns complicated as you continue adding features. For every API endpoint, you&#8217;ll need to deal with state management, synchronization, caching and error handling. In this article, you&#8217;ll learn about a library called <a href=\"https://react-query.tanstack.com\">React Query</a> and how it can help resolve all those issues. The library describes itself as the “missing data-fetching library” providing “server state management” for React.</strong></p>\n<p>We&#8217;ll be using a complete <a href=\"https://github.com/sitepoint-editors/react-query-demo\">React Query Demo</a> project to learn about the main features the library provides. You&#8217;ll then be able to apply this knowledge into your own projects. First, let&#8217;s get acquainted with a number of items before commencing with project setup.</p>\n<h2 id=\"aboutreactquery3\">About React Query 3</h2>\n<p>React Query is an open-source project created by <a href=\"https://github.com/tannerlinsley\">Tanner Linsey</a>. The latest major version, React Query 3, was <a href=\"https://twitter.com/tannerlinsley/status/1338498989918998532\">officially released</a> in December 2020. With this new version, new features were added and existing ones were improved.</p>\n<p>You should be aware that there&#8217;s a number of breaking changes from React Query 2.x, which was quite popular before the new version came out. There&#8217;s a <a href=\"https://react-query.tanstack.com/guides/migrating-to-react-query-3\">migration guide</a> which clearly explains these changes, as you&#8217;ll probably come across a lot of outdated tutorials that were written for the older version.</p>\n<p>The new version offers vast improvements and many of the bugs reported earlier have been resolved. Version 3, though ready for production, is still undergoing development as new bugs get squashed on a regular basis.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>This article is written for intermediate to advanced front-end developers who&#8217;ve grasped fundamental skills and knowledge in:</p>\n<ul>\n<li><a href=\"https://www.sitepoint.com/getting-started-react-beginners-guide/\">React</a></li>\n<li><a href=\"https://www.sitepoint.com/react-router-complete-guide/\">React Router</a></li>\n<li><a href=\"https://www.sitepoint.com/react-hooks/\">React Hooks</a></li>\n<li><a href=\"https://www.sitepoint.com/premium/courses/how-to-fetch-api-data-with-react-3178\">REST APIs Data Fetching</a></li>\n</ul>\n<p>In your developer&#8217;s machine environment, you&#8217;ll need to have set up the following:</p>\n<ul>\n<li><a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/downloads\">Git</a></li>\n<li>A REST Client such as <a href=\"https://www.postman.com/\">Postman</a>, <a href=\"https://insomnia.rest/\">Insomnia</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\">VS Code&#8217;s REST extension</a></li>\n</ul>\n<p>With that out of the way, let&#8217;s get into setting up the demo project.</p>\n<h2 id=\"abouttheproject\">About the Project</h2>\n<p>The demo project that we will analyze is a React front-end application that displays data provided by a <a href=\"https://github.com/typicode/json-server\">REST JSON API server</a>. The app is only made up of five pages that showcase the React Query features we&#8217;ll be learning about. These features include:</p>\n<ul>\n<li>Basic Query</li>\n<li>Paginated Query</li>\n<li>Infinite Query</li>\n<li>Create Mutation</li>\n<li>Update Mutation</li>\n<li>Delete Mutation</li>\n</ul>\n<p>React Query does provide many more features that unfortunately are outside the scope of this article. Below is a preview of the application we&#8217;ll be working with.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/161981198301-react-query-preview.png\" alt=\"react query preview\" /></p>\n<h2 id=\"projectsetup\">Project Setup</h2>\n<p>Before we start setting up, I think it&#8217;s best to briefly familiarize yourself with additional dependencies used in the project. These include:</p>\n<ul>\n<li><a href=\"https://vitejs.dev/\">Vite</a>: a very fast build tool</li>\n<li><a href=\"https://windicss.org/\">WindiCSS</a>: a very fast Tailwind CSS compiler</li>\n<li><a href=\"https://react-hook-form.com/\">React Hook Form</a>: a form builder and validation library using React hooks</li>\n<li><a href=\"http://reactcommunity.org/react-modal/\">React Modal</a>: an accessible modal component</li>\n<li><a href=\"https://github.com/axios/axios\">Axios</a>: a promise-based HTTP client for browsers</li>\n<li><a href=\"https://github.com/typicode/json-server\">JSON Server</a>: a full, fake REST API server</li>\n</ul>\n<p>To set up the React Query Demo application on your machine, execute the following instructions:</p>\n<pre><code class=\"bash language-bash\"># Clone the project\r\ngit clone git@github.com:sitepoint-editors/react-query-demo.git\r\n\r\n# Navigate to project directory\r\ncd react-query-demo\r\n\r\n# Install package dependencies\r\nnpm install\r\n\r\n# Setup database file for `json-server`\r\ncp api/sample.db.json api/db.json\r\n\r\n# Start the `json-server`\r\nnpm run json-server\r\n</code></pre>\n<p>The database file used by <code>json-server</code> contains an array of users. When you execute <code>npm run json-server</code>, a fake API server is launched on port <code>3004</code>. You can access users&#8217; data via <http:/localhost:3004/users>. Performing a GET request will yield the following sample JSON response:</p>\n<pre><code class=\"javascript language-javascript\">[\r\n  {\r\n    \"id\": 1,\r\n    \"first_name\": \"Siffre\",\r\n    \"last_name\": \"Timm\",\r\n    \"email\": \"stimmes0@nasa.govz\",\r\n    \"gender\": \"Male\"\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"first_name\": \"Fonzie\",\r\n    \"last_name\": \"Coggen\",\r\n    \"email\": \"fcoggen1@weather.com\",\r\n    \"gender\": \"Female\"\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"first_name\": \"Shell\",\r\n    \"last_name\": \"Kos\",\r\n    \"email\": \"skos2@prweb.com\",\r\n    \"gender\": \"Female\"\r\n  }\r\n]\r\n</code></pre>\n<p>Next, start up the dev server that will run the front-end code:</p>\n<pre><code class=\"bash language-bash\"># In another terminal, start the React dev server\r\nnpm run dev\r\n</code></pre>\n<p>Head over to your browser and open <a href=\"http://localhost:3000\">http://localhost:3000</a> to access the application. You should have an identical experience as shown in the preview above. Ensure you perform the following tasks in order to explore the application&#8217;s features thoroughly:</p>\n<ul>\n<li>Review the Basic Query page (home page).</li>\n<li>Visit the Paginated page and interact with the <strong>Previous</strong> and <strong>Next</strong> buttons</li>\n<li>Visit the Infinite page and interact with the <strong>Load more</strong> button.</li>\n<li>Go back to the Basic Query page and click the <strong>Create User</strong> button. You&#8217;ll be directed to the Create User page. Fill in the form and click the <strong>Save</strong> button.</li>\n<li>On the User Table, locate the <strong>Edit</strong> icon. Click on it. This will take you to the Edit User page. Make any changes you like, then hit the <strong>Save</strong> button.</li>\n<li>On the User Table, locate the <strong>Delete</strong> icon. Click on it. This will launch a modal dialog asking you to confirm your delete action. Click on the <strong>Delete</strong> button to to confirm.</li>\n</ul>\n<p>Once we&#8217;ve completed all the above tasks, we can start doing a break down of the project. Do review the project structure so that you know where each component and view is located. I&#8217;ll be providing stripped-down versions of these throughout the article, so that you can understand the fundamentals of using React Query in your projects.</p>\n<p><em>Note: stripped-down versions have <code>classNames</code>, local state and other UI components removed that aren&#8217;t the focus of the subject being discussed.</em></p>\n<h2 id=\"installingreactquery\">Installing React Query</h2>\n<p>React Query can be installed on a blank or existing React project using the following command:</p>\n<pre><code class=\"bash language-bash\">npm install react-query\r\n</code></pre>\n<p>The package comes with everything you need — including the Devtools utility feature, which we&#8217;ll explore at a later section. After installing the package, you&#8217;ll need to update your top-most component, — <code>App.jsx</code> — as follows:</p>\n<pre><code class=\"jsx language-jsx\">import { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nfunction App() {\r\n  const queryClient = new QueryClient();\r\n\r\n  return (\r\n    &lt;QueryClientProvider client={queryClient}&gt;\r\n      /* place application containers/views here */\r\n    &lt;/QueryClientProvider&gt;\r\n  );\r\n}\r\n\r\nexport default App;\r\n</code></pre>\n<p>Any child component of <code>QueryClientProvider</code> will be able to access hooks provided by React Query library. The hooks we&#8217;ll be using in this article are:</p>\n<ul>\n<li><a href=\"https://react-query.tanstack.com/reference/useQuery\"><code>useQuery</code></a></li>\n<li><a href=\"https://react-query.tanstack.com/reference/useInfiniteQuery\"><code>useInfiniteQuery</code></a></li>\n<li><a href=\"https://react-query.tanstack.com/reference/useMutation\"><code>useMutation</code></a></li>\n<li><a href=\"https://react-query.tanstack.com/reference/useQueryClient\"><code>useQueryClient</code></a></li>\n</ul>\n<p>Here&#8217;s an updated (simplified) version of <code>App.jsx</code> containing the child views that we&#8217;ll be using:</p>\n<pre><code class=\"jsx language-jsx\">import { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nimport BasicQuery from \"./views/BasicQuery\";\r\nimport InfiniteQuery from \"./views/InfiniteQuery\";\r\nimport PaginatedQuery from \"./views/PaginatedQuery\";\r\nimport CreateUser from \"./views/CreateUser\";\r\nimport EditUser from \"./views/EditUser\";\r\n\r\nfunction App() {\r\n  const queryClient = new QueryClient();\r\n\r\n  return (\r\n    &lt;QueryClientProvider client={queryClient}&gt;\r\n      &lt;Switch&gt;\r\n        &lt;Route path=\"/\" exact&gt;\r\n          &lt;BasicQuery /&gt;\r\n        &lt;/Route&gt;\r\n        &lt;Route path=\"/paginated\"&gt;\r\n          &lt;PaginatedQuery /&gt;\r\n        &lt;/Route&gt;\r\n        &lt;Route path=\"/infinite\"&gt;\r\n          &lt;InfiniteQuery /&gt;\r\n        &lt;/Route&gt;\r\n        &lt;Route path=\"/user/create\"&gt;\r\n          &lt;CreateUser /&gt;\r\n        &lt;/Route&gt;\r\n        &lt;Route path=\"/user/edit/:id\"&gt;\r\n          &lt;EditUser /&gt;\r\n        &lt;/Route&gt;\r\n      &lt;/Switch&gt;\r\n    &lt;/QueryClientProvider&gt;\r\n  );\r\n}\r\n\r\nexport default App;\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/react-query-fetch-manage-data/?utm_source=rss\">React Query 3: A Guide to Fetching and Managing Data</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/react-query-fetch-manage-data/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=185321",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Michael Wanyoike"
        ],
        "pubDate": [
            "Sun, 23 May 2021 16:00:52 GMT"
        ],
        "metaDesc": [
            "Need to fetch data in React? Learn about React Query, an excellent server state management library for simplifying your data-fetching needs."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Issue #459"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/cJx4ajIj_jE/"
        ],
        "pubDate": [
            "Tue, 11 May 2021 21:44:10 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-459/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn what container queries are & how they work, two opposite ways of using CSS custom properties, how to animate CSS masks based on the cursor position, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.oddbird.net/2021/04/05/containerqueries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Container Queries: a Quick Start Guide</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://www.oddbird.net/2021/04/05/containerqueries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/container-queries-a-quick-start-guide.jpg\" alt=\"Container Queries: a Quick Start Guide\" /></a>\n\t\t\t\t\t\t<p>David A. Herron explains what container queries are, how they work, and what other features they might come with once fully supported in browsers.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.oddbird.net/2021/04/05/containerqueries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.miriamsuzanne.com/2021/05/02/container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Container Queries Explainer & Proposal</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://www.miriamsuzanne.com/2021/05/02/container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/container-queries-explainer-and-proposal.jpg\" alt=\"Container Queries Explainer & Proposal\" /></a>\n\t\t\t\t\t\t<p>Miriam Suzanne shares her proposal for container queries, which works by applying size &#038; layout containment to the queried elements.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.miriamsuzanne.com/2021/05/02/container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/debugging-css-11052021\">Master the Skill of Debugging CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/debugging-css-11052021\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/02/debugging-css.jpg\" alt=\"Master the Skill of Debugging CSS\" /></a>\n\t\t\t\t\t\t<p>Ahmad Shadeed wrote a book full of tips and techniques on how to debug CSS, which will help you significantly reduce the time you spend on debugging and fixing CSS bugs.</p>\n<p>Use the coupon code “<strong>cssweekly</strong>” at checkout to get a 15% discount.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/debugging-css-11052021\">Learn More</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.quirksmode.org/blog/archives/2021/05/two_options_for.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Two Options for Using Custom Properties</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Peter-Paul Koch outlines two completely opposite ideas about the use of CSS custom properties.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.quirksmode.org/blog/archives/2021/05/two_options_for.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://tympanus.net/codrops/2021/05/04/dynamic-css-masks-with-custom-properties-and-gsap/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Dynamic CSS Masks with Custom Properties and GSAP</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Michelle Barker demonstrates how to animate CSS masks based on the cursor position using GSAP and custom properties for a unique spotlight effect.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://tympanus.net/codrops/2021/05/04/dynamic-css-masks-with-custom-properties-and-gsap/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.kirupa.com/html5/creating_colorful_smart_shadows.htm?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Creating Colorful, Smart Shadows</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Kirupa Chinnathambi shows how to create a shadow effect that inherits some of the colors from the foreground element.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.kirupa.com/html5/creating_colorful_smart_shadows.htm?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://webkit.org/blog/11648/new-webkit-features-in-safari-14-1/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">New WebKit Features in Safari 14.1</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Jon Davis gives an overview of new features available in Safari: Flexbox Gap Support, CSS Individual Transform Properties, Paint Timing API, and more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://webkit.org/blog/11648/new-webkit-features-in-safari-14-1/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.deque.com/blog/auditing-design-systems-for-accessibility/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Auditing Design Systems for Accessibility</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Anna E. Cook explains how to create a design system with baked-in accessibility and how to find &#038; audit accessibility issues in your existing design systems.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.deque.com/blog/auditing-design-systems-for-accessibility/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/polypane1\">Polypane — Build Responsive & Accessible Websites 5x Faster</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/polypane1\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/build-responsive-and-accessible-websites-5x-faster.jpg\" alt=\"Polypane — Build Responsive & Accessible Websites 5x Faster\" /></a>\n\t\t\t\t\t\t<p>Polypane is a standalone browser to guide your web development workflow every step of the way with built-in tools for responsive design, accessibility, meta information, and so much more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/polypane1\">Try Polypane for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/jh3y/pen/MWJdqBo?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Cuboid Generator</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>CSS Cuboid Generator is an online tool to generate CSS cuboid objects.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/jh3y/pen/MWJdqBo?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://iconic.app/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Iconic</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Iconic is a set of beautifully designed, pixel-perfect icons.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://iconic.app/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/shadow-scientist/pen/eYgPjxX?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS DNA 🧬</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/shadow-scientist/pen/eYgPjxX?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/css-dna.png\" alt=\"CSS DNA 🧬\" /></a>\n\t\t\t\t\t\t<p>Shadow Scientist created an animated, infinite double-helix loop using only CSS. </p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/shadow-scientist/pen/eYgPjxX?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/cJx4ajIj_jE\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-459/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "Face Detection on the Web with Face-api.js"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/face-api-js-face-detection/?utm_source=rss\"\n              title=\"Face Detection on the Web with Face-api.js\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624243613face-recognition.jpg\"\n        alt=\"Face Detection on the Web with Face-api.js\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624243613face-recognition-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624243613face-recognition.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Web browsers get more powerful by the day. Websites and web applications are also increasing in complexity. Operations that required a supercomputer some decades ago now runs on a smartphone. One of those things is face detection.</strong></p>\n<p>The ability to detect and analyze a face is super useful, as it enables us to add clever features. Think of automatically blurring faces (like Google Maps does), panning and scaling a webcam feed to focus on people (like Microsoft Teams), validating a passport, adding silly filters (like Instagram and Snapchat), and much more. But before we can do all that, we first need to find the face!</p>\n<p><a href=\"https://github.com/justadudewhohacks/face-api.js\">Face-api.js</a> is a library that enables developers to use face detection in their apps without requiring a background in machine learning.</p>\n<p><em>The code for this tutorial is available on <a href=\"https://github.com/sitepoint-editors/demo-face-api-js\">GitHub</a>.</em></p>\n<h2 id=\"facedetectionwithmachinelearning\">Face Detection with Machine Learning</h2>\n<p>Detecting objects, like a face, is quite complex. Think about it: perhaps we could write a program that scans pixels to find the eyes, nose, and mouth. It can be done, but to make it totally reliable is practically unachievable, given the many factors to account for. Think of lighting conditions, facial hair, the vast variety of shapes and colors, makeup, angles, face masks, and so much more.</p>\n<p>Neural networks, however, excel at these kinds of problems and can be generalized to account for most (if not all) conditions. We can create, train, and use neural networks in the browser with TensorFlow.js, a popular JavaScript machine learning library. However, even if we use an off-the-shelf, pre-trained model, we&#8217;d still get a little bit into the nitty-gritty of supplying the information to TensorFlow and interpreting the output. If you&#8217;re interested in the technical details of machine learning, check out “<a href=\"https://www.sitepoint.com/machine-learning-python-primer/\">A Primer on Machine Learning with Python</a>”.</p>\n<p>Enter face-api.js. It wraps all of this into an intuitive API. We can pass an <code>img</code>, <code>canvas</code>, or <code>video</code> DOM element and the library will return one or a set of results. Face-api.js can detect faces, but also estimate various things in them, as listed below.</p>\n<ul>\n<li><strong>Face detection</strong>: get the boundaries of one or multiple faces. This is useful for determining where and how big the faces are in a picture.</li>\n<li><strong>Face landmark detection</strong>: get the position and shape of the eyebrows, eyes, nose, mouth and lips, and chin. This can be used to determine facing direction or to project graphics on specific regions, like a mustache between the nose and lips.</li>\n<li><strong>Face recognition</strong>: determine who&#8217;s in the picture.</li>\n<li><strong>Face expression detection</strong>: get the expression from a face. Note that the mileage may vary for different cultures.</li>\n<li><strong>Age and gender detection</strong>: get the age and gender from a face. Note that for “gender” classification, it classifies a face as feminine or masculine, which doesn’t necessarily reveal their gender.</li>\n</ul>\n<p>Before you use any of this beyond experiments, please take note that artificial intelligence excels at amplifying biases. Gender classification works well for cisgendered people, but it can&#8217;t detect the gender of my nonbinary friends. It will identify white people most of the time but frequently fails to detect people of color.</p>\n<p>Be very thoughtful about using this technology and test thoroughly with a diverse testing group.</p>\n<h2 id=\"installation\">Installation</h2>\n<p>We can install face-api.js via npm:</p>\n<pre><code class=\"shell language-shell\">npm install face-api.js\r\n</code></pre>\n<p>However, to skip setting up build tools, I&#8217;ll include the UMD bundle via unpkg.org:</p>\n<pre><code class=\"javascript language-javascript\">/* globals faceapi */\r\nimport 'https://unpkg.com/face-api.js@0.22.2/dist/face-api.min.js';\r\n</code></pre>\n<p>After that, we&#8217;ll need to download the correct <a href=\"https://github.com/justadudewhohacks/face-api.js/tree/master/weights\">pre-trained model(s) from the library’s repository</a>. Determine what we want to know from faces, and use the <a href=\"https://github.com/justadudewhohacks/face-api.js#models\">Available Models section</a> to determine which models are required. Some features work with multiple models. In that case, we have to choose between bandwidth/performance and accuracy. Compare the file size of the various available models and choose whichever you think is best for your project.</p>\n<p>Unsure which models you need for your use? You can return to this step later. When we use the API without loading the required models, an error will be thrown, stating which model the library expects.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621972814error-model.jpg\" alt=\"console error message\" /></p>\n<p>We’re now ready to use <a href=\"https://github.com/justadudewhohacks/face-api.js#high-level-api\">the face-api.js API</a>.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>Let’s build some stuff!</p>\n<p>For the examples below, I’ll load a random image from <a href=\"https://source.unsplash.com\">Unsplash Source</a> with this function:</p>\n<pre><code class=\"javascript language-javascript\">function loadRandomImage() {\r\n  const image = new Image();\r\n\r\n  image.crossOrigin = true;\r\n\r\n  return new Promise((resolve, reject) =&gt; {\r\n    image.addEventListener('error', (error) =&gt; reject(error));\r\n    image.addEventListener('load', () =&gt; resolve(image));\r\n    image.src = 'https://source.unsplash.com/512x512/?face,friends';\r\n  });\r\n}\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/face-api-js-face-detection/?utm_source=rss\">Face Detection on the Web with Face-api.js</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/face-api-js-face-detection/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191882",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Tim Severien"
        ],
        "pubDate": [
            "Sun, 20 Jun 2021 16:00:14 GMT"
        ],
        "metaDesc": [
            "You don't need a background in machine learning and neural networks to implement face detection. Learn how to do it with Face-api.js!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Working with the File System in Deno"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/deno-file-system/?utm_source=rss\"\n              title=\"Working with the File System in Deno\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624411530deno-file-system.png\"\n        alt=\"Working with the File System in Deno\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624411530deno-file-system-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624411530deno-file-system.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll build on our <a href=\"https://www.sitepoint.com/learn-deno/\">introduction to Deno</a> by creating a command-line tool that can search for text within files and folders. We&#8217;ll use a range of API methods that Deno provides to read and write to the file system.</strong></p>\n<p>In our last installment, we used Deno to <a href=\"https://www.sitepoint.com/deno-fetch-data-third-party-api/\">build a command-line tool to make requests to a third-party API</a>. In this article, we&#8217;re going to leave the network to one side and build a tool that lets you search the file system for text in files and folders within your current directory — similar to tools like <code>grep</code>. </p>\n<p><em>Note: we&#8217;re not building a tool that will be as optimized and efficient as <code>grep</code>, nor are we aiming to replace it! The aim of building a tool like this is to get familiar with Deno&#8217;s file system APIs.</em></p>\n<h2 id=\"installingdeno\">Installing Deno</h2>\n<p>We&#8217;re going to assume that you&#8217;ve got Deno up and running on your machine locally. You can check the <a href=\"https://deno.land/#installation\">Deno website</a> or the <a href=\"https://www.sitepoint.com/deno-fetch-data-third-party-api/\">previous article</a> for more detailed installation instructions and also to get information on how to add Deno support to your editor of choice.</p>\n<p>At the time of writing, the latest stable version of Deno is <strong>1.10.2</strong>, so that&#8217;s what I&#8217;m using in this article.</p>\n<h2 id=\"settingupournewcommandwithyargs\">Setting Up Our New Command with Yargs</h2>\n<p>As in the previous article, we&#8217;ll use <a href=\"https://deno.land/x/yargs@v17.0.1-deno\">Yargs</a> to build the interface that our users can use to execute our tool. Let&#8217;s create <code>index.ts</code> and populate it with the following:</p>\n<pre><code class=\"ts language-ts\">import yargs from \"https://deno.land/x/yargs@v17.0.1-deno/deno.ts\";\r\n\r\ninterface Yargs&lt;ArgvReturnType&gt; {\r\n  describe: (param: string, description: string) =&gt; Yargs&lt;ArgvReturnType&gt;;\r\n  demandOption: (required: string[]) =&gt; Yargs&lt;ArgvReturnType&gt;;\r\n  argv: ArgvReturnType;\r\n}\r\n\r\ninterface UserArguments {\r\n  text: string;\r\n}\r\n\r\nconst userArguments: UserArguments =\r\n  (yargs(Deno.args) as unknown as Yargs&lt;UserArguments&gt;)\r\n    .describe(\"text\", \"the text to search for within the current directory\")\r\n    .demandOption([\"text\"])\r\n    .argv;\r\n\r\nconsole.log(userArguments);\r\n</code></pre>\n<p>There&#8217;s a fair bit going on here that&#8217;s worth pointing out:</p>\n<ul>\n<li>We install Yargs by pointing to its path on the Deno repository. I explicitly use a precise version number to make sure we always get that version, so that we don&#8217;t end up using whatever happens to be the latest version when the script runs.</li>\n<li>At the time of writing, the Deno + TypeScript experience for Yargs isn&#8217;t great, so I&#8217;ve created my own interface and used that to provide some type safety.</li>\n<li><code>UserArguments</code> contains all the inputs we&#8217;ll ask the user for. For now, we&#8217;re only going to ask for <code>text</code>, but in future we could expand this to provide a list of files to search for, rather than assuming the current directory.</li>\n</ul>\n<p>We can run this with <code>deno run index.ts</code> and see our Yargs output:</p>\n<pre><code class=\"bash language-bash\">$ deno run index.ts\r\nCheck file:///home/jack/git/deno-file-search/index.ts\r\nOptions:\r\n  --help     Show help                                                 [boolean]\r\n  --version  Show version number                                       [boolean]\r\n  --text     the text to search for within the current directory      [required]\r\n\r\nMissing required argument: text\r\n</code></pre>\n<p>Now it&#8217;s time to get implementing!</p>\n<h2 id=\"listingfiles\">Listing Files</h2>\n<p>Before we can start searching for text in a given file, we need to generate a list of directories and files to search within. Deno provides <a href=\"https://doc.deno.land/builtin/stable#Deno.readDir\"><code>Deno.readdir</code></a>, which is part of the &#8220;built-ins&#8221; library, meaning you don&#8217;t have to import it. It&#8217;s available for you on the global namespace.</p>\n<p><code>Deno.readdir</code> is asynchronous and returns a list of files and folders in the current directory. It returns these items as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator\"><code>AsyncIterator</code></a>, which means we have to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await…of\"><code>for await ... of</code></a> loop to get at the results:</p>\n<pre><code class=\"ts language-ts\">for await (const fileOrFolder of Deno.readDir(Deno.cwd())) {\r\n  console.log(fileOrFolder);\r\n}\r\n</code></pre>\n<p>This code will read from the current working directory (which <code>Deno.cwd()</code> gives us) and log each result. However, if you try to run the script now, you&#8217;ll get an error:</p>\n<pre><code class=\"bash language-bash\">$ deno run index.ts --text='foo'\r\nerror: Uncaught PermissionDenied: Requires read access to &lt;CWD&gt;, run again with the --allow-read flag\r\nfor await (const fileOrFolder of Deno.readDir(Deno.cwd())) {\r\n                                                   ^\r\n    at deno:core/core.js:86:46\r\n    at unwrapOpResult (deno:core/core.js:106:13)\r\n    at Object.opSync (deno:core/core.js:120:12)\r\n    at Object.cwd (deno:runtime/js/30_fs.js:57:17)\r\n    at file:///home/jack/git/deno-file-search/index.ts:19:52\r\n</code></pre>\n<p>Remember that Deno requires all scripts to be explicitly given permissions to read from the file system. In our case, the <code>--allow-read</code> flag will enable our code to run:</p>\n<pre><code class=\"bash language-bash\">~/$ deno run --allow-read index.ts --text='foo'\r\n{ name: \".git\", isFile: false, isDirectory: true, isSymlink: false }\r\n{ name: \".vscode\", isFile: false, isDirectory: true, isSymlink: false }\r\n{ name: \"index.ts\", isFile: true, isDirectory: false, isSymlink: false }\r\n</code></pre>\n<p>In this case, I&#8217;m running the script in the directory where I&#8217;m building our tool, so it finds the TS source code, the <code>.git</code> repository and the <code>.vscode</code> folder. Let&#8217;s start writing some functions to recursively navigate this structure, as we need to find all the files within the directory, not just the top level ones. Additionally, we can add some common ignores. I don&#8217;t think anyone will want the script to search the entire <code>.git</code> folder!</p>\n<p>In the code below, we&#8217;ve created the <code>getFilesList</code> function, which takes a directory and returns all files in that directory. If it encounters a directory, it will recursively call itself to find any nested files, and return the result:</p>\n<pre><code class=\"ts language-ts\">const IGNORED_DIRECTORIES = new Set([\".git\"]);\r\n\r\nasync function getFilesList(\r\n  directory: string,\r\n): Promise&lt;string[]&gt; {\r\n  const foundFiles: string[] = [];\r\n  for await (const fileOrFolder of Deno.readDir(directory)) {\r\n    if (fileOrFolder.isDirectory) {\r\n      if (IGNORED_DIRECTORIES.has(fileOrFolder.name)) {\r\n        // Skip this folder, it's in the ignore list.\r\n        continue;\r\n      }\r\n      // If it's not ignored, recurse and search this folder for files.\r\n      const nestedFiles = await getFilesList(\r\n        `${directory}/${fileOrFolder.name}`,\r\n      );\r\n      foundFiles.push(...nestedFiles);\r\n    } else {\r\n      // We found a file, so store it.\r\n      foundFiles.push(`${directory}/${fileOrFolder.name}`);\r\n    }\r\n  }\r\n  return foundFiles;\r\n}\r\n</code></pre>\n<p>We can then use this like so:</p>\n<pre><code class=\"ts language-ts\">const files = await getFilesList(Deno.cwd());\r\nconsole.log(files);\r\n</code></pre>\n<p>We also get some output that looks good:</p>\n<pre><code class=\"bash language-bash\">$ deno run --allow-read index.ts --text='foo'\r\n[\r\n  \"/home/jack/git/deno-file-search/.vscode/settings.json\",\r\n  \"/home/jack/git/deno-file-search/index.ts\"\r\n]\r\n</code></pre>\n<h2 id=\"usingthepathmodule\">Using the <code>path</code> Module</h2>\n<p>We&#8217;re could now combine file paths with template strings like so:</p>\n<pre><code class=\"ts language-ts\">`${directory}/${fileOrFolder.name}`,\r\n</code></pre>\n<p>But it would be nicer to do this using Deno&#8217;s <code>path</code> module. This module is one of the modules that Deno provides as part of its standard library (much like Node does with its <code>path</code> module), and if you&#8217;ve used Node&#8217;s <code>path</code> module the code will look very similar. At the time of writing, the latest version of the <code>std</code> library Deno provides is <code>0.97.0</code>, and we import the <code>path</code> module from the <code>mod.ts</code> file:</p>\n<pre><code class=\"ts language-ts\">import * as path from \"https://deno.land/std@0.97.0/path/mod.ts\";\r\n</code></pre>\n<p><code>mod.ts</code> is always the entrypoint when importing Deno&#8217;s standard modules. The documentation for this module <a href=\"https://doc.deno.land/https/deno.land/std@0.97.0/path/mod.ts\">lives on the Deno site</a> and lists <code>path.join</code>, which will take multiple paths and join them into one path. Let&#8217;s import and use that function rather than manually combining them:</p>\n<pre><code class=\"ts language-ts\">// import added to the top of our script\r\nimport yargs from \"https://deno.land/x/yargs@v17.0.1-deno/deno.ts\";\r\nimport * as path from \"https://deno.land/std@0.97.0/path/mod.ts\";\r\n\r\n// update our usages of the function:\r\nasync function getFilesList(\r\n  directory: string,\r\n): Promise&lt;string[]&gt; {\r\n  const foundFiles: string[] = [];\r\n  for await (const fileOrFolder of Deno.readDir(directory)) {\r\n    if (fileOrFolder.isDirectory) {\r\n      if (IGNORED_DIRECTORIES.has(fileOrFolder.name)) {\r\n        // Skip this folder, it's in the ignore list.\r\n        continue;\r\n      }\r\n      // If it's not ignored, recurse and search this folder for files.\r\n      const nestedFiles = await getFilesList(\r\n        path.join(directory, fileOrFolder.name),\r\n      );\r\n      foundFiles.push(...nestedFiles);\r\n    } else {\r\n      // We found a file, so store it.\r\n      foundFiles.push(path.join(directory, fileOrFolder.name));\r\n    }\r\n  }\r\n  return foundFiles;\r\n}\r\n</code></pre>\n<p>When using the standard library, it&#8217;s vital that you remember to pin to a specific version. Without doing so, your code will always load the latest version, even if that contains changes that will break your code. <a href=\"https://deno.land/manual/standard_library\">The Deno docs on the standard library</a> go into this further, and I recommend giving that page a read.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/deno-file-system/?utm_source=rss\">Working with the File System in Deno</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/deno-file-system/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=192694",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Jack Franklin"
        ],
        "pubDate": [
            "Tue, 22 Jun 2021 16:00:31 GMT"
        ],
        "metaDesc": [
            "Deno is a worthy rival to Node.js. Learn how to use it to create a command-line tool that can search for text within files and folders."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "An Introduction to the Rollup.js JavaScript Bundler"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/rollup-javascript-bundler-introduction/?utm_source=rss\"\n              title=\"An Introduction to the Rollup.js JavaScript Bundler\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611620524rollup-bundler.png\"\n        alt=\"An Introduction to the Rollup.js JavaScript Bundler\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611620524rollup-bundler-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611620524rollup-bundler.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a style=\"font-weight:bold\" href=\"https://rollupjs.org/\">Rollup.js</a> is a next-generation JavaScript module bundler from Rich Harris, the author of <a style=\"font-weight:bold\"  href=\"https://www.sitepoint.com/svelte-javascript-framework-introduction/\">Svelte</a>. It compiles multiple source files into a single bundle.</strong> </p>\n<p>The benefits include:</p>\n<ul>\n<li>development is easier to manage when using smaller, self-contained source files</li>\n<li>the source can be linted, prettified, and syntax-checked during bundling</li>\n<li><em>tree-shaking</em> removes unused functions</li>\n<li>transpiling to ES5 for backward compatibility is possible</li>\n<li>multiple output files can be generated — for example, your library could be provided in ES5, ES6 modules, and Node.js-compatible CommonJS</li>\n<li>production bundles can be minified and have logging removed</li>\n</ul>\n<p>Other bundler options, such as <a href=\"https://webpack.js.org/\">webpack</a>, <a href=\"https://www.snowpack.dev/\">Snowpack</a>, and <a href=\"https://parceljs.org/\">Parcel</a>, attempt to magically handle everything: HTML templating, image optimization, CSS processing, JavaScript bundling, and more. This works well when you&#8217;re happy with the default settings, but custom configurations can be difficult and processing is slower.</p>\n<p>Rollup.js primarily concentrates on JavaScript (although there are plugins for HTML templates and CSS). It has a daunting number of options, but it&#8217;s easy to get started and bundling is fast. This tutorial explains how to use typical configurations within your own projects.</p>\n<h2 id=\"installrollupjs\">Install Rollup.js</h2>\n<p>Rollup.js requires Node.js v8.0.0 or above and can be installed globally with:</p>\n<pre><code class=\"bash language-bash\">npm install rollup --global\r\n</code></pre>\n<p>This permits the <code>rollup</code> command to be run in any project directory containing JavaScript files — such as a PHP, WordPress, Python, Ruby or other project.</p>\n<p>However, if you&#8217;re on a larger team creating a Node.js project, it can be preferable to install Rollup.js locally to ensure all developers are using the same version. Presuming you have an existing Node.js <code>package.json</code> file within a project folder, run:</p>\n<pre><code class=\"bash language-bash\">npm install rollup --save-dev\r\n</code></pre>\n<p>You won&#8217;t be able to run the <code>rollup</code> command directly, but <code>npx rollup</code> can be used. Alternatively, <code>rollup</code> commands can be added to the <code>package.json</code> <code>\"scripts\"</code> section. For example:</p>\n<pre><code class=\"javascript language-javascript\">\"scripts\": {\r\n  \"watch\": \"rollup ./src/main.js --file ./build/bundle.js --format es --watch\",\r\n  \"build\": \"rollup ./src/main.js --file ./build/bundle.js --format es\",\r\n  \"help\": \"rollup --help\"\r\n},\r\n</code></pre>\n<p>These scripts can be executed with <code>npm run &lt;scriptname&gt;</code> — for example, <code>npm run watch</code>.</p>\n<p>The examples below specifically use <code>npx rollup</code>, since it will work regardless of whether <code>rollup</code> is installed locally or globally.</p>\n<h2 id=\"examplefiles\">Example Files</h2>\n<p>Example files and Rollup.js configurations can be downloaded from <a href=\"https://github.com/sitepoint-editors/rollup-demo\">GitHub</a>. It&#8217;s a Node.js project, so run <code>npm install</code> after cloning and examine the <code>README.md</code> file for instructions. Note that Rollup.js and all plugins are installed locally.</p>\n<p>Alternatively, you can create the source files manually after initializing a new Node.js project with <code>npm init</code>. The following ES6 modules create a real-time digital clock used to demonstrate Rollup.js processing.</p>\n<p><code>src/main.js</code> is the main entry point script. It locates a DOM element and runs a function every second, which sets its content to the current time:</p>\n<pre><code class=\"javascript language-javascript\">import * as dom from './lib/dom.js';\r\nimport { formatHMS } from './lib/time.js';\r\n\r\n// get clock element\r\nconst clock = dom.get('.clock');\r\n\r\nif (clock) {\r\n\r\n  console.log('initializing clock');\r\n\r\n  // update clock every second\r\n  setInterval(() =&gt; {\r\n\r\n    clock.textContent = formatHMS();\r\n\r\n  }, 1000);\r\n\r\n}\r\n</code></pre>\n<p><code>src/lib/dom.js</code> is a small DOM utility library:</p>\n<pre><code class=\"javascript language-javascript\">// DOM libary\r\n\r\n// fetch first node from selector\r\nexport function get(selector, doc = document) {\r\n  return doc.querySelector(selector);\r\n}\r\n\r\n// fetch all nodes from selector\r\nexport function getAll(selector, doc = document) {\r\n  return doc.querySelectorAll(selector);\r\n}\r\n</code></pre>\n<p>and <code>src/lib/time.js</code> provides time formatting functions:</p>\n<pre><code class=\"javascript language-javascript\">// time formatting\r\n\r\n// return 2-digit value\r\nfunction timePad(n) {\r\n  return String(n).padStart(2, '0');\r\n}\r\n\r\n// return time in HH:MM format\r\nexport function formatHM(d = new Date()) {\r\n  return timePad(d.getHours()) + ':' + timePad(d.getMinutes());\r\n}\r\n\r\n// return time in HH:MM:SS format\r\nexport function formatHMS(d = new Date()) {\r\n  return formatHM(d) + ':' + timePad(d.getSeconds());\r\n}\r\n</code></pre>\n<p>The clock code can be added to a web page by creating an HTML element with a <code>clock</code> class and loading the script as an ES6 module:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n&lt;meta charset=\"UTF-8\"&gt;\r\n&lt;title&gt;Rollup.js testing&lt;/title&gt;\r\n&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /&gt;\r\n&lt;script type=\"module\" src=\"./src/main.js\"&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;h1&gt;Clock&lt;/h1&gt;\r\n\r\n  &lt;time class=\"clock\"&gt;&lt;/time&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>Rollup.js provides options for optimizing the JavaScript source files.</p>\n<h2 id=\"rollupjsquickstart\">Rollup.js Quick Start</h2>\n<p>The following command can be run from the root of the project folder to process <code>src/main.js</code> and its dependencies:</p>\n<pre><code class=\"bash language-bash\">npx rollup ./src/main.js --file ./build/bundle.js --format iife\r\n</code></pre>\n<p>A single script at <code>build/bundle.js</code> is output. It contains all code, but notice that unused dependencies such as the <code>getAll()</code> function in <code>src/lib/dom.js</code> have been removed:</p>\n<pre><code class=\"javascript language-javascript\">(function () {\r\n  'use strict';\r\n\r\n  // DOM libary\r\n\r\n  // fetch first node from selector\r\n  function get(selector, doc = document) {\r\n    return doc.querySelector(selector);\r\n  }\r\n\r\n  // time library\r\n\r\n  // return 2-digit value\r\n  function timePad(n) {\r\n    return String(n).padStart(2, '0');\r\n  }\r\n\r\n  // return time in HH:MM format\r\n  function formatHM(d = new Date()) {\r\n    return timePad(d.getHours()) + ':' + timePad(d.getMinutes());\r\n  }\r\n\r\n  // return time in HH:MM:SS format\r\n  function formatHMS(d = new Date()) {\r\n    return formatHM(d) + ':' + timePad(d.getSeconds());\r\n  }\r\n\r\n  // get clock element\r\n  const clock = get('.clock');\r\n\r\n  if (clock) {\r\n\r\n    console.log('initializing clock');\r\n\r\n    setInterval(() =&gt; {\r\n\r\n      clock.textContent = formatHMS();\r\n\r\n    }, 1000);\r\n\r\n  }\r\n\r\n}());\r\n</code></pre>\n<p>The HTML <code>&lt;script&gt;</code> can now be changed to reference the bundled file:</p>\n<pre><code class=\"markup language-markup\">&lt;script type=\"module\" src=\"./build/bundle.js\"&gt;&lt;/script&gt;\r\n</code></pre>\n<p><em>Note: <code>type=\"module\"</code> is no longer necessary, so the script should work in older browsers which support early ES6 implementations. You should also add a <code>defer</code> attribute to ensure the script runs after the DOM is ready (this occurs by default in ES6 modules).</em></p>\n<p>Rollup.js offers <a href=\"https://rollupjs.org/guide/en/#command-line-flags\">numerous command-line flags</a>. The following sections describe the most useful options.</p>\n<h3 id=\"rollupjshelp\">Rollup.js Help</h3>\n<p>Rollup&#8217;s command-line options can be viewed with the <code>--help</code> or <code>-h</code> flag:</p>\n<pre><code class=\"bash language-bash\">npx rollup --help\r\n</code></pre>\n<p>The Rollup.js version can be output with <code>--version</code> or <code>-v</code>:</p>\n<pre><code class=\"bash language-bash\">npx rollup --version\r\n</code></pre>\n<h3 id=\"outputfile\">Output File</h3>\n<p>The <code>--file</code> (or <code>-o</code>) flag defines the output bundle file, which is set to <code>./build/bundle.js</code> above. If no file is specified, the resulting bundle is sent to <code>stdout</code>.</p>\n<h3 id=\"javascriptformatting\">JavaScript Formatting</h3>\n<p>Rollup.js provides several <code>--format</code> (or <code>-f</code>) options to configure the resulting bundle:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right;\">option</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right;\"><code>iife</code></td>\n<td>wrap code in an Immediately Invoked Function Expression <code>(function () { ... }());</code> block so it cannot conflict with other libraries</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><code>es6</code></td>\n<td>standard ES6</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><code>cjs</code></td>\n<td>CommonJS for Node.js</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><code>umd</code></td>\n<td><a href=\"https://github.com/umdjs/umd\">Universal Module Definition</a> for use on both the client and server</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><code>amd</code></td>\n<td><a href=\"https://github.com/amdjs\">Asynchronous Module Definition</a></td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><code>system</code></td>\n<td><a href=\"https://github.com/systemjs/systemjs\">SystemJS modules</a></td>\n</tr>\n</tbody>\n</table>\n<p>Unless you&#8217;re using a specific module system, <code>iife</code> will be the best option for client-side JavaScript. <code>es6</code> will produce a slightly smaller bundle, but be wary of global variables and functions which could conflict with other libraries.</p>\n<h3 id=\"outputasourcemap\">Output a Source Map</h3>\n<p>A source map provides a reference back to the source files so they can be examined in browser developer tools. This makes it easier to set breakpoints or locate problems when errors occur.</p>\n<p>An external source map can be created by adding a <code>--sourcemap</code> flag to the <code>rollup</code> command:</p>\n<pre><code class=\"bash language-bash\">npx rollup ./src/main.js --file ./build/bundle.js --format iife --sourcemap\r\n</code></pre>\n<p>This creates an additional <code>./build/bundle.js.map</code> file. You can view it, although it&#8217;s mostly gibberish and not intended for human consumption! The map is referenced as a comment at the end of <code>./build/bundle.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">//# sourceMappingURL=bundle.js.map\r\n</code></pre>\n<p>Alternatively, you can create an inline source map with <code>--sourcemap inline</code>. Rather than producing an additional file, a base64-encoded version of the source map is appended to <code>./build/bundle.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY...etc...\r\n</code></pre>\n<p>After generating the source map, you can load an example page which references the script. Open your developer tools and navigate to the <strong>Sources</strong> tab in Chrome-based browsers or the <strong>Debugger</strong> tab in Firefox. You’ll see the original <code>src</code> code and line numbers.</p>\n<h3 id=\"watchfilesandautomaticallybundle\">Watch Files and Automatically Bundle</h3>\n<p>The <code>--watch</code> (or <code>-w</code>) flag monitors your source files for changes and automatically builds the bundle. The terminal screen is cleared on every run, but you can disable this with <code>--no-watch.clearScreen</code>:</p>\n<pre><code class=\"bash language-bash\">npx rollup ./src/main.js --file ./build/bundle.js --format iife --watch --no-watch.clearScreen\r\n</code></pre>\n<h2 id=\"createaconfigurationfile\">Create a Configuration File</h2>\n<p>Command-line flags can quickly become unwieldy. The examples above are already long and you&#8217;ve not begun to add plugins!</p>\n<p>Rollup.js can use a <a href=\"https://rollupjs.org/guide/en/#configuration-files\">JavaScript configuration file</a> to define bundling options. The default name is <code>rollup.config.js</code> and it should be placed in the root of your project (typically, the directory where you run <code>rollup</code> from).</p>\n<p>The file is an ES module which exports a default object that sets Rollup.js options. The following code replicates the commands used above:</p>\n<pre><code class=\"javascript language-javascript\">// rollup.config.js\r\n\r\nexport default {\r\n\r\n  input: './src/main.js',\r\n\r\n  output: {\r\n    file: './build/bundle.js',\r\n    format: 'iife',\r\n    sourcemap: true\r\n  }\r\n\r\n}\r\n</code></pre>\n<p><em>Note: <code>sourcemap: true</code> defines an external sourcemap. Use <code>sourcemap: 'inline'</code> for an inline sourcemap.</em></p>\n<p>You can use this configuration file when running <code>rollup</code> by setting the <code>--config</code> (or <code>-c</code>) flag:</p>\n<pre><code class=\"bash language-bash\">npx rollup --config\r\n</code></pre>\n<p>A file name can be passed if you named the configuration something other than than <code>rollup.config.js</code>. This can be practical when you have multiple configurations perhaps located in a <code>config</code> directory. For example:</p>\n<pre><code class=\"bash language-bash\">npx rollup --config ./config/rollup.simple.js\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/rollup-javascript-bundler-introduction/?utm_source=rss\">An Introduction to the Rollup.js JavaScript Bundler</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/rollup-javascript-bundler-introduction/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180783",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 25 Jan 2021 15:00:18 GMT"
        ],
        "metaDesc": [
            "Snowpack, webpack and Parcel bundle your JS but are hard to custom configure. Rollup.js is faster and more configurable. Learn how to set it up!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Be: The Fastest and Easiest Way to Build Your Portfolio Site"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/21/be-the-fastest-and-easiest-way-to-build-your-portfolio-site/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Mon, 21 Jun 2021 13:47:03 +0000"
        ],
        "category": [
            "Articles",
            "theme",
            "website builder",
            "wordpress"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=55047",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>You need to build a portfolio for your web design business, but are stressed about the time commitment. Don’t be. With the new and improved Muffin Builder, you can have it online ASAP.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/21/be-the-fastest-and-easiest-way-to-build-your-portfolio-site/\">Be: The Fastest and Easiest Way to Build Your Portfolio Site</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>The website for your design business should not only explain who you are and what you do, but show off the impressive body of work you’ve created. It’s the strongest tool in your sales and marketing arsenal.&nbsp;</p>\n\n\n\n<p>But as a web designer, you know how long it can take to build a really great website for a client. If you’re ready to start attracting awesome leads and adding new clients to your business <em>now</em>, you might not want to spend that much time building your portfolio site.&nbsp;</p>\n\n\n\n<p>The good news is that you don’t have to.&nbsp;</p>\n\n\n\n<p><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\">BeTheme</a>’s new Muffin Builder is like upgrading from a Ford to a Ferrari. You’ll be shocked at how quickly you get your website to the finish line — and with superior results, no less.&nbsp;<a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"></a></p>\n\n\n\n<figure class=\"wp-block-video\"><a rel=\"sponsored nofollow\" href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><video autoplay=\"\" controls=\"\" loop=\"\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/1-1.mp4\"></video></a></figure>\n\n\n\n<p>Let’s take a closer look:</p>\n\n\n\n<h2>New Muffin Builder features that’ll knock your socks off</h2>\n\n\n\n<p>Time is money when you’re a web designer. So, it’s important to build a portfolio site and get it online as soon as possible.&nbsp;</p>\n\n\n\n<p>Here are 6 features from the new Muffin Builder (and BeTheme) that will enable you to quickly and painlessly create something you’re proud of and that will undoubtedly impress prospective clients:</p>\n\n\n\n<h3>Feature #1: A professional-looking portfolio site already built for you</h3>\n\n\n\n<p>There are certain pages and features every portfolio should have: An attractive home page, convincing client testimonials, a selection of works, and so on.&nbsp;</p>\n\n\n\n<p>But just because the structure of your site will mirror other portfolio sites, that doesn’t mean it has to look like everyone else’s.&nbsp;</p>\n\n\n\n<p>As of today, BeTheme has over 600 pre-built sites, with dozens of portfolio site options to choose from:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-video\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\"><video autoplay=\"\" controls=\"\" loop=\"\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/2.mp4\"></video></a></figure>\n\n\n\n<p>While these portfolio sites might be built for different types of creatives, pay attention to the different styles. Whether you want to give your site a futuristic edge or you want to infuse the design with some femininity, you’ll find the perfect portfolio-equipped site for your business here.&nbsp;</p>\n\n\n\n<p>What’s more, each pre-built portfolio site is compatible with Muffin Builder, so you’ll have the added benefit of being able to edit your pre-built site with this powerful website builder.&nbsp;</p>\n\n\n\n<h3>Feature #2: Intuitive customization options</h3>\n\n\n\n<p>Realistically, you could have a new portfolio site designed and loaded into WordPress in under a minute with BeTheme.&nbsp;</p>\n\n\n\n<p>While each site comes with well-chosen imagery and helpful placeholder text, you’ll still need to customize the content and maybe even tweak the design in order to make it your own.</p>\n\n\n\n<p>Once you’re inside the new and improved Muffin Builder, you’ll see how easy this is to do.</p>\n\n\n\n<p>The first customization feature to take advantage of is the global settings editor, which you’ll find under Betheme &gt; Theme Options in WordPress:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/3-800x443.png\" alt=\"\" class=\"wp-image-55051\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/3-800x443.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/3-400x221.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/3-768x425.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/3.png 1426w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Quickly update colors, fonts, layouts, and styles and apply them globally to the site from this panel.&nbsp;</p>\n\n\n\n<p>To make changes on a smaller scale, use the Muffin Editor within your Pages. The section toolbar will allow you to make adjustments to each container:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-video\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\"><video width=\"100%\" controls=\"\" autoplay=\"\" loop=\"\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/4-1.mp4\"></video></a></figure>\n\n\n\n<p>You have the same level of control over the content within each block. The settings you find here all depend on what kind of content is in the block. For example:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-video\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\"><video controls=\"\" autoplay=\"\" loop=\"\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/5.mp4\"></video></a></figure>\n\n\n\n<p>You have the flexibility to customize your content however you prefer: Use the text editor or take advantage of Muffin Builder’s predefined settings.</p>\n\n\n\n<h3>Feature #3: Importable and reusable section templates</h3>\n\n\n\n<p>It’s not just the base of your site that’s already built for you with BeTheme.&nbsp;</p>\n\n\n\n<p>Let’s say you’ve imported a great-looking portfolio pre-built site like <a href=\"https://themes.muffingroup.com/be/portfolio2/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\">Portfolio 2</a>:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"nofollow sponsored\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/6-800x438.png\" alt=\"\" class=\"wp-image-55050\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/6-800x438.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/6-400x219.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/6-768x421.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/6.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>You like the current layout of the About us page on this site, but you want to add a Google reviews section between the “My offer” and “How I work” sections.&nbsp;</p>\n\n\n\n<p>With the Muffin Builder, you can easily import pre-built sections using the icon on the right toolbar or by clicking “Pre-built sections” when you add a new section to the page:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/7-800x438.png\" alt=\"\" class=\"wp-image-55060\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/7-800x438.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/7-400x219.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/7-768x421.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/7.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Chances are good that whatever you envisioned adding to the page can be found there. Like this:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/8-800x438.png\" alt=\"\" class=\"wp-image-55053\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/8-800x438.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/8-400x219.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/8-768x421.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/8.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>As you can see, it’s all placeholder content. That said, the structure and design are taken care of, so all you need to do is fill in the content.&nbsp;</p>\n\n\n\n<h3>Feature #4: Custom layouts and headers</h3>\n\n\n\n<p>Pre-built sites are a great starting point. In many cases, you can use them right out of the box.&nbsp;</p>\n\n\n\n<p>However, if you want to alter the layout across the site or on a specific page or two, Muffin Builder can help you make those adjustments:</p>\n\n\n\n<figure class=\"wp-block-video\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\"><video controls=\"\" autoplay=\"\" loop=\"\" src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/9.mp4\"></video></a></figure>\n\n\n\n<p>Under the Layouts section in WordPress, set up your custom layout — which includes changing the header, too, if you prefer — and save it.</p>\n\n\n\n<p>To apply it to your pages, scroll down below the Muffin Builder on each page and select the layout from the list:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/10-800x438.png\" alt=\"\" class=\"wp-image-55052\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/10-800x438.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/10-400x219.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/10-768x421.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/10.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>This way, you’re not just empowered to swap out your content for BeTheme’s placeholder content. With Muffin Builder, you get to customize as much or as little of the pre-built site as you want.&nbsp;</p>\n\n\n\n<h3>Feature #5: Backup and restoration</h3>\n\n\n\n<p>It’s not uncommon to “sleep on it” and decide you liked the way the site looked or the way you wrote something previously.&nbsp;</p>\n\n\n\n<p>Thanks to the Muffin Builder’s revision panel and backups, you can quickly and painlessly roll back your portfolio site.</p>\n\n\n\n<p>First, open the revisions panel:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/11-800x438.png\" alt=\"\" class=\"wp-image-55048\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/11-800x438.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/11-400x219.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/11-768x421.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/11.png 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>Then choose the revision (if there’s more than one) you want to restore:&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/12-800x404.png\" alt=\"\" class=\"wp-image-55049\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/12-800x404.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/12-400x202.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/12-768x388.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/12.png 1333w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>If you’ve ever stressed about an update you made to your portfolio and wished you could instantly go back to the way it was before, this new Muffin Builder feature is going to be a lifesaver.</p>\n\n\n\n<h3>Coming soon: The Front-end builder</h3>\n\n\n\n<p>If you prefer to design from the front-end of the website, a new Muffin Builder feature will be headed your way the Summer of 2021:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://themes.muffingroup.com/be/splash/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/13-800x469.png\" alt=\"\" class=\"wp-image-55054\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/13-800x469.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/13-400x235.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/13-768x450.png 768w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/13-1536x901.png 1536w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/13.png 2048w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></a></figure>\n\n\n\n<p>There are a number of reasons why many website builder tools (including WordPress’s own Gutenberg) have a front-end editing experience:&nbsp;</p>\n\n\n\n<ul><li>It saves you the trouble of having to switch between the editor and website preview to check your work.&nbsp;</li><li>Some people prefer to do their editing within the full context of the website as it’s easier to make decisions when looking at the big picture.&nbsp;</li><li>It’s more client-friendly than the typical backend editor, so this feature can empower your clients and other non-tech-savvy users to make tweaks to their sites.</li></ul>\n\n\n\n<p>If you’ve been looking for a live visual editor to use in WordPress, this new feature is just around the corner!</p>\n\n\n\n<h2>The fast and easy way to build a portfolio: BeTheme + Muffin Builder</h2>\n\n\n\n<p>If you’re looking for a fast and easy way to build your digital portfolio, the solution is obvious:&nbsp;</p>\n\n\n\n<p>Start with a beautiful BeTheme pre-built site and then customize it with the intuitive Muffin Builder.</p>\n\n\n\n<p>Who knows? This potent combo could end up changing the way you build websites for your clients going forward.&nbsp;</p>\n\n\n\n<p><a href=\"https://themes.muffingroup.com/?utm_source=tympanus.net&amp;utm_medium=content&amp;utm_campaign=jun21\" rel=\"sponsored nofollow\"><strong>Learn more about BeTheme, explore the more than 600 pre-built sites available, and check out Muffin Builder’s newest features here.</strong></a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/21/be-the-fastest-and-easiest-way-to-build-your-portfolio-site/\">Be: The Fastest and Easiest Way to Build Your Portfolio Site</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "enclosure": [
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/1-1.mp4",
                    "length": "605065",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/2.mp4",
                    "length": "1802130",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/4-1.mp4",
                    "length": "142408",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/5.mp4",
                    "length": "308334",
                    "type": "video/mp4"
                }
            },
            {
                "$": {
                    "url": "https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/9.mp4",
                    "length": "522773",
                    "type": "video/mp4"
                }
            }
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "Issue #458"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/Oy9Y0M5Wa40/"
        ],
        "pubDate": [
            "Tue, 04 May 2021 21:49:34 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-458/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn everything about CSS Custom Properties, list markers, styling built-in HTML elements, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">A Complete Guide to Custom Properties</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/a-complete-guide-to-custom-properties.jpg\" alt=\"A Complete Guide to Custom Properties\" /></a>\n\t\t\t\t\t\t<p>Chris Coyier created a guide that covers everything important and useful to know about CSS Custom Properties.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/list-markers-and-string-styles/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">List Markers and String Styles</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://css-tricks.com/list-markers-and-string-styles/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/list-markers-and-string-styles.jpg\" alt=\"List Markers and String Styles\" /></a>\n\t\t\t\t\t\t<p>Eric Meyer gives an introduction to the <code>::marker</code> pseudo-element, listing all properties you can use with it, along with the current limitations.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/list-markers-and-string-styles/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/carpio-2-wrist-rest\">Let's be honest, we all know CSS can be a pain in the <del>neck</del> wrist</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/carpio-2-wrist-rest\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/css-can-be-a-pain-in-the-wrist.jpeg\" alt=\"Let's be honest, we all know CSS can be a pain in the <del>neck</del> wrist\" /></a>\n\t\t\t\t\t\t<p>Did you know that coding for more than 4 hours per day makes you 3 times more likely to develop wrist pain?</p>\n<p>Carpio 2.0 is an ergonomic accessory that helps you boost your productivity while reducing the risk of developing strain injuries.</p>\n<p>Put differently, a wrist without Carpio is like HTML without CSS — simple yet painful.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/carpio-2-wrist-rest\">Learn More</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.bram.us/2021/04/15/identify-and-extract-pseudo-element-selectors-from-built-in-html-elements-using-devtools/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Identify and Extract Pseudo-Element Selectors From Built-In HTML Elements Using DevTools</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Bramus Van Damme demonstrates how to style the built-in HTML elements like <code>&lt;input type=\"file\"/&gt;</code> and <code>&lt;audio&gt;</code>.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.bram.us/2021/04/15/identify-and-extract-pseudo-element-selectors-from-built-in-html-elements-using-devtools/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.quirksmode.org/blog/archives/2021/04/fitcontent_and.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">fit-content and fit-content()</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Peter-Paul Koch looks at <code>fit-content</code> and <code>fit-content()</code>, special values for width and grid definitions.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.quirksmode.org/blog/archives/2021/04/fitcontent_and.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.debugbear.com/blog/devtools-performance?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Profiling site speed with the Chrome DevTools Performance tab</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Matt Zeunert demonstrates how to use the Chrome DevTools Performance tab to measure and improve the speed of your website.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.debugbear.com/blog/devtools-performance?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.matuzo.at/blog/html-boilerplate/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">My Current HTML Boilerplate</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Manuel Matuzovic gives an overview of every element he uses for the basic structure of an HTML document, with explanations why.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.matuzo.at/blog/html-boilerplate/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://ceacs-cesca.github.io/playbook/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">AccessAbility Playbook</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>A fantastic guide to delivering accessible and inclusive client services.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://ceacs-cesca.github.io/playbook/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/be-theme-jaw-dropping-designs\">Be: An IMPRESSIVE library of 600+ pre-built websites</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/be-theme-jaw-dropping-designs\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/be-theme-jaw-dropping-designs.jpg\" alt=\"Be: An IMPRESSIVE library of 600+ pre-built websites\" /></a>\n\t\t\t\t\t\t<p>Jaw-Dropping Designs.<br />\nUse it for ANY type of project.<br />\n$59 only.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/be-theme-jaw-dropping-designs\">Discover more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://gridjs.io/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Grid.js</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Grid.js is an open-source JavaScript table plugin that works with most JavaScript frameworks, including React, Angular, Vue, and VanillaJs.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://gridjs.io/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.flagpack.xyz/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Flagpack</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Flagpack is a library of open source flag icons to use in your design tools or code projects.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.flagpack.xyz/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/amit_sheen/pen/JjEQywZ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Flag</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/amit_sheen/pen/JjEQywZ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/css-flag.jpg\" alt=\"CSS Flag\" /></a>\n\t\t\t\t\t\t<p>Amit Sheen created a stunning, animated flag using only CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/amit_sheen/pen/JjEQywZ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/Oy9Y0M5Wa40\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-458/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "A Primer on Machine Learning with Python"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/machine-learning-python-primer/?utm_source=rss\"\n              title=\"A Primer on Machine Learning with Python\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620607398machine-learning-intro.png\"\n        alt=\"A Primer on Machine Learning with Python\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620607398machine-learning-intro-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620607398machine-learning-intro.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In the past decade, machine learning has moved from scientific research labs into everyday web and mobile apps. Machine learning enables your applications to perform tasks that were previously very difficult to program, such as detecting objects and faces in images, detecting spam and hate speech, and generating smart replies for emails and messaging apps.</strong></p>\n<p>But performing machine learning is fundamentally different from classic programming. In this article, you’ll learn the basics of machine learning and will create a basic model that can predict the species of flowers based on their measurements. </p>\n<h2 id=\"howdoesmachinelearningwork\">How Does Machine Learning Work?</h2>\n<p>Classic programming relies on well-defined problems that can be broken down into distinct classes, functions, and if–else commands. Machine learning, on the other hand, relies on developing its behavior based on experience. Instead of providing machine learning models with rules, you train them through examples. </p>\n<p>There are different categories of machine learning algorithms, each of which can solve specific problems.</p>\n<h3 id=\"supervisedlearning\">Supervised learning</h3>\n<p><a href=\"https://bdtechtalks.com/2020/02/10/unsupervised-learning-vs-supervised-learning/\"><strong>Supervised learning</strong></a> is suitable for problems where you want to go from input data to outcomes. The common trait of all supervised learning problems is that there’s a ground truth against which you can test your model, such as labeled images or historical sales data.</p>\n<p>Supervised learning models can solve regression or classification problems. Regression models predict quantities (such as the number of items sold or the price of stock) while classification problems try to determine the category of input data (such as cat/dog/fish/bird, fraud/not fraud). </p>\n<p>Image classification, face detection, stock price prediction, and sales forecasting are examples of problems supervised learning can solve. </p>\n<p>Some popular supervised learning algorithms include linear and logistic regression, support vector machines, decision trees, and artificial neural networks.</p>\n<h3 id=\"unsupervisedlearning\">Unsupervised learning</h3>\n<p>Unsupervised learning is suitable for problems where you have data but instead of outcomes, you’re looking for patterns. For instance, you might want to group your customers into segments based on their similarities. This is called <strong>clustering</strong> in unsupervised learning. Or you might want to detect malicious network traffic that deviates from the normal activity in your enterprise. This is called <strong>anomaly detection</strong>, another unsupervised learning task. Unsupervised learning is also useful for <strong>dimensionality reduction</strong>, a trick that simplifies machine learning tasks by removing irrelevant features.</p>\n<p>Some popular unsupervised learning algorithms include K-means clustering and principle component analysis (PCA).</p>\n<h3 id=\"reinforcementlearning\">Reinforcement learning</h3>\n<p><a href=\"https://bdtechtalks.com/2019/05/28/what-is-reinforcement-learning/\"><strong>Reinforcement learning</strong></a> is a branch of machine learning in which an intelligent agent tries to achieve a goal by interacting with its environment. Reinforcement learning involves actions, states, and rewards. An untrained RL agent starts by randomly taking actions. Each action changes the state of the environment. If the agent finds itself in the desired state, it receives a reward. The agent tries to find sequences of actions and states that produce the most rewards.</p>\n<p>Reinforcement learning is used in recommendation systems, robotics, and game-playing bots such as Google’s AlphaGo and AlphaStar.</p>\n<h2 id=\"settingupthepythonenvironment\">Setting Up the Python Environment</h2>\n<p>In this post, we’ll focus on supervised learning, because it’s the most popular branch of machine learning and its results are easier to evaluate. We will be using Python, because it has many features and libraries that support machine learning applications. But the general concepts can be applied to any programming language that has similar libraries.</p>\n<p>(In case you&#8217;re new to Python, freeCodeCamp has a great <a href=\"https://www.freecodecamp.org/news/python-crash-course/\">crash course</a> that will get you started with the basics.)</p>\n<p>One of the Python libraries often used for data science and machine learning is <a href=\"https://sklearn.org/\">Scikit-learn</a>, which provides implementations of popular machine learning algorithms. Scikit-learn is not part of the base Python installation and you must install it manually.</p>\n<p>macOS and Linux come with Python preinstalled. To install the Scikit-learn library, type the following command in a terminal window:</p>\n<pre><code class=\"console language-console\">pip install scikit-learn\r\n</code></pre>\n<p>Or for Python 3:</p>\n<pre><code class=\"console language-console\">python3 -m pip install scikit-learn\r\n</code></pre>\n<p>On Microsoft Windows, you must install Python first. You can get the installer of the latest version of Python 3 for Windows from <a href=\"https://www.python.org/downloads/windows/\">the official website</a>. After installing Python, type the following command in a command-line window:</p>\n<pre><code class=\"console language-console\">python -m pip install scikit-learn\r\n</code></pre>\n<p>Alternatively, you can install the Anaconda framework, which includes an independent installation of Python 3 along with Scikit-learn and many other libraries used for data science and machine learning, such as <em>Numpy</em>, <em>Scipy</em>, and <em>Matplotlib</em>. You can find the installation instruction of the free Individual Edition of Anaconda on <a href=\"https://www.anaconda.com/products/individual\">its official website</a>. </p>\n<h2 id=\"step1definetheproblem\">Step 1: Define the Problem</h2>\n<p>The first step to every machine learning project is knowing what problem you want to solve. Defining the problem will help you determine the kind of data you need to gather and give you an idea of the kind of machine learning algorithm you’ll need to use.</p>\n<p>In our case, we want to create a model that predicts the species of a flower based on the measurements of the petal and <a href=\"https://en.wikipedia.org/wiki/Sepal\">sepal</a> length and width.</p>\n<p>This is a supervised classification problem. We’ll need to gather a list of measurements of different specimens of flowers and their corresponding species. Then we’ll use this data to train and test a machine learning model that can map measurements to species.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/machine-learning-python-primer/?utm_source=rss\">A Primer on Machine Learning with Python</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/machine-learning-python-primer/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=183267",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Programming",
            "Web"
        ],
        "dc:creator": [
            "Ben Dickson"
        ],
        "pubDate": [
            "Sun, 09 May 2021 16:00:46 GMT"
        ],
        "metaDesc": [
            "Performing machine learning is fundamentally different from classic programming. Learn the basics of machine learning in this easy-to-follow introduction."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "What is Vitejs? An Overview of the New Front-end Build Tool"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/vitejs-front-end-build-tool-introduction/?utm_source=rss\"\n              title=\"What is Vitejs? An Overview of the New Front-end Build Tool\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618197067vitejs.png\"\n        alt=\"What is Vitejs? An Overview of the New Front-end Build Tool\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618197067vitejs-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618197067vitejs.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a style=\"font-weight:bold\" href=\"https://vitejs.dev/\">Vite</a> is a build tool that significantly improves the front-end development experience. You can use Vite to set up a development environment for frameworks like Vue and React, and even for a vanilla JavaScript app with a dev server and hot reloading in just three commands.</strong></p>\n<p>With no extra configuration, you can also use Vite for TypeScript, and with one additional command you can use it for Sass. (That would take a lot of config for a webpack project. You&#8217;d need to mess around with loaders and separately install the webpack dev server.)</p>\n<p>Once you have Vite installed, you&#8217;ll have a build tool and dev server and be ready to start working with the latest tools and languages.</p>\n<p>In this introduction, you&#8217;ll learn how simple it is to get up and running with Vite. You&#8217;ll also learn about how fast Vite is, how to take the first steps towards using it with a library such as Vue, and how much it gets out of your way when you&#8217;re using it.</p>\n<p><em>Fun fact: the name “Vite” comes from the French word for &#8220;fast&#8221;, which is pronounced “vit”.</em></p>\n<h2 id=\"howviteworks\">How Vite Works</h2>\n<p>Vite follows a recent trend of tools like Svelte (where the framework is basically compiled away) and other tools like Snowpack that leverage modern JavaScript features (such as ES modules) to provide a smooth, fast dev experience with little to no configuration and not much overhead in the way of installed packages. You basically install Vite with a plugin or two, do very little configuration, and just start working on your app.</p>\n<p>Vite provides a modern dev environment that can forego the bundling step because it serves the browser native ES modules. It provides templates (a set of starter files) for a number of frameworks and vanilla JavaScript, and also offers TypeScript, JSX and Sass support (although you need to install one dependency for Sass). </p>\n<p>Vite is really fast, because it leverages native ES modules and doesn&#8217;t need to rebuild the whole bundle when something changes. This makes HMR updates consistently fast, regardless of the size of your application. When bundling for production, Vite ships with a pre-configured build command that bakes in many performance optimizations out of the box.</p>\n<p>As well as being fast, Vite also offers hot module replacement (meaning you see the code refresh in the browser as you develop), and you can use it to compile a minified version of your project to serve in production. By using it, you can get up and running very quickly with a Vue or React project without the buy-in to the Vue CLI or Create React App, both of which ship with the kitchen sink included. This makes it ideal for quick prototyping and smaller projects, although there&#8217;s nothing stopping you from using it in a larger project either.</p>\n<p>So, let&#8217;s take Vite for a spin and see how we go. It will be interesting to see how much of our normal workflow would be better handled with Vite. (Spolier: I found some things were better with Vite, but not everything.)</p>\n<h2 id=\"thefirstinstallation\">The First Installation</h2>\n<p>Let&#8217;s get started by installing Vite.</p>\n<p><em>Note: to follow along with this guide, you&#8217;ll need a copy of <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">Node</a> installed on your machine.</em></p>\n<p>After running <code>npm init @vitejs/app</code>, we get to choose a project name and a template. At the time of writing, the options are:</p>\n<ul>\n<li><code>vanilla</code></li>\n<li><code>vue</code></li>\n<li><code>vue-ts</code></li>\n<li><code>react</code></li>\n<li><code>react-ts</code></li>\n<li><code>preact</code></li>\n<li><code>preact-ts</code></li>\n<li><code>lit-element</code></li>\n<li><code>lit-element-ts</code></li>\n<li><code>svelte</code></li>\n<li><code>svelte-ts</code></li>\n</ul>\n<p>For now, let&#8217;s go with vanilla. This generates a directory (based on the project name) with some files in it. There’s an <code>index.html</code>, <code>main.js</code>, <code>style.css</code>, <code>favicon.svg</code>, and some files for npm and Git. The <code>package.json</code> only contains <code>vite</code> as dependency and some scripts to start the dev environment and to start a build.</p>\n<p>As the onscreen instructions say, we&#8217;ll need to change into the project folder and install the dependencies:</p>\n<pre><code class=\"bash language-bash\">cd vite-project\r\nnpm install\r\n</code></pre>\n<p>We can then start the dev server with <code>npm run dev</code> and view our app at <a href=\"http://localhost:3000/\">http://localhost:3000/</a>. Editing any of our project files sees the changes reflected immediately on the screen. </p>\n<p>Running <code>npm run build</code> compiles the project into a <code>dist</code> folder, where the JavaScript and CSS files can be found. Both files seem to be minified.</p>\n<p>The documentation states that <a href=\"https://vitejs.dev/guide/features.html#typescript\">TypeScript files are supported out of the box</a>. So although the <code>vanilla</code> option doesn’t have a dedicated TypeScript template, we should be able to rename <code>main.js</code> to <code>main.ts</code> and Vite should compile that automagically, right? Yes, it does! After renaming the file and adding some TypeScript-specific syntax, it all seems to be compiling well.</p>\n<p>Let’s try the same with CSS by renaming it to <code>style.scss</code> and add some Sass-specific syntax. The following error is shown in both the console and on the web page:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617015645error-sass.png\" alt=\"Error message: Internal server error: Preprocessor dependency “sass” not found. Did you install it?\" /></p>\n<p>I do love a (fairly) descriptive error! After running <code>npm install sass --save-dev</code> and restarting the watcher, we can now use Sass to our heart’s content. Nice.</p>\n<p>Normally I&#8217;d think about the stack in advance, install the dependencies I need, and spend a ludicrous amount configuring and figuring out why some tools won’t play nicely together. Of course, we still should think about our stack in advance, but being able to switch from JavaScript to TypeScript and from CSS to Sass with so little effort is quite powerful.</p>\n<p>At this point I’m stoked, because we can set up a pretty advanced stack in a minute or two. Given that Vite uses an <code>index.html</code> as the entry point and builds to plain HTML, CSS, and JavaScript, Vite already proves to be a great tool for static sites and potentially <a href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a> applications.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/vitejs-front-end-build-tool-introduction/?utm_source=rss\">What is Vitejs? An Overview of the New Front-end Build Tool</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/vitejs-front-end-build-tool-introduction/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182102",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Tim Severien"
        ],
        "pubDate": [
            "Sun, 18 Apr 2021 16:00:41 GMT"
        ],
        "metaDesc": [
            "Need a simpler way to set up a front-end dev environment? With Vite, you can be up and running with Vue, React and even vanilla JS in just a few clicks."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "5 Different Ways to Declare Functions in jQuery"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/5-ways-declare-functions-jquery/?utm_source=rss\"\n              title=\"5 Different Ways to Declare Functions in jQuery\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2011/08/1619486326javascript-functions.png\"\n        alt=\"5 Different Ways to Declare Functions in jQuery\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2011/08/1619486326javascript-functions-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2011/08/1619486326javascript-functions.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p>In this article, we examine several ways to define a block of JavaScript functionality. Choosing which way to declare a JavaScript function can be confusing for beginners and there are several different syntax options. Each has advantages, disadvantages, and appropriate uses that can catch you out. 1. Regular JavaScript Functions The first and most obvious [&hellip;]</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/5-ways-declare-functions-jquery/?utm_source=rss\">5 Different Ways to Declare Functions in jQuery</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/5-ways-declare-functions-jquery/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.jquery4u.com/?p=5135",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "jQuery"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Wed, 10 Mar 2021 08:45:30 GMT"
        ],
        "metaDesc": [
            "There are several ways to define a block of JavaScript functionality. Learn which is the most appropriate one for your particular use case."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Liran Cohen"
        ],
        "title": [
            "Reducing HTML Payload With Next.js (Case Study)"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/reduce-data-sent-client-nextjs/"
        ],
        "pubDate": [
            "Wed, 05 May 2021 10:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/reduce-data-sent-client-nextjs/"
        ],
        "description": [
            "I know what you are thinking. Here’s another article about reducing JavaScript dependencies and the bundle size sent to the client. But this one is a bit different, I promise.\nThis article is about a couple of things that Bookaway faced and we (as a company in the traveling industry) managed to optimize our pages, so that the HTML we send is smaller. Smaller HTML means less time for Google to download and process those long strings of text."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/reduce-data-sent-client-nextjs/\" />\n              <title>Reducing HTML Payload With Next.js (Case Study)</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Reducing HTML Payload With Next.js (Case Study)</h1>\n                  \n                    \n                    <address>Liran Cohen</address>\n                  \n                  <time datetime=\"2021-05-05T10:30:00&#43;00:00\" class=\"op-published\">2021-05-05T10:30:00+00:00</time>\n                  <time datetime=\"2021-05-05T10:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>I know what you are thinking. Here’s another article about reducing JavaScript dependencies and the bundle size sent to the client. But this one is a bit different, I promise.</p>\n\n<p>This article is about a couple of things that <a href=\"https://www.bookaway.com/\">Bookaway</a> faced and we (as a company in the traveling industry) managed to optimize our pages, so that the HTML we send is smaller. Smaller HTML means less time for Google to download and process those long strings of text.</p>\n\n<p>Usually, the HTML code size is not a big issue, especially for small pages, not data-intensive, or pages that are not SEO-oriented. However, in our pages, the case was different as our database stores lots of data, and we need to serve thousands of landing pages at scale.</p>\n\n<p>You may be wondering why we need such a scale. Well, Bookaway works with 1,500 operators and provide over 20k services in 63 countries with 200% growth year over year (pre Covid-19). In 2019, we sold 500k tickets a year, so our operations are complex and we need to showcase it with our landing pages in an appealing and fast manner. Both for Google bots (SEO) and to actual clients.</p>\n\n<p>In this article, I’ll explain:</p>\n\n<ul>\n<li>how we found the HTML size is too big;</li>\n<li>how it got reduced;</li>\n<li>the benefits of this process (i.e. creating improved architecture, improving ode organization, providing a straightforward job for Google to index tens of thousands of landing pages, and serving much fewer bytes to the client &mdash; especially suitable for people with slow connections).</li>\n</ul>\n\n<p>But first, let’s talk about the importance of speed improvement.</p>\n\n<h3 id=\"why-is-speed-improvement-necessary-to-our-seo-efforts\">Why Is Speed Improvement Necessary To Our SEO Efforts?</h3>\n\n<p>Meet “<a href=\"https://web.dev/vitals/\">Web Vitals</a>”, but in particular, meet <a href=\"https://web.dev/lcp/\">LCP</a> (Largest Contentful Paint):</p>\n\n<blockquote>“Largest Contentful Paint (LCP) is an important, user-centric metric for measuring <a href=\"https://web.dev/user-centric-performance-metrics/#types-of-metrics\">perceived load speed</a> because it marks the point in the page load timeline when the page’s main content has likely loaded &mdash; a fast LCP helps reassure the user that the page is <a href=\"https://web.dev/user-centric-performance-metrics/#questions\">useful</a>.”</blockquote>\n\n<p>The main goal is to have a small LCP as possible. Part of having a small LCP is to let the user download as small HTML as possible. That way, the user can start the process of painting the largest content paint ASAP.</p>\n\n<p>While LCP is a user-centric metric, reducing it should make a big help to Google bots as Googe states:</p>\n\n<blockquote>“The web is a nearly infinite space, exceeding Google’s ability to explore and index every available URL. As a result, there are limits to how much time Googlebot can spend crawling any single site. Google’s amount of time and resources to crawling a site is commonly called the site’s crawl budget.”<br /><br />&mdash; “<a href=\"https://developers.google.com/search/docs/advanced/crawling/large-site-managing-crawl-budget\">Advanced SEO</a>,” Google Search Central Documentation</blockquote>\n\n<p>One of the best technical ways to improve the crawl budget is to <a href=\"https://developers.google.com/search/docs/advanced/crawling/large-site-managing-crawl-budget\">help Google do more in less time</a>:</p>\n\n<blockquote><strong>Q</strong>: “Does site speed affect my crawl budget? How about errors?”<br /><br /><strong>A</strong>: “Making a site faster improves the users' experience while also increasing the crawl rate. For Googlebot, a speedy site is a sign of healthy servers so that it can get more content over the same number of connections.”</blockquote>\n\n<p>To sum it up, Google bots and Bookaway clients have the same goal &mdash; they both want to get content delivered fast. Since our database contains a large amount of data for every page, we need to aggregate it efficiently and send something small and thin to the clients.</p>\n\n<p>Investigations for ways we can improve led to finding that there is a big JSON embedded in our HTML, making the HTML chunky. For that case, we’ll need to understand React Hydration.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p><p>Meet <a data-instant href=\"/the-smashing-newsletter/\"><strong>Smashing Email Newsletter</strong></a> with useful tips on front-end, design &amp; UX. Subscribe and <strong>get “Smart Interface Design Checklists”</strong> &mdash; a <strong>free PDF deck</strong> with 150+ questions to ask yourself when designing and building almost anything.</p><div><section class=\"nlbf\"><form action=\"//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0\" method=\"post\"><div class=\"nlbwrapper\"><label for=\"mce-EMAIL-hp\" class=\"sr-only\">Your (smashing) email</label><div class=\"nlbgroup\"><input type=\"email\" name=\"EMAIL\" class=\"nlbf-email\" id=\"mce-EMAIL-hp\" placeholder=\"Your email\">\n<input type=\"submit\" value=\"Meow!\" name=\"subscribe\" class=\"nlbf-button\"></div></div></form><style>.nlbf{display:flex;padding-bottom:.25em;padding-top:.5em;text-align:center;letter-spacing:-.5px;color:#fff;font-size:1.15em}.nlbgroup:hover{box-shadow:0 1px 7px -5px rgba(50,50,93,.25),0 3px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025)}.nlbf .nlbf-button,.nlbf .nlbf-email{flex-grow:1;flex-shrink:0;width:auto;margin:0;padding:.75em 1em;border:0;border-radius:11px;background:#fff;font-size:1em;box-shadow:none}.promo-box .nlbf-button:focus,.promo-box input.nlbf-email:active,.promo-box input.nlbf-email:focus{box-shadow:none}.nlbf-button:-ms-input-placeholder,.nlbf-email:-ms-input-placeholder{color:#777;font-style:italic}.nlbf-button::-webkit-input-placeholder,.nlbf-email::-webkit-input-placeholder{color:#777;font-style:italic}.nlbf-button:-ms-input-placeholder,.nlbf-button::-moz-placeholder,.nlbf-button::placeholder,.nlbf-email:-ms-input-placeholder,.nlbf-email::-moz-placeholder,.nlbf-email::placeholder{color:#777;font-style:italic}.nlbf .nlbf-button{transition:all .2s ease-in-out;color:#fff;background-color:#0168b8;font-weight:700;box-shadow:0 1px 1px rgba(0,0,0,.3);width:100%;border:0;border-left:1px solid #ddd;flex:2;border-top-left-radius:0;border-bottom-left-radius:0}.nlbf .nlbf-email{border-top-right-radius:0;border-bottom-right-radius:0;width:100%;flex:4;min-width:150px}@media all and (max-width:650px){.nlbf .nlbgroup{flex-wrap:wrap;box-shadow:none}.nlbf .nlbf-button,.nlbf .nlbf-email{border-radius:11px;border-left:none}.nlbf .nlbf-email{box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);min-width:100%}.nlbf .nlbf-button{margin-top:1em;box-shadow:0 1px 1px rgba(0,0,0,.5)}}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus,.nlbf .nlbf-button:hover{cursor:pointer;color:#fff;background-color:#0168b8;border-color:#dadada;box-shadow:0 1px 1px rgba(0,0,0,.3)}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus{outline:0!important;text-shadow:1px 1px 1px rgba(0,0,0,.3);box-shadow:inset 0 3px 3px rgba(0,0,0,.3)}.nlbgroup{display:flex;box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);border-radius:11px;transition:box-shadow .2s ease-in-out}.nlbwrapper{display:flex;flex-direction:column;justify-content:center}.nlbf form{width:100%}.nlbf .nlbgroup{margin:0}.nlbcaption{font-size:.9em;line-height:1.5em;color:#fff;border-radius:11px;padding:.5em 1em;display:inline-block;background-color:#0067b859;text-shadow:1px 1px 1px rgba(0,0,0,.3)}.wf-loaded-stage2 .nlbf .nlbf-button{font-family:Mija}</style></section><p class=\"mtn mbn\"><small class=\"promo-box__footer mtm block grey\"><em>Once a week. Useful tips on <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">front-end &amp; UX</a>. Trusted by 190.000 friendly folks.</em></small></p></div></p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-firechat.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"310\"\n\t\t\t\t\t\t\t\t\t\theight=\"400\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"react-hydration-why-there-is-a-json-in-html\">React Hydration: Why There Is A JSON In HTML</h3>\n\n<p>That happens because of how Server-side rendering works in react and Next.js:</p>\n\n<ol>\n<li>When the request arrives at the server — it needs to make an HTML based on a data collection. That collection of data is the object returned by <code>getServerSideProps</code>.</li>\n<li>React got the data. Now it kicks into play in the server. It builds in HTML and sends it.</li>\n<li>When the client receives the HTML, it is immediately pained in front of him. In the meanwhile, React javascript is being downloaded and executed.</li>\n<li>When javascript execution is done, React kicks into play again, now on the client. It builds the HTML again and attaches event listeners. This action is called <a href=\"https://reactjs.org/docs/react-dom.html#hydrate\">hydration</a>.</li>\n<li>As React building the HTML again for the hydration process, it requires the same data collection used on the server (look back at <code>1.</code>).</li>\n<li>This data collection is being made available by inserting the JSON inside a script tag with id <code>__NEXT_DATA__</code>.</li>\n</ol>\n\n<h3 id=\"what-pages-are-we-talking-about-exactly\">What Pages Are We Talking About Exactly?</h3>\n\n<p>As we need to promote our offerings in search engines, the need for landing pages has arisen. People usually don’t search for a specific bus line’s name, but more like, “How to get from Bangkok to Pattaya?” So far, we have created four types of landing pages that should answer such queries:</p>\n\n<ol>\n<li><strong>City A to City B</strong><br />\nAll the lines stretched from a station in City A to a station in City B. (e.g. <a href=\"https://www.bookaway.com/routes/thailand/bangkok-to-pattaya\">Bangkok to Pattaya</a>)</li>\n<li><strong>City</strong><br />\nAll lines that go through a specific city. (e.g. <a href=\"https://www.bookaway.com/routes/mexico/cancun\">Cancun</a>)</li>\n<li><strong>Country</strong><br />\nAll lines that go through a specific country. (e.g. <a href=\"https://www.bookaway.com/routes/italy\">Italy</a>)</li>\n<li><strong>Station</strong><br />\nAll lines that go through a specific station. (e.g. <a href=\"https://www.bookaway.com/routes/vietnam/hanoi/hanoi-airport\">Hanoi-airport</a>)</li>\n</ol>\n\n<h3 id=\"now-a-look-at-architecture\">Now, A Look At Architecture</h3>\n\n<p>Let’s take a high-level and very simplified look at the infrastructure powering the landing pages we are talking about. Interesting parts lie on <code>4</code> and <code>5</code>. That’s where the wasting parts:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"958\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Simplified Architecture\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Original architecture of Bookaway landing pages. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/74c8abb8-beae-42a6-860c-17aec640ccc0/1-architecture-before.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<h4 id=\"key-takeaways-from-the-process\">Key Takeaways From The Process</h4>\n\n<ol>\n<li>The request is hitting the <code>getInitialProps</code> function. This function runs on the server. This function’s responsibility is to fetch data required for the construction of a page.</li>\n<li>The raw data returned from REST Servers passed as is to React.</li>\n<li>First, it runs on the server. Since the non-aggregated data was transferred to React, React is also responsible for aggregating the data into something that can be used by UI components (more about that in the following sections)</li>\n<li>The HTML is being sent to the client, together with the raw data. Then React is kicking again into play also in the client and doing the same job. Because hydration is needed (more about that in the following sections). So React is doing the data aggregation job twice.</li>\n</ol>\n\n<h4 id=\"the-problem\">The Problem</h4>\n\n<p>Analyzing our page creation process led us to the finding of Big JSON embedded inside the HTML. Exactly how big is difficult to say. Each page is slightly different because each station or city has to aggregate a different data set. However, it is safe to say that the JSON size could be as big as 250kb on popular pages. It was Later reduced to sizes around 5kb-15kb. Considerable reduction. On some pages, it was hanging around 200-300 kb. That is <em>big</em>.</p>\n\n<p>The big JSON is embedded inside a script tag with id of <code>___NEXT_DATA___</code>:</p>\n\n<pre><code class=\"language-json\">&lt;script id=\"__NEXT_DATA__\" type=\"application/json\"&gt;\n// Huge JSON here.\n&lt;/script&gt;\n</code></pre>\n\n<p>If you want to easily copy this JSON into your clipboard, try this snippet in your Next.js page:</p>\n\n<pre><code class=\"language-javascript\">copy($('#__NEXT_DATA__').innerHTML)\n</code></pre>\n\n<p>A question arises.</p>\n\n<h4 id=\"why-is-it-so-big-what-s-in-there\">Why Is It So Big? What’s In There?</h4>\n\n<p>A great tool, <a href=\"https://www.debugbear.com/json-size-analyzer\">JSON Size analyzer</a>, knows how to process a JSON and shows where most of the bulk of size resides.</p>\n\n<p>That was our initial findings while examining a <a href=\"https://www.bookaway.com/routes/vietnam/hanoi/hanoi-airport\">station page</a>:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"400\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Json analysis of our station page\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Structure of URL of landing pages for countries that bookaway operates in. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d4116a72-f55c-4a59-9e1b-e2ec139e3ef7/graph-json-analyzer.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>There are two issues with the analysis:</p>\n\n<ol>\n<li><strong>Data is not aggregated.</strong><br />\nOur HTML contains the complete list of granular products. We don’t need them for painting on-screen purposes. We do need them for aggregation methods. For example, We are fetching a list of all the lines passing through this station. Each line has a supplier. But we need to reduce the list of lines into an array of 2 suppliers. That’s it. We’ll see an example later.</li>\n<li><strong>Unnecessary fields.</strong><br />\nWhen drilling down each object, we saw some fields we don’t need at all. Not for aggregation purposes and not for painting methods. That’s because We fetch the data from REST API. We can’t control what data we fetch.</li>\n</ol>\n\n<p>Those two issues showed that the pages need architecture change. But wait. Why do we need a data JSON embedded in our HTML in the first place? 🤔</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"architecture-change\">Architecture Change</h3>\n\n<p>The issue of the very big JSON had to be solved in a neat and layered solution. How? Well, by adding the layers marked in green in the following diagram:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"758\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Frontend architecture change\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Analysis of data payload sent to the client. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/23eb44e9-2b0d-4549-9925-49a4cb9f9448/2-architecture-after.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>A few things to note:</p>\n\n<ol>\n<li>Double data aggregation was removed and consolidated to just being made just once on the Next.js server only;</li>\n<li>Graphql Server layer added. That makes sure we get only the fields we want. The database can grow with many more fields for each entity, but that won’t affect us anymore;</li>\n<li><code>PageLogic</code> function added in <code>getServerSideProps</code>. This function gets non-aggregated data from back-end services. This function aggregates and prepares the data for the UI components. (It runs only on the server.)</li>\n</ol>\n\n<h3 id=\"data-flow-example\">Data Flow Example</h3>\n\n<p>We want to render this section from a <a href=\"https://www.bookaway.com/routes/vietnam/hanoi/tran-quy-cap-station\">station page</a>:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"475\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Station suppliers\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Suppliers section in Bookaway station page. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fbb38019-bad6-43db-99ec-3898f4257e4d/suppliers-sections.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>We need to know who are the suppliers are operating in a given station. We need to fetch all lines for the <code>lines</code> REST endpoint. That’s the response we got (example purpose, in reality, it was much larger):</p>\n\n<pre><code class=\"language-json\">[\n  {\n    id: \"58a8bd82b4869b00063b22d2\",\n    class: \"Standard\",\n    supplier: \"Hyatt-Mosciski\",\n    type: \"bus\",\n  },\n  {\n    id: \"58f5e40da02e97f000888e07a\",\n    class: \"Luxury\",\n    supplier: \"Hyatt-Mosciski\",\n    type: \"bus\",\n  },\n  {\n    id: \"58f5e4a0a02e97f000325e3a\",\n    class: 'Luxury',\n    supplier: \"Jones Ltd\",\n    type: \"minivan\",\n  },\n];\n[\n  { supplier: \"Hyatt-Mosciski\", amountOfLines: 2, types: [\"bus\"] },\n  { supplier: \"Jones Ltd\", amountOfLines: 1, types: [\"minivan\"] },\n];\n</code></pre>\n\n<p>As you can see, we got some irrelevant fields. <code>pictures</code> and <code>id</code> are not going to play any role in the section. So we’ll call the Graphql Server and request only the fields we need. So now it looks like this:</p>\n\n<pre><code class=\"language-json\">[\n  {\n    supplier: \"Hyatt-Mosciski\",\n    type: \"bus\",\n  },\n  {\n    supplier: \"Hyatt-Mosciski\",\n    type: \"bus\",\n  },\n  {\n    supplier: \"Jones Ltd\",\n    type: \"minivan\",\n  },\n];\n</code></pre>\n\n<p>Now that’s an easier object to work with. It is smaller, easier to debug, and takes less memory on the server. But, it is not aggregated yet. This is not the data structure required for the actual rendering.</p>\n\n<p>Let’s send it to the <code>PageLogic</code> function to crunch it and see what we get:</p>\n\n<pre><code class=\"language-json\">[\n  { supplier: \"Hyatt-Mosciski\", amountOfLines: 2, types: [\"bus\"] },\n  { supplier: \"Jones Ltd\", amountOfLines: 1, types: [\"minivan\"] },\n];\n</code></pre>\n\n<p>This small data collection is sent to the Next.js page.</p>\n\n<p>Now that’s ready-made for UI rendering. No more crunching and preparations are needed. Also, it is now very compact compared to the initial data collection we have extracted. That’s important because we’ll be sending very little data to the client that way.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"how-to-measure-the-impact-of-the-change\">How To Measure The Impact Of The Change</h3>\n\n<p>Reducing HTML size means there are fewer bits to download. When a user requests a page, it gets fully formed HTML in less time. This can be measured in <code>content download</code> of the HTML resource in the <a href=\"https://ma.ttias.be/server-timings-chrome-devtools/\">network panel</a>.</p>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n\n<p>Delivering thin resources is essential, especially when it comes to HTML. If HTML is turning out big, we have no room left for CSS resources or javascript in our <a href=\"https://addyosmani.com/blog/performance-budgets/\">performance budget</a>.</p>\n\n<p>It is best practice to assume many real-world users won’t be using an iPhone 12, but rather a mid-level device on a mid-level network. It turns out that the performance levels are pretty tight as the <a href=\"https://infrequently.org/2021/03/the-performance-inequality-gap/\">highly-regarded article</a> suggests:</p>\n\n<blockquote>“Thanks to progress in networks and browsers (but not devices), a more generous global budget cap has emerged for sites constructed the \"modern\" way. We can now afford ~100KiB of HTML/CSS/fonts and ~300-350KiB of JS (gzipped). This rule-of-thumb limit should hold for at least a year or two. As always, the devil’s in the footnotes, but the top-line is unchanged: when we construct the digital world to the limits of the best devices, we build a less usable one for 80+% of the world’s users.”</blockquote>\n\n<h3 id=\"performance-impact\">Performance Impact</h3>\n\n<p>We measure the performance impact by the time it takes to download the HTML on slow 3g throttling. that metric is called “content download” in <a href=\"https://ma.ttias.be/server-timings-chrome-devtools/\">Chrome Dev Tools</a>.</p>\n\n<p>Here’s a metric example for a <a href=\"https://www.bookaway.com/routes/vietnam/hanoi/hanoi-airport\">station page</a>:</p>\n\n<table class=\"tablesaw break-out\">\n  <thead>\n    <tr>\n      <th></th>\n      <th>HTML size (before gzip)</th>\n      <th>HTML Download time (slow 3G)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Before</td>\n      <td>370kb</td>\n      <td>820ms</td>\n    </tr>\n    <tr>\n      <td>After</td>\n      <td>166</td>\n      <td>540ms</td>\n    </tr>\n    <tr>\n      <td>Total change</td>\n      <td>204kb decrease</td>\n      <td>34% Decrease</td>\n    </tr>\n  </tbody>\n</table>\n\n<h3 id=\"layered-solution\">Layered Solution</h3>\n\n<p>The architecture changes included additional layers:</p>\n\n<ul>\n<li><strong>GraphQl server</strong>: helpers with fetching exactly what we want.</li>\n<li><strong>Dedicated function for aggregation</strong>: runs only on the server.</li>\n</ul>\n\n<p>Those changed, apart from pure performance improvements, also offered much better code organization and debugging experience:</p>\n\n<ol>\n<li>All the logic regarding reducing and aggregating data now centralized in a single function;</li>\n<li>The UI functions are now much more straightforward. No aggregation, no data crunching. They are just getting data and painting it;</li>\n<li>Debugging server code is more pleasant since we extract only the data we need—no more unnecessary fields coming from a REST endpoint.</li>\n</ol>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Issue #453"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/ExYVKzZefiQ/"
        ],
        "pubDate": [
            "Tue, 30 Mar 2021 21:55:00 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-453/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to build a settings component, how to add a personal touch to horizontal rules, how to animate the text underlines, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://web.dev/building-a-settings-component/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Building a Settings Component</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://web.dev/building-a-settings-component/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/building-a-settings-component.jpg\" alt=\"Building a Settings Component\" /></a>\n\t\t\t\t\t\t<p>Adam Argyle gives a foundational overview of how to build a settings component of sliders and checkboxes.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://web.dev/building-a-settings-component/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.sarasoueidan.com/blog/horizontal-rules/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Not Your Typical Horizontal Rules</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://www.sarasoueidan.com/blog/horizontal-rules/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/not-your-typical-horizontal-rules.png\" alt=\"Not Your Typical Horizontal Rules\" /></a>\n\t\t\t\t\t\t<p>Sara Soueidan demonstrates how to add a personal touch to horizontal rules while keeping them accessible.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.sarasoueidan.com/blog/horizontal-rules/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"https://css-weekly.com/advertise/\" target=\"_blank\">From Our Sponsor <small style=\"text-decoration:underline;\">(via Paved)</small></a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/flatfile-messy-spreadsheets\">Never format messy spreadsheets again</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/flatfile-messy-spreadsheets\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/flatfile-importer.jpg\" alt=\"Never format messy spreadsheets again\" /></a>\n\t\t\t\t\t\t<p>One of the worst ways to spend your time is manually formatting customer spreadsheets. Enter Flatfile Portal, the elegant import button. Portal is a turnkey data importer that integrates with your product to automatically format, validate, and transform customer spreadsheets, on the first try. <img src=\"https://www.vpdae.com/open/2069.gif?opens=1\" width=\"1\" height=\"1\" /></p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/flatfile-messy-spreadsheets\">Start for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-irl.info/animating-underlines/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Animating Underlines</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Michelle Barker shows how to animate the actual text underlines using some of the newer text-decoration properties.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-irl.info/animating-underlines/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.joshwcomeau.com/animation/3d-button/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Building a Magical 3D Button</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Josh W. Comeau explains how to build an animated 3D button with HTML and CSS that sparks joy.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.joshwcomeau.com/animation/3d-button/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/did-you-know-about-the-has-css-selector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Did You Know About the :has CSS Selector?</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Robin Rendle gives a short introduction to the :has selector.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/did-you-know-about-the-has-css-selector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://ishadeed.com/article/handling-text-over-image-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Handling Text Over Images in CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ahmad Shadeed explores different approaches and solutions for handling text over images.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://ishadeed.com/article/handling-text-over-image-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/image-fragmentation-effect-with-css-masks-and-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Image Fragmentation Effect With CSS Masks and Custom Properties</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Temani Afif demonstrates how to create astonishing image fragmentation effects.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/image-fragmentation-effect-with-css-masks-and-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/an-event-apart-spring-summit-453\">Explore the intersection of accessibility, usability, and inclusion</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/an-event-apart-spring-summit-453\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/aea-online-together-spring-summit.png\" alt=\"Explore the intersection of accessibility, usability, and inclusion\" /></a>\n\t\t\t\t\t\t<p>Inclusion and diversity are two of the most important themes in today’s world. As UX and front-end experts, it’s our responsibility to actively explore how our work impacts all users, not just an idealized average.</p>\n<p><a href=\"https://cssw.io/an-event-apart-spring-summit-453\" target=\"_blank\">An Event Apart Online Together: Spring Summit</a> features essential sessions <b>Derek Featherstone, Senongo Akpem, Sharon Steed, Melanie Richards</b>, and <b>David Dylan Thomas</b> to help you get started. Join us online April 19–21.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/an-event-apart-spring-summit-453\">See the agenda and sign up today!</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://chartscss.org/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Charts.css</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Charts.css is an open-source CSS framework for data visualization that turns data into beautiful charts and graphs using simple CSS classes.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://chartscss.org/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://flowchart.fun/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Flowchart-Fun</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Flowchart-Fun is an online app for making quick flowcharts from text.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://flowchart.fun/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/YusukeNakaya/pen/VwPZyzY?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Only CSS: Satellite</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/YusukeNakaya/pen/VwPZyzY?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/only-css-satellite.jpg\" alt=\"Only CSS: Satellite\" /></a>\n\t\t\t\t\t\t<p>Yusuke Nakaya created a stunning animation using CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/YusukeNakaya/pen/VwPZyzY?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/ExYVKzZefiQ\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-453/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "author": [
            "Átila Fassina"
        ],
        "title": [
            "Breaking Down Bulky Builds With Netlify And Next.js"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/breaking-down-bulky-builds-netlify-nextjs/"
        ],
        "pubDate": [
            "Tue, 29 Jun 2021 11:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/breaking-down-bulky-builds-netlify-nextjs/"
        ],
        "description": [
            "One of the biggest pains of working with statically generated websites is the incrementally slower builds as your app grows. This is an inevitable problem any stack faces at some point and it can strike from different points depending on what kind of product you are working with.\nFor example, if your app has multiple pages (views, routes) when generating the deployment artifact, each of those routes becomes a file."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/breaking-down-bulky-builds-netlify-nextjs/\" />\n              <title>Breaking Down Bulky Builds With Netlify And Next.js</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Breaking Down Bulky Builds With Netlify And Next.js</h1>\n                  \n                    \n                    <address>Átila Fassina</address>\n                  \n                  <time datetime=\"2021-06-29T11:00:00&#43;00:00\" class=\"op-published\">2021-06-29T11:00:00+00:00</time>\n                  <time datetime=\"2021-06-29T11:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>One of the biggest pains of working with statically generated websites is the incrementally slower builds as your app grows. This is an inevitable problem any stack faces at some point and it can strike from different points depending on what kind of product you are working with.</p>\n\n<p>For example, if your app has multiple pages (views, routes) when generating the deployment artifact, each of those routes becomes a file. Then, once you’ve reached thousands, you start wondering when you can deploy without needing to plan ahead. This scenario is common on e-commerce platforms or blogs, which are already a big portion of the web but not all of it. Routes are not the only possible bottleneck, though.</p>\n\n<p>A resource-heavy app will also eventually reach this turning point. Many static generators carry out asset optimization to ensure the best user experience. Without build optimizations (incremental builds, caching, we will get to those soon) this will eventually become unmanageable as well &mdash; think about going through all images in a website: resizing, deleting, and/or creating new files over and over again. And once all that is done: remember Jamstack serves our apps from the edges of the <strong>Content Delivery Network</strong>. So we still need to move things from the server they were compiled at to the edges of the network.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Jamstack general service architecture\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Jamstack general service architecture (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a8e40eed-ef3c-45e2-b8e8-09db6988d263/content-delivery-network.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>On top of all that, there is also another fact: data is often dynamic, meaning that when we build our app and deploy it, it may take a few seconds, a few minutes, or even an hour. Meanwhile, the world keeps spinning, and if we are fetching data from elsewhere, our app is bound to get outdated. <strong>Unacceptable! Build again to update!</strong></p>\n\n<h3 id=\"build-once-update-when-needed\">Build Once, Update When Needed</h3>\n\n<p>Solving <em>Bulky Builds</em> has been top of mind for basically every Jamstack platform, framework, or service for a while. Many solutions revolve around incremental builds. In practice, this means that builds will be as bulky as the differences they carry against the current deployment.</p>\n\n<p>Defining a <em>diff</em> algorithm is no easy task though. For the <em>end-user</em> to actually benefit from this improvement there are cache invalidation strategies that must be considered. Long story short: we do not want to invalidate cache for a page or an asset that has not changed.</p>\n\n<p>Next.js came up with Incremental Static Regeneration (<strong>ISR</strong>). In essence, it is a way to declare for each route how often we want it to rebuild. Under the hood, it simplifies a lot of the work to the server-side. Because every route (<a href=\"https://nextjs.org/docs/routing/dynamic-routes\">dynamic</a> or not) will rebuild itself given a specific time-frame, and it just fits perfectly in the Jamstack axiom of invalidating cache on every build. Think of it as the <code>max-age</code> header but for routes in your Next.js app.</p>\n\n<p>To get your application started, ISR just a configuration property away. On your route component (inside the <code>/pages</code> directory) go to your <code>getStaticProps</code> method and add the <code>revalidate</code> key to the return object:</p>\n\n<pre><code class=\"language-javascript\">export async function getStaticProps() {\n  const { limit, count, pokemons } = await fetchPokemonList()\n  \n  return {\n    props: {\n      limit,\n      count,\n      pokemons,\n    },\n    revalidate: 3600 // seconds\n  }\n}\n</code></pre>\n\n<p>The above snippet will make sure my page rebuilds every hour and fetch for more Pokémon to display.</p>\n\n<p>We still get the bulk-builds every now and then (when issuing a new deployment). But this allows us to decouple content from code, by moving content to a <strong>Content Management System</strong> (CMS) we can update information in a few seconds, regardless of how big our application is. Goodbye to webhooks for updating typos!</p>\n\n<h3 id=\"on-demand-builders\">On-Demand Builders</h3>\n\n<p>Netlify recently launched <a href=\"https://www.netlify.com/blog/2021/04/14/faster-builds-for-large-sites-on-netlify-with-on-demand-builders-now-in-early-access/\">On-Demand Builders</a> which is their approach to supporting ISR for Next.js, but also works across frameworks including Eleventy and Nuxt. In the previous session, we established that ISR was a great step toward shorter build-times and addressed a significant portion of the use-cases. Nevertheless, the caveats were there:</p>\n\n<ol>\n<li><strong>Full builds upon continuous deployment.</strong><br />\nThe incremental stage happens only <em>after</em> the deployment and for the data. It is not possible to ship code incrementally</li>\n<li><strong>Incremental builds are a product of time.</strong><br />\nThe cache is invalidated on a time basis. So unnecessary builds may occur, or needed updates may take longer depending on the revalidation period set in the code.</li>\n</ol>\n\n<p>Netlify’s new deployment infrastructure allows developers to create logic to determine what pieces of their app will build on deployment and what pieces will be deferred (and <strong>how</strong> they will be deferred).</p>\n\n<ul>\n<li><strong>Critical</strong><br />\nNo action is needed. Everything you deploy will be built upon <em>push</em>.</li>\n<li><strong>Deferred</strong><br />\nA specific piece of the app will not be built upon deploy, it will be deferred to be built on-demand whenever the first request occurs, then it will be cached as any other resource of its type.</li>\n</ul>\n\n<h3 id=\"creating-an-on-demand-builder\">Creating an On-Demand builder</h3>\n\n<p>First of all, add a <a href=\"https://github.com/netlify/functions\">netlify/functions</a> package as a <code>devDependency</code> to your project:</p>\n\n<pre><code class=\"language-bash\">yarn add -D @netlify/functions\n</code></pre>\n\n<p>Once that is done, it is just the same as creating a new <a href=\"https://www.netlify.com/products/functions/\">Netlify Function</a>. If you have not set a specific directory for them, head on to <code>netlify/functions/</code> and create a file of any name to your builder.</p>\n\n<pre><code class=\"language-javascript\">import type { Handler } from '@netlify/functions'\nimport { builder } from '@netlify/functions'\n\nconst myHandler: Handler = async (event, context) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify({ message: 'Built on-demand! 🎉' }),\n  }\n}\nexport const handler = builder(myHandler)\n</code></pre>\n\n<p>As you can see from the snippet above, the on-demand builder splits apart from a regular Netlify Function because it wraps its handler inside a <code>builder()</code> method. This method connects our function to the build tasks. And that is all you need to have a piece of your application deferred for building only when necessary. <strong>Small incremental builds from the get-go!</strong></p>\n\n<h3 id=\"marker\" style=\"text-transform: none;\">Next.js On Netlify</h3>\n\n<p>To build a Next.js app on Netlify there are 2 important <a href=\"https://docs.netlify.com/configure-builds/build-plugins/#install-a-plugin\">plugins</a> that one should add to have a better experience in general: <a href=\"https://www.npmjs.com/package/netlify-plugin-cache-nextjs\">Netlify Plugin Cache Next.js</a> and <a href=\"https://github.com/netlify/netlify-plugin-nextjs\">Essential Next-on-Netlify</a>.  The former caches your NextJS more efficiently and you need to add it yourself, while the latter makes a few slight adjustments to how Next.js architecture is built so it better fits Netlify’s and is available by default to every new project that Netlify can identify is using Next.js.</p>\n\n<h3 id=\"on-demand-builders-with-next-js\">On-Demand Builders With Next.js</h3>\n\n<p>Building performance, deploy performance, caching, developer experience. These are all very important topics, but it is a lot &mdash; and takes time to set up properly. Then we get to that old discussion about focusing on Developer Experience instead of User Experience. Which is the time things go to a hidden spot in a backlog to be forgotten. Not really.</p>\n\n<p>Netlify has got your back. In just a few steps, we can leverage the full power of the Jamstack in our Next.js app. It&rsquo;s time to roll up our sleeves and put it all together now.</p>\n\n<h3 id=\"defining-pre-rendered-paths\">Defining Pre-Rendered Paths</h3>\n\n<p>If you have worked with static generation inside Next.js before, you have probably heard of <code>getStaticPaths</code> method. This method is intended for dynamic routes (page templates that will render a wide range of pages).\nWithout dwelling too much on the intricacies of this method, it is important to note the return type is an object with 2 keys, like in our Proof-of-Concept this will be <a href=\"https://github.com/smashingmagazine/poke-index/blob/main/pages/%5Bpokemon%5D.tsx\">[Pokémon]dynamic route</a> file:</p>\n\n<pre><code class=\"language-javascript\">export async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking',\n  }\n}\n</code></pre>\n\n<ul>\n<li><code>paths</code> is an <code>array</code> carrying out <strong>all</strong> paths matching this route which will be pre-rendered</li>\n<li><code>fallback</code> has 3 possible values: blocking, <code>true</code>, or <code>false</code></li>\n</ul>\n\n<p>In our case, our <code>getStaticPaths</code> is determining:</p>\n\n<ol>\n<li>No paths will be pre-rendered;</li>\n<li>Whenever this route is called, we will not serve a fallback template, we will render the page <strong>on-demand</strong> and keep the user waiting, <em>blocking</em> the app from doing anything else.</li>\n</ol>\n\n<p>When using On-Demand Builders, make sure your fallback strategy meets your app’s goals, the official <a href=\"https://nextjs.org/docs/basic-features/data-fetching#fallback-pages\">Next.js docs: fallback</a> docs are very useful.</p>\n\n<p>Before On-Demand Builders, our <code>getStaticPaths</code> was slightly different:</p>\n\n<pre><code class=\"language-javascript\">export async function getStaticPaths() {\n  const { pokemons } = await fetchPkmList()\n  return {\n    paths: pokemons.map(({ name }) => ({ params: { pokemon: name } })),\n    fallback: false,\n  }\n}\n</code></pre>\n\n<p>We were gathering a list of all pokémon pages we intended to have, map all the <code>pokemon</code> objects to just a <code>string</code> with the pokémon name, and forwarding returning the <code>{ params }</code> object carrying it to <code>getStaticProps</code>. Our <code>fallback</code> was set to <code>false</code> because if a route was not a match, we wanted Next.js to throw a <code>404: Not Found</code> page.</p>\n\n<p>You can check both versions deployed to Netlify:</p>\n\n<ul>\n<li>With On-Demand Builder: <a href=\"https://github.com/smashingmagazine/poke-index/\">code</a>, <a href=\"https://poke-index.netlify.app/\">live</a></li>\n<li>Fully static generated: <a href=\"https://github.com/smashingmagazine/poke-index/tree/ssg\">code</a>, <a href=\"https://60cf568b3407dc0007cfe8e7--poke-index.netlify.app/\">live</a></li>\n</ul>\n\n<p>The code is also <a href=\"https://github.com/smashingmagazine/poke-index/\">open-sourced on Github</a> and you can easily deploy it yourself to check the build times. And with this queue, we slide onto our next topic.</p>\n\n<h3 id=\"build-times\">Build Times</h3>\n\n<p>As mentioned above, the previous demo is actually a <strong>Proof-of-Concept</strong>, nothing is really good or bad if we cannot measure. For our little study, I went over to the <a href=\"https://pokeapi.co/\">PokéAPI</a> and decided to catch all pokémons.</p>\n\n<p>For reproducibility purposes, I capped our request (to <code>1000</code>).  These are not really <strong>all</strong> within the API, but it enforces the number of pages will be the same for all builds regardless if things get updated at any point in time.</p>\n\n<pre><code class=\"language-javascript\">export const fetchPkmList = async () => {\n  const resp = await fetch(`${API}pokemon?limit=${LIMIT}`)\n  const {\n    count,\n    results,\n  }: {\n    count: number\n    results: {\n      name: string\n      url: string\n    }[]\n  } = await resp.json()\n  return {\n    count,\n    pokemons: results,\n    limit: LIMIT,\n  }\n}\n</code></pre>\n\n<p>And then fired both versions in separated branches to Netlify, thanks to preview deploys they can coexist in basically the same environment. To really evaluate the difference between both methods the ODB approach was extreme, <strong>no pages</strong> were pre-rendered for that dynamic route. Though not recommended for real-world scenarios (you will want to pre-render your traffic-heavy routes), it marks clearly the range of build-time performance improvement we can achieve with this approach.</p>\n\n<table class=\"tablesaw break-out\">\n  <thead>\n    <tr>\n      <th>Strategy</th>\n      <th>Number of Pages</th>\n      <th>Number of Assets</th>\n      <th>Build time</th>\n      <th>Total deploy time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Fully Static Generated</td>\n      <td>1002</td>\n      <td>1005</td>\n      <td>2 minutes 32 seconds</td>\n      <td>4 minutes 15 seconds</td>\n    </tr>\n    <tr>\n      <td>On-Demand Builders</td>\n      <td>2</td>\n      <td>0</td>\n      <td>52 seconds</td>\n      <td>52 seconds</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>The pages in our little PokéDex app are pretty small, the image assets are very lean, but the gains on deploy time are very significant. If an app has a medium to a large amount of routes, it is definitely worth considering the ODB strategy.</p>\n\n<p>It makes your deploys faster and thus more reliable. The performance hit only happens on the very first request, from the subsequent request and onward the rendered page will be cached right on the Edge making the performance exactly the same as the Fully Static Generated.</p>\n\n<h3 id=\"the-future-distributed-persistent-rendering\">The Future: Distributed Persistent Rendering</h3>\n\n<p>On the very same day, On-Demand Builders were announced and put on early access, Netlify also published their <a href=\"https://github.com/jamstack/jamstack.org/discussions/549\">Request for Comments on Distributed Persistent Rendering (DPR)</a>.</p>\n\n<p>DPR is the next step for On-Demand Builders. It capitalizes on faster builds by making use of such asynchronous building steps and then caching the assets until they’re actually updated. No more full-builds for a 10k page&rsquo;s website. DPR empowers the developers to a full control around the build and deploy systems through solid caching and using On-Demand Builders.</p>\n\n<p>Picture this scenario: an e-commerce website has 10k product pages, this means it would take something around 2 hours to build the entire application for deployment. We do not need to argue how painful this is.</p>\n\n<p>With DPR, we can set the top 500 pages to build on every deploy. Our heaviest traffic pages are <strong>always</strong> ready for our users. But, we are a shop, i.e. every second counts. So for the other 9500 pages, we can set a post-build hook to trigger their builders &mdash; deploying the remaining of our pages asynchronously and immediately caching. No users were hurt, our website was updated with the fastest build possible, and everything else that did not exist in cache was then stored.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>Although many of the discussion points in this article were conceptual and the implementation is to be defined, I am excited about the future of the Jamstack. The advances we are doing as a community revolve around the end-user experience.</p>\n\n<p>What is your take on Distributed Persistent Rendering? Have you tried out On-Demand Builders in your application? Let me know more in the comments or call me out on Twitter. I am really curious!</p>\n\n<h3 id=\"references\">References</h3>\n\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2021/04/incremental-static-regeneration-nextjs/\">A Complete Guide To Incremental Static Regeneration (ISR) With Next.js</a>,” Lee Robinson</li>\n<li>“<a href=\"https://www.netlify.com/blog/2021/04/14/faster-builds-for-large-sites-on-netlify-with-on-demand-builders-now-in-early-access/\">Faster Builds For Large Sites On Netlify With On-Demand Builders</a>,” Asavari Tayal, Netlify Blog</li>\n<li>“<a href=\"https://www.netlify.com/blog/2021/04/14/distributed-persistent-rendering-a-new-jamstack-approach-for-faster-builds/\">Distributed Persistent Rendering: A New Jamstack Approach For Faster Builds</a>,” Matt Biilmann, Netlify Blog</li>\n<li>“<a href=\"https://github.com/jamstack/jamstack.org/discussions/549\">Distributed Persistent Rendering (DPR)</a>,” Cassidy Williams, GitHub</li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "How to Build a Developer Blog with Gatsby and MDX"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/gatsby-mdx-blog/?utm_source=rss\"\n              title=\"How to Build a Developer Blog with Gatsby and MDX\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138637gatsbymdx_result.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138637gatsbymdx_result-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138637gatsbymdx_result-768x403.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138637gatsbymdx_result-1024x538.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138637gatsbymdx_result.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>You can easily publish your ideas to sites like Dev.to, Hashnode or Medium, but the ideal is to have full control over your own content. There&#8217;s an ever-growing list of tools for building your own website and controlling your own content. In this extensive tutorial, I&#8217;ll be covering how you can make your content shine using <a style=\"font-weight:bold\" href=\"https://www.gatsbyjs.com/\">Gatsby</a>, with the added bells and whistles you get with such an ecosystem.</strong></p>\n<p>I originally used Jekyll to publish my blog, but then switched to Gatsby, using the <a href=\"https://github.com/alxshelepenok/gatsby-starter-lumen\">Lumen</a> template. I&#8217;ve been using Gatsby since version 0, around May 2017. </p>\n<p>I&#8217;ll be going from a <code>Hello, World!</code> Gatsby project through to a coding blog with code syntax highlighting and a theme toggle for that dark mode goodness.</p>\n<p>There&#8217;s a rich ecosystem of plugins, starters and themes available for Gatsby to get you up and running quickly, but I want to take a <a href=\"https://www.jason.af/progressive-disclosure-of-complexity\">progressive disclosure</a> approach to presenting Gatsby, focusing on the basics of how a Gatsby project works.</p>\n<h2 id=\"whygatsby\">Why Gatsby?</h2>\n<p>Gatsby is a <a href=\"https://www.sitepoint.com/static-site-generators/\">static site generator</a>, so there&#8217;s no dynamic generation of pages when the pages are requested. The built output for a Gatsby site can be hosted on a CDN, making it globally available and super scalable.</p>\n<p>Gatsby can use Markdown files to create pages in a site project. Gatsby will read the Markdown files into the Gatsby file system and transform the Markdown to HTML and then when building the site create static pages.</p>\n<p>The end result is a super fast site with little latency when requesting the pages.</p>\n<h3 id=\"markdownandmdx\">Markdown and MDX</h3>\n<p>I&#8217;ve been <a href=\"https://scottspence.com/2016/10/hello-world/24/\">documenting my development journey since 2016</a> in Markdown. Markdown offers a way to enable simple editing in plain text files that can be converted to HTML.</p>\n<p><a href=\"https://mdxjs.com/\">MDX</a> (or Markdown JSX) is a tool that lets you write JSX in your Markdown documents, sort of like this:</p>\n<pre><code class=\"jsx language-jsx\">import { RainbowText } from './components/rainbow';\r\n## A Markdown Heading\r\n&lt;RainbowText&gt;Wheeeeeeee&lt;/RainbowText&gt;\r\n</code></pre>\n<p>Gatsby is by far the best framework I&#8217;ve used for working with Markdown and MDX, as the there&#8217;s no special notation needed above using frontmatter on your posts.</p>\n<h2 id=\"whatdoineed\">What Do I need?</h2>\n<p>If you&#8217;re going to follow along, there&#8217;s a few things you&#8217;ll need:</p>\n<ul>\n<li>a basic web development setup: <a href=\"https://nodejs.org/en/download/\">Node</a>, terminal (bash, zsh or fish)</li>\n<li>a text editor</li>\n<li>a basic understanding of React</li>\n</ul>\n<p>If you don&#8217;t have any of these, there&#8217;s both <a href=\"https://stackblitz.com/\">StackBlitz</a> and GitHub <a href=\"https://github.com/codespaces\">Codespaces</a> where you can create an empty GitHub repository and get started with a development environment from there.</p>\n<p>I&#8217;ll be using VS Code as my text editor and Yarn as my preferred package manager in the examples below. If you prefer npm, that&#8217;s cool. 👍</p>\n<p>You can also find the complete <a href=\"https://github.com/sitepoint-editors/my-gatsby-blog\">code for this tutorial on GitHub</a>.</p>\n<p>Okay, it&#8217;s time to get started!</p>\n<h2 id=\"helloworld\">Hello, World!</h2>\n<p>It&#8217;s time to spin up a Gatsby project. I&#8217;m going to do the majority of this from the command line to begin with:</p>\n<pre><code class=\"bash language-bash\"># create the project directory\r\nmkdir my-gatsby-blog\r\n# change into the directory\r\ncd my-gatsby-blog\r\n# initialise a package.json file\r\nyarn init -y\r\n# initialise the git repo\r\ngit init\r\n</code></pre>\n<p>Cool. Now, before going anywhere else with this, I&#8217;m going to need to add a <code>.gitignore</code> file before installing any npm modules:</p>\n<pre><code class=\"bash language-bash\"># create .gitignore file in my directory\r\ntouch .gitignore\r\n# add ignore contents with echo\r\necho \"# Project dependencies\r\n.cache\r\nnode_modules\r\n\r\n# Build directory\r\npublic\r\n\r\n# Other\r\n.DS_Store\r\nyarn-error.log\" &gt; .gitignore\r\n</code></pre>\n<p>Now I can install all the npm goodness I need to without VS Code Git screaming at me about too many active changes. Let&#8217;s now install some dependencies to get up and running with Gatsby:</p>\n<pre><code class=\"bash language-bash\">yarn add gatsby react react-dom\r\n# -p is to create parent directories too if needed\r\nmkdir -p src/pages\r\n# create the index (home) page\r\ntouch src/pages/index.js\r\n</code></pre>\n<p>Next, we&#8217;ll add the first React component (of many) for the project. I&#8217;ll add the following to the <code>index.js</code> file I created:</p>\n<pre><code class=\"jsx language-jsx\">import React from \"react\";\r\n\r\nexport default function IndexPage() {\r\n  return &lt;h1&gt;Hello, World!&lt;/h1&gt;;\r\n}\r\n</code></pre>\n<p>I&#8217;m now ready to run the Gatsby <code>develop</code> command from the command line:</p>\n<pre><code class=\"bash language-bash\"># if you're using npm 👇\r\n# $(npm bin)/gatsby develop\r\nyarn gatsby develop\r\n</code></pre>\n<p>This will spin up the Gatsby dev sever and say that my project is available to view in the browser on port 8000 (the default Gatsby port). The URL is <a href=\"http://localhost:8000/\">http://localhost:8000/</a>.</p>\n<p>Using the Gatsby binary commands directly from the command-line interface (CLI) is totally doable, but most people will add the available commands to the <code>scripts</code> section on the <code>package.json</code> file, like this:</p>\n<pre><code class=\"javascript language-javascript\">\"scripts\": {\r\n  \"build\": \"gatsby build\",\r\n  \"dev\": \"gatsby develop\",\r\n  \"serve\": \"gatsby serve\",\r\n  \"clean\": \"gatsby clean\"\r\n},\r\n</code></pre>\n<p>As an added bonus, there&#8217;s a few extras that can be added to the Gatsby scripts here.</p>\n<p>If we don&#8217;t want to run the project on the same port each time, it can be changed with the <code>-p</code> flag, and and a port specified after that. For example, <code>gatsby develop -p 8945</code>. </p>\n<p>If we want to open the browser tab once the project is ready, we can add <code>-o</code> to the script.</p>\n<p>I&#8217;ll do the same with the <code>serve</code> script, so I know when I&#8217;ve built a project it&#8217;s on a different port to the development one:</p>\n<pre><code class=\"javascript language-javascript\">\"scripts\": {\r\n  \"build\": \"gatsby build\",\r\n  \"dev\": \"gatsby develop -p 8945 -o\",\r\n  \"serve\": \"gatsby serve -p 9854 -o\",\r\n  \"clean\": \"gatsby clean\"\r\n},\r\n</code></pre>\n<p>And with that, the mandatory &#8220;Hello, World!&#8221; welcome is complete and I can move on with the rest of this post! 🤓</p>\n<p>Lastly I&#8217;ll commit the changes I&#8217;ve made so far:</p>\n<pre><code class=\"bash language-bash\"># add everything for committing\r\ngit add .\r\n# commit to repo\r\ngit commit -m 'init project'\r\n</code></pre>\n<h2 id=\"contentfortheblog\">Content for the Blog</h2>\n<p>Okay, there&#8217;s not a great deal going on with the project right now, so first up I&#8217;ll add in some content, from the command line again:</p>\n<pre><code class=\"bash language-bash\"># this creates the folders in the root of the project\r\nmkdir -p content/2021/03/{06/hello-world,07/second-post,08/third-post}\r\n# create individual files\r\ntouch content/2021/03/06/hello-world/index.mdx\r\ntouch content/2021/03/07/second-post/index.mdx\r\ntouch content/2021/03/08/third-post/index.mdx\r\n</code></pre>\n<p>I&#8217;ll be using these throughout the examples I&#8217;m making.</p>\n<p>You&#8217;ll notice the file extension <code>.mdx</code>. This is an MDX file.</p>\n<h3 id=\"frontmatter\">Front matter</h3>\n<p>Before I add some content for the blog, I&#8217;ll need to talk about front matter.</p>\n<p>Front matter is a way to store information about the file that can be used by Gatsby when building the pages from them. For now, I&#8217;ll add a <code>title</code> of the post and a <code>date</code>. I&#8217;ll also add some content to them. Here&#8217;s our first post:</p>\n<pre><code class=\"markdown language-markdown\">---\r\ntitle: Hello World - from mdx!\r\ndate: 2021-03-06\r\n---\r\n\r\nMy first post!!\r\n\r\n## h2 Heading\r\n\r\nSome meaningful prose\r\n\r\n### h3 Heading\r\n\r\nSome other meaningful prose\r\n</code></pre>\n<p>Here&#8217;s our second post:</p>\n<pre><code class=\"markdown language-markdown\">---\r\ntitle: Second Post!\r\ndate: 2021-03-07\r\n---\r\n\r\nThis is my second post!\r\n</code></pre>\n<p>A third post:</p>\n<pre><code class=\"markdown language-markdown\">---\r\ntitle: Third Post!\r\ndate: 2021-03-08\r\n---\r\n\r\nThis is my third post!\r\n\r\n&gt; with a block quote!\r\n\r\nAnd a code block:\r\n\r\n```js\r\nconst wheeeeee = true;\r\n```\r\n</code></pre>\n<p>That&#8217;s it for the posts for now, because these posts aren&#8217;t yet recognized by Gatsby as pages. I&#8217;ll need to let Gatsby know where to find content to add to the project. To do this, I&#8217;m going to add a configuration file to Gatsby.</p>\n<p>Let&#8217;s commit the changes I&#8217;ve made to Git:</p>\n<pre><code class=\"bash language-bash\"># add changed file for committing\r\ngit add .\r\n# commit to repo\r\ngit commit -m 'add markdown files'\r\n</code></pre>\n<h2 id=\"gatsbyconfig\">Gatsby Config</h2>\n<p>Gatsby config is what&#8217;s used to define and configure the many Gatsby plugins you can use. More on the Gatsby plugin eco system in a bit. For now, I&#8217;m going to create the file, again in the terminal:</p>\n<pre><code class=\"bash language-bash\">touch gatsby-config.js\r\n</code></pre>\n<p>This creates the <code>gatsby-config.js</code> at the root of the project so I can start configuring Gatsby to read the <code>.mdx</code> files I created earlier.</p>\n<h2 id=\"gatsbyplugins\">Gatsby Plugins</h2>\n<p>Now I can install and configure the plugins Gatsby needs to source and display the files I created. I&#8217;ll install them all now and briefly detail what they&#8217;re for:</p>\n<pre><code class=\"bash language-bash\">yarn add gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react gatsby-source-filesystem\r\n</code></pre>\n<p>A quick look at the <code>package.json</code> now shows that I have the following dependency version installed:</p>\n<pre><code class=\"javascript language-javascript\">\"dependencies\": {\r\n  \"@mdx-js/mdx\": \"^1.6.22\",\r\n  \"@mdx-js/react\": \"^1.6.22\",\r\n  \"gatsby\": \"^3.1.1\",\r\n  \"gatsby-plugin-mdx\": \"^2.1.0\",\r\n  \"gatsby-source-filesystem\": \"^3.1.0\",\r\n  \"react\": \"^17.0.1\",\r\n  \"react-dom\": \"^17.0.1\"\r\n},\r\n</code></pre>\n<p>One thing to note is that, in Gatsby, there&#8217;s no need to import React in your components with React 17. But for the sake of completeness, and to avoid any confusion, I&#8217;ll be including it in these examples.</p>\n<p>Now I need to configure <code>gatsby-plugin-mdx</code> and <code>gatsby-plugin-mdx</code>. In the <code>gatsby-config.js</code> file, I&#8217;ll add this:</p>\n<pre><code class=\"javascript language-javascript\">module.exports = {\r\n  plugins: [\r\n    `gatsby-plugin-mdx`,\r\n    {\r\n      resolve: `gatsby-source-filesystem`,\r\n      options: {\r\n        path: `${__dirname}/content`,\r\n        name: `content`,\r\n      },\r\n    },\r\n  ],\r\n};\r\n</code></pre>\n<p>Commit changes up to now:</p>\n<pre><code class=\"bash language-bash\">git add .\r\ngit commit -m 'add gatsby plugins'\r\n</code></pre>\n<h2 id=\"gatsbygraphql\">Gatsby GraphQL</h2>\n<p>Now it&#8217;s time to see where I&#8217;m at with the files in Gatsby by using the Gatsby GraphQL client, GraphiQL. You may have noticed, if you&#8217;re following along, that the CLI indicates two URL locations to view the project:</p>\n<pre><code class=\"bash language-bash\">You can now view my-gatsby-blog in the browser.\r\n⠀\r\n  http://localhost:8000/\r\n⠀\r\nView GraphiQL, an in-browser IDE, to explore your site's data and schema\r\n⠀\r\n  http://localhost:8000/___graphql\r\n</code></pre>\n<p>I&#8217;m going to be using the <code>___graphql</code> (three underscores) route now to see the files in the file system.</p>\n<p>If this seems a bit intimidating, I&#8217;ll attempt to cover all the parts that may not seem to make much sense. If you&#8217;re following along, you should be fine copying the examples into the GraphiQL explorer.</p>\n<p>When I open up the GraphiQL explorer, I have several <strong>Explorer</strong> panels. This is all available data to explore in the project and is dependent on what I&#8217;ve configured in the <code>gatsby-config.js</code> file.</p>\n<p>The <strong>GraphiQL</strong> query panel and the results are next to that. This is where I&#8217;ll be writing GraphQL queries to retrieve the data I need. There&#8217;s also a <strong>QUERY VARIABLES</strong> section at the bottom of the query panel, and I&#8217;ll come onto that later on.</p>\n<p>Over on the far right is the GraphQL <strong>Documentation Explorer</strong>. Because of GraphQL&#8217;s strict typing, this means that it&#8217;s able to generate its own documentation on its data. But that&#8217;s outside the scope of this post.</p>\n<h2 id=\"querylocalfileswithgraphql\">Query Local Files with GraphQL</h2>\n<p>Next, I&#8217;m going to query for the files I added earlier in the GraphiQL query panel. In this query, I&#8217;m querying the title and date defined in the font matter of the files:</p>\n<pre><code class=\"graphql language-graphql\">{\r\n  allMdx {\r\n    nodes {\r\n      frontmatter {\r\n        title\r\n        date\r\n      }\r\n    }\r\n  }\r\n}\r\n</code></pre>\n<p>If we pop that into the query panel press the big play button, we get back some data in the results panel. We can also use the <strong>Explorer</strong> in the left panel to pick out the data. Here&#8217;s what I get after running the query:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"data\": {\r\n    \"allMdx\": {\r\n      \"nodes\": [\r\n        {\r\n          \"frontmatter\": {\r\n            \"title\": \"Hello World - from mdx!\",\r\n            \"date\": \"2021-03-06T00:00:00.000Z\"\r\n          }\r\n        },\r\n        {\r\n          \"frontmatter\": {\r\n            \"title\": \"Second Post!\",\r\n            \"date\": \"2021-03-07T00:00:00.000Z\"\r\n          }\r\n        },\r\n        {\r\n          \"frontmatter\": {\r\n            \"title\": \"Third Post!\",\r\n            \"date\": \"2021-03-08T00:00:00.000Z\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"extensions\": {}\r\n}\r\n</code></pre>\n<p>This is a big JSON object with the relevant information we requested in the query. We&#8217;ll look at how to use this soon. For now, this means that we can use this data in the Gatsby project to make pages.</p>\n<h2 id=\"sitemetadata\">Site Metadata</h2>\n<p>In the <code>gatsby-config.js</code> file, there&#8217;s also an option to specify site metadata. Site metadata is for when I want to reuse common data like the site title and description.</p>\n<p>This is will be useful further down the road when I want to add meta tags to the site for search engine optimization (SEO). (Again, more on that later.) For now, I&#8217;m going to define some basic information about the site in the <code>gatsby-config.js</code> with the <code>siteMetadata</code> object.</p>\n<p>I <em>could</em> define the site metada directly in the <code>module.exports</code> like so:</p>\n<pre><code class=\"javascript language-javascript\">module.exports = {\r\n  siteMetadata: {\r\n    title: `My Gatsby Blog`,\r\n    description: `This is my coding blog.`,\r\n  },\r\n  plugins: [\r\n    // configured plugins here\r\n    {\r\n      // empty for brevity\r\n    },\r\n  ],\r\n};\r\n</code></pre>\n<p>The site metadata object can get a bit large, and I&#8217;ve found keeping it in its own object can make it a bit simpler to reason about, so instead I&#8217;m going to define it separately:</p>\n<pre><code class=\"javascript language-javascript\">const siteMetadata = {\r\n  title: `My Gatsby Blog`,\r\n  description: `This is my coding blog.`,\r\n};\r\n</code></pre>\n<p>Then add the <code>siteMetadata</code> object to the Gatsby config file:</p>\n<pre><code class=\"javascript language-javascript\">const siteMetadata = {\r\n  title: `My Gatsby Blog`,\r\n  description: `This is my coding blog.`,\r\n};\r\n\r\nmodule.exports = {\r\n  siteMetadata,\r\n  plugins: [\r\n    // configured plugins here\r\n    {\r\n      // empty for brevity\r\n    },\r\n  ],\r\n};\r\n</code></pre>\n<p>Now I can hop over to the GraphiQL explorer again and query that site metadata with the following query:</p>\n<pre><code class=\"graphql language-graphql\">{\r\n  site {\r\n    siteMetadata {\r\n      title\r\n      description\r\n    }\r\n  }\r\n}\r\n</code></pre>\n<p>It&#8217;s always a good idea to stop and restart the development server if you&#8217;re making changes to the <code>gatsby-config.js</code> file, so I&#8217;ll do that (<kbd>Ctrl</kbd> + <kbd>c</kbd>, then <code>yarn develop</code>), then in the GraphiQL explorer refresh the page and run the query again to get the data back:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"data\": {\r\n    \"site\": {\r\n      \"siteMetadata\": {\r\n        \"title\": \"My Gatsby Blog\",\r\n        \"description\": \"This is my coding blog.\"\r\n      }\r\n    }\r\n  },\r\n  \"extensions\": {}\r\n}\r\n</code></pre>\n<h2 id=\"makeasitemetadatahook\">Make a Site Metadata Hook</h2>\n<p>Now that I have the site metadata in the Gatsby file system, I can query it wherever I want to use it with the Gatsby static query hook <code>useStaticQuery</code>. I&#8217;m going to kill off the dev server and restart after I&#8217;ve added the following to the <code>src/pages/index.js</code> file:</p>\n<pre><code class=\"javascript language-javascript\">import { graphql, useStaticQuery } from \"gatsby\";\r\nimport React from \"react\";\r\n\r\nexport default function IndexPage() {\r\n  const {\r\n    site: { siteMetadata },\r\n  } = useStaticQuery(graphql`\r\n    {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  console.log(\"=====================\");\r\n  console.log(siteMetadata);\r\n  console.log(\"=====================\");\r\n  return &lt;h1&gt;Hello World!&lt;/h1&gt;;\r\n}\r\n</code></pre>\n<p>A quick note on some of the notation there: <code>const { site: { siteMetadata }, }</code> is quick way to get to the data in the <code>site</code> query, where I&#8217;m pulling the <code>siteMetadata</code> from the <code>site</code> object. This is referred to as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">destructuring</a>.</p>\n<p>Now, after I&#8217;ve started the dev server again, I can go over to the browser console (<kbd>Control</kbd> + <kbd>Shift</kbd> + <kbd>J</kbd> in Windows/Linux, <kbd>Command</kbd> + <kbd>Option</kbd> + <kbd>J</kbd> on macOS) and see the <code>siteMetadata</code> object in the console output.</p>\n<p>I get the following console output:</p>\n<pre><code class=\"bash language-bash\">=====================\r\n{title: \"My Gatsby Blog\", description: \"This is my coding blog.\"}\r\n  description: \"This is my coding blog.\"\r\n  title: \"My Gatsby Blog\"\r\n  __proto__: Object\r\n=====================\r\n</code></pre>\n<p>Don&#8217;t worry about the console warning for a missing 404 page not found (<code>net::ERR_ABORTED 404 (Not Found)</code>). I&#8217;ll make that later.</p>\n<p>To avoid having to write this query each time, I want to use it in a component. I&#8217;m going to abstract this out into its own hook:</p>\n<pre><code class=\"bash language-bash\"># make a folder for all the hooks to live\r\nmkdir src/hooks\r\n# creathe the file\r\ntouch src/hooks/use-site-metadata.js\r\n</code></pre>\n<p>Now I&#8217;ll add in a hook to the newly created <code>src/hooks/use-site-metadata.js</code> file to get the site metadata on demand:</p>\n<pre><code class=\"javascript language-javascript\">import { graphql, useStaticQuery } from \"gatsby\";\r\nexport const useSiteMetadata = () =&gt; {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query SITE_METADATA_QUERY {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n  return site.siteMetadata;\r\n};\r\n</code></pre>\n<p>You may have noticed that this query isn&#8217;t the same as the one from from the GraphiQL explorer:</p>\n<pre><code class=\"diff language-diff\">+ query SITE_METADATA_QUERY {\r\n  site {\r\n    siteMetadata {\r\n      title\r\n      description\r\n    }\r\n  }\r\n}\r\n</code></pre>\n<p>This is to name the query. Because I&#8217;ll be using a lot of queries in the project, it makes sense to give them meaningful names.</p>\n<p>Now I&#8217;ll implement the new hook into the <code>src/pages/index.js</code> file:</p>\n<pre><code class=\"javascript language-javascript\">import React from \"react\";\r\nimport { useSiteMetadata } from \"../hooks/use-site-metadata\";\r\n\r\nexport default function IndexPage() {\r\n  const { title, description } = useSiteMetadata();\r\n  return (\r\n    &lt;&gt;\r\n      &lt;h1&gt;{title}&lt;/h1&gt;\r\n      &lt;p&gt;{description}&lt;/p&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n</code></pre>\n<p>That&#8217;s a lot less verbose, and I&#8217;m able to pick and choose what items I want from the <code>SITE_METADATA_QUERY</code>.</p>\n<p>It&#8217;s time to commint the changes made so far:</p>\n<pre><code class=\"bash language-bash\">git add .\r\ngit commit -m 'add site metadata and metadata hook'\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/gatsby-mdx-blog/?utm_source=rss\">How to Build a Developer Blog with Gatsby and MDX</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/gatsby-mdx-blog/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181926",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Scott Spence"
        ],
        "pubDate": [
            "Mon, 29 Mar 2021 15:00:45 GMT"
        ],
        "metaDesc": [
            "Want to build your own developer blog? Learn how to make your content shine with this extensive guide on setting up a Gatsby project from scratch."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Learn Remotion: Create Animated Video with HTML, CSS & React"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/remotion-create-animated-videos-using-html-css-react/?utm_source=rss\"\n              title=\"Learn Remotion: Create Animated Video with HTML, CSS & React\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617583244remotion-video-animation-react.png\"\n        alt=\"Remotion: Create Animated Videos Using HTML, CSS and React\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617583244remotion-video-animation-react-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617583244remotion-video-animation-react.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Creating a video with text, animations, colors, and shapes traditionally requires specialist software and potentially years of motion graphic training. What if you could use your existing toolset, training, and background in web development to do the same?</strong></p>\n<p><a href=\"https://www.remotion.dev/\">Remotion</a> allows JavaScript developers to reuse the skills and knowledge they&rsquo;ve built up to create complex animated videos using HTML, CSS, and React JS. If you can render text with React, animate a CSS style, or organize HTML content, you can now create and edit your own videos using solely code, with no video editing applications or software required.</p>\n<p>In this article, I&rsquo;ll go through the process of using Remotion and talk you through my discoveries as we go along.</p>\n<p>You can find the complete code for this article on <a href=\"https://github.com/sitepoint-editors/remotion-example\">GitHub</a>.</p>\n<h2 id=\"toc_0\">Remotion: What, and Why?</h2>\n<p>Remotion is a video creation toolkit for React created by <a href=\"https://twitter.com/JNYBGR\">Jonny Burger</a>. This toolkit allows anyone with a basic understanding of React, HTML or CSS to create animated videos using code.</p>\n<p>In the video creation space there&rsquo;s currently a high barrier to entry due to the required software and training needed to use and master these tools. By utilizing JavaScript developers’ existing toolkits, this opens the video creation space to a wider user base. As videos become code, we can leverage existing patterns to allow for more effective video creation — such as automated generation based on parameters or build pipelines.</p>\n<h2 id=\"toc_1\">Getting Started</h2>\n<p>Thankfully, Remotion has a quick and easy setup process with a Yarn and npm starter kit. For this example, we&rsquo;ll be sticking with npm as the build and run tool. Before we get started, you&rsquo;ll need to have Node and npm installed. (For assistance, you can follow <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">this guide</a> to installing Node and npm.) Also check the <a href=\"https://www.remotion.dev/docs/#installation\">Remotion installation guide</a> if you&rsquo;re on Linux, as you may need to install additional tools. After getting Node and npm set up, let&rsquo;s create a new project by running this code: </p>\n<div>\n<pre><code class=\"language-bash\">npm init video</code></pre>\n</div>\n<p>This will prompt you for a project name, which is also used as the directory name. In our case, it will be <code>my-video</code>. Once entered, we can move into the <code>my-video</code> directory and start the default video project by running the start script as follows:</p>\n<div>\n<pre><code class=\"language-bash\">cd my-video\r\nnpm start</code></pre>\n</div>\n<p>After running the start command, the browser should automatically open. If not, open the browser and navigate to <a href=\"http://localhost:3000/\">http://localhost:3000/</a>. This feature allows you to watch and debug the video you&rsquo;re creating. The player has controls that include a play button, which allows you to preview the video content. It may also be useful to start by looking at the code for the demo example, which Remotion provides as a guide for how to build your own video. </p>\n<h2 id=\"toc_2\">Hello, World!</h2>\n<p>We&rsquo;re going to create our own video animating the text “Hello, World!”, to get to grips with the components and processes supplied in Remotion. </p>\n<p>First of all, let&rsquo;s delete the existing example code (everything in the <code>src</code> folder), as we want to start afresh. Then, let’s create a <code>Demo</code> directory under the <code>src</code> directory, which will hold and manage all our video work for this project. Inside the <code>Demo</code> directory, create a <code>Demo.js</code> file:</p>\n<div>\n<pre><code class=\"language-javascript\">import {Composition, interpolate, Sequence, useCurrentFrame, useVideoConfig} from &#39;remotion&#39;;\r\nimport Title from &#39;./Title&#39;;\r\nimport Hello from &#39;./Hello&#39;;\r\nimport &quot;./demo.css&quot;;\r\n\r\nconst Demo = () =&gt; {\r\n  return (\r\n  &lt;div className=&quot;main-container&quot;&gt;\r\n    {/* TODO: add video content */}\r\n  &lt;/div&gt;\r\n  );\r\n};\r\n\r\nexport const DemoVideo = () =&gt; {\r\n  return (\r\n  &lt;Composition\r\n    id=&quot;Demo&quot;\r\n    component={Demo}\r\n    durationInFrames={150}\r\n    fps={30}\r\n    width={1920}\r\n    height={1080}\r\n    defaultProps={{\r\n      titleText: &#39;This is my first Remotion video&#39;,\r\n      titleColor: &#39;blue&#39;,\r\n    }}\r\n    /&gt;\r\n  )\r\n}</code></pre>\n</div>\n<p>The <code>Demo</code> file exports our video code. As you can see, we can create a <code>Demo</code> component that will hold all the visual elements in our video. We can then export a component that renders the <code>Composition</code> of our video. The <code>Composition</code> component allows us to define some basic properties such as the width and height of the video clip, the FPS (frames per second), and the feature that will be rendered. We also import some utils and hooks from Remotion and some additional components that we will create soon. </p>\n<p>Currently our <code>Demo</code> component is empty, but let’s add some elements to our video:</p>\n<div>\n<pre><code class=\"language-javascript\">const Demo = ({titleText, titleColor}) =&gt; {\r\n  const frame = useCurrentFrame();\r\n  const videoConfig = useVideoConfig();\r\n\r\n  const totalOpacity = interpolate(\r\n     frame,\r\n     [videoConfig.durationInFrames - 25, videoConfig.durationInFrames - 15],\r\n     [1, 0],\r\n    {\r\n      extrapolateLeft: &#39;clamp&#39;,\r\n      extrapolateRight: &#39;clamp&#39;,\r\n    }\r\n  );\r\n\r\n  return (\r\n    &lt;div className=&quot;main-container&quot;&gt;\r\n      &lt;div style={{opacity: totalOpacity}}&gt;\r\n        &lt;Sequence from={0} durationInFrames={videoConfig.durationInFrames / 2}&gt;\r\n          &lt;Hello/&gt;\r\n        &lt;/Sequence&gt;\r\n        &lt;Sequence from={35} durationInFrames={Infinity}&gt;\r\n          &lt;Title titleText={titleText} titleColor={titleColor} /&gt;\r\n        &lt;/Sequence&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n};</code></pre>\n</div>\n<p>We&rsquo;ve added a lot to the file, so let’s break this all down.</p>\n<p>Firstly in our render section, we can see from the file that we can now return a div with opacity styles, allowing us to fade elements in and out at the start and end of the video. For the opacity value, we use a Remotion helper. The <code>interpolate</code> function allows you to better define animations and map the animation values to the current frame and the video duration. In this example, we pass in the current frame. The function will get called on each frame generated. The input range is calculated from the duration of the video and the output value ranges from 0 to 1, as this is the range for the opacity CSS value. As the <code>Demo</code> component is re-rendered for each frame, the <code>interpolate</code> function is called each time and will return the appropriate opacity value.  </p>\n<p>Next, we can begin rendering different visual elements on the video screen. In this example, we want the text “Hello, World!” to fade into view then disappear and the text “This is my first Remotion video” to then appear afterwards. To do so, we can render multiple <code>Sequence</code> components. </p>\n<p>A <code>Sequence</code> component is another Remotion feature that allows us to define how and when a component renders in a video and for how long. This is great for building complex videos where you want to add timed or layered elements, such as this example. Each <code>Sequence</code> will also show in the browser player and be titled based on the child component name. This allows you to monitor the video you&rsquo;re generating and the effects you&rsquo;re adding to it in real time.</p>\n<p>Remotion also provides some useful React hooks, and in this example we make use of the <code>useCurrentFrame</code> and <code>useVideoConfig</code> hooks. <code>useCurrentFrame</code> will return the current frame that the video is on, which is useful for animations and implementing actions based on where the current position of the video playback is. <code>useVideoConfig</code> will return an object with different values, such as:</p>\n<ul>\n<li><strong>width</strong>: the width of the video — useful for positioning elements in the video</li>\n<li><strong>height</strong>: the height of the video — useful for positioning elements in the video</li>\n<li><strong>FPS</strong>: frames per second — which can be used to determine the speed of animation or element movement </li>\n<li><strong>durationInFrames</strong>: the total length of the video in frames — which can be used to calculate animations or times for <code>Sequence</code> show and hide.</li>\n</ul>\n<p>In our case, as mentioned, firstly we want our <code>Hello</code> component, the text “Hello, World!”, to appear at the start of the video and remain on screen for half of the time. We do this by using the <code>videoConfig.duration</code> value, which we&rsquo;ve calculated from the <code>useVideoConfigHook</code>.</p>\n<p>For the second <code>Sequence</code>, we want our <code>Title</code> component text, “This is my first Remotion video”, to appear after 35 frames and stay on screen for the full duration of the video. To achieve this, for <code>From</code> we enter <code>35</code>, and for <code>durationInFrames</code> we enter <code>Infinity</code>.</p>\n<p>To style our demo component, we can use CSS along with inline styles. When using CSS, we want to apply styles to the whole video, so let&rsquo;s create a <code>demo.css</code> file that will hold any styles that cover the whole video area. In our example, we want to make the background white and align out items with Flexbox:</p>\n<div>\n<pre><code class=\"language-css\">.main-container {\r\n    flex: 1;\r\n    background-color: white;\r\n}</code></pre>\n</div>\n<p>Now let’s delve deeper into these elements we&rsquo;re rendering.</p>\n<h3 id=\"toc_3\">Rendering React Components in an Animation</h3>\n<p>The <code>Hello</code> component is going to be a basic React component that renders an H1 tag with some inline styles applied and the text “Hello, World!” This is the simplest form of a component we can render. For simplicity’s sake, we can use inline styles. But because this is React, you could also import styles from a CSS file and use a class name, styled-components, CSS modules, or any styling pattern you&rsquo;re already familiar with as an alternative. Let&rsquo;s create the <code>Hello</code> component. Inside the <code>Demo</code> folder, create a new file <code>Hello.js</code>: </p>\n<div>\n<pre><code class=\"language-javascript\">const Hello = () =&gt; {\r\n  return (\r\n    &lt;h1\r\n      style={{\r\n        fontFamily: &#39;SF Pro Text, Helvetica, Arial&#39;,\r\n        fontWeight: &#39;bold&#39;,\r\n        fontSize: 100,\r\n        textAlign: &#39;center&#39;,\r\n        position: &#39;absolute&#39;,\r\n        bottom: 500,\r\n        width: &#39;100%&#39;\r\n      }}\r\n    &gt;\r\n      Hello, World!\r\n    &lt;/h1&gt;\r\n  );\r\n};\r\n\r\nexport default Hello;</code></pre>\n</div>\n<p>Now, let’s take a look at a more complex example. In the <code>Demo</code> folder, create a new file called <code>Title.js</code> and add in the component code below:</p>\n<div>\n<pre><code class=\"language-javascript\">import {spring, useCurrentFrame, useVideoConfig} from &#39;remotion&#39;;\r\n\r\nconst Title = ({titleText, titleColor, bottom}) =&gt; {\r\n  const videoConfig = useVideoConfig();\r\n  const frame = useCurrentFrame();\r\n  const text = titleText.split(&#39; &#39;).map((t) =&gt; ` ${t} `);\r\n  return (\r\n    &lt;h1\r\n      style={{\r\n        fontFamily: &#39;SF Pro Text, Helvetica, Arial&#39;,\r\n        fontWeight: &#39;bold&#39;,\r\n        fontSize: 100,\r\n        textAlign: &#39;center&#39;,\r\n        position: &#39;absolute&#39;,\r\n        bottom: bottom || 160,\r\n        width: &#39;100%&#39;,\r\n      }}\r\n    &gt;\r\n      {text.map((t, i) =&gt; {\r\n        return (\r\n          &lt;span\r\n            key={t}\r\n            style={{\r\n              color: titleColor,\r\n              marginLeft: 10,\r\n              marginRight: 10,\r\n              transform: `scale(${spring({\r\n                fps: videoConfig.fps,\r\n                frame: frame - i * 5,\r\n                config: {\r\n                  damping: 100,\r\n                  stiffness: 200,\r\n                  mass: 0.5,\r\n                },\r\n              })})`,\r\n              display: &#39;inline-block&#39;,\r\n            }}\r\n          &gt;\r\n            {t}\r\n          &lt;/span&gt;\r\n        );\r\n      })}\r\n    &lt;/h1&gt;\r\n  );\r\n};\r\n\r\nexport default Title;</code></pre>\n</div>\n<p>We have a lot going on here, so again let’s break down what’s going on. </p>\n<p>Remotion has first-class support for TypeScript. This is not required, but it can make the development process better, as you’ll get more detailed autocomplete suggestions in your IDE. However, to make this example more beginner friendly, we&rsquo;ll just use normal JavaScript. </p>\n<p>Our component takes in two props — <code>titleText</code> and <code>titleColor</code> — which will be used later in our render method. This shows that, using React, we can still pass props around the application, therefore making our video elements reusable and dynamic. You may have noticed that, in our <code>Demo</code> component, we passed props in from the <code>Composition</code> component. This shows the power of React in action. We can pass in props from the very top of the React application, making the video responsive, and meaning you could change one block of text to make a new video or to change the whole video context. </p>\n<p>After we&rsquo;ve accessed our props in the <code>Title</code> component, we call the Remotion hooks again to get the <code>videoConfig</code> and frame data. The <code>Title</code> component then breaks the text prop passed and renders it one word at a time using a combination of a map and CSS transform. Here we have the opportunity to use another built-in helper function. <code>Spring</code> takes in values to help generate a smooth output for the animation value. We pass the main video config’s FPS to control the speed of the animation. The frame value controls when the animation starts, and finally we pass in additional configuration options to control the smoothness of the animation. </p>\n<p>After we have all our video components created and ready to go, we need to finally create an <code>index.js</code> file in the root of the <code>src</code> folder and add the following content:</p>\n<div>\n<pre><code class=\"language-javascript\">import {registerRoot} from &#39;remotion&#39;;\r\nimport { DemoVideo } from &#39;./Demo/Demo&#39;;\r\n\r\nregisterRoot(DemoVideo);</code></pre>\n</div>\n<p>The index file imports the <code>registerRoot</code> function from Remotion, which allows us to render the video content. Think of this as the <a href=\"https://reactjs.org/docs/react-dom.html#render\">ReactDOM render</a> function but for Remotion. Then we pass our <code>DemoVideo</code> component to <code>registerRoot</code>, which will visualize the rendered video in either development or build modes.</p>\n<p>We&rsquo;re now importing the Demo video that will get rendered by Remotion. </p>\n<p>Now that we have all of these features combined, we have a fully animated video that provides one example of the different components and helper functions supplied by Remotion.</p>\n<p>We can run the video from the root of the project with the following command:</p>\n<div>\n<pre><code class=\"language-bash\">./node_modules/.bin/remotion preview src/index.js</code></pre>\n</div>\n<p>Or, you can update the <code>start</code> script in the <code>package.json</code> file:</p>\n<div>\n<pre><code class=\"language-diff\">- &quot;start&quot;: &quot;remotion preview src/index.tsx&quot;,\r\n+ &quot;start&quot;: &quot;remotion preview src/index.js&quot;,</code></pre>\n</div>\n<p>Then run the animation using <code>npm start</code>.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/remotion-create-animated-videos-using-html-css-react/?utm_source=rss\">Learn Remotion: Create Animated Video with HTML, CSS & React</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/remotion-create-animated-videos-using-html-css-react/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182018",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "React",
            "Tools & Libraries"
        ],
        "dc:creator": [
            "Chris Laughlin"
        ],
        "pubDate": [
            "Sun, 11 Apr 2021 16:00:16 GMT"
        ],
        "metaDesc": [
            "You don't need fancy video-editing software to create videos containing text, animations, colors, and shapes. Learn how to do it in React with Remotion!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Deploy Your Jamstack Site to Cloudflare Pages"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/cloudflare-pages-jamstack-deployment/?utm_source=rss\"\n              title=\"How to Deploy Your Jamstack Site to Cloudflare Pages\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621993721jamstack-cloudflare.png\"\n        alt=\"How to Deploy Your Jamstack Site to Cloudflare Pages\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621993721jamstack-cloudflare-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621993721jamstack-cloudflare.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This article describes how deploy your <a href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a> site to Cloudflare Pages — a new service with a simple-to-use and generous free hosting plan.</strong></p>\n<p>The web world may be <a href=\"https://w3techs.com/technologies/details/cm-wordpress\">using WordPress</a>, but developers are moving toward <a href=\"https://jamstack.org/\">Jamstack technologies</a> (also referred to as <em>static sites</em>). The name Jamstack (once written as JAMStack) stands for JavaScript, APIs, and Markup, and was devised by <a href=\"https://www.netlify.com/\">Netlify</a>. Like Ajax, the scope of the term has widened, but a Jamstack site typically uses pre-rendered static content with client-side logic connecting to a set of loosely coupled back-end APIs. The benefits are compelling:</p>\n<ul>\n<li>\n<p><strong>Performance</strong>: Where possible, Jamstack sites generate pages once during a build process rather than on view. They&#8217;re fast and are often deployed to content delivery networks (CDNs) physically closer to the user.</p>\n</li>\n<li>\n<p><strong>Scalability</strong>: Jamstack sites are a collection of generated files which do not require server-side processing or database connectivity. Pages are effectively pre-cached and deployed globally.</p>\n</li>\n<li>\n<p><strong>Portability</strong>: Once generated, it&#8217;s possible to host a Jamstack site anywhere. There&#8217;s no vendor lock-in.</p>\n</li>\n<li>\n<p><strong>Development</strong>: Developers can use <a href=\"https://jamstack.org/generators/\">whatever tools they prefer</a> to generate a site. If necessary, article editors can <a href=\"https://www.sitepoint.com/wordpress-headless-cms-eleventy/\">continue to use WordPress</a> or any other CMS to write content.</p>\n</li>\n<li>\n<p><strong>Deployment</strong>: Jamstack sites can be automatically deployed to test and production sites by committing Git branches. There&#8217;s no need for complex continuous integration or deployment processes.</p>\n</li>\n</ul>\n<p>The following tutorials explain how to create a Jamstack site from scratch:</p>\n<ul>\n<li><a href=\"https://www.sitepoint.com/getting-started-with-eleventy/\">Getting Started with Eleventy</a> (see the <a href=\"https://github.com/craigbuckler/11ty-starter\">Github repository</a>)</li>\n<li><a href=\"https://www.sitepoint.com/create-static-site-metalsmith/\">How to Create a Static Site with Metalsmith</a></li>\n</ul>\n<h2 id=\"jamstackhostingservices\">Jamstack Hosting Services</h2>\n<p>You can host a site anywhere including <a href=\"https://pages.github.com/\">GitHub Pages</a> and <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html\">Amazon S3</a>, but <a href=\"https://www.netlify.com/\">Netlify</a> and <a href=\"https://vercel.com/\">Vercel</a> dominate the Jamstack space. They offer generous plans and simple Git-based deployments.</p>\n<p>The latest entrant to the market is <a href=\"https://www.cloudflare.com/\">Cloudflare</a> — a company best known for their global CDN, edge security, and caching services. The new <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a> service offers Jamstack hosting across their colossal global infrastructure. The <a href=\"https://pages.cloudflare.com/#pricing\">free plan</a> is now available to everyone and includes:</p>\n<ul>\n<li>unlimited sites, requests, and bandwidth</li>\n<li>SSL and security</li>\n<li>robust content caching and expiry</li>\n<li>web analytics</li>\n<li>production and test deployments from GitHub branches</li>\n<li>one build at a time with up to 500 builds per month, and</li>\n<li>thorough documentation with <a href=\"https://developers.cloudflare.com/pages/getting-started\">getting started tutorials</a>, <a href=\"https://developers.cloudflare.com/pages/how-to\">deployment examples</a> <a href=\"https://developers.cloudflare.com/pages/migrations\">migration guides</a></li>\n</ul>\n<p>The build platform supports languages including Node.js, Python, PHP, Ruby, Go, Java, Elixir, and Erlang. Most site builder software should work, but the following tools have verified compatibility:</p>\n<ul>\n<li>Angular (Angular CLI)</li>\n<li>Brunch</li>\n<li>Docusaurus</li>\n<li>Eleventy</li>\n<li>Ember.js</li>\n<li>Gatsby</li>\n<li>GitBook</li>\n<li>Gridsome</li>\n<li>Hugo</li>\n<li>Jekyll</li>\n<li>Mkdocs</li>\n<li>Next.js (static HTML export)</li>\n<li>Nuxt.js</li>\n<li>Pelican</li>\n<li>React (<code>create-react-app</code>)</li>\n<li>React Static</li>\n<li>Slate</li>\n<li>Svelte</li>\n<li>Umi</li>\n<li>Vue</li>\n<li>VuePress</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/cloudflare-pages-jamstack-deployment/?utm_source=rss\">How to Deploy Your Jamstack Site to Cloudflare Pages</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/cloudflare-pages-jamstack-deployment/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=187172",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Wed, 26 May 2021 16:00:59 GMT"
        ],
        "metaDesc": [
            "There's a growing list of options for hosting Jamstack sites. Find out what Cloudflare Pages offers and how it compares to the competition."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Records and Tuples: JavaScript’s New Immutable Data Types"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/records-tuples-javascript-immutable-data-types/?utm_source=rss\"\n              title=\"Records and Tuples: JavaScript’s New Immutable Data Types\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610417197records-tuples-immutable-js.png\"\n        alt=\"JavaScript's New Immutable Data Types: Records and Tuples\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610417197records-tuples-immutable-js-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610417197records-tuples-immutable-js.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Records and tuples are new JavaScript immutable data types currently at <a style=\"font-weight:bold\" href=\"https://github.com/tc39/proposal-record-tuple\">stage 2 in the TC39 standards approval process</a>. They are subject to change and not currently available in any browser or runtime, but working implementations should arrive within the next year. They help solve a couple of confusing conundrums faced by coders …</strong></p>\n<h2 id=\"constantchanges\">Constant Changes</h2>\n<p>Professional JavaScripters will tell you that assigning variables with <code>const</code> is best practice where possible. It makes variables <em>immutable</em>. Values can’t be changed, so you have fewer issues to deal with.</p>\n<p>Unfortunately, <code>const</code> only makes primitive values immutable (String, Number, BigInt, Boolean, Symbol, and <code>undefined</code>). You can’t reassign an array or an object, but the values and properties they contain <em>can</em> be modified. For example:</p>\n<pre><code class=\"javascript language-javascript\">// array constant\r\nconst myArray = [1, 2, 3];\r\n\r\n// change array values\r\nmyArray[0] = 99;\r\nmyArray.push(42);\r\n\r\nconsole.log(myArray); // [ 99, 2, 3, 42 ]\r\n\r\nmyArray = 'change'; // ERROR!\r\n</code></pre>\n<p>Similarly for objects:</p>\n<pre><code class=\"javascript language-javascript\">// object constant\r\nconst myObj = { a: 1, b: 2, c: 3 }\r\n\r\n// change object properties\r\nmyObj.a = 99;\r\nmyObj.d = 42;\r\n\r\nconsole.log(myObj); // { a:99 ,b:2, ,c:3, ,d:42 }\r\n\r\nmyObj = 'change'; // ERROR!\r\n</code></pre>\n<p>The <a href=\"https://developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/Object/freeze\"><code>Object.freeze()</code></a> method can help, but only shallow freezing is applied to the immediate child properties of an object:</p>\n<pre><code class=\"javascript language-javascript\">const myObj = { a: 1, b: 2, c: { v: 3 } }\r\nObject.freeze(myObj);\r\n\r\nmyObj.a = 99; // silently ignored\r\nmyObj.c.v = 99; // works fine\r\n\r\nconsole.log(myObj); // { a: 1, b: 2, c: { v: 99 } }\r\n</code></pre>\n<p>It’s therefore difficult to guarantee a function won&#8217;t intentionally or accidentally change the values held in an array or object. Developers must either hope for the best or pass a cloned version of a variable — <em>(which has its own challenges)</em>.</p>\n<h2 id=\"equivalentinequality\">Equivalent Inequality</h2>\n<p>Further chaos can ensue when developers attempt seemingly reasonable object or array comparisons:</p>\n<pre><code class=\"javascript language-javascript\">const str = 'my string';\r\nconsole.log( str === 'mystring' );  // true\r\n\r\nconst num = 123;\r\nconsole.log( num === 123 );         // true\r\n\r\nconst arr = [1, 2, 3];\r\nconsole.log( arr === [1, 2, 3] );   // false\r\n\r\nconst obj = { a: 1 };\r\nconsole.log( obj === { a: 1 } );    // false\r\n</code></pre>\n<p>Only primitive types can be compared by value. Objects and arrays are passed and compared <em>by reference</em>. Two variables will only be equivalent when they point to the same item in memory:</p>\n<pre><code class=\"javascript language-javascript\">const a = [1, 2];\r\n\r\nconst b = a;\r\nb.push(3);\r\n\r\nconsole.log( a === b ); // true\r\n\r\n// original array has changed\r\nconsole.log( a ); // [1, 2, 3]\r\n</code></pre>\n<p>Deeply comparing two objects or arrays requires a recursive comparison function to assess each value in turn. Even then, you may encounter issues with types such as dates or functions which could be stored in different ways.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/records-tuples-javascript-immutable-data-types/?utm_source=rss\">Records and Tuples: JavaScript’s New Immutable Data Types</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/records-tuples-javascript-immutable-data-types/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180607",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Tue, 12 Jan 2021 06:30:43 GMT"
        ],
        "metaDesc": [
            "Are you frustrated by immutability issues in JavaScript? Learn how records and tuples will finally permit robust immutable data storage and comparisons."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Quick Tip: How to Loop Through a JSON Response in JavaScript"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/loop-through-json-response-javascript/?utm_source=rss\"\n              title=\"Quick Tip: How to Loop Through a JSON Response in JavaScript\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616287933loop.jpg\"\n        alt=\"How to Loop Through a JSON Response in JavaScript\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616287933loop-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616287933loop-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616287933loop-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616287933loop.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>When fetching data from a remote server, the server&#8217;s response will often be in JSON format. In this quick tip, I&#8217;ll demonstrate how you can use JavaScript to parse the server&#8217;s response, so as to access the data you require.</strong> </p>\n<p>This process will typically consist of two steps: decoding the data to a native structure (such as an array or an object), then using one of JavaScript&#8217;s in-built methods to loop through that data structure. In this article, I&#8217;ll cover both steps, using plenty of runnable examples.</p>\n<h2 id=\"whatisjson\">What is JSON?</h2>\n<p>Before we look at how to deal with JSON, let&#8217;s take a second to understand what it is (and what it isn&#8217;t).</p>\n<p>JSON stands for <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation. It&#8217;s a language-independent, text-based format, which is commonly used for transmitting data in web applications. JSON was inspired by the JavaScript Object Literal notation, but there are differences between the two. For example, in JSON keys must be quoted using double quotes, while in object literals this is not the case.</p>\n<p>There are two ways data can be stored in JSON:</p>\n<ul>\n<li>a collection of name/value pairs (aka a JSON object)</li>\n<li>an ordered list of values (aka a JSON array)</li>\n</ul>\n<p>When receiving data from a web server, the data is always a string, which means that it&#8217;s your job to convert it into a data structure you can work with.</p>\n<p>If you&#8217;d like to find out more about how JSON works, please visit the <a href=\"https://www.json.org/json-en.html\">JSON website</a>.</p>\n<h2 id=\"fetchingjsonfromaremoteapi\">Fetching JSON from a Remote API</h2>\n<p>In the following examples, we&#8217;ll use the fantastic <a href=\"https://icanhazdadjoke.com/api\">icanhazdadjoke API</a>. As you can read in its documentation, making a GET request where the <code>Accept</code> header is set to <code>application/json</code> will see the API return a JSON payload.</p>\n<p>Let&#8217;s start with a simple example:</p>\n<pre><code class=\"javascript language-javascript\">const xhr = new XMLHttpRequest();\r\nxhr.onreadystatechange = () =&gt; {\r\n  if (xhr.readyState === XMLHttpRequest.DONE) {\r\n    console.log(typeof xhr.responseText);\r\n    console.log(xhr.responseText);\r\n  }\r\n};\r\nxhr.open('GET', 'https://icanhazdadjoke.com/', true);\r\nxhr.setRequestHeader('Accept', 'application/json');\r\nxhr.send(null);\r\n\r\n// string\r\n// {\"id\":\"daaUfibh\",\"joke\":\"Why was the big cat disqualified from the race? Because it was a cheetah.\",\"status\":200}\r\n</code></pre>\n<p>As we can see, the server returned us a string. We&#8217;ll need to parse this into a JavaScript object before we can loop through its properties. We can do this with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\">JSON.parse()</a>:</p>\n<pre><code class=\"javascript language-javascript\">if (xhr.readyState === XMLHttpRequest.DONE) {\r\n  const res = JSON.parse(xhr.responseText);\r\n  console.log(res);\r\n};\r\n\r\n// Object { id: \"fiyPR7wPZDd\", joke: \"When does a joke become a dad joke? When it becomes apparent.\", status: 200 }\r\n</code></pre>\n<p>Once we have our response as a JavaScript object, there are a number of methods we can use to loop through it. </p>\n<h3 id=\"useaforinloop\">Use a <code>for...in</code> Loop</h3>\n<p>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for…in\">for…in</a> loop iterates over all enumerable properties of an object:</p>\n<pre><code class=\"javascript language-javascript\">const res = JSON.parse(xhr.responseText);\r\n\r\nfor (const key in res){\r\n  if(obj.hasOwnProperty(key)){\r\n    console.log(`${key} : ${res[key]}`)\r\n  }\r\n}\r\n\r\n// id : H6Elb2LBdxc\r\n// joke : What's blue and not very heavy?  Light blue.\r\n// status : 200\r\n</code></pre>\n<p>Please be aware that <code>for...of</code> loops will iterate over the entire prototype chain, so here we&#8217;re using <code>hasOwnProperty</code> to ensure that the property belongs to our <code>res</code> object.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/loop-through-json-response-javascript/?utm_source=rss\">Quick Tip: How to Loop Through a JSON Response in JavaScript</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/loop-through-json-response-javascript/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181706",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "James Hibbard"
        ],
        "pubDate": [
            "Wed, 07 Apr 2021 16:00:55 GMT"
        ],
        "metaDesc": [
            "Data fetched from remote servers is often in JSON format. Learn how to use JavaScript to parse the server's JSON response to access the data you require."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Add shiels on github"
        ],
        "author": [
            "Clément Gaudinière"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 08:53:50 +0000"
        ],
        "link": [
            "https://dev.to/clementgaudiniere/add-shiels-on-github-3n55"
        ],
        "guid": [
            "https://dev.to/clementgaudiniere/add-shiels-on-github-3n55"
        ],
        "description": [
            "<p>Hello everyone, today we are going to discuss another way to customize your README.md file from a github repository. Indeed, we will see how to add shields. Shields are SVG badges that automatically update themselves according to the interactions related to your repository. For example, if a new release appears, the \"release\" badge will automatically update to show the latest release.<br>\nSo I propose to discover together how to handle shields, and why not use them later for your next projects.</p>\n<h3>\n  <a href=\"#lets-start\">\n  </a>\n  Let's start\n</h3>\n\n<p>To begin, go to your GitHub repository, if you have not already created a README.md file you will have to create it since it is on this file that we will work.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QXt2pGZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/838mb3i85b8l7bp7z4y4.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QXt2pGZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/838mb3i85b8l7bp7z4y4.PNG\" alt=\"Create README.md file\"></a></p>\n\n<p>Then go to the editing area of your README file, to start, we will create a centered paragraph, with some links and some images that will be our badges later on :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">align=</span><span class=\"s\">\"center\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We want to add a badge that will display the latest version of our release, so our first <code>&lt;a&gt;</code> tag will look like this in our README file (of course replacing the text in square brackets with your username and repository) :<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">align=</span><span class=\"s\">\"center\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://github.com/[user]/[repository]/releases/\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now it's time to get serious: we're finally going to add our badge !<br>\nGo to <a href=\"https://shields.io\">Shields.io</a>, and click on : \"GitHub release (latest by date)\" as shown in the following illustration:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KT40S8PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nb72oxe2bwml10ud92j.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--KT40S8PE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2nb72oxe2bwml10ud92j.PNG\" alt=\"Latest release on github\"></a></p>\n\n<p>You now arrive at this window, where you fill in various information such as your username, and the name of your repository. For the style, I advise you to use the <code>for-the-badge</code>, even if it is quite subjective.  In the input \"override label\" you can specify the label of the badge, whereas in the \"override color\" you can specify a colour.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Jf_Jws7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s09j60ht9m2daqjk0k2.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Jf_Jws7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s09j60ht9m2daqjk0k2.PNG\" alt=\"Window\"></a></p>\n\n<p>If you want to add a logo, it is quite possible and this is what we will see now. Open a new tab and go to <a href=\"https://simpleicons.org\">Simple Icons.org</a> to search for a logo you like. In my case, I will choose the DocuSign logo :</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ek8WddUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qv3q64iugjor9xvqkky.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ek8WddUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qv3q64iugjor9xvqkky.PNG\" alt=\"Logo Choice\"></a></p>\n\n<p>Go back to the shields.io tab, and the previously opened window. In the input named logo, enter the name of your logo, in my case : DocuSign. <br>\nYou can also give your logo a colour in the input named \"override logo color\" :</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7LHOdW9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynvo2woqrmp6zumdi3qv.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--7LHOdW9B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynvo2woqrmp6zumdi3qv.PNG\" alt=\"Parameters\"></a></p>\n\n<p>Once this is done, you can click on : \"Copy badge url\", which will generate a url with the different parameters you have just entered.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FEwSEAoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulz0tbm4b20r51juj35m.PNG\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--FEwSEAoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulz0tbm4b20r51juj35m.PNG\" alt=\"Copy badge url\"></a></p>\n\n<p>Now let's go back to our README.md file, and the code we wrote earlier. In the first link of our paragraph, which is the release page, we will change the source of the image within it. As you may have guessed, we will paste the url previously copied thanks to the \"Copy badge url\" button.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;p</span> <span class=\"na\">align=</span><span class=\"s\">\"center\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://github.com/[user]/[repository]/releases/\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"Releases\"</span> <span class=\"na\">src=</span><span class=\"s\">\"https://img.shields.io/github/v/release/[user]/[repository]?label=release&amp;logo=DocuSign&amp;logoColor=%23fff&amp;style=for-the-badge\"</span> <span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n  <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"\"</span><span class=\"nt\">&gt;&lt;img</span> <span class=\"na\">alt=</span><span class=\"s\">\"\"</span> <span class=\"na\">src=</span><span class=\"s\">\"\"</span> <span class=\"nt\">/&gt;&lt;/a&gt;</span>\n<span class=\"nt\">&lt;/p&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Save your README.md file and you will see the release badge appear. If you create a new release, the badge will automatically update. You can also try with other badges such as the number of \"forks\", \"stars\", \"watchers\"...</p>\n\n<p>For my part, my badge looks like this : </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--avBaq99G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz6ide2c6un2155elk66.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--avBaq99G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jz6ide2c6un2155elk66.png\" alt=\"Latest Releases\"></a></p>\n\n<p>I hope this tutorial has allowed you to add your own shields on GitHub, or at least to have discovered how to use them, if you have any questions, don't hesitate to ask me in the comments, or even to share a repository in which you have added badges. 👍</p>\n\n"
        ],
        "category": [
            "github",
            "beginners",
            "productivity",
            "tutorial"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Issue #464"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/NTFE5B09GVo/"
        ],
        "pubDate": [
            "Wed, 30 Jun 2021 19:54:09 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-464/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to use CSS Paint API, how optical sizing works in variable fonts, how to use @supports rules to target major rendering engines, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Drawing Graphics with the CSS Paint API</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/drawing-graphics-with-the-css-paint-api.jpg\" alt=\"Drawing Graphics with the CSS Paint API\" /></a>\n\t\t\t\t\t\t<p>Georgi Nikolov shares a practical introduction to the CSS Paint API with hands-on examples.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://pixelambacht.nl/2021/optical-size-hidden-superpower/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Optical Size, the Hidden Superpower of Variable Fonts</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://pixelambacht.nl/2021/optical-size-hidden-superpower/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/optical-size-hidden-superpower1.jpg\" alt=\"Optical Size, the Hidden Superpower of Variable Fonts\" /></a>\n\t\t\t\t\t\t<p>Roel Nieskens explains how variable font letters actually change the way they look when shown in small or large sizes.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://pixelambacht.nl/2021/optical-size-hidden-superpower/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/debugging-css-30062021?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Master the Skill of Debugging CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/debugging-css-30062021?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/02/debugging-css.jpg\" alt=\"Master the Skill of Debugging CSS\" /></a>\n\t\t\t\t\t\t<p>Ahmad Shadeed wrote a book full of tips and techniques on how to debug CSS, which will help you significantly reduce the time you spend on debugging and fixing CSS bugs.</p>\n<p>Use the coupon code “<strong>cssweekly</strong>” at checkout to get a 15% discount.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/debugging-css-30062021?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Buy now</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.bram.us/2021/06/23/css-at-supports-rules-to-target-only-firefox-safari-chromium/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS @supports Rules To Target Only Firefox / Safari / Chromium</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Bramus Van Damme demonstrates how to create <code>@supports</code> rules to target the three major rendering engines.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.bram.us/2021/06/23/css-at-supports-rules-to-target-only-firefox-safari-chromium/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Using Performant Next-Gen Images in CSS with image-set</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ollie Williams explores what we can and can’t do today with <code>image-set()</code>.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://letsbuildui.dev/articles/a-3d-hover-effect-using-css-transforms?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">A 3D Hover Effect Using CSS Transforms</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ryan Finni demonstrates how to create an effective hover interaction with JavaScript and CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://letsbuildui.dev/articles/a-3d-hover-effect-using-css-transforms?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/positioning-overlay-content-with-css-grid/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Positioning Overlay Content with CSS Grid</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ryan Mulligan shares how to position overlay elements using logical, readable properties and values.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/positioning-overlay-content-with-css-grid/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.scottohara.me/blog/2021/05/28/disabled-links.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Disabling a Link</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Scott O&#8217;Hara explores how to disable a hyperlink accessibly.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.scottohara.me/blog/2021/05/28/disabled-links.html?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/polypane2\">Polypane — Build Responsive, Accessible Websites Easier & Faster</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/polypane2\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/build-responsive-and-accessible-websites-5x-faster.jpg\" alt=\"Polypane — Build Responsive, Accessible Websites Easier & Faster\" /></a>\n\t\t\t\t\t\t<p>Polypane is a standalone browser to guide your web development workflow every step of the way with built-in tools for responsive design, accessibility, meta information, and so much more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/polypane2\">Try Polypane for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://chrome.google.com/webstore/detail/css-stacking-context-insp/apjeljpachdcjkgnamgppgfkmddadcki?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Stacking Context inspector</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>A Chrome DevTools extension that will help you inspect the CSS stacking contexts.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://chrome.google.com/webstore/detail/css-stacking-context-insp/apjeljpachdcjkgnamgppgfkmddadcki?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.lightgalleryjs.com/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">lightGallery</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>A lightweight, modular, JavaScript image and video lightbox gallery plugin available for React, Vue, Angular, and TypeScript.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.lightgalleryjs.com/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/tiffachoo/pen/VwpVyJN?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Rage</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/tiffachoo/pen/VwpVyJN?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/06/css-rage.png\" alt=\"CSS Rage\" /></a>\n\t\t\t\t\t\t<p>Tiffany Choong created an impressive illustration of Retsuko from Aggretsuko using only CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/tiffachoo/pen/VwpVyJN?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/NTFE5B09GVo\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-464/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "Working around the viewport-based fluid typography bug in Safari"
        ],
        "link": [
            "https://www.sarasoueidan.com/blog/safari-fluid-typography-bug-fix/"
        ],
        "comments": [
            "https://css-tricks.com/working-around-the-viewport-based-fluid-typography-bug-in-safari/#respond"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Mon, 28 Jun 2021 21:17:26 +0000"
        ],
        "category": [
            "Link",
            "fluid type",
            "typography"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343139",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>Sara digs into a bug I <a href=\"https://css-tricks.com/viewport-sized-typography/#bugs\">happened to have mentioned</a> back in 2012 where fluid type didn&#8217;t resize when the browser window resized. Back then, it affected Chrome 20 and Safari 6, but the bug still persists today in Safari &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/working-around-the-viewport-based-fluid-typography-bug-in-safari/\">Working around the viewport-based fluid typography bug in Safari</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>Sara digs into a bug I <a href=\"https://css-tricks.com/viewport-sized-typography/#bugs\">happened to have mentioned</a> back in 2012 where fluid type didn&#8217;t resize when the browser window resized. Back then, it affected Chrome 20 and Safari 6, but the bug still persists today in Safari when a <code>calc()</code> involves viewport units. </p>\n\n\n\n<p>Sara credits Martin Auswöger for a super weird and <a href=\"https://codepen.io/SaraSoueidan/pen/QWdxMdy\">clever trick</a> using <code>-webkit-marquee-increment: 0vw;</code> (here&#8217;s the <a href=\"https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266--webkit-marquee-increment\">documentation</a>) to force Safari into the correct behavior. I&#8217;ll make a screencast just to document it:</p>\n\n\n\n<span id=\"more-343139\"></span>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-08.06.19.mp4\" playsinline></video></figure>\n\n\n\n<p>I randomly happened to have Safari Technology Preview open, which at the moment is Safari 15, and I see the bug is fixed. So I wouldn&#8217;t rush out the door to implement this. </p>\n<p><a href=\"https://www.sarasoueidan.com/blog/safari-fluid-typography-bug-fix/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/working-around-the-viewport-based-fluid-typography-bug-in-safari/\">Permalink</a></p><hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/working-around-the-viewport-based-fluid-typography-bug-in-safari/\">Working around the viewport-based fluid typography bug in Safari</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/working-around-the-viewport-based-fluid-typography-bug-in-safari/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "343139",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "How to Make Your Site Faster with the Performance API"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/performance-api-faster-websites-apps/?utm_source=rss\"\n              title=\"How to Make Your Site Faster with the Performance API\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620816379performance-api.png\"\n        alt=\"How to Make Your Site Faster with the Performance API\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620816379performance-api-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620816379performance-api.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This tutorial explains how to use the Performance API to record DevTool-like statistics from real users accessing your application.</strong></p>\n<p>Assessing web application performance using browser DevTools is useful, but it&#8217;s not easy to replicate real-world usage. People in different locations using different devices, browsers, and networks will all have differing experiences.</p>\n<h2 id=\"anintroductiontotheperformanceapi\">An Introduction to the Performance API</h2>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/API/Performance_API\">Performance API</a> uses a buffer to record DevTool-like metrics in object properties at certain points in the lifetime of your web page. Those points include:</p>\n<ol>\n<li><a href=\"#pagenavigationtiming\">Page navigation</a>: record page load redirects, connections, handshakes, DOM events, and more.</li>\n<li><a href=\"#pageresourcetiming\">Resource loading</a>: record asset loading such as images, CSS, scripts, and Ajax calls.</li>\n<li><a href=\"#browserpainttiming\">Paint metrics</a>: record browser rendering information.</li>\n<li><a href=\"#usertiming\">Custom performance</a>: record arbitrary application processing times to find slow functions.</li>\n</ol>\n<p>All the APIs are available in client-side JavaScript, including <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a>. You can detect API support using:</p>\n<pre><code class=\"javascript language-javascript\">if ('performance' in window) {\r\n\r\n  // call Performance APIs\r\n\r\n}\r\n</code></pre>\n<p><em>Note: be aware that Safari doesn&#8217;t support all methods, despite implementing most of the API.</em></p>\n<p>The custom (user) performance APIs are also replicated in:</p>\n<ul>\n<li>the Node.js built-in <a href=\"https://nodejs.org/dist/latest/docs/api/perf_hooks.html\"><code>performance_hook</code> module</a>, and</li>\n<li>the Deno <a href=\"https://doc.deno.land/builtin/stable#Performance\">performance API</a> (scripts using it must be run with the <code>--allow-hrtime</code> permission).</li>\n</ul>\n<h2 id=\"isntdategoodenough\">Isn&#8217;t <code>Date()</code> Good Enough?</h2>\n<p>You may have seen examples using the <code>Date()</code> function to record elapsed times. For example:</p>\n<pre><code class=\"javascript language-javascript\">const start = new Date();\r\n\r\n// ... run code ...\r\n\r\nconst elapsed = new Date() - start;\r\n</code></pre>\n<p>However, <code>Date()</code> calculations are limited to the closest millisecond and based on the system time, which can be updated by the OS at any point.</p>\n<p>The Performance API uses a separate, higher-resolution timer that can record in fractions of a millisecond. It also offers metrics that would be impossible to record otherwise, such as redirect and DNS lookup timings.</p>\n<h2 id=\"recordingperformancemetrics\">Recording Performance Metrics</h2>\n<p>Calculating performance metrics in client-side code is useful if you can record it somewhere. You can send statistics to your server for analysis using Ajax <a href=\"https://developer.mozilla.org/docs/Web/API/Fetch_API\">Fetch</a> / <a href=\"https://developer.mozilla.org/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> requests or the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Beacon_API\">Beacon API</a>.</p>\n<p>Alternatively, most analytic systems offer custom event-like APIs to record timings. For example, the Google Analytics <a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings\">User Timings API</a> can record the time to <code>DOMContentLoaded</code> by passing a category (<code>'pageload'</code>), variable name (<code>\"DOMready\"</code>), and a value:</p>\n<pre><code class=\"javascript language-javascript\">const pageload = performance.getEntriesByType( 'navigation' )[0];\r\n\r\nga('send', 'timing', 'pageload', 'DOMready', pageload.domContentLoadedEventStart);\r\n</code></pre>\n<p>This example uses the Page Navigation Timing API. so let&#8217;s start there &hellip;</p>\n<h2 id=\"pagenavigationtiming\">Page Navigation Timing</h2>\n<p>Testing your site on a fast connection is unlikely to be indicative of user experience. The browser DevTools <strong>Network</strong> tab allows you to throttle speeds, but it can&#8217;t emulate poor or intermittent 3G signals.</p>\n<p>The Navigation Timing API pushes a single <a href=\"https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming\"><code>PerformanceNavigationTiming</code></a> object to the performance buffer. It contains information about redirects, load times, file sizes, DOM events, and so on, observed by a real user.</p>\n<p>Access the object by running:</p>\n<pre><code class=\"javascript language-javascript\">const pagePerf = performance.getEntriesByType( 'navigation' );\r\n</code></pre>\n<p>Or access it by passing the page URL (<code>window.location</code>) to the <a href=\"https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName\"><code>getEntriesByName() method</code></a>:</p>\n<pre><code class=\"javascript language-javascript\">const pagePerf = performance.getEntriesByName( window.location );\r\n</code></pre>\n<p>Both return an array with a single element containing an object with read-only properties. For example:</p>\n<pre><code class=\"javascript language-javascript\">[\r\n  {\r\n    name: \"https://site.com/\",\r\n    initiatorType: \"navigation\",\r\n    entryType: \"navigation\",\r\n    initiatorType: \"navigation\",\r\n    type: \"navigate\",\r\n    nextHopProtocol: \"h2\",\r\n    startTime: 0\r\n    ...\r\n  }\r\n]\r\n</code></pre>\n<p>The object includes <strong>resource identification properties</strong>:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right;\">property</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right;\"><strong>name</strong></td>\n<td>the resource URL</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>entryType</strong></td>\n<td>performance type — <code>\"navigation\"</code> for a page, <code>\"resource\"</code> for an asset</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>initiatorType</strong></td>\n<td>resource which initiated the download — <code>\"navigation\"</code> for a page</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>nextHopProtocol</strong></td>\n<td>network protocol</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>serverTiming</strong></td>\n<td>array of <a href=\"https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming\">PerformanceServerTiming</a> objects</td>\n</tr>\n</tbody>\n</table>\n<p><em>Note: performanceServerTiming <code>name</code>, <code>description</code>, and <code>duration</code> metrics are written to the HTTP <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Server-Timing\"><code>Server-Timing</code> header</a> by the server response.</em></p>\n<p>The object includes <strong>resource timing properties</strong> in milliseconds relative to the start of the page load. Timings would normally be expected in this order:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right;\">property</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right;\"><strong>startTime</strong></td>\n<td>timestamp when fetch started &#8212; <code>0</code> for a page</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>workerStart</strong></td>\n<td>timestamp before starting the Service Worker</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>redirectStart</strong></td>\n<td>timestamp of the first redirect</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>redirectEnd</strong></td>\n<td>timestamp after receiving the last byte of the last redirect</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>fetchStart</strong></td>\n<td>timestamp before the resource fetch</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>domainLookupStart</strong></td>\n<td>timestamp before the DNS lookup</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>domainLookupEnd</strong></td>\n<td>timestamp after the DNS lookup</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>connectStart</strong></td>\n<td>timestamp before establishing a server connection</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>connectEnd</strong></td>\n<td>timestamp after establishing a server connection</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>secureConnectionStart</strong></td>\n<td>timestamp before the SSL handshake</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>requestStart</strong></td>\n<td>timestamp before the browser request</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>responseStart</strong></td>\n<td>timestamp when the browser receives the first byte of data</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>responseEnd</strong></td>\n<td>timestamp after receiving the last byte of data</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>duration</strong></td>\n<td>the time elapsed between <strong>startTime</strong> and <strong>responseEnd</strong></td>\n</tr>\n</tbody>\n</table>\n<p>The object includes <strong>download size properties</strong> in bytes:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right;\">property</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right;\"><strong>transferSize</strong></td>\n<td>the resource size, including the header and body</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>encodedBodySize</strong></td>\n<td>the resource body size before decompressing</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>decodedBodySize</strong></td>\n<td>the resource body size after decompressing</td>\n</tr>\n</tbody>\n</table>\n<p>Finally, the object includes further <strong>navigation and DOM event properties</strong> (not available in Safari):</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right;\">property</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right;\"><strong>type</strong></td>\n<td>either <code>\"navigate\"</code>, <code>\"reload\"</code>, <code>\"back_forward\"</code> or <code>\"prerender\"</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>redirectCount</strong></td>\n<td>number of redirects</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>unloadEventStart</strong></td>\n<td>timestamp before the <code>unload</code> event of the previous document</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>unloadEventEnd</strong></td>\n<td>timestamp after the <code>unload</code> event of the previous document</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>domInteractive</strong></td>\n<td>timestamp when HTML parsing and DOM construction is complete</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>domContentLoadedEventStart</strong></td>\n<td>timestamp before running <code>DOMContentLoaded</code> event handlers</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>domContentLoadedEventEnd</strong></td>\n<td>timestamp after running <code>DOMContentLoaded</code> event handlers</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>domComplete</strong></td>\n<td>timestamp when DOM construction and <code>DOMContentLoaded</code> events have completed</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>loadEventStart</strong></td>\n<td>timestamp before the page <code>load</code> event has fired</td>\n</tr>\n<tr>\n<td style=\"text-align:right;\"><strong>loadEventEnd</strong></td>\n<td>timestamp after the page <code>load</code> event. All assets are downloaded</td>\n</tr>\n</tbody>\n</table>\n<p>Example to record page loading metrics after the page has fully loaded:</p>\n<pre><code class=\"javascript language-javascript\">'performance' in window &amp;&amp; window.addEventListener('load', () =&gt; {\r\n\r\n  const\r\n    pagePerf        = performance.getEntriesByName( window.location )[0],\r\n    pageDownload    = pagePerf.duration,\r\n    pageDomComplete = pagePerf.domComplete;\r\n\r\n});\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/performance-api-faster-websites-apps/?utm_source=rss\">How to Make Your Site Faster with the Performance API</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/performance-api-faster-websites-apps/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=183309",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Tue, 11 May 2021 18:30:56 GMT"
        ],
        "metaDesc": [
            "The Performance API offers a way to measure website and app speed. Learn how to use it on actual devices used by real people in different locations."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Neo4j GraphQL Library"
        ],
        "author": [
            "Tomek Poniatowicz"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:57:00 +0000"
        ],
        "link": [
            "https://dev.to/graphqleditor/neo4j-graphql-library-3c96"
        ],
        "guid": [
            "https://dev.to/graphqleditor/neo4j-graphql-library-3c96"
        ],
        "description": [
            "<p>A booming market has created the demand for reducing the time to market of software products to a minimum. The current trend is pushing app development more and more towards versatility and speed to market, which has caused tools like GraphQL to gain prominence and as more and more people get into GraphQL they in turn look for tools that make it easier to use for them. If you’re thinking about working with GraphQL the first thing that comes to mind is obviously the schema and wouldn't you know it, there’s a little something that can help you working on that.</p>\n\n<h2>\n  <a href=\"#graph-plus-graph\">\n  </a>\n  Graph plus graph\n</h2>\n\n<p>Enter <a href=\"https://neo4j.com/product/graphql-library/\">Neo4j</a>, a graph database management system. Honestly even going by that, combining GraphQL with a graph database sounds like a no brainer but there’s a bit more to it than that. Since GraphQL treats app data as a graph, a graph backend like Neo4j fits it like a glove. Neo4j is written in Java but is very versatile and translates data from sources written in other languages into Cypher queries which makes it perfect for GraphQL and its SDL (Schema Definition Language) The connection isn't something that happened by chance as Neo4j has been involved with GraphQL for years and has supported the GRAND stack for quite a while as well. Let’s look at the key features of the database itself: </p>\n\n<ul>\n<li><p><strong>easy to learn and versatile query language</strong>: Cypher is a powerful, declarative query language inspired by SQL which uses ASCII-Art syntax to make querying graph data easy to read, learn and use for everyone.</p></li>\n<li><p><strong>ACID compliance</strong>: atomicity, consistency, isolation and durability, basically a set of properties which make sure the data is valid despite errors, power cuts, and other problems.</p></li>\n<li><p><strong>performance and adjustability</strong>: graph databases in general provide great performance especially for more complex queries and a ton of flexibility due to the graph data model being ‘whiteboard-friendly’ and the graph query model being very intuitive and transparent.</p></li>\n</ul>\n\n<h2>\n  <a href=\"#equals-neo4j-graphql-library\">\n  </a>\n  Equals Neo4j GraphQL Library\n</h2>\n\n<p>In April Neo4j released the Neo4j GraphQL Library, a tool which makes using the two even easier and more beneficial. It's designed to be a low code library aimed at fully utilising the power of connected data in API development. It basically acts as an intermediary between your GraphQL client and the Neo4j database making sure everything works smoothly between frontend and backend development. In more technical terms because GraphQL uses a schema and type safe SDL the library is written in TypeScript and takes a schema-first approach as well minimizing the amount of backend code needed. Let’s look at what it does for you:</p>\n\n<ul>\n<li><p>GraphQL queries are translated into a single Cypher query, this solves the n+1 query problem and makes sure there are no unnecessary database calls.</p></li>\n<li><p>Generates Cypher code from GraphQL, GraphQL CRUD API from type definitions, auto-generated resolvers, and allows custom logic with its cypher schema directive.</p></li>\n<li><p>Provides strong authorization to secure your GraphQL API, nested mutations and Object-Graph-Mapper</p></li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tJQq_kRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw1g54ycgw16vhblzx5f.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tJQq_kRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uw1g54ycgw16vhblzx5f.png\" alt=\"Neo4j GraphQL Library\"></a></p>\n\n<h5>\n  <a href=\"#source-neo4jcom\">\n  </a>\n  Source: <a href=\"https://neo4j.com/product/graphql-library/\">neo4j.com</a>\n</h5>\n\n<h2>\n  <a href=\"#and-maybe-even-add-on-something-else\">\n  </a>\n  And maybe even add on something else\n</h2>\n\n<p>All in all the library does exactly what it promises and if you’re already using GraphQL that's a good enough reason to check it out. The benefits of using Neo4j are pretty apparent in and of itself and, as mentioned before, it just fits GraphQL perfectly. You can also use it along with some of the popular frameworks like React, Vue, Angular and others to get even more out of it, but we'll take a look at that next time when we check out the GRAND stack.</p>\n\n\n\n\n<p><em>A guest blog post for <a href=\"https://blog.graphqleditor.com/\">GraphQL Editor blog</a> by Michał Tyszkiewicz</em></p>\n\n\n\n\n<h2>\n  <a href=\"#speed-up-your-graphql-api-development\">\n  </a>\n  Speed up your GraphQL API development\n</h2>\n\n<p><strong>GraphQL Editor</strong> is a supportive tool for both advanced GraphQL users as well as those taking their first steps with GraphQL APIs. Our all-in-one development environment for GraphQL will help you build, manage &amp; deploy your GraphQL API much faster. <strong><a href=\"https://graphqleditor.com\">Try GraphQL Editor for free!</a></strong></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Xh8ZaRkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hz2iv2u1073dy9orexxf.gif\" alt=\"New features of GraphQL Editor gif\"></a></p>\n\n"
        ],
        "category": [
            "graphql",
            "webdev",
            "java"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "The Best Markdown Editor for Linux"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/the-best-markdown-editor-for-linux/?utm_source=rss\"\n              title=\"The Best Markdown Editor for Linux\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2017/08/1623286746linux-markdown-editors.png\"\n        alt=\"The Best Markdown Editor for Linux\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2017/08/1623286746linux-markdown-editors-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2017/08/1623286746linux-markdown-editors.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Using Markdown syntax is my preferred way of writing. I use it to create content for the Web and to jot down simple notes. It’s a simple, minimalistic method of writing formatted text that works well and doesn’t lock you into a proprietary system. That sits well with the Linux philosophy.</strong></p>\n<p>And it’s catching on. Since John Gruber created it in 2004, it has become increasingly used online and in apps of various types. It’s worth learning. You’ll find the syntax on Gruber’s <a href=\"https://daringfireball.net/projects/markdown/syntax\">Daring Fireball</a> blog and our <a href=\"https://www.sitepoint.com/grab-our-free-printable-markdown-cheat-sheet/\">free printable Markdown cheat sheet</a>.</p>\n<p>There are plenty of Markdown editors for <a href=\"https://www.sitepoint.com/the-best-markdown-editors-for-mac/\">Mac</a> and <a href=\"https://www.sitepoint.com/best-markdown-editors-windows/\">Windows</a>. What’s available for Linux? I’ll list your main <abbr title=\"free and open-source software\">FOSS</abbr> and non-FOSS options below and make some recommendations at the end.</p>\n<p>Let’s get into it.</p>\n<h2 id=\"13texteditorswithmarkdownsupport\">13 Text Editors with Markdown Support</h2>\n<p>You can use your favorite Linux text editor to write Markdown. You might find that it has native support for Markdown, or that a Markdown extension or plugin is available. Here are some examples:</p>\n<ol>\n<li><a href=\"http://www.vim.org/\">Vim</a> has the <a href=\"https://github.com/plasticboy/vim-markdown\">vim-markdown</a> and  <a href=\"https://github.com/suan/vim-instant-markdown\">vim-instant-markdown</a> plugins that feature syntax highlighting and folding.</li>\n<li><a href=\"https://www.gnu.org/software/emacs/\">GNU Emacs</a> has a <a href=\"http://jblevins.org/projects/markdown-mode/\">Markdown Mode for Emacs</a> package that includes shortcut keys and syntax highlighting.</li>\n<li><a href=\"https://www.spacemacs.org/\">Spacemacs</a> has a <a href=\"https://www.spacemacs.org/layers/+lang/markdown/README.html\">Markdown layer</a> to add Markdown support.</li>\n<li><a href=\"http://bluefish.openoffice.nl/index.html\">Bluefish</a> includes syntax highlighting for Markdown files.</li>\n<li><a href=\"https://eclipse.org/\">Eclipse</a> has the <a href=\"https://marketplace.eclipse.org/content/markdown-text-editor\">Markdown Text Editor</a> plugin which includes a document outline, folded sections, preview, export to HTML, task tags, word wrap, and paragraph formatting.</li>\n<li><a href=\"https://wiki.gnome.org/Apps/Gedit\">Gedit</a> includes syntax highlighting for Markdown files.</li>\n<li><a href=\"https://www.geany.org/\">Geany</a> offers the <a href=\"https://plugins.geany.org/markdown.html\">Markdown</a> plugin with preview and syntax highlighting.</li>\n<li><a href=\"https://kate-editor.org/\">Kate</a>, the KDE text editor, supports Markdown syntax highlighting.</li>\n<li><a href=\"https://atom.io/\">Atom</a> supports Markdown out of the box, with features like syntax highlighting and preview. This functionality can be expanded by several community-generated packages, including <a href=\"https://atom.io/packages/markdown-writer\">Markdown-Writer</a>, <a href=\"https://atom.io/packages/markdown-scroll-sync\">Markdown-Scroll-Sync</a>, and <a href=\"https://atom.io/packages/markdown-format\">Markdown-Format</a>.</li>\n<li><a href=\"https://notepad-plus-plus.org/\">Notepad++</a> allows you to add Markdown support using the <a href=\"https://github.com/nea/MarkdownViewerPlusPlus\">MarkdownViewer++</a> plugin.</li>\n<li><a href=\"https://www.sublimetext.com/\">Sublime Text 3</a> (not FOSS) can be turned into a full-featured Markdown editor. <a href=\"https://www.sitepoint.com/sublime-text-perfect-blogging-6-ways/\">We show you how here</a>.</li>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> (not FOSS) offers a number of <a href=\"https://code.visualstudio.com/docs/languages/markdown\">Markdown extensions</a>. These allow you to preview and compile Markdown files and offer an outline view that folds headers.</li>\n<li><a href=\"https://vscodium.com\">VSCodium</a> is an open source version of Visual Studio Code without the telemetry and tracking.</li>\n</ol>\n<h2 id=\"10filebasedmarkdowneditors\">10 File-based Markdown Editors</h2>\n<p>Many Markdown editors work like text editors and IDEs, allowing you to write or edit individual files. These provide additional useful features you won’t find in most text editors, including:</p>\n<ul>\n<li>syntax highlighting and a preview pane</li>\n<li>keyboard shortcuts</li>\n<li>export/convert Markdown into HTML, PDF, ODT and more</li>\n<li>a distraction-free writing environment</li>\n<li>word count, document statistics, and spell check</li>\n<li>advanced formatting, including tables and mathematical expressions.</li>\n</ul>\n<h3 id=\"1apostrophe\">1. Apostrophe</h3>\n<p><a href=\"https://somas.pages.gitlab.gnome.org/apostrophe/\">Apostrophe</a> is a distraction-free Markdown editor with an elegant and minimalistic interface. It’s a fork of <a href=\"https://itsfoss.com/uberwriter/\">UberWriter</a> by the original developers, an app that was inspired by iA Writer.</p>\n<ul>\n<li>License: GPLv3</li>\n<li>Toolkit: GTK+</li>\n<li>Last updated: 2021</li>\n<li>Other platforms: n/a</li>\n</ul>\n<blockquote>\n<p>A distraction free Markdown editor for GNU/Linux made with GTK+</p>\n</blockquote>\n<p><strong>How to install:</strong> The official website includes instructions on how to build Apostrophe using GNOME Builder, Git, and Flatpak.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620195996markdownlinux-apostrophe.png\" alt=\"Apostrophe Markdown editor screenshot\" /></p>\n<h3 id=\"2marktext\">2. Mark Text</h3>\n<p><img src=\"https://flat.badgen.net/github/release/marktext/marktext\" /><img src=\"https://flat.badgen.net/github/last-commit/marktext/marktext\" /><img src=\"https://flat.badgen.net/github/stars/marktext/marktext\" /></p>\n<p><a href=\"https://marktext.app\">Mark Text</a> is a simple and elegant Markdown editor written to meet the author’s own writing needs and is based on the Electron Framework. Extensions support math expressions (KaTeX), front matter, and emojis, and you can export to HTML and PDF files. Various light and dark themes are available.</p>\n<ul>\n<li>License: MIT</li>\n<li>Framework: Electron</li>\n<li>Last updated: 2021</li>\n<li>Other platforms: macOS, Windows</li>\n</ul>\n<blockquote>\n<p>Next generation Markdown editor. A simple and elegant open-source Markdown editor that&#8217;s focused on speed and usability.</p>\n</blockquote>\n<p><strong>How to install:</strong> The app’s <a href=\"https://github.com/marktext/marktext/blob/develop/docs/LINUX.md\">Linux Installation Instructions</a> page outlines how to install Mark Text via an AppImage, Flatpak, and Tarball.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620196013markdownlinux-marktext.png\" alt=\"Mark Text Markdown editor screenshot\" /></p>\n<h3 id=\"3retext\">3. ReText</h3>\n<p><img src=\"https://flat.badgen.net/github/release/retext-project/retext\" /><img src=\"https://flat.badgen.net/github/last-commit/retext-project/retext\" /><img src=\"https://flat.badgen.net/github/stars/retext-project/retext\" /></p>\n<p><a href=\"https://github.com/retext-project/retext\">ReText</a> is a more powerful tool and able to edit both Markdown and reStructuredText. Multiple files can be opened in tabs, you can view rendered Markdown in a preview pane, and tags and symbols are available from the icon bar.</p>\n<ul>\n<li>License: GPL</li>\n<li>Language: Python</li>\n<li>Last updated: 2021</li>\n<li>Other platforms: n/a</li>\n</ul>\n<blockquote>\n<p>Simple but powerful editor for Markdown and reStructuredText.</p>\n</blockquote>\n<p>It includes syntax highlighting and a synchronized preview pane, and MathJax and Python-Markdown are supported. There’s a table editing mode, and PDF, ODT, and HTML export.</p>\n<p><strong>How to install:</strong> ReText is included in the Debian and Ubuntu software repositories and requires that Python 3.6 or later be first installed. Full instructions are found on the official website.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/08/1503279175retext-1024x596.jpg\" alt=\"Retext Markdown editor screenshot\" /></p>\n<h3 id=\"4ghostwriter\">4. Ghostwriter</h3>\n<p><img src=\"https://flat.badgen.net/github/release/wereturtle/ghostwriter\" /><img src=\"https://flat.badgen.net/github/last-commit/wereturtle/ghostwriter\" /><img src=\"https://flat.badgen.net/github/stars/wereturtle/ghostwriter\" /></p>\n<p><a href=\"https://wereturtle.github.io/ghostwriter/\">Ghostwriter</a> has a range of distraction-free features, including full-screen mode, a clean interface, and a dark theme. Focus Mode highlights the text around the cursor and fades the rest, and Hemingway Mode disables the backspace and delete keys, forcing you to write rather than edit.</p>\n<ul>\n<li>License: GPLv3</li>\n<li>Toolkit: QT</li>\n<li>Last updated: 2021</li>\n<li>Other platforms: Windows</li>\n</ul>\n<blockquote>\n<p>A distraction-free Markdown editor for Windows and Linux. Stylish. Open source. Free.</p>\n</blockquote>\n<p>Other features include built-in themes, live preview, and drag-and-drop images. There&#8217;s also an Outline HUD that gives you an overview of your document, and plenty of statistics, including word count. You can export your document to HTML and a variety of other formats.</p>\n<p><strong>How to install:</strong> You&#8217;ll find instructions on how to install GhostWriter on Ubuntu and its derivatives, Fedora, and OpenSUSE on <a href=\"https://github.com/wereturtle/ghostwriter/\">GitHub</a>.</p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2017/08/1503279301ghostwriter-1024x712.jpg\" alt=\"Ghostwriter Markdown editor screenshot\" /></p>\n<h3 id=\"5marker\">5. Marker</h3>\n<p><img src=\"https://flat.badgen.net/github/release/fabiocolacio/Marker\" /><img src=\"https://flat.badgen.net/github/last-commit/fabiocolacio/Marker\" /><img src=\"https://flat.badgen.net/github/stars/fabiocolacio/Marker\" /></p>\n<p><a href=\"https://github.com/fabiocolacio/Marker\">Marker</a> is a basic Markdown editor with syntax highlighting and a preview pane. It includes support for KaTeX and MathJax math notation, <a href=\"https://mermaid-js.github.io/mermaid/\">Mermaid</a> diagrams, and <a href=\"https://github.com/Mandarancio/charter/\">Charter</a> graphs.</p>\n<ul>\n<li>License: GPLv3</li>\n<li>Toolkit: GTK+</li>\n<li>Last updated: 2021</li>\n<li>Other platforms: n/a</li>\n</ul>\n<blockquote>\n<p>Marker is a Markdown editor for Linux made with GTK+-3.0</p>\n</blockquote>\n<p><strong>How to install:</strong> You’ll find packages for Fedora, Flathub, and Arch Linux on <a href=\"https://github.com/fabiocolacio/Marker\">GitHub</a> along with a list of dependencies.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620196011markdownlinux-marker.png\" alt=\"Marker Markdown editor screenshot\" /></p>\n<h3 id=\"6keenwrite\">6. KeenWrite</h3>\n<p><img src=\"https://flat.badgen.net/github/release/DaveJarvis/keenwrite\" /><img src=\"https://flat.badgen.net/github/last-commit/DaveJarvis/keenwrite\" /><img src=\"https://flat.badgen.net/github/stars/DaveJarvis/keenwrite\" /></p>\n<p><a href=\"https://github.com/DaveJarvis/keenwrite\">KeenWrite</a> is a highly technical Markdown editor written in Java. It offers user-defined interpolated strings, auto-complete variable names, and real-time spell check. Diagrams can include variables and TeX math equations can be created. Documents can be opened in tabs and a document outline can be opened in a separate pane.</p>\n<ul>\n<li>License: BSD</li>\n<li>Framework: Java</li>\n<li>Last updated: 2021</li>\n<li>Other platforms: Windows</li>\n</ul>\n<blockquote>\n<p>Java-based desktop text editor with live preview, string interpolation, and formulas</p>\n</blockquote>\n<p><em>Note: KeenWrite is based on the no-longer maintained Markdown-Writer-FX.</em></p>\n<p><strong>How to install:</strong> KeenWrite is a Java app, and instructions for installing it on Linux are available on the official website.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1620196009markdownlinux-keenwrite.png\" alt=\"KeenWrite Markdown editor screenshot\" /></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/the-best-markdown-editor-for-linux/?utm_source=rss\">The Best Markdown Editor for Linux</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/the-best-markdown-editor-for-linux/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=158831",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Adrian Try"
        ],
        "pubDate": [
            "Wed, 09 Jun 2021 16:00:36 GMT"
        ],
        "metaDesc": [
            "You want a Markdown editor, but you use Linux. Are you out of luck? Not at all! Explore our extensive list of Linux-friendly Markdown apps."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Import Data and Export Results in R"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/how-to-import-data-and-export-results-in-r/?utm_source=rss\"\n              title=\"How to Import Data and Export Results in R\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2017/01/1622009707import-export-big-data.png\"\n        alt=\"How to Import Data and Export Results in R\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2017/01/1622009707import-export-big-data-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2017/01/1622009707import-export-big-data.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>With the craze for &#8220;big&#8221; data, analytics tools have gained popularity. One of these tools is the programming language <a href=\"https://www.r-project.org/\">R</a>. In this guide, I&#8217;ll show how to extract data from text files, CSV files, and databases. Then I&#8217;ll show how to send that data to a web server.</strong></p>\n<p>You may be wondering, <strong>Do I need to learn a new language all over again?</strong> The answer is no! All you need to know is a few commands.</p>\n<p>Programmers from diverse backgrounds who work on web applications in a variety of programming languages can import the data into R and, after processing, export it in the format they require.</p>\n<p><em>Note: If you&#8217;re not familiar with R, I recommend SitePoint&#8217;s article on <a href=\"https://www.sitepoint.com/introduction-r-rstudio/\">how to install R and RStudio</a>. It provides basic commands in R and a general introduction to the language. This post covers commands that can be run on the R terminal without the use of the RStudio IDE. However, handling large datasets on a terminal could turn out to be difficult for beginners, so I&#8217;d suggest using RStudio for an enriched experience. In RStudio, you can run the same commands in the Console box.</em></p>\n<h2 id=\"handlingtextfiles\">Handling Text Files</h2>\n<p>A text file present on your local machine can be read using a slightly modified <code>read.table</code> command. Because it&#8217;s designed for reading tables, you can set the separator to an empty string (<code>\"\"</code>) to read a text file line by line:</p>\n<pre><code class=\"r language-r\">file_contents = read.table(\"&lt;path_to_file&gt;\", sep = \"\")\r\n</code></pre>\n<p><em>Note: where you see angled brackets such as in <code>&lt;path_to_file&gt;</code>, insert the necessary number, identifier, etc. without the brackets.</em></p>\n<p>The path to the file may also be the relative path to the file. If your rows have unequal length, you have to set <code>fill = TRUE</code> as well. The output of this command is a <a href=\"http://www.r-tutor.com/r-introduction/data-frame\">data frame in R</a>.</p>\n<p>If your file is too large to be read in one go, you can try reading it in steps using the <code>skip</code> and <code>nrow</code> options. For instance, to read the lines 6–10 in your file, run the following commands:</p>\n<pre><code class=\"r language-r\">connection &lt;- file(\"&lt;path_to_file&gt;\")\r\nlines6_10 = read.table(connection, skip=5, nrow=5) # 6-10 lines\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/how-to-import-data-and-export-results-in-r/?utm_source=rss\">How to Import Data and Export Results in R</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/how-to-import-data-and-export-results-in-r/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=147988",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Programming",
            "R",
            "Web"
        ],
        "dc:creator": [
            "Shaumik Daityari"
        ],
        "pubDate": [
            "Wed, 31 Mar 2021 05:16:18 GMT"
        ],
        "metaDesc": [
            "Big data analysis is huge these days. Learn how to extract data from text files, CSV files and databases, and send that data to a web server."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "7 Reasons to Use a Static Site Generator"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/7-reasons-use-static-site-generator/?utm_source=rss\"\n              title=\"7 Reasons to Use a Static Site Generator\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1619483568static-site-generators.jpg\"\n        alt=\"7 Reasons to Use a Static Site Generator\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2016/03/1619483568static-site-generators-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1619483568static-site-generators-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1619483568static-site-generators-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2016/03/1619483568static-site-generators.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Static site generators (SSGs) have become increasingly popular over the past decade. This article discusses how your site could benefit from the developer-friendly build processes, easier deployments, improved performance, and better security offered by a static site.</strong></p>\n<p>First, let&#8217;s establish what we mean by the term &#8220;static site generator&#8221; &hellip;</p>\n<h2 id=\"whatisastaticsite\">What is a Static Site?</h2>\n<p>Think back to the first website you built. Most developers start by creating a series of pages contained within individual HTML files. Each will call in assets such as images, CSS, and perhaps a sprinkling of JavaScript. You possibly launched these files directly from the file system without a web server. Life was simple.</p>\n<p>Difficulties arise as your site becomes larger and more complex. Consider navigation: it may be similar in every file, but adding a new page requires updates to every other. Even references to CSS and images can become awkward as folder structures evolve. You may have considered options such as server-side includes or PHP, but an easier option can be a content management system (CMS) &hellip;</p>\n<h2 id=\"whatisacontentmanagementsystem\">What is a Content Management System?</h2>\n<p>A CMS typically provides administrative control panels. These allow authors to write content that&#8217;s stored in a back-end database. When a visitor requests a URL, the CMS:</p>\n<ol>\n<li>determines which page is required</li>\n<li>requests appropriate content from the database</li>\n<li>loads an HTML template (normally from the file system)</li>\n<li>renders the content within the template, and</li>\n<li>returns a formatted HTML page to the visitor&#8217;s browser.</li>\n</ol>\n<p>This occurs almost instantly. The template can include code to generate menus according to the navigation hierarchy. Life is sweet, and more than four in ten people choose the PHP/MySQL-powered, open-source <a href=\"https://wordpress.org/\">WordPress</a> CMS to manage their website.</p>\n<p>Unfortunately, a CMS raises a different set of issues:</p>\n<ul>\n<li>You need to adhere to the CMS&#8217;s way of working. It can be awkward to add custom text or components.</li>\n<li>The server is doing more work, and performance can be affected.</li>\n<li>There are additional points of failure. A software upgrade or database failure can bring your site down.</li>\n</ul>\n<h2 id=\"whatisastaticsitegenerator\">What is a Static Site Generator?</h2>\n<p>An SSG is a compromise between using a hand-coded static site and a full CMS, while retaining the benefits of both. In essence, you generate a static HTML page-based website using CMS-like concepts such as templates. The content can be extracted from a database, Markdown files, an API, or any practical storage location.</p>\n<p>The site generation can occur on your development machine, staging server, or using a service to build when changes are pushed to the code repository. The resulting HTML files and other assets are then deployed to a live web server.</p>\n<p>The term &#8220;static&#8221; doesn&#8217;t mean &#8220;unchanging&#8221;. An SSG builds a page once, while a CMS builds it on each request. The end result is identical and users will never know the difference.</p>\n<p>A related concept is a &#8220;Headless&#8221; or &#8220;Decoupled&#8221; CMS. These use an interface such as WordPress to handle content administration but allow other systems to access the data via a <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST API</a>, or a <a href=\"https://en.wikipedia.org/wiki/GraphQL\">GraphQL API</a>. Therefore, an SSG such as Eleventy can <a href=\"https://www.sitepoint.com/wordpress-headless-cms-eleventy/\">build a static website using WordPress</a> page content extracted from an internal server. The resulting HTML files can be uploaded to a web server, but the WordPress installation need never be publicly accessible from outside the organization.</p>\n<p>The term <a href=\"https://www.sitepoint.com/learn-jamstack/\"><strong>Jamstack</strong></a> (JavaScript, APIs, and Markup) is also used in relation to static sites. It refers to the rise in frameworks, serverless functions, and associated tools which generate static files but allow more complex interactivity to be created.</p>\n<p>Popular static site generators include <a href=\"https://jekyllrb.com/\">Jekyll</a>, <a href=\"https://11ty.dev/\">Eleventy</a>, <a href=\"http://gatsbyjs.org/\">Gatsby</a>, <a href=\"http://gohugo.io/\">Hugo</a>, and <a href=\"http://www.metalsmith.io/\">Metalsmith</a>. SSGs are available for most languages (see <a href=\"http://www.staticgen.com/\">StaticGen</a> for many more). Frameworks such as <a href=\"https://nextjs.org/\">Next.js</a> statically render pages where possible, but also allow the developer to run server-side code when necessary.</p>\n<p>Let&#8217;s examine the benefits of using an SSG &hellip;</p>\n<h2 id=\"1flexibility\">1. Flexibility</h2>\n<p>CMSs normally constrain your options, because they&#8217;re tied to a database with specific fields. If you want to add a Twitter widget to some pages, you&#8217;ll normally require a plugin, a shortcode, or some custom functionality.</p>\n<p>In a static site, the widget can simply be inserted into a file directly or using a partial/snippet. There are few limits, because you&#8217;re unshackled by the those imposed by a CMS.</p>\n<h2 id=\"2betterperformance\">2. Better Performance</h2>\n<p>Most CMS applications offer built-in or plugin-powered caching systems to ensure pages are generated and reused when possible. This is effective, although the overhead of managing, validating, and re-generating cached pages remains.</p>\n<p>Static sites can create pre-cached pages which need never expire. Files can also be minified prior to deployment to guarantee the smallest load and easily deployed via global content delivery networks (CDNs). A static site will always perform better than a CMS-powered version using a similar template.</p>\n<h2 id=\"3fewerserversidedependencies\">3. Fewer Server-side Dependencies</h2>\n<p>A typical WordPress installation requires:</p>\n<ul>\n<li>a suitable operating system such as Ubuntu or CentOS</li>\n<li>a web server such as Apache or NGINX</li>\n<li>PHP with associated extensions and web server configurations</li>\n<li>MySQL</li>\n<li>the WordPress application</li>\n<li>any necessary plugins</li>\n<li>the theme/template code.</li>\n</ul>\n<p>These dependencies must be installed and managed. WordPress requires less effort than some other applications, but it&#8217;s still possible for a single update to cause chaos.</p>\n<p>A static site generator may require just as many dependencies, but they can run on a developer&#8217;s PC and are not deployed to a production server. An SSG generates client-side HTML files and associated assets which can be hosted on any web server. There&#8217;s nothing else to install, manage, or maintain.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/7-reasons-use-static-site-generator/?utm_source=rss\">7 Reasons to Use a Static Site Generator</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/7-reasons-use-static-site-generator/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=126687",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Content",
            "JavaScript",
            "Open Source",
            "Web",
            "WordPress"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Tue, 27 Apr 2021 16:00:22 GMT"
        ],
        "metaDesc": [
            "Is a CMS overkill for your next app? Could a static site generator improve performance, management and security? Learn about the benefits of using an SSG."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Create a 3D CSS Printer that Actually Prints!"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/3d-css-printer/?utm_source=rss\"\n              title=\"Create a 3D CSS Printer that Actually Prints!\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/16238299293d-css-printer.png\"\n        alt=\"Create a 3D CSS Printer that Actually Prints!\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/16238299293d-css-printer-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/16238299293d-css-printer.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>For a while now, I&#8217;ve been creating these 3D scenes with CSS for fun — usually on my <a href=\"https://twitch.tv/jh3yy\">live stream</a>.</strong></p>\n<p><!-- https://twitter.com/jh3yy/status/1375639377150410758 --></p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">3D CSS Responsive Stunt Plane! 🛩️</p>\n<p>It does loops and rolls! 😎</p>\n<p>Responds to mouse movement 🐭</p>\n<p>👉 <a href=\"https://t.co/A1zNmfEzzi\">https://t.co/A1zNmfEzzi</a> via <a href=\"https://twitter.com/CodePen?ref_src=twsrc%5Etfw\">@CodePen</a> <a href=\"https://t.co/87D7LIXLr2\">pic.twitter.com/87D7LIXLr2</a></p>\n<p>&mdash; Jhey 🐻🛠 (Exploring Opportunities ✨) (@jh3yy) <a href=\"https://twitter.com/jh3yy/status/1375639377150410758?ref_src=twsrc%5Etfw\">March 27, 2021</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><br />\n<!-- \n\n<p><a href=\"https://twitter.com/jh3yy/status/1375639377150410758\">https://twitter.com/jh3yy/status/1375639377150410758</a></p>\n\n --></p>\n<p>Each demo is an opportunity to try something different or work out ways to do things with CSS. One thing I often do is take suggestions for what we should try and make on the stream. A recent suggestion was a printer that prints in &#8220;3D&#8221;. And here&#8217;s what I put together!</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">📢 CSS Print Shop is open for business! 😅</p>\n<p>Free printing! 😮</p>\n<p>Input an image URL to see it printed out by the 3D CSS Printer 😁</p>\n<p>👉 <a href=\"https://t.co/UWTDAyUadn\">https://t.co/UWTDAyUadn</a> via <a href=\"https://twitter.com/CodePen?ref_src=twsrc%5Etfw\">@CodePen</a> <a href=\"https://t.co/z3q9dJavYv\">pic.twitter.com/z3q9dJavYv</a></p>\n<p>&mdash; Jhey 🐻🛠 (Exploring Opportunities ✨) (@jh3yy) <a href=\"https://twitter.com/jh3yy/status/1385237899126480901?ref_src=twsrc%5Etfw\">April 22, 2021</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><br />\n<!-- \n\n<p><a href=\"https://twitter.com/jh3yy/status/1385237899126480901\">https://twitter.com/jh3yy/status/1385237899126480901</a></p>\n\n --></p>\n<h2 id=\"makingthings3dwithcss\">Making Things 3D with CSS</h2>\n<p>I&#8217;ve written about <a href=\"https://css-tricks.com/css-in-3d-learning-to-think-in-cubes-instead-of-boxes/\">making things 3D with CSS before</a>. The general gist is that most scenes are a composition of cuboids.</p>\n<p>To make a cuboid, we can use CSS transforms to position the sides of a cuboid — the magic property being <code>transform-style</code>. Setting this to <code>preserve-3d</code> allows us to transform elements on the third dimension:</p>\n<pre><code class=\"css language-css\">* {\r\n  transform-style: preserve-3d;\r\n}\r\n</code></pre>\n<div style=\"position: relative; padding-bottom: 56.25%; overflow: hidden; margin: 32px 0;\">\n<iframe style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0;\" src=\"https://www.youtube.com/embed/63ZFh6T_iXc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><br />\n</iframe>\n</div>\n<p>Once you create a few of these scenes, you start picking up ways to speed things up. I like to use Pug as a HTML preprocessor. The mixin ability gives me a way to create cuboids faster. The markup examples in this article use Pug. But for each CodePen demo you can use the “View Compiled HTML” option to see the HTML output:</p>\n<pre><code class=\"pug language-pug\">mixin cuboid()\r\n  .cuboid(class!=attributes.class)\r\n    - let s = 0\r\n    while s &lt; 6\r\n      .cuboid__side\r\n      - s++\r\n</code></pre>\n<p>Using <code>+cuboid()(class=\"printer__top\")</code> will produce this:</p>\n<pre><code class=\"markup language-markup\">&lt;div class=\"cuboid printer__top\"&gt;\r\n  &lt;div class=\"cuboid__side\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"cuboid__side\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"cuboid__side\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"cuboid__side\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"cuboid__side\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"cuboid__side\"&gt;&lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Then I have a set block of CSS I use to lay out the cuboids. The joy here is that we can leverage CSS custom properties to define the properties of a cuboid (as shown in the video above):</p>\n<pre><code class=\"css language-css\">.cuboid {\r\n  // Defaults\r\n  --width: 15;\r\n  --height: 10;\r\n  --depth: 4;\r\n  height: calc(var(--depth) * 1vmin);\r\n  width: calc(var(--width) * 1vmin);\r\n  transform-style: preserve-3d;\r\n  position: absolute;\r\n  font-size: 1rem;\r\n  transform: translate3d(0, 0, 5vmin);\r\n}\r\n.cuboid &gt; div:nth-of-type(1) {\r\n  height: calc(var(--height) * 1vmin);\r\n  width: 100%;\r\n  transform-origin: 50% 50%;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%) rotateX(-90deg) translate3d(0, 0, calc((var(--depth) / 2) * 1vmin));\r\n}\r\n.cuboid &gt; div:nth-of-type(2) {\r\n  height: calc(var(--height) * 1vmin);\r\n  width: 100%;\r\n  transform-origin: 50% 50%;\r\n  transform: translate(-50%, -50%) rotateX(-90deg) rotateY(180deg) translate3d(0, 0, calc((var(--depth) / 2) * 1vmin));\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.cuboid &gt; div:nth-of-type(3) {\r\n  height: calc(var(--height) * 1vmin);\r\n  width: calc(var(--depth) * 1vmin);\r\n  transform: translate(-50%, -50%) rotateX(-90deg) rotateY(90deg) translate3d(0, 0, calc((var(--width) / 2) * 1vmin));\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.cuboid &gt; div:nth-of-type(4) {\r\n  height: calc(var(--height) * 1vmin);\r\n  width: calc(var(--depth) * 1vmin);\r\n  transform: translate(-50%, -50%) rotateX(-90deg) rotateY(-90deg) translate3d(0, 0, calc((var(--width) / 2) * 1vmin));\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.cuboid &gt; div:nth-of-type(5) {\r\n  height: calc(var(--depth) * 1vmin);\r\n  width: calc(var(--width) * 1vmin);\r\n  transform: translate(-50%, -50%) translate3d(0, 0, calc((var(--height) / 2) * 1vmin));\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n.cuboid &gt; div:nth-of-type(6) {\r\n  height: calc(var(--depth) * 1vmin);\r\n  width: calc(var(--width) * 1vmin);\r\n  transform: translate(-50%, -50%) translate3d(0, 0, calc((var(--height) / 2) * -1vmin)) rotateX(180deg);\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n</code></pre>\n<p>Using custom properties, we can control various characteristics of the cuboids, and so on:</p>\n<ul>\n<li><code>--width</code>: the width of a cuboid on the plane</li>\n<li><code>--height</code>: the height of a cuboid on the plane</li>\n<li><code>--depth</code>: the depth of a cuboid on the plane</li>\n<li><code>--x</code>: the X position on the plane</li>\n<li><code>--y</code>: the Y position on the plane</li>\n</ul>\n<p>This isn&#8217;t very impressive until we put the cuboid into a scene and rotate it. Again, I use custom properties to manipulate the scene whilst I work on making something. <a href=\"https://github.com/dataarts/dat.gui\">Dat.GUI</a> comes in super handy here.</p>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"6441\" data-default-tab=\"result\" data-user=\"SitePoint\" data-slug-hash=\"NWpoKLd\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"CSS 3D Sandbox 🏖\">\n  <span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/NWpoKLd\"><br />\n  CSS 3D Sandbox 🏖</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script><br />\n<!-- [https://codepen.io/jh3y/pen/BaKqQLJ](https://codepen.io/jh3y/pen/BaKqQLJ) --></p>\n<p>If you inspect the demo, using the control panel updates custom CSS properties on the scene. This scoping of CSS custom properties saves a lot of repeated code and keeps things DRY.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/3d-css-printer/?utm_source=rss\">Create a 3D CSS Printer that Actually Prints!</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/3d-css-printer/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191800",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Animation",
            "CSS3",
            "HTML & CSS",
            "HTML5",
            "JavaScript"
        ],
        "dc:creator": [
            "Jhey Tompkins"
        ],
        "pubDate": [
            "Tue, 15 Jun 2021 16:00:42 GMT"
        ],
        "metaDesc": [
            "Learn how to make impressive 3D objects in CSS, and even how to make them do amazing things like print a real image from a URL you supply!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Build a Photo-sharing App with Django"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/django-photo-sharing-app/?utm_source=rss\"\n              title=\"Build a Photo-sharing App with Django\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624334411python-photo-sharing-app.png\"\n        alt=\"Build a Photo-sharing App with Django\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624334411python-photo-sharing-app-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624334411python-photo-sharing-app.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a href=\"https://www.djangoproject.com/\">Django</a> is the most-used Python framework for web development. Its built-in features and robust structure make it an excellent option when building web applications. But there are so many resources out there that it&#8217;s sometimes overwhelming to apply that knowledge to real-world projects. In this tutorial, we&#8217;re going to build a full-stack web application, using Django on the back end and Django Templates stylized with Bootstrap on the front end.</strong></p>\n<h2 id=\"requirements\">Requirements</h2>\n<p>To get the most out of this tutorial, you&#8217;d ideally have a grasp of the following:</p>\n<ul>\n<li>the basics of Python</li>\n<li>object-oriented programming in Python</li>\n<li>the basics of the Django web framework</li>\n</ul>\n<p>If you don&#8217;t have previous experience with Django, don&#8217;t be afraid of continuing with this tutorial. This will be a step-by-step process, and each step will be explained.</p>\n<p>Before starting, I want to introduce you to your new best ally, the <a href=\"https://docs.djangoproject.com/en/dev/\">Django documentation</a>. We&#8217;ll be referencing it throughout the article, so make sure to get acquainted with it.</p>\n<h2 id=\"adjangophotosharingapp\">A Django Photo-sharing App</h2>\n<p><em>All the source code of this tutorial is available on this <a href=\"https://github.com/Daniel1404/Django-photo-app\">GitHub repo</a>.</em></p>\n<p>The complexity of a project depends on all the features we want to include. The more features we want to offer to users, the more time we&#8217;ll need to spend building and integrating everything into a unique project.</p>\n<p>Taking that into account, we&#8217;re going to see a quick distinction between what we&#8217;re going to build and what we&#8217;re not.</p>\n<h3 id=\"whatweregoingtobuild\">What we&#8217;re going to build</h3>\n<p>In this tutorial, we&#8217;ll build a full-stack (back-end and front-end development) photo-sharing app. Our app will include the following features:</p>\n<ul>\n<li>CRUD (Create, Read, Update, Delete) database functionality</li>\n<li>a user management system, so that users will be able to create an account, upload photos, see other people&#8217;s photos and edit or delete <em>their own</em> photos</li>\n<li>a simple web interface made with Bootstrap</li>\n</ul>\n<p><em>Note: although this app seems quite similar to a social network, it isn&#8217;t one. An app like Instagram or Twitter has a lot of complexity that can&#8217;t be covered in a single article.</em></p>\n<h3 id=\"techstack\">Tech stack</h3>\n<p>Let&#8217;s define the technologies we&#8217;re going to use. We&#8217;ll cover the installation process of each one when we need to use it.</p>\n<p>On the <strong>back end</strong>, Django will be the core framework of the app. It allows us to define the URLs, define the logic, manage user authentication, and control all the database operations through the Django <a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/\">ORM</a> (object-relational mapper).</p>\n<p>Also, we&#8217;ll be using a couple of third-party packages to accelerate the development of some features.</p>\n<p><a href=\"https://django-taggit.readthedocs.io/en/latest/\">Django-taggit</a> provides us the ability to set up a simple tag system in few steps. <a href=\"https://pillow.readthedocs.io/en/stable/\">Pillow</a> is a Python package that provides Django image manipulation capabilities. Finally, <a href=\"https://django-crispy-forms.readthedocs.io/en/latest/\">Django-crispy-forms</a> gives us a simple way to display Bootstrap forms.</p>\n<p>On the <strong>front end</strong>, we&#8217;re going to use the <a href=\"https://docs.djangoproject.com/en/dev/topics/templates/\">Django template language</a>, which consists of HTML files that display data dynamically.</p>\n<p>We&#8217;ll also be using <a href=\"https://getbootstrap.com/docs/5.0/getting-started/introduction/\">Bootstrap 5</a> (the latest version at the time of writing) for the design of the site.</p>\n<p><em>Note: you can always check the dependencies used in this project in the <a href=\"https://github.com/sitepoint-editors/Django-photo-app/blob/main/requirements.txt\">requirements.txt</a> file.</em></p>\n<h2 id=\"createadjangoproject\">Create a Django project</h2>\n<p>Let&#8217;s start with Django!</p>\n<p>First of all, make sure you have Python 3 installed. Most Linux and macOS systems have already Python installed, but if you use Windows you can check the <a href=\"https://docs.python.org/3/using/windows.html\">Python 3 installation guide</a>.</p>\n<p><em>Note: we&#8217;ll be using Unix commands (macOS &#038; Linux) along the tutorial. If you can&#8217;t execute them for any reason you can use a graphical file manager.</em></p>\n<p>In some linux distributions, the <code>python</code> command refers to Python 2. In others, <code>python</code> doesn&#8217;t exist at all.</p>\n<p>Let&#8217;s see what Python command you need to use to follow along. Open your terminal (on Unix) or command line window (on Windows) and type <code>python --version</code>:</p>\n<pre><code class=\"python language-python\">python --version\r\n\r\n# My result\r\nPython 3.9.5\r\n</code></pre>\n<p>If you&#8217;ve got a Python version above 3.6, you&#8217;re ready to go. If you don&#8217;t have the right version of Python, you might get a message like one of these:</p>\n<pre><code class=\"python language-python\">Command 'python' not found\r\n</code></pre>\n<pre><code class=\"python language-python\">Python 2.7.18\r\n</code></pre>\n<p>The Python command you need to run to follow along with this tutorial will be <code>python3</code>:</p>\n<pre><code class=\"python language-python\">python3 --version\r\n\r\nPython 3.9.5\r\n</code></pre>\n<h3 id=\"virtualenvironments\">Virtual environments</h3>\n<p>A <a href=\"https://docs.python.org/3/library/venv.html\">virtual environment</a> is an isolated Python environment, which includes all the files you need to run a Python program.</p>\n<p>Virtual environments are a crucial part of any Python (and Django) project, because they let us manage and share dependencies (external packages the project depends on) with other people.</p>\n<p>To create a virtual environment natively, we&#8217;ll use the built-in module <code>venv</code>, available from Python 3.6 or greater.</p>\n<p>The following command will create a virtual environment with the name <code>.venv</code> (you can choose another name if you prefer):</p>\n<pre><code class=\"bash language-bash\">python -m venv .venv\r\n</code></pre>\n<p>If you&#8217;re using Ubuntu Linux, or any other Debian-based distribution, it&#8217;s possible you&#8217;ll get the following message:</p>\n<pre><code class=\"text language-text\">The virtual environment was not created successfully because pip is not available ... \r\n</code></pre>\n<p>To solve this, you can run the following command:</p>\n<pre><code class=\"bash language-bash\">sudo apt-get install python3-venv\r\n</code></pre>\n<p>If the command above doesn&#8217;t work, you can use <a href=\"https://pypi.org/project/virtualenv/\">virtualenv</a>, which is another library to work with virtual environments:</p>\n<pre><code class=\"bash language-bash\">virtualenv .venv\r\n</code></pre>\n<p>After running this command, a folder named <code>.venv</code> (or the name you&#8217;ve chosen) will appear.</p>\n<p>All of the packages we install will be placed inside that directory.</p>\n<p>To activate a virtual environment, you&#8217;ll need to run a specific command depending on your OS. You can refer to the table below (extracted from the Python docs).</p>\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>Shell</th>\n<th>Command to activate virtual environment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>POSIX</td>\n<td>bash/zsh</td>\n<td>$ source .venv/bin/activate</td>\n</tr>\n<tr>\n<td></td>\n<td>fish</td>\n<td>$ source .venv/bin/activate.fish</td>\n</tr>\n<tr>\n<td></td>\n<td>csh/tcsh</td>\n<td>$ source .venv/bin/activate.csh</td>\n</tr>\n<tr>\n<td></td>\n<td>PowerShell Core</td>\n<td>$ .venv/bin/Activate.ps1</td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>cmd.exe</td>\n<td>C:> .venv\\Scripts\\activate.bat</td>\n</tr>\n<tr>\n<td></td>\n<td>PowerShell</td>\n<td>PS C:> .venv\\Scripts\\Activate.ps1</td>\n</tr>\n</tbody>\n</table>\n<p>Since I&#8217;m using a bash shell on a POSIX operative system, I&#8217;ll use this:</p>\n<pre><code class=\"bash language-bash\">source .venv/bin/activate\r\n</code></pre>\n<p>Note how a <code>.venv</code> caption is added to my shell once I&#8217;ve activated the <code>virtualenv</code>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1622669492venv.png\" alt=\"Virtual environment activated\" /></p>\n<h3 id=\"installingdjango\">Installing Django</h3>\n<p>Django is an external package, so we&#8217;ll need to install it with pip:</p>\n<pre><code class=\"bash language-bash\">pip install django\r\n\r\n# Use pip3 if the command above doesn't work\r\n\r\npip3 install django\r\n</code></pre>\n<p><em>Note: we can always take a look at the packages installed in our <code>venv</code> with <code>pip freeze</code>.</em></p>\n<p>Next, let&#8217;s start a Django project with the name <code>config</code> with the command-line utility <a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/\">django-admin</a>.</p>\n<pre><code class=\"python language-python\">django-admin startproject config\r\n</code></pre>\n<p>Here, <code>config</code> is the name of the project, and it&#8217;s used as a naming convention to keep all your projects with the same structure. For instance, <a href=\"https://github.com/pydanny/cookiecutter-django\">Django cookiecutter</a> uses this convention name to start a project.</p>\n<p>That being said, you can create the project with any other name.</p>\n<p>After running these commands, you should have the regular file structure of a Django project. You can check it with the command-line utility <a href=\"https://linux.die.net/man/1/tree\">tree</a>, or with any file manager.</p>\n<p><em>Note: if you can&#8217;t run <code>tree</code> you&#8217;ll need to install it.</em></p>\n<pre><code class=\"bash language-bash\">$ tree config/\r\n└── config\r\n    ├── config\r\n    │   ├── asgi.py\r\n    │   ├── __init__.py\r\n    │   ├── settings.py\r\n    │   ├── urls.py\r\n    │   └── wsgi.py\r\n    └── manage.py\r\n</code></pre>\n<p>Now let&#8217;s enter the project folder with <code>cd</code>, and run the server to check everything is correctly set up:</p>\n<pre><code class=\"bash language-bash\">cd config/\r\n\r\npython manage.py runserver\r\n</code></pre>\n<p>You&#8217;ll see a warning message pointing out that there are unapplied migrations. This is a totally normal message, and we&#8217;ll learn how to run migrations in the “<a href=\"#creatingthephotomodel\">Creating the Photo Model</a>” section.</p>\n<p>Now, visit <a href=\"http://localhost:8000/\">localhost:8000</a> in your browser. You should see the iconic Django congratulations page.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622118721django-screen.png\" alt=\"Django congrats page\" /></p>\n<h2 id=\"startingthephotosharingapp\">Starting the Photo-sharing App</h2>\n<p>The <a href=\"https://docs.djangoproject.com/en/dev/ref/django-admin/\">manage.py</a> file has the exact same capabilities as <code>django-admin</code>, so we&#8217;ll use it many times during this tutorial.</p>\n<p>Its location is in the root folder of the project, and each time we want to run a command with it, we need to enter the project directory.</p>\n<p>Remember to always list the files of the directory you&#8217;re in with <code>ls</code>, to check if we&#8217;re in the correct spot:</p>\n<pre><code class=\"bash language-bash\">$ ls\r\nAnother-files.. manage.py\r\n</code></pre>\n<p>With these tips in mind, it&#8217;s time to start the main app of the project. To do this we open a new shell (so the local server is still running), and use the <code>manage.py</code> with the command <code>startapp</code>.</p>\n<p><em>Note: each time we open a new shell session, we&#8217;ll need to activate the virtual environment again.</em></p>\n<pre><code class=\"bash language-bash\">source .venv/bin/activate\r\ncd config\r\npython manage.py startapp photoapp\r\n</code></pre>\n<p>In this case, the name of the app is <strong>photoapp</strong>. Once again, you can create it with whatever name you want.</p>\n<p>Every time we create an app we must install it. We can do this in the <code>config/settings.py</code> file by adding <code>photoapp</code> to the <code>INSTALLED_APPS</code> variable:</p>\n<pre><code class=\"python language-python\"># config/settings.py\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    ...\r\n\r\n    # Custom apps\r\n    'photoapp',\r\n]\r\n</code></pre>\n<p>Next, we&#8217;ll enter the app directory and create an empty <code>urls.py</code> file. We can do this by running <code>touch</code>, or by creating it with a graphical file manager:</p>\n<pre><code class=\"bash language-bash\">cd photoapp/\r\n\r\ntouch urls.py\r\n</code></pre>\n<p>Lastly, let&#8217;s include all the URL patterns of the photo-sharing app in the overall project. To accomplish this, we&#8217;ll use the <code>django.urls.include</code> function:</p>\n<pre><code class=\"python language-python\"># config/urls.py\r\n\r\nfrom django.urls import path, include # Import this function\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    # Main app\r\n    path('', include('photoapp.urls')),\r\n]\r\n</code></pre>\n<p>The code above will include all the URL patterns of the <code>photoapp/urls.py</code> to the project.</p>\n<p>If you take a look at the shell in which the server is running, you&#8217;ll see an error:</p>\n<pre><code class=\"python language-python\">raise ImproperlyConfigured(msg.format(name=self.urlconf_name)) ....\r\n</code></pre>\n<p>That&#8217;s because we haven&#8217;t created the <code>urlpatterns</code> list inside the <code>photopp/urls.py</code> file.</p>\n<p>To solve this, create an empty list named <code>urlpatterns</code>. We&#8217;re going to populate that variable later with Django paths:</p>\n<pre><code class=\"python language-python\"># photoapp/urls.py\r\n\r\n# Empty patterns\r\nurlpatterns = [\r\n\r\n]\r\n</code></pre>\n<p><em>Note: the advantage of using this approach is that we can make the photoapp reusable, by including all the code needed inside of it.</em></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/django-photo-sharing-app/?utm_source=rss\">Build a Photo-sharing App with Django</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/django-photo-sharing-app/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191987",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Programming",
            "Web"
        ],
        "dc:creator": [
            "Daniel Diaz"
        ],
        "pubDate": [
            "Mon, 21 Jun 2021 16:00:58 GMT"
        ],
        "metaDesc": [
            "Trying to get started with Django? Learn how to build a full-stack web application with Django, Django Templates and Bootstrap."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Store Unlimited* Data in the Browser with IndexedDB"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/indexeddb-store-unlimited-data/?utm_source=rss\"\n              title=\"How to Store Unlimited* Data in the Browser with IndexedDB\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623115048browser-storage.png\"\n        alt=\"How to Store Unlimited* Data in the Browser with IndexedDB\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623115048browser-storage-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623115048browser-storage.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This article explains the fundamentals of storing data in the browser using the IndexedDB API, which offers a far greater capacity than other client-side mechanisms.</strong></p>\n<p>Storing web app data used to be an easy decision. There was no alternative other than sending it to the server, which updated a database. Today, there&#8217;s a range of options, and data can be stored on the client.</p>\n<h2 id=\"whystoredatainthebrowser\">Why Store Data in the Browser?</h2>\n<p>It&#8217;s practical to store most user-generated data on the server, but there are exceptions:</p>\n<ul>\n<li>device-specific settings such as UI options, light/dark mode, etc.</li>\n<li>short-lived data, such as capturing a range of photographs before choosing one to upload</li>\n<li>offline data for later synchronization, perhaps in areas with limited connectivity</li>\n<li>progressive web apps (PWAs) which operate offline for practical or privacy reasons</li>\n<li>caching assets for improved performance</li>\n</ul>\n<p>Three primary browser APIs may be suitable:</p>\n<ol>\n<li>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Storage_API\">Web Storage</a></p>\n<p>Simple synchronous name-value pair storage during or beyond the current session. It&#8217;s practical for smaller, less vital data such as user interface preferences. Browsers permit 5MB of Web Storage per domain.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/Cache\">Cache API</a></p>\n<p>Storage for HTTP request and response object pairs. The API is typically used by service workers to cache network responses, so a progressive web app can perform faster and work offline. Browsers vary, but Safari on iOS allocates 50MB.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/IndexedDB_API\">IndexedDB</a></p>\n<p>A client-side, NoSQL database which can store data, files, and blobs. Browsers vary, but at least 1GB should be available per domain, and it can reach up to 60% of the remaining disk space.</p>\n</li>\n</ol>\n<p><em>OK, I lied. IndexedDB doesn&#8217;t offer <strong>unlimited</strong> storage, but it&#8217;s far less limiting than the other options. It&#8217;s the only choice for larger client-side datasets.</em></p>\n<h2 id=\"indexeddbintroduction\">IndexedDB Introduction</h2>\n<p>IndexedDB first appeared in browsers during 2011. The API became a W3C standard in January 2015, and was superseded by API 2.0 in January 2018. API 3.0 is in progress. As such, <a href=\"https://caniuse.com/indexeddb\">IndexedDB has good browser support</a> and is available in standard scripts and <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API\">Web Workers</a>. Masochistic developers can even try it in IE10.</p>\n<p class=\"ciu_embed\" data-feature=\"indexeddb\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\"> <picture><source type=\"image/webp\" srcset=\"https://caniuse.bitsofco.de/image/indexeddb.webp\"/><source type=\"image/png\" srcset=\"https://caniuse.bitsofco.de/image/indexeddb.png\"/><img src=\"https://caniuse.bitsofco.de/image/indexeddb.jpg\" alt=\"Data on support for the indexeddb feature across the major browsers from caniuse.com\"/> </picture></p>\n<p>This article references the following database and IndexedDB terms:</p>\n<ul>\n<li>\n<p><strong>database</strong>: the top-level store. Any number of IndexedDB databases can be created, although most apps will define one. Database access is restricted to pages within the same domain; even sub-domains are excluded. Example: you could create a <code>notebook</code> database for your note-taking application.</p>\n</li>\n<li>\n<p><strong>object store</strong>: a name/value store for related data items, conceptually similar to collections in MongoDB or tables in SQL databases. Your <code>notebook</code> database could have a <code>note</code> object store to hold records, each with an ID, title, body, date, and an array of tags.</p>\n</li>\n<li>\n<p><strong>key</strong>: a unique name used to reference every record (value) in an object store. It can be automatically generated or set to a value within the record. The ID is ideal to use as the <code>note</code> store&#8217;s key.</p>\n</li>\n<li>\n<p><strong>autoIncrement</strong>: a defined key can have its value auto-incremented every time a record is added to a store.</p>\n</li>\n<li>\n<p><strong>index</strong>: tells the database how to organize data in an object store. An index must be created to search using that data item as criteria. For example, note <code>date</code>s can be indexed in chronological order so it&#8217;s possible to locate notes during a specific period.</p>\n</li>\n<li>\n<p><strong>schema</strong>: the definition of object stores, keys, and indexes within the database.</p>\n</li>\n<li>\n<p><strong>version</strong>: a version number (integer) assigned to a schema so a database can be updated when necessary.</p>\n</li>\n<li>\n<p><strong>operation</strong>: a database activity such as creating, reading, updating, or deleting (CRUD) a record.</p>\n</li>\n<li>\n<p><strong>transaction</strong>: a wrapper around one or more operations which guarantees data integrity. The database will either run all operations in the transaction or none of them: it won&#8217;t run some and fail others.</p>\n</li>\n<li>\n<p><strong>cursor</strong>: a way to iterate over many records without having to load all into memory at once.</p>\n</li>\n<li>\n<p><strong>asynchronous execution</strong>: IndexedDB operations run asynchronously. When an operation is started, such as fetching all notes, that activity runs in the background and other JavaScript code continues to run. A function is called when the results are ready.</p>\n</li>\n</ul>\n<p>The examples below store note records — such as the following — in a <code>note</code> object store within a database named <code>notebook</code>:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  id: 1,\r\n  title: \"My first note\",\r\n  body: \"A note about something\",\r\n  date: &lt;Date() object&gt;,\r\n  tags: [\"#first\", \"#note\"]\r\n}\r\n</code></pre>\n<p>The IndexedDB API is a little dated and relies on events and callbacks. It doesn&#8217;t directly support ES6 syntactical loveliness such as Promises and <code>async</code>/<code>await</code>. Wrapper libraries such as <a href=\"https://www.npmjs.com/package/idb\">idb</a> are available, but this tutorial goes down to the metal.</p>\n<h2 id=\"indexdbdevtoolsdebugging\">IndexDB DevTools Debugging</h2>\n<p>I&#8217;m sure <em>your</em> code is perfect, but I make a lot of mistakes. Even the short snippets in this article were refactored many times and I trashed several IndexedDB databases along the way. Browser DevTools were invaluable.</p>\n<p>All Chrome-based browsers offer an <strong>Application</strong> tab where you can examine the storage space, artificially limit the capacity, and wipe all data:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621521099indexeddb-storage-01.png\" alt=\"DevTools Application panel\" /></p>\n<p>The <strong>IndexedDB</strong> entry in the Storage tree allows you to examine, update, and delete object stores, indexes, and individual record:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621521101indexeddb-storage-02.png\" alt=\"DevTools IndexedDB storage\" /></p>\n<p>(Firefox has a similar panel named <strong>Storage</strong>.)</p>\n<p>Alternatively, you can run your application in incognito mode so all data is deleted when you close the browser window.</p>\n<h2 id=\"checkforindexeddbsupport\">Check for IndexedDB Support</h2>\n<p><code>window.indexedDB</code> evaluates <code>true</code> when a browser supports IndexedDB:</p>\n<pre><code class=\"javascript language-javascript\">if ('indexedDB' in window) {\r\n\r\n  // indexedDB supported\r\n\r\n}\r\nelse {\r\n  console.log('IndexedDB is not supported.');\r\n}\r\n</code></pre>\n<p>It&#8217;s rare to encounter a browser without IndexedDB support. An app could fall back to slower, server-based storage, but most will suggest the user upgrade their decade-old application!</p>\n<h2 id=\"checkremainingstoragespace\">Check Remaining Storage Space</h2>\n<p>The Promise-based <a href=\"https://developer.mozilla.org/docs/Web/API/StorageManager\">StorageManager API</a> provides an estimate of space remaining for the current domain:</p>\n<pre><code class=\"javascript language-javascript\">(async () =&gt; {\r\n\r\n  if (!navigator.storage) return;\r\n\r\n  const\r\n    required = 10, // 10 MB required\r\n    estimate = await navigator.storage.estimate(),\r\n\r\n    // calculate remaining storage in MB\r\n    available = Math.floor((estimate.quota - estimate.usage) / 1024 / 1024);\r\n\r\n  if (available &gt;= required) {\r\n    console.log('Storage is available');\r\n    // ...call functions to initialize IndexedDB\r\n  }\r\n\r\n})();\r\n</code></pre>\n<p>This API is not supported in IE or Safari (yet), so be wary when <code>navigator.storage</code> can&#8217;t returns a falsy value.</p>\n<p>Free space approaching 1,000 megabytes is normally available unless the device&#8217;s drive is running low. Safari <em>may</em> prompt the user to agree to more, although PWAs are allocated 1GB regardless.</p>\n<p>As usage limits are reached, an app could choose to:</p>\n<ul>\n<li>remove older temporary data</li>\n<li>ask the user to delete unnecessary records, or</li>\n<li>transfer less-used information to the server <em>(for truly unlimited storage!)</em></li>\n</ul>\n<h2 id=\"openanindexeddbconnection\">Open an IndexedDB Connection</h2>\n<p>An IndexedDB connection is initialized with <a href=\"https://developer.mozilla.org/docs/Web/API/IDBFactory/open\"><code>indexedDB.open()</code></a>. It is passed:</p>\n<ul>\n<li>the name of the database, and</li>\n<li>an optional version integer</li>\n</ul>\n<pre><code class=\"javascript language-javascript\">const dbOpen = indexedDB.open('notebook', 1);\r\n</code></pre>\n<p>This code can run in any initialization block or function, typically after you&#8217;ve checked for IndexedDB support.</p>\n<p>When this database is first encountered, all object stores and indexes must be created. An <code>onupgradeneeded</code> event handler function gets the database connection object (<code>dbOpen.result</code>) and runs methods such as <a href=\"https://developer.mozilla.org/docs/Web/API/IDBDatabase/createObjectStore\"><code>createObjectStore()</code></a> as necessary:</p>\n<pre><code class=\"javascript language-javascript\">dbOpen.onupgradeneeded = event =&gt; {\r\n\r\n  console.log(`upgrading database from ${ event.oldVersion } to ${ event.newVersion }...`);\r\n\r\n  const db = dbOpen.result;\r\n\r\n  switch( event.oldVersion ) {\r\n\r\n    case 0: {\r\n      const note = db.createObjectStore(\r\n        'note',\r\n        { keyPath: 'id', autoIncrement: true }\r\n      );\r\n\r\n      note.createIndex('dateIdx', 'date', { unique: false });\r\n      note.createIndex('tagsIdx', 'tags', { unique: false, multiEntry: true });\r\n    }\r\n\r\n  }\r\n\r\n};\r\n</code></pre>\n<p>This example creates a new object store named <code>note</code>. An (optional) second argument states that the <code>id</code> value within each record can be used as the store&#8217;s key and it can be auto-incremented whenever a new record is added.</p>\n<p>The <a href=\"https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex\"><code>createIndex()</code> method</a> defines two new indexes for the object store:</p>\n<ol>\n<li><code>dateIdx</code> on the <code>date</code> in each record </li>\n<li><code>tagsIdx</code> on the <code>tags</code> array in each record (a <code>multiEntry</code> index which expands individual array items into an index)</li>\n</ol>\n<p>There&#8217;s a possibility we could have two notes with the same dates or tags, so <code>unique</code> is set to false.</p>\n<p><em>Note: this switch statement seems a little strange and unnecessary, but it will become useful when <a href=\"#updateadatabaseschema\">upgrading the schema</a>.</em></p>\n<p>An <code>onerror</code> handler reports any database connectivity errors:</p>\n<pre><code class=\"javascript language-javascript\">dbOpen.onerror = err =&gt; {\r\n  console.error(`indexedDB error: ${ err.errorCode }`);\r\n};\r\n</code></pre>\n<p>Finally, an <code>onsuccess</code> handler runs when the connection is established. The connection (<code>dbOpen.result</code>) is used for all further database operations so it can either be defined as a global variable or passed to other functions (such as <code>main()</code>, shown below):</p>\n<pre><code class=\"javascript language-javascript\">dbOpen.onsuccess = () =&gt; {\r\n\r\n  const db = dbOpen.result;\r\n\r\n  // use IndexedDB connection throughout application\r\n  // perhaps by passing it to another function, e.g.\r\n  // main( db );\r\n\r\n};\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/indexeddb-store-unlimited-data/?utm_source=rss\">How to Store Unlimited* Data in the Browser with IndexedDB</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/indexeddb-store-unlimited-data/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191568",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 07 Jun 2021 16:00:42 GMT"
        ],
        "metaDesc": [
            "Client-side storage has a lot of practical use cases. Learn the fundamentals of storing data in the browser using the IndexedDB API."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Simulate Mobile Devices with Device Mode in Chrome"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/how-to-simulate-mobile-devices-with-device-mode-in-chrome/?utm_source=rss\"\n              title=\"How to Simulate Mobile Devices with Device Mode in Chrome\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2017/02/1615949272mobile-testing.jpg\"\n        alt=\"How to Simulate Mobile Devices with Device Mode in Chrome\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2017/02/1615949272mobile-testing-300x170.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2017/02/1615949272mobile-testing.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Website testing has become increasingly complex. The days of checking functionality in a couple of browsers are long gone. Your latest masterpiece must be rigorously evaluated on a range of mobile, tablet and desktop devices with differing OSs, screen resolutions, and capabilities. In extreme cases, it could take as long as the original development.</strong></p>\n<p>The process is complicated further by touch-screens, hybrid devices, and high-density displays. If you&#8217;re coding on a regular PC with a mouse and keyboard, it&#8217;s difficult to appreciate how your masterpiece will operate. Features such as mouse hover won&#8217;t necessarily work and your application could be inoperable. But how can you test your system during development and avoid the pain of managing and switching between multiple devices?</p>\n<p>Fortunately, all modern browsers offer mobile emulation tools, and one of the best can be found in Chrome. It can help identify early problems without leaving the comfort of your PC and development environment.</p>\n<h2 id=\"developertools\">Developer Tools</h2>\n<p>Start Chrome, navigate to the web page you want to test and open the <strong>Developer Tools</strong> (Menu &gt; Tools &gt; Developer Tools, <kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>I</kbd> on macOS or <kbd>F12</kbd> / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> on Windows and Linux).</p>\n<p>You can now enable the browser emulator by clicking the <strong>Toggle device toolbar</strong> icon in the top left:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2017/01/1485343931chrome-mobile-emulation-1-enable.png\" alt=\"enable mobile emulation\" /></p>\n<p>A device simulation will now appear:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2017/01/1485343932chrome-mobile-emulation-2.png\" alt=\"mobile device emulator\" /></p>\n<p>The dimensions of the emulated screen can be changed when <strong>Responsive</strong> is selected as the device type.</p>\n<h2 id=\"touchenabledemulation\">Touch Enabled Emulation</h2>\n<p>Move your mouse over the device to see a circular &#8220;touch&#8221; cursor. This will react to touch-based JavaScript events such as <code>touchstart</code>, <code>touchmove</code> and <code>touchend</code>. Mouse-specific events and CSS effects should not occur.</p>\n<p>Hold down <kbd>Shift</kbd> then click and move your mouse to emulate pinch zooming.</p>\n<h2 id=\"themobileemulatordevicetoolbar\">The Mobile Emulator Device Toolbar</h2>\n<p>It&#8217;s worth spending a little time familiarizing yourself with the toolbar and menu above the mobile emulator:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614604782chrome-mobile-emulation-3-toolbar.png\" alt=\"mobile phone simulator device toolbar\" /></p>\n<p>The default controls are:</p>\n<ul>\n<li>the device type (or <strong>Responsive</strong>)</li>\n<li>the current resolution</li>\n<li>the scale (the screen can be zoomed in or out to fit better in the emulator pane)</li>\n<li>the network speed</li>\n<li>a portrait/landscape toggle button</li>\n</ul>\n<p>The three-dot menu allows you to show or hide additional controls:</p>\n<ul>\n<li>the device frame (if available, a graphic of the phone or tablet)</li>\n<li>CSS media query bars (see <a href=\"#css-media-query-bars\">below</a>)</li>\n<li>a pixel ruler</li>\n<li>add device pixel ratios</li>\n<li>add device types</li>\n<li>capture a screenshot (including the device frame if shown)</li>\n<li>capture a full-page screen shot</li>\n</ul>\n<h2 id=\"cssmediaquerybars\">CSS Media Query Bars</h2>\n<p>Select <strong>Show media queries</strong> from the three-dot menu to view a graphical color-coded representation of all media queries set in the CSS.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2017/01/1485343936chrome-mobile-emulation-5-mediaqueries.png\" alt=\"mobile phone emulator media queries\" /></p>\n<ul>\n<li>BLUE: queries which target a maximum width</li>\n<li>GREEN: queries which target widths within a range</li>\n<li>ORANGE: queries which target a minimum width</li>\n</ul>\n<p>Any bar can be clicked to set the emulator screen to that width.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/how-to-simulate-mobile-devices-with-device-mode-in-chrome/?utm_source=rss\">How to Simulate Mobile Devices with Device Mode in Chrome</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/how-to-simulate-mobile-devices-with-device-mode-in-chrome/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=76279",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "App Development",
            "Browsers",
            "Mobile",
            "Mobile Web Development",
            "Responsive Web Design",
            "Software"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Wed, 17 Mar 2021 19:00:33 GMT"
        ],
        "metaDesc": [
            "Does your web app work in all devices? Testing is a huge job. Learn how to enable Chrome's useful device mode to emulate dozens of mobile devices."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Carson Shold"
        ],
        "title": [
            "Improving The Performance Of Shopify Themes (Case Study)"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/improving-performance-shopify-themes-case-study/"
        ],
        "pubDate": [
            "Thu, 06 May 2021 11:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/improving-performance-shopify-themes-case-study/"
        ],
        "description": [
            "The dreaded refactor of old code can be challenging. Code evolves over time with more features, new or changing dependencies, or maybe a goal of performance improvements. When tackling a big refactor, what are the things you should focus on and what performance improvements can you expect?\nI’ve been building Shopify themes for the better part of a decade. When I worked in-house at Shopify in 2013, themes were fairly simple in terms of code complexity."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/improving-performance-shopify-themes-case-study/\" />\n              <title>Improving The Performance Of Shopify Themes (Case Study)</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Improving The Performance Of Shopify Themes (Case Study)</h1>\n                  \n                    \n                    <address>Carson Shold</address>\n                  \n                  <time datetime=\"2021-05-06T11:00:00&#43;00:00\" class=\"op-published\">2021-05-06T11:00:00+00:00</time>\n                  <time datetime=\"2021-05-06T11:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>The dreaded refactor of old code can be challenging. Code evolves over time with more features, new or changing dependencies, or maybe a goal of performance improvements. When tackling a big refactor, what are the things you should focus on and what performance improvements can you expect?</p>\n\n<p>I’ve been building Shopify themes for the better part of a decade. When I worked in-house at Shopify in 2013, themes were fairly simple in terms of code complexity. The hardest part was that Shopify required themes to support IE8, and up until late 2020, IE11. That meant there was a lot of modern JavaScript we couldn’t utilize without sometimes sizable polyfills.</p>\n\n<p>Eight years later, in 2021, themes are infinitely more complex because Shopify has released a ton of new features (to go along with our in-house ideas at <a href=\"https://archetypethemes.co/\">Archetype Themes</a>). The problem is that building new performant features will only go so far when some of your codebase is so old that it has old IE polyfills or IE10 CSS hacks. Our themes had pretty good speed scores for how much they offered, but they were undoubtedly bloated.</p>\n\n<h3 id=\"our-goal-was-simple\">Our Goal Was Simple</h3>\n\n<p>Better performance across the board. Faster time to first paint. Less blocking JS. Less code complexity.</p>\n\n<p>Getting there was the hard part. It included:</p>\n\n<ul>\n<li>Remove jQuery and rewrite ~6k lines of JS per theme in Vanilla JS</li>\n<li>Remove Handlebars.js, as our templating needs were way too small for such a large package</li>\n<li>Standardizing code shared between themes (remove duplication)</li>\n</ul>\n\n<p>Moving away from jQuery was a blessing, but a long process. Thankfully, Tobias Ahlin has a fantastic guide on some of the <a href=\"https://tobiasahlin.com/blog/move-from-jquery-to-vanilla-javascript/\">quick conversions away from jQuery</a>. While going through these changes, it was the perfect time to rethink some more basic issues like how my JS was structured and how elements were initialized.</p>\n\n<h3 id=\"remove-jquery\">Remove jQuery</h3>\n\n<p>Writing Vanilla JS always seemed like a pipe dream. We had to support old IE, so it was just so easy to ignore any attempt at removing it. Then IE 11 support was dropped by Shopify and the clouds parted &mdash; it was our time.</p>\n\n<p>Why remove jQuery anyway? I’ve heard lots of arguments about this, such as its package size isn’t <em>that bad</em> compared to a framework like React. Well, jQuery isn’t a framework like React so it’s a bit of a non-starter comparison. jQuery is a way of using CSS-like selectors and developer-friendly syntax for things like animations and Ajax requests. Most of all, it helped with cross-browser differences so developers didn’t have to think about it.</p>\n\n<p>We wanted to remove it for a few reasons:</p>\n\n<ul>\n<li>Less JS is good for performance;</li>\n<li>It isn’t needed in modern browsers;</li>\n<li><a href=\"https://twitter.com/tobi/status/1257487934455939077\">Shopify’s CEO made a push for pure JS in themes</a>.</li>\n</ul>\n\n<p>I’m one of those developers who were stuck in the past. I knew jQuery inside and out and could make it pull off nearly anything I tried. Was it perfect? No, of course not. But when you look at the <a href=\"https://stackoverflow.blog/2018/01/11/brutal-lifecycle-javascript-frameworks/\">lifecycle of some JS frameworks that flamed out</a>, jQuery has always been steady and that was familiar and safe to me. Removing our reliance on it and untangling it from &#126;6k lines of code (for each theme) felt insurmountable &mdash; especially when I couldn’t know for sure my performance scores would benefit or by how much.</p>\n\n<p>Our approach was to comment out each module we had, remove jQuery, and slowly add in each module or function one at a time while it was rewritten. We started with the simplest file, one with a few functions and a few selectors. Nice and easy, no errors in dev tools, time to move on.</p>\n\n<p>We did this one by one, remembering the easy fixes from the early files when we got to the complex ones like refactoring all of the potential features associated with a product and its add-to-cart form (I counted, it’s 24 unique things). In the end, we got the product JS from 1600 lines of code to 1000. Along the way, we found better ways to do some things and would go back and refactor as needed.</p>\n\n<p>We realized Vanilla JS isn’t scary, it’s just a bit more of an intentional way of writing code than jQuery. We also realized some ancient code was a mess &mdash; we needed to organize the JS to be <strong>more modular</strong> and remove duplicate code (more on that below). But before that, we wanted to play with some of the fun JS we’d only used in other projects.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p><p>Meet <a data-instant href=\"/the-smashing-newsletter/\"><strong>Smashing Email Newsletter</strong></a> with useful tips on front-end, design &amp; UX. Subscribe and <strong>get “Smart Interface Design Checklists”</strong> &mdash; a <strong>free PDF deck</strong> with 150+ questions to ask yourself when designing and building almost anything.</p><div><section class=\"nlbf\"><form action=\"//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0\" method=\"post\"><div class=\"nlbwrapper\"><label for=\"mce-EMAIL-hp\" class=\"sr-only\">Your (smashing) email</label><div class=\"nlbgroup\"><input type=\"email\" name=\"EMAIL\" class=\"nlbf-email\" id=\"mce-EMAIL-hp\" placeholder=\"Your email\">\n<input type=\"submit\" value=\"Meow!\" name=\"subscribe\" class=\"nlbf-button\"></div></div></form><style>.nlbf{display:flex;padding-bottom:.25em;padding-top:.5em;text-align:center;letter-spacing:-.5px;color:#fff;font-size:1.15em}.nlbgroup:hover{box-shadow:0 1px 7px -5px rgba(50,50,93,.25),0 3px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025)}.nlbf .nlbf-button,.nlbf .nlbf-email{flex-grow:1;flex-shrink:0;width:auto;margin:0;padding:.75em 1em;border:0;border-radius:11px;background:#fff;font-size:1em;box-shadow:none}.promo-box .nlbf-button:focus,.promo-box input.nlbf-email:active,.promo-box input.nlbf-email:focus{box-shadow:none}.nlbf-button:-ms-input-placeholder,.nlbf-email:-ms-input-placeholder{color:#777;font-style:italic}.nlbf-button::-webkit-input-placeholder,.nlbf-email::-webkit-input-placeholder{color:#777;font-style:italic}.nlbf-button:-ms-input-placeholder,.nlbf-button::-moz-placeholder,.nlbf-button::placeholder,.nlbf-email:-ms-input-placeholder,.nlbf-email::-moz-placeholder,.nlbf-email::placeholder{color:#777;font-style:italic}.nlbf .nlbf-button{transition:all .2s ease-in-out;color:#fff;background-color:#0168b8;font-weight:700;box-shadow:0 1px 1px rgba(0,0,0,.3);width:100%;border:0;border-left:1px solid #ddd;flex:2;border-top-left-radius:0;border-bottom-left-radius:0}.nlbf .nlbf-email{border-top-right-radius:0;border-bottom-right-radius:0;width:100%;flex:4;min-width:150px}@media all and (max-width:650px){.nlbf .nlbgroup{flex-wrap:wrap;box-shadow:none}.nlbf .nlbf-button,.nlbf .nlbf-email{border-radius:11px;border-left:none}.nlbf .nlbf-email{box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);min-width:100%}.nlbf .nlbf-button{margin-top:1em;box-shadow:0 1px 1px rgba(0,0,0,.5)}}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus,.nlbf .nlbf-button:hover{cursor:pointer;color:#fff;background-color:#0168b8;border-color:#dadada;box-shadow:0 1px 1px rgba(0,0,0,.3)}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus{outline:0!important;text-shadow:1px 1px 1px rgba(0,0,0,.3);box-shadow:inset 0 3px 3px rgba(0,0,0,.3)}.nlbgroup{display:flex;box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);border-radius:11px;transition:box-shadow .2s ease-in-out}.nlbwrapper{display:flex;flex-direction:column;justify-content:center}.nlbf form{width:100%}.nlbf .nlbgroup{margin:0}.nlbcaption{font-size:.9em;line-height:1.5em;color:#fff;border-radius:11px;padding:.5em 1em;display:inline-block;background-color:#0067b859;text-shadow:1px 1px 1px rgba(0,0,0,.3)}.wf-loaded-stage2 .nlbf .nlbf-button{font-family:Mija}</style></section><p class=\"mtn mbn\"><small class=\"promo-box__footer mtm block grey\"><em>Once a week. Useful tips on <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">front-end &amp; UX</a>. Trusted by 190.000 friendly folks.</em></small></p></div></p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-firechat.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"310\"\n\t\t\t\t\t\t\t\t\t\theight=\"400\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"intersection-observer-api\">Intersection Observer API</h3>\n\n<p>Shopify themes are powerful in that they let merchants move elements around the page however they want. That means, as the developer, you don’t know where the element is, whether it exists, or how many exist.</p>\n\n<p>To initialize these elements, we had been using scroll events that continuously checked if an element was visible on the page with this function:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">theme.isElementVisible = function($el, threshold) {\n  var rect = $el[0].getBoundingClientRect();\n  var windowHeight = window.innerHeight || document.documentElement.clientHeight;\n  threshold = threshold ? threshold : 0;\n\n  // If offsetParent is null, it means the element is entirely hidden\n  if ($el[0].offsetParent === null) {\n    return false;\n  }\n\n  return (\n    rect.bottom &gt;= (0 - (threshold / 1.5)) &&\n    rect.right &gt;= 0 &&\n    rect.top &lt;= (windowHeight + threshold) &&\n    rect.left &lt;= (window.innerWidth || document.documentElement.clientWidth)\n  );\n};\n</code></pre>\n</div>\n\n<p>Even though these scroll events were throttled, there was a lot of math being done by the browser all the time. It never really felt too sluggish, but it did take up a spot in the <a href=\"https://www.youtube.com/watch?v=W8AeMrVtFLY\">call stack</a> which impacted other JS competing for priority. I wish we had done more performance research on this update specifically because I think it’s responsible for many of the improvements in <strong>Time to interactive</strong> and <strong>Total blocking time</strong> that you’ll see below.</p>\n\n<p>In comes the <a href=\"https://www.smashingmagazine.com/2018/01/deferring-lazy-loading-intersection-observer-api/\">Intersection Observer API</a>. Now that IE11 support wasn’t required, I was so happy to be able to fully utilize this. In short, it’s an asynchronous way of knowing when an element is visible in the window. No more sluggish measurements and scroll events.</p>\n\n<p>To initialize an element when it’s visible, we use something as simple as this:</p>\n\n<pre><code class=\"language-javascript\">theme.initWhenVisible({\n  element: document.querySelector('div'),\n  callback: myCallback\n});\n</code></pre>\n\n<p>All of the JS required for the element will be handled inside <code>myCallback</code>, preventing it from doing anything until it’s visible.</p>\n\n<p>This sets up an observer for that element, and then removes the observer once it’s visible. It’s always good to clean up after yourself even if you think there might not be much impact without it. If there’s a callback, we run it and our module is ready to go.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">theme.initWhenVisible = function(options) {\n  var threshold = options.threshold ? options.threshold : 0;\n\n  var observer = new IntersectionObserver((entries, observer) =&gt; {\n    entries.forEach(entry =&gt; {\n      if (entry.isIntersecting) {\n        if (typeof options.callback === 'function') {\n          options.callback();\n          observer.unobserve(entry.target);\n        }\n      }\n    });\n  }, {rootMargin: '0px 0px '+ threshold +'px 0px'});\n\n  observer.observe(options.element);\n};\n</code></pre>\n</div>\n\n<p>You can pass a <em>threshold</em> to initialize the element before it’s on the screen too, which can be handy if you want to preload something like Google’s Map API slightly before the element is visible so it’s ready when it is.</p>\n\n<h3 id=\"layzloading-images-and-object-fit\">Layzloading Images And <code>object-fit</code></h3>\n\n<p>We use <a href=\"https://github.com/aFarkas/lazysizes\">lazysizes</a> for lazy-loading our images. It has some helpful plugins for also loading background images, but requires a lot more markup on your element. While the plugins are quite small, it’s one more thing that’s easily removed with pure CSS.</p>\n\n<p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\"><code>object-fit</code></a> in CSS meant that we could position an image just like a background image, but as an <code>&lt;img&gt;</code> element and get all the benefits of normal lazy-loading without extra JS. The real benefit in this is we’re one step closer to using <a href=\"https://addyosmani.com/blog/lazy-loading/\">native browser lazy-loading</a> (which doesn’t support background images). We’ll still have to load in lazysizes as a fallback when the native approach <a href=\"https://caniuse.com/?search=loading\">isn’t supported</a>, but it means removing an entire dependency.</p>\n\n<pre><code class=\"language-javascript\">&lt;script&gt;\nif ('loading' in HTMLImageElement.prototype) { \n    // Browser supports `loading`\n} else {\n   // Fetch and initialize lazysizes\n}\n&lt;/script&gt;\n</code></pre>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"matchmedia-api\">MatchMedia API</h3>\n\n<p>In the past, we used <a href=\"https://wicky.nillia.ms/enquire.js/\">enquire.js</a> to know when breakpoints changed. This is used when resizing elements, changing a module’s arguments for desktop vs mobile, or simply to show/hide elements that you can’t with CSS.</p>\n\n<p>Instead of relying on another package, once again we can go with a native solution in <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\">matchMedia</a>.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">var query = 'screen and (max-width:769px)';\nvar isSmall = matchMedia(query).matches;\n\nmatchMedia(query).addListener(function(mql) {\n    if (mql.matches) {\n      isSmall = true;\n      document.dispatchEvent(new CustomEvent('matchSmall'));\n    }\n    else {\n      isSmall = true;\n      document.dispatchEvent(new CustomEvent('unmatchSmall'));\n    }\n  });\n</code></pre>\n</div>\n\n<p>With just a few lines of code, we can listen for breakpoint changes and change a helpful variable that’s used elsewhere and trigger a custom event that specific modules can listen for.</p>\n\n<pre><code class=\"language-javascript\">document.addEventListener('matchSmall', function() {\n  // destroy desktop-only features\n  // initialize mobile-friendly JS\n});\n</code></pre>\n\n<h3 id=\"hunting-down-duplicate-code\">Hunting down duplicate code</h3>\n\n<p>As I mentioned at the beginning, we had slowly built features into our themes for years. It didn’t take long for some elements to be built out that were kind of like others, like a full-width homepage video and later videos on your product listing or a popup video modal.</p>\n\n<p>YouTube’s API, for example, initialized differently three times and had nearly identical callbacks and accessibility features built out per-module. It was a bit embarrassing we didn’t build it smarter in the first place, but that’s how you know you’re growing as a developer.</p>\n\n<p>We took this time to consolidate many of our modules to be standalone helpers. YouTube became its own method that all sections from all of our themes could use. It meant refactoring by breaking it down into the most basic parts:</p>\n\n<ul>\n<li>Default API arguments (overridable by the initializing module)</li>\n<li>A div ID to initialize the video onto</li>\n<li>ID of the YouTube video to load</li>\n<li>Events (API is ready, video state changed, etc)</li>\n<li>Play/pause when not in view</li>\n<li>Handle iOS low power mode when autoplay not supported</li>\n</ul>\n\n<p>My approach was to do this all on paper before coding, which is something that always helps me sort out what’s integral to the module I’m building vs what’s custom by the parent that’s initializing it &mdash; a division of labor if you will.</p>\n\n<p>Now our three themes that initialize YouTube videos a total of nine different ways use a single file. That’s a big code complexity win for us, and makes any future updates much easier for me and other developers that might touch the code. By using this same approach for other modules while converting to Vanilla JS, it allowed us to move nearly half of each theme’s JS to a single shared module across them all.</p>\n\n<p>This is something that was invaluable to our team and our multi-project setup and might not be useful to your projects exactly, but I believe the process is. Thinking about simplicity and avoiding duplication will always benefit your project.</p>\n\n<p>We did the same for slideshow modules (image slideshows, testimonials, product page images, announcement bars), drawers and modals (mobile menus, cart drawers, newsletter popups), and many more. One module has one purpose and will share back to the parent only what is required. This meant less code shipped, and cleaner code to develop with.</p>\n\n<h3 id=\"performance-stats\">Performance Stats</h3>\n\n<p>Finally, the good stuff. Was this all worth it? Most of this was done blindly with the assumption that less JS, smarter initializing, and more modern approaches would result in faster themes. We weren’t disappointed.</p>\n\n<p>We started all of this work with <a href=\"https://themes.shopify.com/themes/motion\">Motion</a>, our first theme. It had the most bloated JS and the biggest room for improvement.</p>\n\n<ul>\n<li>52% less JS shipped</li>\n<li>Desktop home page speeds (with heavy elements like multiple videos, featured products, slideshows with large images)</li>\n</ul>\n\n<table class=\"tablesaw break-out\">\n  <thead>\n    <tr>\n      <th>Desktop home page</th>\n      <th>Before</th>\n      <th>After</th>\n      <th>Change</th>\n    </tr>\n  </thead>\n  <tbody>\n  <tr>\n   <td>Lighthouse score</td>\n   <td>57</td>\n   <td>76</td>\n   <td>+33</td>\n  </tr>\n  <tr>\n   <td>Total blocking time</td>\n   <td>310ms</td>\n   <td>50ms</td>\n   <td>-83.8%</td>\n  </tr>\n  <tr>\n   <td>Time to interactive</td>\n   <td>2.4s</td>\n   <td>2.0s</td>\n   <td>-16%</td>\n  </tr>\n  <tr>\n   <td>Largest contentful paint</td>\n   <td>3.8s</td>\n   <td>2.6s</td>\n   <td>-31.5%</td>\n  </tr>\n</tbody>\n</table>\n\n<ul>\n<li>Mobile product pages</li>\n</ul>\n\n<table class=\"tablesaw break-out\">\n  <thead>\n    <tr>\n      <th>Mobile product page</th>\n      <th>Before</th>\n      <th>After</th>\n      <th>Change</th>\n   </thead>\n  <tbody>\n  <tr>\n    <td>Lighthouse score</td>\n   <td>26</td>\n   <td>65</td>\n   <td>+150%</td>\n  </tr>\n  <tr>\n   <td>Total blocking time</td>\n   <td>1440ms</td>\n   <td>310ms</td>\n   <td>-78%</td>\n  </tr>\n  <tr>\n   <td>Time to interactive</td>\n   <td>11.3s</td>\n   <td>6.1s</td>\n   <td>-46%</td>\n  </tr>\n  <tr>\n   <td>Largest contentful paint</td>\n   <td>13s</td>\n   <td>4.2s</td>\n   <td>-67.6%</td>\n  </tr>\n</tbody>\n</table>\n\n<p>Then we moved on to <a href=\"https://themes.shopify.com/themes/impulse\">Impulse</a>, our second and most feature-heavy theme.</p>\n\n<ul>\n<li>40% less JS shipped</li>\n<li>28% faster mobile home page speeds</li>\n</ul>\n\n<table class=\"tablesaw break-out\">\n  <thead>\n    <tr>\n      <th>Desktop home page</th>\n   <th>Before</th>\n   <th>After</th>\n   <th>Change</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td>Lighthouse score</td>\n   <td>58</td>\n   <td>81</td>\n   <td>+39.6%</td>\n  </tr>\n  <tr>\n   <td>Total blocking time</td>\n   <td>470ms</td>\n   <td>290ms</td>\n   <td>-38%</td>\n  </tr>\n  <tr>\n   <td>Time to interactive</td>\n   <td>6.1s</td>\n   <td>5.6s</td>\n   <td>-8%</td>\n  </tr>\n  <tr>\n   <td>Largest contentful paint</td>\n   <td>6s</td>\n   <td>2.9s</td>\n   <td>-51.6%</td>\n  </tr>\n</tbody>\n</table>\n\n<ul>\n<li>30% faster mobile home page and product page speeds</li>\n</ul>\n\n<table class=\"tablesaw break-out\">\n  <thead>\n    <tr>\n      <th>Mobile product page</th>\n   <th>Before</th>\n   <th>After</th>\n   <th>Change</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td>Lighthouse score</td>\n   <td>32</td>\n   <td>45</td>\n   <td>+40.6%</td>\n  </tr>\n  <tr>\n   <td>Total blocking time</td>\n   <td>1490ms</td>\n   <td>780ms</td>\n   <td>-47.6%</td>\n  </tr>\n  <tr>\n   <td>Time to interactive</td>\n   <td>10.1s</td>\n   <td>8.3s</td>\n   <td>-17.8%</td>\n  </tr>\n  <tr>\n   <td>Largest contentful paint</td>\n   <td>10.4s</td>\n   <td>8.6s</td>\n   <td>-17.3%</td>\n  </tr>\n</tbody>\n</table>\n\n<p>While you may notice these numbers got a lot better, they’re still not great. Shopify themes are handcuffed by the platform so our starting point is already challenging. That could be an entirely separate article, but here’s the overview:</p>\n\n<ul>\n<li><strong>Shopify has a lot of overhead</strong>: feature detection, tracking, and payment buttons (Apple Pay, Google Pay, ShopPay). If you’re on a product page with dynamic payment buttons you can be looking at about 187kb of Shopify scripts vs. 24.5kb theme files. Most sites will have Google Analytics, and maybe a Facebook Pixel or other tracking scripts loaded on top of all this.</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"404\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A pie chart showing 88 percent Spotify scripts and 12 percent themes\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a3fbbe2-dd50-4954-b0c7-c81d31365ecd/spotify-scripts-themes.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The good news is that these scripts are loaded fairly efficiently and most don’t block the page rendering much. The bad news is that there&rsquo;s still a lot of JavaScript loading on those pages that are out of the theme’s control and cause some flags on Lighthouse scores.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"321\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A table comparing transfer size and main-thread blocking time between four third parties: Shopify, Bugsnag, Google CDN and Google Analytics\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18264f9c-fb07-4ae4-b5e2-0deb312b6a7a/image1.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<ul>\n<li><strong>Apps are a huge bottleneck</strong> and store owners, generally, have no idea. We routinely see shops with 20+ apps installed, and even a simple app can drop your <a href=\"https://www.shopify.ca/blog/shopify-site-speed\">Shopify speed score</a> by 10+ points. Here’s the breakdown of our Impulse theme with three apps installed.</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"391\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A pie chart showing 55 percent Shopify scripts, 7 percent theme, 27 percent Easy Tabs, 7 percent Back In Stock and 4 percent reviews\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8b23f785-672d-49b9-a1b8-5c548748d161/pie-chart-shopify-scripts.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p><strong>Note</strong>: <em>Here’s a great <a href=\"https://speedboostr.com/how-apps-affect-load-speed/\">case study on apps and their effect on performance</a>.</em></p>\n\n<p>We’re still in the process of finishing these updates to our third theme, <a href=\"https://themes.shopify.com/themes/streamline\">Streamline</a>. Streamline also has some other performance features built in that we’re exploring adding to our other themes, such as <a href=\"https://github.com/filamentgroup/loadCSS\">loadCSS by Filament Group</a> to prevent the CSS from being a render-blocking resource.</p>\n\n<p>These numbers aren’t insignificant. It’s widely reported that <a href=\"https://web.dev/why-speed-matters/\">speed matters</a> and even <a href=\"https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales\">small changes can make big impacts</a>. So while we are happy with all of this progress, it’s not the end. <strong>Performance will continue to be a dominant part of our builds</strong> and we won’t stop looking for more ways to simplify code.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"what-s-next\">What’s Next?</h3>\n\n<p>Performance is an ongoing challenge, one we’re excited to keep pushing on. A few things on our list are:</p>\n\n<ul>\n<li>Use <a href=\"https://pawelgrzybek.com/the-resize-observer-explained/\">resize observer</a> instead of window events</li>\n<li>Move fully to <a href=\"https://addyosmani.com/blog/lazy-loading/\">native browser image lazy-loading</a> (with lazysizes fallback for Safari)</li>\n<li>Only load JS that’s used on the current page so we don’t ship a huge file the time (a big challenge on Shopify right now)</li>\n<li>Boost our performance knowledge with <a href=\"https://www.smashingmagazine.com/2021/01/front-end-performance-2021-free-pdf-checklist/\">Smashing’s 2021 performance checklist</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-use-lighthouse-in-github-actions/\">Setup Lighthouse in GitHub actions</a> to see performance impacts as we develop</li>\n</ul>\n\n<h4 id=\"resources-for-shopify-developers\">Resources For Shopify Developers</h4>\n\n<p>If you’re building on Shopify, or want to get started, here are some helpful resources for you:</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=SrtOXwjXJ1w\">Set up a local theme development workflow</a></li>\n<li><a href=\"https://www.shopify.ca/partners/blog/shopify-liquid-debug\">Theme Inspector Chrome extension</a> to debug bottlenecks in Liquid</li>\n<li><a href=\"https://www.shopify.ca/partners/shopify-cheat-sheet\">Shopify cheat sheet</a><br />\nWhat liquid is available to you</li>\n<li><a href=\"https://shopify.dev/docs/themes/liquid/reference\">Liquid templating language docs</a><br />\nA few years ago these were painful to get through, but they’ve since become gold for Shopify developers</li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Cool APIs you might not know about 😎"
        ],
        "author": [
            "Carlos Gonzalez"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:01:52 +0000"
        ],
        "link": [
            "https://dev.to/carlosg33558699/cool-apis-you-might-not-know-about-2f3f"
        ],
        "guid": [
            "https://dev.to/carlosg33558699/cool-apis-you-might-not-know-about-2f3f"
        ],
        "description": [
            "<p>Here are some cool APIs you might not know about. They are all free to use for no comercial projects.</p>\n\n<p><strong>THE MEAL DB</strong></p>\n\n<p>Have you ever wanted to make a recipe book app? This is the best choice you can find. It gives you images, diferent searching filters and any kind of meal you can imagine. The same people also have a Sports API, a Cocktail API and a Audio (music) API, they're also pretty cool.</p>\n\n<p><a href=\"https://www.themealdb.com/api.php\">https://www.themealdb.com/api.php</a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kSMP782c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfx3qmt2wvl9uun76hpf.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kSMP782c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfx3qmt2wvl9uun76hpf.png\" alt=\"Alt Text\"></a></p>\n\n<p><strong>The COVID19 API</strong></p>\n\n<p>This API gives you all the information you need about this pandemic. It gives you global information, but if you only want to check how you country is doing, you can also do that easily. This API is really useful, not only to practice your coding in a fun way, also to be aware of how this pandemic is affecting the whole world.</p>\n\n<p><a href=\"https://covid19api.com/\">https://covid19api.com/</a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yANBEvZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz583ft6zhsu49z4dc05.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yANBEvZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mz583ft6zhsu49z4dc05.png\" alt=\"Alt Text\"></a></p>\n\n<p><strong>The GIPHY API</strong></p>\n\n<p>I do not know why this API is not more popular. From probably the biggest GIF website, they give you access to all the gifs you want, their creator and much more. You can pick between API and SDK in this one, the SDK gives you more data.</p>\n\n<p><a href=\"https://developers.giphy.com/docs/api\">https://developers.giphy.com/docs/api</a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--G9ogly55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d4h79otpznrs8uaia7b.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--G9ogly55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1d4h79otpznrs8uaia7b.png\" alt=\"Alt Text\"></a></p>\n\n<p><strong>The Cocktail DB</strong></p>\n\n<p>As I mentioned before, it is developed and mantained by the same people as the Meal DB. It gives you all the data you can think of about cocktails. Really easy to use as well.</p>\n\n<p><a href=\"https://www.thecocktaildb.com/api.php\">https://www.thecocktaildb.com/api.php</a></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PsmWKjUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eis1449pikv6soduwk04.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PsmWKjUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eis1449pikv6soduwk04.png\" alt=\"Alt Text\"></a></p>\n\n<p>Hope you find this helpful.</p>\n\n"
        ],
        "category": [
            "webdev",
            "api"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Five Ways to Remove Backgrounds in Photoshop in 2021"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/remove-background-photoshop/?utm_source=rss\"\n              title=\"Five Ways to Remove Backgrounds in Photoshop in 2021\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2018/08/1576625640remove-background-photoshop.jpg\"\n        alt=\"How to Quickly and Easily Remove a Background in Photoshop\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2018/08/1576625640remove-background-photoshop-300x157.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2018/08/1576625640remove-background-photoshop.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>With many advances to Photoshop over the last several years, removing the background from an image has never been easier or quicker. Knowing the best method to use for the type of image you’re working with is key to getting the best results with the best technique available.</strong> </p>\n<p>Here are five ways to remove backgrounds from your photos using Photoshop CC, along with when to use each technique to achieve the best results.</p>\n<p><em>All images used in this article were found on Unsplash.</em></p>\n<h2 id=\"1photoshopquickaction\">1. Photoshop Quick Action</h2>\n<p><em>Best to use when: you&#8217;re doing it for you, you need it fast, and you&#8217;re not necessarily looking for perfection. Best to use with high contrast between subject and background, and when the subject has fairly simplistic lines.</em></p>\n<p>By far the quickest method discussed here is the built-in Photoshop Quick Action for removing backgrounds in Photoshop. This is new in Photoshop 2021 (in the Creative Cloud subscription) and provides a very fast way to remove backgrounds. </p>\n<p>With speed, however, comes less accuracy. Using Photoshop Quick Action will do most of the work for you, but the results may fall short of your expectations, depending on your image. If that’s the case, you can use any of the methods described here to polish up the result.</p>\n<h3 id=\"steps\">Steps:</h3>\n<ol>\n<li>\n<p>With your image open in Photoshop, right click your Background layer and click <strong>Duplicate Layer</strong>. In the dialog box that pops up, name your layer (whatever you’d like), and click <strong>OK</strong>. Click the eye icon to the left of the original layer to turn that layer off.</p>\n</li>\n<li>\n<p>Make sure your Properties panel is open by going to <strong>Window</strong> &gt; <strong>Properties</strong>. (If it was already checked, there&#8217;s no need to click it; if it isn’t checked, click it to open it up on the right-hand side by default.)</p>\n</li>\n<li>\n<p>In your Layers panel, click your new layer. In the Properties panel (by default this should be above your Layers panel), click the <strong>Remove Background</strong> button under <strong>Quick Action</strong>.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618950189Remove-Background-Quick-Action-1-Cropped-01.png\" alt=\"Remove Background in Photoshop using the Quick Action 1\" /></p>\n</li>\n<li>\n<p>The quick action has now removed the background, leaving your layer with a mask around the subject.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618950645Remove-Background-Quick-Action-2-Cropped-01.png\" alt=\"Remove Background in Photoshop using the Quick Action 2\" /></p>\n</li>\n</ol>\n<p>From here, you can make refinements by going into the mask and adjusting as needed (such as around the dog&#8217;s feet at the bottom left of the image). While outside the scope of this article, if you need help with working with masks, <a href=\"https://helpx.adobe.com/photoshop/how-to/layer-mask.html\">check out this Adobe tutorial</a>.</p>\n<p><em>Photo credit: <a href=\"https://unsplash.com/photos/5PVXkqt2s9k\">Karsten Wingert on Unsplash</a></em></p>\n<h2 id=\"2backgrounderasertool\">2. Background Eraser Tool</h2>\n<p><em>Best to use when: working with high contrast images, although it takes a fair bit of time and effort to produce a good outcome.</em></p>\n<p>The Background Eraser tool is great if you need a bit more control over removing the background but still want Photoshop to do some of the heavy lifting for you. For more control, you’ll have to sacrifice some time to get the desired result. Depending on your photo, using the Background Eraser tool could be highly effective and a time saver and/or get you closer to your desired outcome with some time involved.</p>\n<h3 id=\"steps-1\">Steps:</h3>\n<ol>\n<li>\n<p>With your image open in Photoshop, right click your Background layer and click <strong>Duplicate Layer</strong>. In the dialog box that pops up, name your layer (whatever you’d like), and click <strong>OK</strong>. Click the eye icon to the left of the original layer to turn that layer off.</p>\n</li>\n<li>\n<p>Select the Background Eraser tool from the toolbox on the left-hand side. This tool may be hidden below the Eraser tool. Click and hold the Eraser tool to reveal more options to and select the Background Eraser tool.</p>\n</li>\n<li>\n<p>In the tool options bar at the top of the screen, click the brush icon to reveal the brush panel. </p>\n</li>\n</ol>\n<ul>\n<li>\n<p>Change the hardness so that it&#8217;s near or at 100%. </p>\n</li>\n<li>\n<p>The size can be whatever you deem appropriate for the image you’re working with. In this case, I’m starting with 50px. </p>\n</li>\n<li>\n<p>You can adjust it as we go by using the square brackets (<kbd>[</kbd> and <kbd>]</kbd>) to decrease and increase the size of the brush.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618950721Background-Eraser-1-Cropped-01.png\" alt=\"Remove Background in Photoshop using the Background Eraser Tool 1\" /></p>\n</li>\n</ul>\n<ol>\n<li>Still in the tool options bar at the top, set the Sampling to be <strong>Continuous</strong>. It’s the first of three icons after the brush size option. Next, set the Limits to <strong>Find Edges</strong> and the Tolerance to be somewhere in the range of 20–25%.</li>\n</ol>\n<ul>\n<li>\n<p>Note that the lower the tolerance, the fewer color variations it will pick up. Conversely, the higher the tolerance, the more colors the tool will select.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618950884Background-Eraser-2-Cropped-01.png\" alt=\"Remove Background in Photoshop using the Background Eraser Tool 2\" /></p>\n</li>\n</ul>\n<ol>\n<li>Start erasing the background around your subject using the Background Eraser tool by clicking and holding while moving the brush. The goal here is to keep the crosshairs inside the tool from touching your subject. Zoom in on the image if you need to see more close details.</li>\n</ol>\n<ul>\n<li>\n<p>I recommend you do short strokes with the brush (remembering to let go of the mouse from time to time) so that you can always Undo if the brush goes too far.</p>\n</li>\n<li>\n<p>In the more difficult areas, you may find that you need to adjust the size of your brush as you go. You can do this by revisiting the tools option bar at the top, or using <kbd>[</kbd> and <kbd>]</kbd> to adjust down and up the size of your brush.</p>\n</li>\n<li>\n<p>If resizing the brush doesn’t work and it’s erasing your subject, undo your action, then go into the tool options bar at the top and adjust the Sampling to <strong>Once</strong> (the middle icon in the set of three), the Limits to <strong>Discontiguous</strong>, and Tolerance to around 10%. This is telling the brush to only use the color under the crosshairs in that moment and not resample as you go along.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618950973Background-Eraser-3-Cropped-01.png\" alt=\"Remove Background in Photoshop using the Background Eraser Tool 3\" /></p>\n</li>\n</ul>\n<p>This process can be quick or tedious depending on your image, but provides good results, as you’re in control of determining what is the subject and what isn’t. If this doesn’t complete the job, other methods mentioned here could help you get closer to your desired result.</p>\n<p>For more detailed info on the Background Eraser tool, <a href=\"https://helpx.adobe.com/photoshop/using/erasing-parts-image.html#change_pixels_to_transparent_with_the_background_eraser_tool\">check out this Adobe tutorial</a>.</p>\n<p><em>Photo credit: <a href=\"https://unsplash.com/photos/b3xo3WvH_g8\">Enrique Ortega Miranda on Unsplash</a></em></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/remove-background-photoshop/?utm_source=rss\">Five Ways to Remove Backgrounds in Photoshop in 2021</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/remove-background-photoshop/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/blogs/?p=15218",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Design",
            "Design & UX",
            "Photography & Imagery",
            "Photoshop"
        ],
        "dc:creator": [
            "Amber Leigh Turner"
        ],
        "pubDate": [
            "Mon, 17 May 2021 09:00:28 GMT"
        ],
        "metaDesc": [
            "Need to remove an image background? Learn five ways to remove backgrounds in Photoshop, depending on the kind of image you're working with."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Ayobami Ogundiran"
        ],
        "title": [
            "Image To Text Conversion With React And Tesseract.js (OCR)"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/image-text-conversion-react-tesseract-js-ocr/"
        ],
        "pubDate": [
            "Mon, 21 Jun 2021 14:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/image-text-conversion-react-tesseract-js-ocr/"
        ],
        "description": [
            "Data is the backbone of every software application because the main purpose of an application is to solve human problems. To solve human problems, it is necessary to have some information about them.\nSuch information is represented as data, especially through computation. On the web, data is mostly collected in the form of texts, images, videos, and many more. Sometimes, images contain essential texts that are meant to be processed to achieve a certain purpose."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/image-text-conversion-react-tesseract-js-ocr/\" />\n              <title>Image To Text Conversion With React And Tesseract.js (OCR)</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Image To Text Conversion With React And Tesseract.js (OCR)</h1>\n                  \n                    \n                    <address>Ayobami Ogundiran</address>\n                  \n                  <time datetime=\"2021-06-21T14:30:00&#43;00:00\" class=\"op-published\">2021-06-21T14:30:00+00:00</time>\n                  <time datetime=\"2021-06-21T14:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>Data is the backbone of every software application because the main purpose of an application is to solve human problems. To solve human problems, it is necessary to have some information about them.</p>\n\n<p>Such information is represented as data, especially through computation. On the web, data is mostly collected in the form of texts, images, videos, and many more. Sometimes, images contain essential texts that are meant to be processed to achieve a certain purpose. These images were mostly processed manually because there was no way to process them programmatically.</p>\n\n<p>The inability to extract text from images was a data processing limitation I experienced first-hand at my last company. We needed to process scanned gift cards and <strong>we had to do it manually</strong> since we couldn’t extract text from images.</p>\n\n<p>There was a department called “Operations” within the company that was responsible for manual confirming gift cards and crediting users&rsquo; accounts. Although we had a website through which users connected with us, the processing of gift cards was carried out manually behind the scenes.</p>\n\n<p>At the time, our website was built mainly with PHP (Laravel) for the backend and JavaScript (jQuery and Vue) for the frontend. Our technical stack was good enough to work with Tesseract.js provided the issue was considered important by the management.</p>\n\n<p>I was willing to solve the problem but it was not necessary to solve the problem judging from the business’ or the management’s point of view. After leaving the company, <strong>I decided to do some research</strong> and try to find possible solutions. Eventually, I discovered OCR.</p>\n\n<h3 id=\"what-is-ocr\">What Is OCR?</h3>\n\n<p>OCR stands for “Optical Character Recognition” or “Optical Character Reader”. It is used to extract texts from images.</p>\n\n<p>The Evolution Of OCR can be traced to several inventions but <a href=\"http://amodern.net/article/optophonic-reading/\">Optophone</a>, “<a href=\"https://history-computer.com/ModernComputer/Software/Gismo.html\">Gismo</a>” , <a href=\"https://www.pbs.org/wgbh/theymadeamerica/whomade/kurzweil_hi.html\">CCD flatbed scanner</a>, <a href=\"https://www.wired.com/2013/08/remembering-the-apple-newtons-prophetic-failure-and-lasting-ideals/\">Newton MesssagePad</a> and <a href=\"https://opensource.google.com/projects/tesseract\">Tesseract</a> are the major inventions that take character recognition to another level of usefulness.</p>\n\n<p>So, why use OCR? Well, Optical Character Recognition solves a lot of problems, one of which triggered me to write this article. I realized the ability to extract texts from an image ensures a lot of possibilities such as:</p>\n\n<ul>\n<li><strong>Regulation</strong><br />\nEvery organization needs to regulate users&rsquo; activities for some reasons. The regulation might be used to protect users’ rights and secure them from threats or scams.<br />\nExtracting texts from an image enables an organization to process textual information on an image for regulation, especially when the images are supplied by some of the users.<br />\nFor example, Facebook-like regulation of the number of texts on images used for ads can be achieved with OCR. Also, hiding sensitive content on Twitter is also made possible by OCR.</li>\n<li><strong>Searchability</strong><br />\nSearching is one of the most common activities, especially on the internet. Searching algorithms are mostly based on manipulating texts. With Optical Character Recognition, it is possible to recognize characters on images and use them to provide relevant image results to users. In short, images and videos are now searchable with the aid of OCR.</li>\n<li><strong>Accessibility</strong><br />\nHaving texts on images has always been a challenge for accessibility and it is the rule of thumb to have few texts on an image. With OCR, screen readers can have access to texts on images to provide some necessary experience to its users.</li>\n<li><strong>Data Processing Automation</strong>\nThe processing of data is mostly automated for scale. Having texts on images is a limitation to data processing because the texts cannot be processed except manually. Optical Character Recognition (OCR) makes it possible to extract texts on images programmatically thereby, ensuring data processing automation especially when it has to do with the processing of texts on images.</li>\n<li><strong>Digitization Of Printed Materials</strong><br />\nEverything is going digital and there are still a lot of documents to be digitized. Cheques, certificates, and other physical documents can now be digitized with the use of Optical Character Recognition.</li>\n</ul>\n\n<p>Finding out all the uses above deepened my interests, so I decided to go further by asking a question:</p>\n\n<blockquote>“How can I use OCR on the web, especially in a React application?”</blockquote>\n\n<p>That question led me to Tesseract.js.</p>\n\n<h3 id=\"what-is-tesseract-js\">What Is Tesseract.js?</h3>\n\n<p><a href=\"https://tesseract.projectnaptha.com/\">Tesseract.js</a> is a JavaScript library that compiles the original <a href=\"https://opensource.google.com/projects/tesseract\">Tesseract</a> from C to JavaScript WebAssembly thereby making OCR accessible in the browser. Tesseract.js engine was originally written in ASM.js and it was later ported to WebAssembly but ASM.js still serves as a backup in some cases when WebAssembly is not supported.</p>\n\n<p>As stated on the website of Tesseract.js, <strong>it supports more than 100 languages</strong>, automatic text orientation and script detection, a simple interface for reading paragraphs, words and character bounding boxes.</p>\n\n<p><a href=\"https://opensource.google.com/projects/tesseract\">Tesseract</a> is an optical character recognition engine for various operating systems. It is free software, released under the Apache Licence. Hewlett-Packard developed Tesseract as proprietary software in the 1980s. It was released as open source in 2005 and its development has been sponsored by Google since 2006.</p>\n\n<p>The latest version, version 4, of Tesseract was released in October 2018 and it contains a new OCR engine that uses a <strong>neural network system based on Long Short-Term Memory</strong> (LSTM) and it is meant to produce more accurate results.</p>\n\n<h3 id=\"understanding-tesseract-apis\">Understanding Tesseract APIs</h3>\n\n<p>To really understand how Tesseract works, we need to break down some of its APIs and their components. According to the Tesseract.js documentation, there are two ways to approach using it. Below is the first approach an its break down:</p>\n\n<pre><code class=\"language-javascript\">Tesseract.recognize(\n  image,language,\n  { \n    logger: m => console.log(m) \n  }\n)\n.catch (err => {\n  console.error(err);\n})\n.then(result => {\n console.log(result);\n})\n}\n</code></pre>\n\n<p>The <code>recognize</code> method takes image as its first argument, language (which can be multiple) as its second argument and <code>{ logger: m =&gt; console.log(me) }</code> as its last argument. The image format supported by Tesseract are jpg, png, bmp and pbm which can only be supplied as elements (img, video or canvas), file object (<code>&lt;input&gt;</code>), blob object, path or URL to an image and base64 encoded image. (<a href=\"https://github.com/naptha/tesseract.js/blob/master/docs/image-format.md\">Read here</a> for more information about all of the image formats Tesseract can handle.)</p>\n\n<p>Language is supplied as a string such as <code>eng</code>. The <code>+</code> sign could be used to concatenate several languages as in <code>eng+chi_tra</code>. The language argument is used to determine the trained language data to be used in processing of images.</p>\n\n<p><strong>Note</strong>: <em>You’ll find all of the available languages and their codes over <a href=\"https://tesseract-ocr.github.io/tessdoc/Data-Files-in-different-versions.html\">here</a>.</em></p>\n\n<p><code>{ logger: m =&gt; console.log(m) }</code> is very useful to get information about the progress of an image being processed. The logger property takes a function that will be called multiple times as Tesseract processes an image. The parameter to the logger function should be an object with <code>workerId</code>, <code>jobId</code>, <code>status</code> and <code>progress</code> as its properties:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">{ workerId: ‘worker-200030’, jobId: ‘job-734747’, status: ‘recognizing text’, progress: ‘0.9’ }\n</code></pre>\n</div>\n\n<p><code>progress</code> is a number between 0 and 1, and it is in percentage to show the progress of an image recognition process.</p>\n\n<p>Tesseract automatically generates the object as a parameter to the logger function but it can also be supplied manually. As a recognition process is taking place, the <code>logger</code> object properties are <strong>updated every time the function is called</strong>. So, it can be used to show a conversion progress bar, alter some part of an application, or used to achieve any desired outcome.</p>\n\n<p>The <code>result</code> in the code above is the outcome of the image recognition process. Each of the properties of <code>result</code> has the property bbox as the x/y coordinates of their bounding box.</p>\n\n<p>Here are the properties of the <code>result</code> object, their meanings or uses:</p>\n\n<pre><code class=\"language-javascript\">{\n  text: \"I am codingnninja from Nigeria...\"\n  hocr: \"&lt;div class='ocr_page' id= ...\"\n  tsv: \"1 1 0 0 0 0 0 0 1486 ...\"\n  box: null\n  unlv: null\n  osd: null\n  confidence: 90\n  blocks: [{...}]\n  psm: \"SINGLE_BLOCK\"\n  oem: \"DEFAULT\"\n  version: \"4.0.0-825-g887c\"\n  paragraphs: [{...}]\n  lines: (5) [{...}, ...]\n  words: (47) [{...}, {...}, ...]\n  symbols: (240) [{...}, {...}, ...]\n}\n</code></pre>\n\n<ul>\n<li><code>text</code>: All of the recognized text as a string.</li>\n<li><code>lines</code>: An array of every recognized line by line of text.</li>\n<li><code>words</code>: An array of every recognized word.</li>\n<li><code>symbols</code>: An array of each of the characters recognized.</li>\n<li><code>paragraphs</code>: An array of every recognized paragraph. We are going to discuss “confidence” later in this write-up.</li>\n</ul>\n\n<p>Tesseract can also be used more imperatively as in:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">import { createWorker } from 'tesseract.js';\n\n  const worker = createWorker({\n  logger: m => console.log(m)\n  });\n\n  (async () => {\n  await worker.load();\n  await worker.loadLanguage('eng');\n  await worker.initialize('eng');\n  const { data: { text } } = await     worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n console.log(text);\n await worker.terminate();\n})();\n</code></pre>\n</div>\n\n<p>This approach is related to the first approach but with different implementations.</p>\n\n<p><code>createWorker(options)</code> creates a web worker or node child process that creates a Tesseract worker. The worker helps set up the Tesseract OCR engine. The <code>load()</code> method loads the Tesseract core-scripts, <code>loadLanguage()</code> loads any language supplied to it as a string, <code>initialize()</code> makes sure Tesseract is fully ready for use and then the recognize method is used to process the image provided. The terminate() method stops the worker and cleans up everything.</p>\n\n<p><strong>Note</strong>: <em>Please check <a href=\"https://github.com/naptha/tesseract.js/blob/master/docs/api.md\">Tesseract APIs documentation</a> for more information.</em></p>\n\n<p>Now, we have to build something to really see how effective Tesseract.js is.</p>\n\n<h3 id=\"what-are-we-going-to-build\">What Are We Going To Build?</h3>\n\n<p>We are going to build a gift card PIN extractor because extracting PIN from a gift card was the issue that led to this writing adventure in the first place.</p>\n\n<p>We will build a simple <strong>application that extracts the PIN from a scanned gift card</strong>. As I set out to build a simple gift card pin extractor, I will walk you through some of the challenges I faced along the line, the solutions I provided, and my conclusion based on my experience.</p>\n\n<ul>\n<li><a href=\"https://github.com/smashingmagazine/image-to-text\">Go to source code&nbsp;&rarr;</a></li>\n</ul>\n\n<p>Below is the image we are going to use for testing because it has some realistic properties that are possible in the real world.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"475\"\n\t\t\theight=\"292\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b49bcf9-309c-4c6d-9f35-6d60fafec491/code-from-card.jpg\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"photo of code\"\n\t\t/>\n    \n    </a>\n  \n\n  \n</figure>\n\n<p>We will extract <strong>AQUX-QWMB6L-R6JAU</strong> from the card. So, let’s get started.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p><p>Meet <a data-instant href=\"/the-smashing-newsletter/\"><strong>Smashing Email Newsletter</strong></a> with useful tips on front-end, design &amp; UX. Subscribe and <strong>get “Smart Interface Design Checklists”</strong> &mdash; a <strong>free PDF deck</strong> with 150+ questions to ask yourself when designing and building almost anything.</p><div><section class=\"nlbf\"><form action=\"//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0\" method=\"post\"><div class=\"nlbwrapper\"><label for=\"mce-EMAIL-hp\" class=\"sr-only\">Your (smashing) email</label><div class=\"nlbgroup\"><input type=\"email\" name=\"EMAIL\" class=\"nlbf-email\" id=\"mce-EMAIL-hp\" placeholder=\"Your email\">\n<input type=\"submit\" value=\"Meow!\" name=\"subscribe\" class=\"nlbf-button\"></div></div></form><style>.nlbf{display:flex;padding-bottom:.25em;padding-top:.5em;text-align:center;letter-spacing:-.5px;color:#fff;font-size:1.15em}.nlbgroup:hover{box-shadow:0 1px 7px -5px rgba(50,50,93,.25),0 3px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025)}.nlbf .nlbf-button,.nlbf .nlbf-email{flex-grow:1;flex-shrink:0;width:auto;margin:0;padding:.75em 1em;border:0;border-radius:11px;background:#fff;font-size:1em;box-shadow:none}.promo-box .nlbf-button:focus,.promo-box input.nlbf-email:active,.promo-box input.nlbf-email:focus{box-shadow:none}.nlbf-button:-ms-input-placeholder,.nlbf-email:-ms-input-placeholder{color:#777;font-style:italic}.nlbf-button::-webkit-input-placeholder,.nlbf-email::-webkit-input-placeholder{color:#777;font-style:italic}.nlbf-button:-ms-input-placeholder,.nlbf-button::-moz-placeholder,.nlbf-button::placeholder,.nlbf-email:-ms-input-placeholder,.nlbf-email::-moz-placeholder,.nlbf-email::placeholder{color:#777;font-style:italic}.nlbf .nlbf-button{transition:all .2s ease-in-out;color:#fff;background-color:#0168b8;font-weight:700;box-shadow:0 1px 1px rgba(0,0,0,.3);width:100%;border:0;border-left:1px solid #ddd;flex:2;border-top-left-radius:0;border-bottom-left-radius:0}.nlbf .nlbf-email{border-top-right-radius:0;border-bottom-right-radius:0;width:100%;flex:4;min-width:150px}@media all and (max-width:650px){.nlbf .nlbgroup{flex-wrap:wrap;box-shadow:none}.nlbf .nlbf-button,.nlbf .nlbf-email{border-radius:11px;border-left:none}.nlbf .nlbf-email{box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);min-width:100%}.nlbf .nlbf-button{margin-top:1em;box-shadow:0 1px 1px rgba(0,0,0,.5)}}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus,.nlbf .nlbf-button:hover{cursor:pointer;color:#fff;background-color:#0168b8;border-color:#dadada;box-shadow:0 1px 1px rgba(0,0,0,.3)}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus{outline:0!important;text-shadow:1px 1px 1px rgba(0,0,0,.3);box-shadow:inset 0 3px 3px rgba(0,0,0,.3)}.nlbgroup{display:flex;box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);border-radius:11px;transition:box-shadow .2s ease-in-out}.nlbwrapper{display:flex;flex-direction:column;justify-content:center}.nlbf form{width:100%}.nlbf .nlbgroup{margin:0}.nlbcaption{font-size:.9em;line-height:1.5em;color:#fff;border-radius:11px;padding:.5em 1em;display:inline-block;background-color:#0067b859;text-shadow:1px 1px 1px rgba(0,0,0,.3)}.wf-loaded-stage2 .nlbf .nlbf-button{font-family:Mija}</style></section><p class=\"mtn mbn\"><small class=\"promo-box__footer mtm block grey\"><em>Once a week. Useful tips on <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">front-end &amp; UX</a>. Trusted by 190.000 friendly folks.</em></small></p></div></p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-firechat.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"310\"\n\t\t\t\t\t\t\t\t\t\theight=\"400\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"installation-of-react-and-tesseract\">Installation Of React And Tesseract</h3>\n\n<p>There is a question to attend to before installing <a href=\"https://reactjs.org/\">React</a> and <a href=\"https://tesseract.projectnaptha.com/\">Tesseract.js</a> and the question is, why using React with Tesseract? Practically, we can use Tesseract with Vanilla JavaScript, any JavaScript libraries or frameworks such React, Vue and Angular.</p>\n\n<p>Using React in this case is a personal preference. Initially, I wanted to use Vue but I decided to go with React because I am more familiar with React than Vue.</p>\n\n<p>Now, let’s continue with the installations.</p>\n\n<p>To install React with create-react-app, you have to run the code below:</p>\n\n<pre><code class=\"language-bash\">npx create-react-app image-to-text\ncd image-to-text\nyarn add Tesseract.js\n</code></pre>\n\n<p>or</p>\n\n<pre><code class=\"language-bash\">npm install tesseract.js\n</code></pre>\n\n<p>I decided to go with yarn to install Tesseract.js because I was unable to install Tesseract with npm but yarn got the job done without stress. You can use npm but I recommend installing Tesseract with yarn judging from my experience.</p>\n\n<p>Now, let’s start our development server by running the code below:</p>\n\n<pre><code class=\"language-bash\">yarn start\n</code></pre>\n\n<p>or</p>\n\n<pre><code class=\"language-bash\">npm start\n</code></pre>\n\n<p>After running yarn start or npm start, your default browser should open a webpage that looks like below:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"398\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"React home page after installation\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      React home page. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e3c6dda4-e886-4f44-9b47-254528927c40/react-home-page.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>You could also navigate to <code>localhost:3000</code> in the browser provided the page is not launched automatically.</p>\n\n<p>After installing React and Tesseract.js, what next?</p>\n\n<h3 id=\"setting-up-an-upload-form\">Setting Up An Upload Form</h3>\n\n<p>In this case, we are going to adjust the home page (App.js) we just viewed in the browser to contain the form we need:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import { useState, useRef } from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n\nfunction App() {\n  const [imagePath, setImagePath] = useState(\"\");\n  const [text, setText] = useState(\"\");\n \n  const handleChange = (event) =&gt; {\n    setImage(URL.createObjectURL(event.target.files[0]));\n  }\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;main className=\"App-main\"&gt;\n        &lt;h3&gt;Actual image uploaded&lt;/h3&gt;\n        &lt;img \n           src={imagePath} className=\"App-logo\" alt=\"logo\"/&gt;\n        \n          &lt;h3&gt;Extracted text&lt;/h3&gt;\n        &lt;div className=\"text-box\"&gt;\n          &lt;p&gt; {text} &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;input type=\"file\" onChange={handleChange} /&gt;\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App\n</code></pre>\n</div>\n\n<p>The part of the code above that needs our attention at this point is the function <code>handleChange</code>.</p>\n\n<pre><code class=\"language-javascript\">const handleChange = (event) => {\n    setImage(URL.createObjectURL(event.target.files[0]));\n  }\n</code></pre>\n  \n\n<p>In the function, <code>URL.createObjectURL</code> takes a selected file through <code>event.target.files[0]</code> and creates a reference URL that can be used with HTML tags such as img, audio and video. We used <code>setImagePath</code> to add the URL to the state. Now, the URL can now be accessed with <code>imagePath</code>.</p>\n\n<pre><code class=\"language-html\">&lt;img src={imagePath} className=\"App-logo\" alt=\"image\"/&gt;\n</code></pre>\n\n<p>We set the image’s src attribute to <code>{imagePath}</code> to preview it in the browser before processing it.</p>\n\n<h3 id=\"converting-selected-images-to-texts\">Converting Selected Images To Texts</h3>\n\n<p>As we have grabbed the path to the image selected, we can pass the image’s path to Tesseract.js to extract texts from it.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">\nimport { useState} from 'react';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n \nfunction App() {\n  const [imagePath, setImagePath] = useState(\"\");\n  const [text, setText] = useState(\"\");\n \n  const handleChange = (event) =&gt; {\n    setImagePath(URL.createObjectURL(event.target.files[0]));\n  }\n \n  const handleClick = () =&gt; {\n  \n    Tesseract.recognize(\n      imagePath,'eng',\n      { \n        logger: m =&gt; console.log(m) \n      }\n    )\n    .catch (err =&gt; {\n      console.error(err);\n    })\n    .then(result =&gt; {\n      // Get Confidence score\n      let confidence = result.confidence\n     \n      let text = result.text\n      setText(text);\n  \n    })\n  }\n \n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;main className=\"App-main\"&gt;\n        &lt;h3&gt;Actual imagePath uploaded&lt;/h3&gt;\n        &lt;img \n           src={imagePath} className=\"App-image\" alt=\"logo\"/&gt;\n        \n          &lt;h3&gt;Extracted text&lt;/h3&gt;\n        &lt;div className=\"text-box\"&gt;\n          &lt;p&gt; {text} &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;input type=\"file\" onChange={handleChange} /&gt;\n        &lt;button onClick={handleClick} style={{height:50}}&gt; convert to text&lt;/button&gt;\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n \nexport default App\n</code></pre>\n</div>\n\n<p>We add the function “handleClick” to “App.js and it contains Tesseract.js API that takes the path to the selected image. Tesseract.js takes “imagePath”, “language”, “a setting object”.</p>\n\n<p>The button below is added to the form to call “handClick” which triggers image-to-text conversion whenever the button is clicked.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-css\">&lt;button onClick={handleClick} style={{height:50}}&gt; convert to text&lt;/button&gt;\n</code></pre>\n</div>\n\n<p>When the processing is successful, we access both “confidence” and “text” from the result. Then, we add “text” to the state with “setText(text)”.</p>\n\n<p>By adding to <code>&lt;p&gt; {text} &lt;/p&gt;</code>, we display the extracted text.</p>\n\n<p>It is obvious that “text” is extracted from the image but what is confidence?</p>\n\n<p>Confidence shows how accurate the conversion is. The confidence level is between 1 to 100. 1 stands for the worst while 100 stands for the best in terms of accuracy. It can also be used to determine whether an extracted text should be accepted as accurate or not.</p>\n\n<p>Then the question is what factors can affect the confidence score or the accuracy of the entire conversion? It is mostly affected by three major factors &mdash; the quality and nature of the document used, the quality of the scan created from the document and the processing abilities of the Tesseract engine.</p>\n\n<p>Now, let’s add the code below to “App.css” to style the application a bit.</p>\n\n<pre><code class=\"language-css\">.App {\n  text-align: center;\n}\n \n.App-image {\n  width: 60vmin;\n  pointer-events: none;\n}\n \n.App-main {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(7px + 2vmin);\n  color: white;\n}\n \n.text-box {\n  background: #fff;\n  color: #333;\n  border-radius: 5px;\n  text-align: center;\n}\n</code></pre>\n\n<p>Here is the result of my <strong>first test</strong>:</p>\n\n<h5 id=\"outcome-in-firefox\">Outcome In Firefox</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"First image-to-text conversion outcome on Firefox\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      First test outcome on Firefox. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d6d288c1-5579-424c-b4e5-179ebd4d52ef/test1-outcome-without-preprocessing-firefox.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The confidence level of the result above is 64. It is worth noting that the gift card image is dark in color and it definitely affects the result we get.</p>\n\n<p>If you take a closer look at the image above, you will see the pin from the card is almost accurate in the extracted text. It is not accurate because the gift card is not really clear.</p>\n\n<p>Oh, wait! What will it look like in Chrome?</p>\n\n<h5 id=\"outcome-in-chrome\">Outcome In Chrome</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"First image-to-text conversion outcome on Chrome\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      First test outcome on chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f0cea51-7167-4a7f-b8b4-aff7751bd0ea/test1-outcome-without-preprocessing-chrome.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Ah! The outcome is even worse in Chrome. But why is the outcome in Chrome different from Mozilla Firefox? Different browsers handle images and their colour profiles differently. That means, <strong>an image can be rendered differently depending on the browser</strong>. By supplying pre-rendered <code>image.data</code> to Tesseract, it is likely to produce a different outcome in different browsers because different <code>image.data</code> is supplied to Tesseract depending on the browser in use. Preprocessing an image, as we will see later in this article, will help achieve a consistent result.</p>\n\n<p>We need to be more accurate so that we can be sure we are getting or giving the right information. So we have to take it a bit further.</p>\n\n<p>Let’s try more to see if we can achieve the aim in the end.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"testing-for-accuracy\">Testing For Accuracy</h3>\n\n<p>There are a lot of factors that affect an image-to-text conversion with <a href=\"https://tesseract.projectnaptha.com/\">Tesseract.js</a>. Most of these factors revolve around the nature of the image we want to process and the rest depends on how the Tesseract engine handles the conversion.</p>\n\n<p>Internally, Tesseract preprocesses images before the actual OCR conversion but it doesn’t always give accurate results.</p>\n\n<p>As a solution, we can preprocess images to achieve accurate conversions. We can binarise, invert, dilate, deskew or rescale an image to preprocess it for <a href=\"https://tesseract.projectnaptha.com/\">Tesseract.js</a>.</p>\n\n<p><strong>Image pre-processing</strong> is a lot of work or an extensive field on its own. Fortunately, <a href=\"https://p5js.org\">P5.js</a> has provided all the image preprocessing techniques we want to use. Instead of reinventing the wheel or using the whole of the library just because we want to use a tiny part of it, I have copied the ones we need. All the image preprocessing techniques are included in <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a>.</p>\n\n<h4 id=\"what-is-binarization\">What Is Binarization?</h4>\n\n<p>Binarization is the conversion of the pixels of an image to either black or white. We want to binarize the previous gift card to check whether the accuracy will be better or not.</p>\n\n<p>Previously, we extracted some texts from a gift card but the target PIN was not as accurate as we wanted. So there is a need to find another way to get an accurate result.</p>\n\n<p>Now, we want to <strong>binarize the gift card</strong>, i.e. we want to convert its pixels to black and white so that we can see whether a better level of accuracy can be achieved or not.</p>\n\n<p>The functions below will be used for binarization and it is included in a separate file called <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a>.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">function preprocessImage(canvas) {\n    const ctx = canvas.getContext('2d');\n    const image = ctx.getImageData(0,0,canvas.width, canvas.height);\n    thresholdFilter(image.data, 0.5);\n    return image;\n }\n \n Export default preprocessImage\n</code></pre>\n</div>\n\n<p>What does the code above do?</p>\n\n<p>We introduce canvas to hold an image data to apply some filters, to pre-process the image, before passing it to Tesseract for conversion.</p>\n\n<p>The first <code>preprocessImage</code> function is located in <em>preprocess.js</em> and prepares the canvas for use by getting its pixels. The function <code>thresholdFilter</code> binarizes the image by <strong>converting its pixels to either black or white</strong>.</p>\n\n<p>Let’s call <code>preprocessImage</code> to see if the text extracted from the previous gift card can be more accurate.</p>\n\n<p>By the time we update App.js, it should now look like the code this:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import { useState, useRef } from 'react';\nimport preprocessImage from './preprocess';\nimport Tesseract from 'tesseract.js';\nimport './App.css';\n \nfunction App() {\n  const [image, setImage] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n \n  const handleChange = (event) =&gt; {\n    setImage(URL.createObjectURL(event.target.files[0]))\n  }\n \n  const handleClick = () =&gt; {\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n \n    ctx.drawImage(imageRef.current, 0, 0);\n    ctx.putImageData(preprocessImage(canvas),0,0);\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n  \n    Tesseract.recognize(\n      dataUrl,'eng',\n      { \n        logger: m =&gt; console.log(m) \n      }\n    )\n    .catch (err =&gt; {\n      console.error(err);\n    })\n    .then(result =&gt; {\n      // Get Confidence score\n      let confidence = result.confidence\n      console.log(confidence)\n      // Get full output\n      let text = result.text\n  \n      setText(text);\n    })\n  }\n \n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;main className=\"App-main\"&gt;\n        &lt;h3&gt;Actual image uploaded&lt;/h3&gt;\n        &lt;img \n           src={image} className=\"App-logo\" alt=\"logo\"\n           ref={imageRef} \n           /&gt;\n        &lt;h3&gt;Canvas&lt;/h3&gt;\n        &lt;canvas ref={canvasRef} width={700} height={250}&gt;&lt;/canvas&gt;\n          &lt;h3&gt;Extracted text&lt;/h3&gt;\n        &lt;div className=\"pin-box\"&gt;\n          &lt;p&gt; {text} &lt;/p&gt;\n        &lt;/div&gt;\n        &lt;input type=\"file\" onChange={handleChange} /&gt;\n        &lt;button onClick={handleClick} style={{height:50}}&gt;Convert to text&lt;/button&gt;\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n \nexport default App\n</code></pre>\n</div>\n\n<p>First, we have to import “preprocessImage” from “preprocess.js” with the code below:</p>\n\n<pre><code class=\"language-javascript\">import preprocessImage from './preprocess';\n</code></pre>\n\n<p>Then, we add a canvas tag to the form. We set the ref attribute of both the canvas and the img tags to <code>{ canvasRef }</code> and <code>{ imageRef }</code> respectively. The refs are used to access the canvas and the image from the App component. We get hold of both the canvas and the image with “useRef” as in:</p>\n\n<pre><code class=\"language-javascript\">const canvasRef = useRef(null);\nconst imageRef = useRef(null);\n</code></pre>\n\n<p>In this part of the code, we merge the image to the canvas as we can only preprocess a canvas in JavaScript. We then convert it to a data URL with “jpeg” as its image format.</p>\n\n<pre><code class=\"language-javascript\">const canvas = canvasRef.current;\nconst ctx = canvas.getContext('2d');\n \nctx.drawImage(imageRef.current, 0, 0);\nctx.putImageData(preprocessImage(canvas),0,0);\nconst dataUrl = canvas.toDataURL(\"image/jpeg\");\n</code></pre>\n\n<p>“dataUrl” is passed to Tesseract as the image to be processed.</p>\n\n<p>Now, let’s check whether the text extracted will be more accurate.</p>\n\n<h5 id=\"test-2\">Test #2</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Second image-to-text conversion outcome on Firefox with the image preprocessing technique called binarization.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Second test outcome on Firefox. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/7563cb58-f1ef-41ff-abad-6e557b2fdc04/test2-outcome-with-preprocessing-firefox.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The image above shows the result in Firefox. It is obvious that the dark part of the image has been changed to white but preprocessing the image doesn’t lead to a more accurate result. It is even worse.</p>\n\n<p>The first conversion only has <strong>two incorrect characters</strong> but this one has <strong>four</strong> incorrect characters. I even tried changing the threshold level but to no avail. We don’t get a better result not because binarization is bad but because binarizing the image doesn’t fix the nature of the image in a way that is suitable for the Tesseract engine.</p>\n\n<p>Let’s check what it also looks like in Chrome:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Second image-to-text conversion outcome on Firefox with image preprocessing technique called binarization.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Second test outcome on Chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88447123-e5af-4611-a23f-fcfcd0743192/test2-outcome-with-preprocessing-chrome.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>We get the same outcome.</p>\n\n<p>After getting a worse result by binarizing the image, there is a need to check other image preprocessing techniques to see whether we can solve the problem or not. So, we are going to try dilation, inversion, and blurring next.</p>\n\n<p>Let’s just get the code for each of the techniques from <a href=\"http://p5js.org\">P5.js</a> as used by this <a href=\"https://dev.to/mathewthe2/using-javascript-to-preprocess-images-for-ocr-1jc\">article</a>. We will add the image processing techniques to <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a> and use them one by one. It is necessary to understand each of the image preprocessing techniques we want to use before using them, so we are going to discuss them first.</p>\n\n<h4 id=\"what-is-dilation\">What Is Dilation?</h4>\n\n<p>Dilation is adding pixels to the boundaries of objects in an image to make it wider, larger, or more open. The “dilate” technique is used to preprocess our images to increase the brightness of the objects on the images. We need a function to dilate images using JavaScript,   so the code snippet to dilate an image is added to <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a>.</p>\n\n<h4 id=\"what-is-blur\">What Is Blur?</h4>\n\n<p>Blurring is smoothing the colors of an image by reducing its sharpness. Sometimes, images have small dots/patches. To remove those patches, we can blur the images. The code snippet to blur an image is included in <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a>.</p>\n\n<h4 id=\"what-is-inversion\">What Is Inversion?</h4>\n\n<p>Inversion is changing light areas of an image to a dark color and dark areas to a light color. For example, if an image has a black background and white foreground, we can invert it so that its background will be white and its foreground will be black. We have also added the code snippet to invert an image to <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a>.</p>\n\n<p>After adding <code>dilate</code>, <code>invertColors</code> and <code>blurARGB</code> to “preprocess.js”, we can now use them to preprocess images. To use them, we need to update the initial “preprocessImage” function in <a href=\"https://gist.github.com/codingnninja/346773f3db379796e5407a825497dc19\">preprocess.js</a>:</p>\n\n<p><code>preprocessImage(...)</code> now looks like this:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">function preprocessImage(canvas) {\n  const level = 0.4;\n  const radius = 1;\n  const ctx = canvas.getContext('2d');\n  const image = ctx.getImageData(0,0,canvas.width, canvas.height);\n  blurARGB(image.data, canvas, radius);\n  dilate(image.data, canvas);\n  invertColors(image.data);\n  thresholdFilter(image.data, level);\n  return image;\n }\n</code></pre>\n</div>\n\n<p>In <code>preprocessImage</code> above, we apply four preprocessing techniques to an image: <code>blurARGB()</code> to remove the dots on the image, <code>dilate()</code> to increase the brightness of the image, <code>invertColors()</code> to switch the foreground and background color of the image and <code>thresholdFilter()</code> to convert the image to black and white which is more suitable for Tesseract conversion.</p>\n\n<p>The <code>thresholdFilter()</code> takes <code>image.data</code> and <code>level</code> as its parameters. <code>level</code> is used to set how white or black the image should be. We determined the <code>thresholdFilter</code> level and <code>blurRGB</code> radius by trial and error as we are not sure how white, dark or smooth the image should be for Tesseract to produce a great result.</p>\n\n<h5 id=\"test-3\">Test #3</h5>\n\n<p>Here is the new result after applying four techniques:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Third image-to-text conversion outcome on Firefox and Chrome with the image preprocessing techniques called binarization, inversion, blurring and dilation.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Third test outcome on both Firefox and Chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/057c6565-a07e-4fb0-9818-0b68b1cd3dce/test3-outcome-with-preprocessing-firefox-and-chrome.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The image above represents the result we get in both Chrome and Firefox.</p>\n\n<p>Oops! The outcome is terrible.</p>\n\n<p>Instead of using all four techniques, why don’t we just use two of them at a time?</p>\n\n<p>Yeah! We can simply use <code>invertColors</code> and <code>thresholdFilter</code> techniques to convert the image to black and white, and switch the foreground and the background of the image. But <strong>how do we know what and what techniques to combine?</strong> We know what to combine based on the nature of the image we want to preprocess.</p>\n\n<p>For example, a digital image has to be converted to black and white, and an image with patches has to be blurred to remove the dots/patches. What really matters is to understand what each of the techniques is used for.</p>\n\n<p>To use <code>invertColors</code> and <code>thresholdFilter</code>, we need to comment out both <code>blurARGB</code> and <code>dilate</code> in <code>preprocessImage</code>:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">function preprocessImage(canvas) {\n    const ctx = canvas.getContext('2d');\n    const image = ctx.getImageData(0,0,canvas.width, canvas.height);\n    // blurARGB(image.data, canvas, 1);\n    // dilate(image.data, canvas);\n    invertColors(image.data);\n    thresholdFilter(image.data, 0.5);\n    return image;\n}\n</code></pre>\n</div>\n\n<h5 id=\"test-4\">Test #4</h5>\n\n<p>Now, here is the new outcome:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Fourth image-to-text conversion outcome on Firefox and Chrome with the image preprocessing techniques called binarization and inversion.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Fourth test outcome on both Firefox and Chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0663d02f-e960-4d58-bd14-478423c04c8b/test4-outcome-with-preprocessing-firefox-and-chrome.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The result is still worse than the one without any preprocessing. After adjusting each of the techniques for this particular image and some other images, I have come to the conclusion that images with different nature require different preprocessing techniques.</p>\n\n<p>In short, using <a href=\"https://tesseract.projectnaptha.com/\">Tesseract.js</a> without image preprocessing produced the best outcome for the gift card above. All other experiments with image preprocessing yielded less accurate outcomes.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"issue\">Issue</h3>\n\n<p>Initially, I wanted to extract the PIN from any Amazon gift card but I couldn’t achieve that because there is no point to match an inconsistent PIN to get a consistent result. Although it is possible to process an image to get an accurate PIN, yet such preprocessing will be inconsistent by the time another image with different nature is used.</p>\n\n<h3 id=\"the-best-outcome-produced\">The Best Outcome Produced</h3>\n\n<p>The image below showcases the best outcome produced by the experiments.</p>\n\n<h5 id=\"test-5\">Test #5</h5>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Best image-to-text conversion outcome on Firefox and Chrome without preprocessing.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Fifth test outcome on both Firefox and Chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The texts on the image and the ones extracted are totally the same. The conversion has 100% accuracy. I tried to reproduce the result but I was only able to reproduce it when using images with similar nature.</p>\n\n<h3 id=\"observation-and-lessons\">Observation And Lessons</h3>\n\n<ul>\n<li>Some images that are not preprocessed may give <strong>different outcomes in different browsers</strong>. This claim is evident in the first test. The outcome in Firefox is different from the one in Chrome. However, preprocessing images helps achieve a consistent outcome in other tests.</li>\n<li>Black color on a white background tends to give manageable results. The image below is an example of an <strong>accurate result without any preprocessing</strong>. I also was able to get the same level of accuracy by preprocessing the image but it took me a lot of adjustment which was unnecessary.</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Best image-to-text conversion outcome on Firefox and Chrome without preprocessing.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Fifth test outcome on both Firefox and Chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/18a22fc4-25a4-40ca-b925-6ffb5f1b3628/test5-best-result-without-preprocessing.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The conversion is 100% accurate.</p>\n\n<ul>\n<li>A text with a <strong>big font size</strong> tends to be more accurate.</li>\n</ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"450\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Best image-to-text conversion outcome on Firefox and Chrome without preprocessing when font-size is big.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Sixth test outcome on both Firefox and Chrome. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/a0eb158c-31d6-4624-b102-0e62a7a7cdd1/test6-outcome-for-text-with-big-fonts.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<ul>\n<li>Fonts with <strong>curved edges</strong> tend to confuse Tesseract. The best result I got was achieved when I used Arial (font).</li>\n<li>OCR is currently not good enough for automating image-to-text conversion, especially when more than 80% level of accuracy is required. However, it can be used to make the manual processing of texts on images <strong>less stressful</strong> by extracting texts for manual correction.</li>\n<li>OCR is currently not good enough to pass useful information to screen readers for <strong>accessibility</strong>. Supplying inaccurate information to a screen reader can easily mislead or distract users.</li>\n<li>OCR is very promising as neural networks make it possible to learn and improve. Deep learning will <strong>make OCR a game-changer in the near future</strong>.</li>\n<li>Making decisions with confidence. A confidence score can be used to make decisions that can greatly impact our applications. The confidence score can be used to determine whether to accept or reject a result. From my experience and experiment, I realized that any confidence score below 90 isn’t really useful. If I only need to extract some pins from a text, I will expect a confidence score between 75 and 100, and <strong>anything below 75 will be rejected</strong>.</li>\n</ul>\n\n<p>In case I am dealing with texts without the need to extract any part of it, I will definitely accept a confidence score between 90 to 100 but reject any score below that. For example, 90 and above accuracy will be expected if I want to digitize documents such as cheques, a historic draft or whenever an exact copy is necessary. But a score that is between 75 and 90 is acceptable when an exact copy is not important such as getting the PIN from a gift card. In short, <strong>a confidence score helps in making decisions</strong> that impact our applications.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>Given the data processing limitation caused by texts on images and the disadvantages associated with it, Optical Character Recognition (OCR) is a useful technology to embrace. Although OCR has its limitations, it is very promising because of its use of neural networks.</p>\n\n<p>Over time, OCR will overcome most of its limitations with the help of deep learning, but before then, the approaches highlighted in this article can be utilized to deal with text extraction from images, at least, to <strong>reduce the hardship and losses associated with manual processing</strong> &mdash; especially from a business point of view.</p>\n\n<p>It is now your turn to try OCR to extract texts from images. Good luck!</p>\n\n<h4 id=\"further-reading\">Further Reading</h4>\n\n<ul>\n<li><a href=\"https://p5js.org/\">P5.js</a></li>\n<li><a href=\"https://towardsdatascience.com/pre-processing-in-ocr-fc231c6035a7\">Pre-Processing in OCR</a></li>\n<li><a href=\"https://tesseract-ocr.github.io/tessdoc/ImproveQuality\">Improving the quality of the output</a></li>\n<li><a href=\"https://dev.to/mathewthe2/using-javascript-to-preprocess-images-for-ocr-1jc\">Using JavaScript to Preprocess Images for OCR</a></li>\n<li><a href=\"https://golb.hplar.ch/2019/07/ocr-with-tesseractjs.html\">OCR in the browser with Tesseract.js</a></li>\n<li><a href=\"https://medium.com/ocrology/a-quick-history-of-optical-character-recognition-ocr-c916d58e2170\">A Quick History of Optical Character Recognition</a></li>\n<li><a href=\"https://www.forbes.com/sites/forbestechcouncil/2019/09/10/the-future-of-ocr-is-deep-learning/?sh=8bf8fec6a049\">The Future of OCR is Deep Learning</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Timeline_of_optical_character_recognition\">Timeline of Optical Character Recognition</a></li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, yk, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Custom Property Brain Twisters"
        ],
        "link": [
            "https://css-tricks.com/custom-property-brain-twisters/"
        ],
        "comments": [
            "https://css-tricks.com/custom-property-brain-twisters/#respond"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Fri, 25 Jun 2021 18:39:46 +0000"
        ],
        "category": [
            "Article",
            "custom properties"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=342718",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I am part of that 82% that got the answer to Lea Verou's quiz wrong. Stephen Shaw posted a similar quiz as well and it's a fun exercise sharpen your CSS chops.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/custom-property-brain-twisters/\">Custom Property Brain Twisters</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I am part of that 82% that got it wrong <a href=\"https://lea.verou.me/2021/05/82-of-developers-get-this-3-line-css-quiz-wrong/\">in Lea&#8217;s quiz</a> (<a href=\"https://twitter.com/LeaVerou/status/1395379573190168576?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1395379573190168576%7Ctwgr%5E%7Ctwcon%5Es1_c10&amp;ref_url=https%3A%2F%2Flea.verou.me%2F2021%2F05%2F82-of-developers-get-this-3-line-css-quiz-wrong%2F\">tweet version</a>). </p>\n\n\n\n<p>Here&#8217;s the code:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">:root {\n  --accent-color: skyblue;\n}\n\ndiv {\n  --accent-color: revert; \n  background: var(--accent-color, orange);\n}</code></pre>\n\n\n\n<p>So what background do I expect <code>&lt;div&gt;</code> to have?</p>\n\n\n\n<span id=\"more-342718\"></span>\n\n\n\n<p>My brain goes like this:</p>\n\n\n\n<ol><li>Well, <code>--accent-color</code> is declared, so it&#8217;s definitely not <code>orange</code> (the fallback). </li><li>The value for the background is <code>revert</code>, so it&#8217;s essentially <code>background: revert;</code></li><li>The <code>background</code> property doesn&#8217;t inherit though, and even if you force it to, it would inherit from the <code>&lt;body&gt;</code>, not the root. </li><li>So&#8230; <code>transparent</code>. </li></ol>\n\n\n\n<p>Nope.</p>\n\n\n\n<p>Lea:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>[Because the value is <code>revert</code> it] cancels out any author styles, and resets back to whatever value the property would have from the user stylesheet and UA stylesheet. Assuming there is no&nbsp;<code>--accent-color</code>&nbsp;declaration in the user stylesheet, and of course UA stylesheets don’t set custom properties, then that means the property doesn’t have a value.</p><p>Since custom properties are inherited properties (unless they are&nbsp;<a href=\"https://drafts.css-houdini.org/css-properties-values-api-1/#registered-custom-property\">registered</a>&nbsp;with&nbsp;<code>inherits:&nbsp;false</code>, but this one is not), this means the inherited value trickles in, which is — you guessed it —&nbsp;<code>skyblue</code>.</p></blockquote>\n\n\n\n<p>Stephen posted a similar quiz the other day:</p>\n\n\n\n<figure class=\"wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter\"><div class=\"wp-block-embed__wrapper\">\n<blockquote class=\"twitter-tweet\" data-width=\"500\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">CSS variable riddle: What color will the &lt;p&gt; element be? <a href=\"https://t.co/NpIi1IY3dw\">pic.twitter.com/NpIi1IY3dw</a></p>&mdash; Shaw (@shshaw) <a href=\"https://twitter.com/shshaw/status/1400827755789422603?ref_src=twsrc%5Etfw\">June 4, 2021</a></blockquote><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</div></figure>\n\n\n\n<p>Again, my brain does it totally wrong. It goes:</p>\n\n\n\n<ol><li>OK, well, <code>--color</code> is declared, so it&#8217;s not blue (the fallback). </li><li>It&#8217;s not <code>red</code> because the second declaration will override that one. </li><li>So, it&#8217;s essentially like <code>p { color: inherit; }</code>.</li><li>The <code>&lt;p&gt;</code> will inherit <code>yellow</code> from the <code>&lt;body&gt;</code>, which it would have done naturally anyway, but whatever, it&#8217;s still <code>yellow</code>. </li></ol>\n\n\n\n<p>Nope.</p>\n\n\n\n<p>Apparently <code>inherit</code> there is actually inheriting from the next place up the tree that sets it, which <code>html</code> does, so <code>green</code>. That actually is how normal inheriting works. It&#8217;s just a brain twister because it&#8217;s easy to conflate <code>color</code> the property with <code>--color</code> the custom property. </p>\n\n\n\n<p>It also might be useful to know that when you actually declare a custom property with <code>@property</code> you can say whether you want it to inherit or not. So that would change the game with these brain twisters!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"3\"><code markup=\"tt\">@property --property-name {\n  syntax: '&lt;color>';\n  inherits: false;\n  initial-value: #c0ffee;\n}</code></pre>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/custom-property-brain-twisters/\">Custom Property Brain Twisters</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/custom-property-brain-twisters/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "342718",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Queue Data Structures: How to Build a Node Task Queue"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/implement-task-queue-node-js/?utm_source=rss\"\n              title=\"Queue Data Structures: How to Build a Node Task Queue\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622834212Queue.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622834212Queue-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622834212Queue-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622834212Queue-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622834212Queue-1536x808.jpg 1536w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622834212Queue.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This tutorial explains and demonstrates queuing systems. Queues are often used to process long-running tasks such as email newsletter delivery.</strong></p>\n<p>It&#8217;s not always practical to execute a task the moment it&#8217;s requested.</p>\n<p>Consider an email newsletter administration system. After writing, an administrator must hit a big red &#8220;SEND NOW&#8221; button. The application <em>could</em> send every email immediately and show a &#8220;completed&#8221; response. That would work for a dozen messages, but how long would it take for 1,000 subscribers or more? The browser request would time out before the process completed.</p>\n<p>Another example: a user can upload any number of photographs to a gallery application. The system resizes and sharpens each image for alternative dimensions. This process could run on upload, but it would to incur a delay for every image.</p>\n<p>It&#8217;s more effective to decouple tasks in these situations. The user receives an instant response but task processing occurs in the background. Other applications or servers handle tasks and schedule re-attempts on failure. The user can receive alerts or examine logs to determine progress.</p>\n<h2 id=\"queues\">Queues</h2>\n<p>A <strong>queue</strong> is a data structure which holds a collection of items:</p>\n<ul>\n<li>Any process can send (or <em>enqueue</em>) an item at any time — such as send newsletter X to recipient Y.</li>\n<li>Any process can receive (or <em>dequeue</em>) the item at the front of the queue — for example, the item that&#8217;s been in the queue for longest.</li>\n</ul>\n<p>Queues are a first-in-first-out (FIFO) structure. The first item added to the queue will be the first out.</p>\n<h2 id=\"implementingabasicjavascriptqueue\">Implementing a Basic JavaScript Queue</h2>\n<p>You can create a queue using a JavaScript array. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"><code>push()</code> method</a> adds an item to the end of an Array while the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\"><code>shift()</code> method</a> removes and returns an item from the start:</p>\n<pre><code class=\"javascript language-javascript\">const queue = [];\r\n\r\nqueue.push( 'item 1' );\r\nqueue.push( 'item 2' );\r\n\r\nconsole.log( queue.shift() ); // item 1\r\nconsole.log( queue.shift() ); // item 2\r\nconsole.log( queue.shift() ); // undefined\r\n</code></pre>\n<p>Individual array elements can hold any data. You can push strings, numbers, Booleans, other arrays, or objects.</p>\n<p>You can use an ES6 class to define any number of separate queues:</p>\n<pre><code class=\"javascript language-javascript\">class Queue {\r\n\r\n  constructor() { this.q = []; }\r\n  send( item )  { this.q.push( item ); }\r\n  receive()     { return this.q.shift(); }\r\n\r\n}\r\n\r\n// define two queues\r\nconst q1 = new Queue();\r\nconst q2 = new Queue();\r\n\r\nq1.send('item 1');\r\nq2.send('item 2');\r\n\r\nconsole.log( q1.receive() ); // item 1\r\nconsole.log( q1.receive() ); // undefined\r\nconsole.log( q2.receive() ); // item 2\r\n</code></pre>\n<p>These simple examples may be useful for less critical client-side code such as queuing UI updates so processing occurs in a single DOM update. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\">localStorage</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\">IndexedDB</a> can offer a level of data persistence if necessary.</p>\n<h2 id=\"queuingplatforms\">Queuing Platforms</h2>\n<p>In-memory queues are less practical for complex server applications:</p>\n<ol>\n<li>Two or more separate applications can&#8217;t (easily) access the same queue.</li>\n<li>Queue data disappears when the application terminates.</li>\n</ol>\n<p>Purpose built message-broker software provides more robust queuing. Platforms vary, but offer features such as:</p>\n<ul>\n<li>data persistence in a choice of databases with replication, sharding, and clustering options</li>\n<li>a range of access protocols, often including HTTP and Web Sockets</li>\n<li>any number of separate queues</li>\n<li>delayed messaging, where message processing can occur at a later time</li>\n<li>transaction-like support, where a message is re-queued when processing isn&#8217;t confirmed</li>\n<li>publish-subscribe patterns, where applications receive an event when a new item appears on a queue</li>\n</ul>\n<p>Message-broker software includes <a href=\"https://redis.io/\">Redis</a>, <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a>, <a href=\"http://activemq.apache.org/\">Apache ActiveMQ</a>, and <a href=\"http://gearman.org/\">Gearman</a>. Cloud messaging services include <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS</a>, <a href=\"https://azure.microsoft.com/services/service-bus/\">Azure Service Bus</a>, and <a href=\"https://cloud.google.com/pubsub\">Google Pub/Sub</a>.</p>\n<p>These may be viable options for enterprise-level applications. Yet they could be overkill if you have simpler requirements and already use a database.</p>\n<h2 id=\"usemongodbasamessagebroker\">Use MongoDB as a Message Broker</h2>\n<p>It&#8217;s possible to develop a sophisticated queuing system in a couple of hundred lines of Node.js code.</p>\n<p>The <code>queue-mongodb</code> module described here uses <a href=\"https://www.mongodb.com/\">MongoDB</a> for data storage, but the same concepts could be adopted by any SQL or NoSQL database. The code is available on <a href=\"https://github.com/craigbuckler/queue-mongodb\">GitHub</a> and <a href=\"https://www.npmjs.com/package/@craigbuckler/queue-mongodb\">npm</a>.</p>\n<h2 id=\"quickstart\">Quick Start</h2>\n<p>Make sure you have <a href=\"https://nodejs.org/\">Node.js</a> 14 or above installed, then create a new project folder such as <code>queue-test</code>. Add a new <code>package.json</code> file:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"name\": \"queue-test\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Queue test\",\r\n  \"type\": \"module\",\r\n  \"scripts\": {\r\n    \"send\": \"node ./send.js\",\r\n    \"receive\": \"node ./receive.js\"\r\n  }\r\n}\r\n</code></pre>\n<p><em>Note: <code>\"type\": \"module\"</code> configures the project to use ES6 modules. The <code>\"scripts\"</code> will send and receive queued items.</em></p>\n<p>Install the <a href=\"https://www.npmjs.com/package/@craigbuckler/queue-mongodb\">queue-mongodb</a> module:</p>\n<pre><code class=\"bash language-bash\">npm install @craigbuckler/queue-mongodb\r\n</code></pre>\n<p>Then create a <code>.env</code> file with your MongoDB database connection credentials. For example:</p>\n<pre><code class=\"env language-env\">QUEUE_DB_HOST=localhost\r\nQUEUE_DB_PORT=27017\r\nQUEUE_DB_USER=root\r\nQUEUE_DB_PASS=mysecret\r\nQUEUE_DB_NAME=qdb\r\nQUEUE_DB_COLL=queue\r\n</code></pre>\n<p><em>Note: this creates a <code>queue</code> collection (<code>QUEUE_DB_COLL</code>) in the <code>qdb</code> database (<code>QUEUE_DB_NAME</code>). You can use an existing database, but make sure the collection doesn&#8217;t clash with another.</em></p>\n<p><em>Database read/write access must be granted to the user <code>root</code> (<code>QUEUE_DB_USER</code>) with password <code>mysecret</code> (<code>QUEUE_DB_PASS</code>). Set both values blank if no authentication is required.</em></p>\n<p>Start a MongoDB database if it&#8217;s not already running. Those with <a href=\"https://www.docker.com/\">Docker</a> and <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> can create a new <code>docker-compose.yml</code> file:</p>\n<pre><code class=\"yml language-yml\">version: '3'\r\n\r\nservices:\r\n\r\n  queuedb:\r\n    environment:\r\n      - MONGO_INITDB_ROOT_USERNAME=${QUEUE_DB_USER}\r\n      - MONGO_INITDB_ROOT_PASSWORD=${QUEUE_DB_PASS}\r\n    image: mongo:4.4-bionic\r\n    container_name: queuedb\r\n    volumes:\r\n      - queuedata:/data/db\r\n    ports:\r\n      - \"${QUEUE_DB_PORT}:${QUEUE_DB_PORT}\"\r\n    restart: always\r\n\r\nvolumes:\r\n  queuedata:\r\n</code></pre>\n<p>Then run <code>docker-compose up</code> to download and start MongoDB with a persistent data volume.</p>\n<p><em>Docker is available Linux, macOS, and Windows 10. See the <a href=\"https://dockerwebdev.com/tutorials/install-docker/\">Docker installation instructions</a>.</em></p>\n<p>Create a new <code>send.js</code> file to add a randomly generated email messages to a queue named <code>news</code>:</p>\n<pre><code class=\"javascript language-javascript\">// Queue module\r\nimport { Queue } from '@craigbuckler/queue-mongodb';\r\n\r\n// initialize queue named 'news'\r\nconst newsQ = new Queue('news');\r\n\r\n// random name\r\nconst name = String.fromCharCode(65 + Math.random() * 26).repeat(1 + Math.random() * 10);\r\n\r\n// add object to queue\r\nconst send = await newsQ.send({\r\n  name:     name,\r\n  email:    `${ name.toLowerCase() }@test.com`,\r\n  date:     new Date(),\r\n  message:  `Hey there, ${ name }!`\r\n});\r\n\r\nconsole.log('send', send);\r\n\r\n// get number of items remaining in queue\r\nconsole.log('items queued:', await newsQ.count());\r\n\r\n// close connection and quit\r\nawait newsQ.close();\r\n</code></pre>\n<p>Execute it with <code>npm run send</code> and you&#8217;ll see output such as this:</p>\n<pre><code class=\"bash language-bash\">send {\r\n  _id: 607d692563bd6d05bb459931,\r\n  sent: 2021-04-19T11:27:33.000Z,\r\n  data: {\r\n    name: 'AAA',\r\n    email: 'aaa@test.com',\r\n    date: 2021-04-19T11:27:33.426Z,\r\n    message: 'Hey there, AAA!'\r\n  }\r\n}\r\nitems queued: 1\r\n</code></pre>\n<p>The <code>.send()</code> method returns an <code>qItem</code> object containing:</p>\n<ol>\n<li>the MongoDB document <code>_id</code></li>\n<li>the date/time the item was originally queued, and</li>\n<li>a copy of the message <code>data</code></li>\n</ol>\n<p>Run the script any number of times to add further items to the queue. The <code>items queued</code> will increment on every run.</p>\n<p>Now create a new <code>receive.js</code> file to retrieve messages from the same queue:</p>\n<pre><code class=\"javascript language-javascript\">// Queue module\r\nimport { Queue } from '@craigbuckler/queue-mongodb';\r\n\r\n// initialize queue named 'news'\r\nconst newsQ = new Queue('news');\r\n\r\nlet qItem;\r\n\r\ndo {\r\n\r\n  qItem = await newsQ.receive();\r\n\r\n  if (qItem) {\r\n\r\n    console.log('\\nreceive', qItem);\r\n\r\n    // ... process qItem.data ...\r\n    // ... to send email ...\r\n\r\n  }\r\n\r\n} while (qItem);\r\n\r\n// number of items remaining in queue\r\nconsole.log('items queued:', await newsQ.count());\r\n\r\nawait newsQ.close();\r\n</code></pre>\n<p>Run <code>npm run receive</code> to fetch and process queued items:</p>\n<pre><code class=\"bash language-bash\">receive {\r\n  _id: 607d692563bd6d05bb459931,\r\n  sent: 2021-04-19T11:27:33.000Z,\r\n  data: {\r\n    name: 'AAA',\r\n    email: 'aaa@test.com',\r\n    date: 2021-04-19T11:27:33.426Z,\r\n    message: 'Hey there, AAA!'\r\n  }\r\n}\r\nitems queued: 0\r\n</code></pre>\n<p>No email is sent in this example, but that could be implemented using <a href=\"https://www.npmjs.com/package/nodemailer\">Nodemailer</a> or another suitable module.</p>\n<p>If processing fails — <em>perhaps because the mail server is down</em> — an item can be re-queued with this:</p>\n<pre><code class=\"javascript language-javascript\">newsQ.send( qItem.data, 600 );\r\n</code></pre>\n<p>The second <code>600</code> argument is an optional number of seconds or future date. This command re-queues the item after 600 seconds (ten minutes) have elapsed.</p>\n<p>This is a simple example, but any application can send data to any number of queues. Another process, perhaps started as a <code>cron</code> job, can receive and process items when necessary.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/implement-task-queue-node-js/?utm_source=rss\">Queue Data Structures: How to Build a Node Task Queue</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/implement-task-queue-node-js/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=183083",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 03 May 2021 16:00:07 GMT"
        ],
        "metaDesc": [
            "Queues prevent bottlenecks by managing how long-running tasks are executed. Learn how to use them in your apps by building a Node task queue."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Build a Secure Desktop App with Electron Forge and React"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/electron-forge-react-build-secure-desktop-app/?utm_source=rss\"\n              title=\"Build a Secure Desktop App with Electron Forge and React\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618810770electron_result_1200.jpg\"\n        alt=\"Build a Secure Desktop App with Electron Forge and React\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618810770electron_result_1200-300x159.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618810770electron_result_1200-768x406.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618810770electron_result_1200-1024x541.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1618810770electron_result_1200.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll create a simple desktop application using Electron and React. It will be a small text editor called &#8220;scratchpad&#8221; that automatically saves changes as you type, similar to <a href=\"https://fromscratch.rocks\"><strong>FromScratch</strong></a>. We&#8217;ll pay attention to making the application secure by using Electron Forge, the up-to-date build tool provided by the Electron team.</strong></p>\n<p><a href=\"https://www.electronforge.io/\">Electron Forge</a> is &#8220;a complete tool for creating, publishing, and installing modern Electron applications&#8221;. It provides a convenient development environment, as well as configuring everything needed for building the application for multiple platforms (though we won&#8217;t touch on that in this article).</p>\n<p>We&#8217;ll assume you know what Electron and React are, though you don&#8217;t need to know these to follow along with the article.</p>\n<p>You can find the code for the finished application on <a href=\"https://github.com/sitepoint-editors/scratchpad-example\">GitHub</a>.</p>\n<h2 id=\"setup\">Setup</h2>\n<p>This tutorial assumes that you have Node installed on your machine. If that&#8217;s not the case, please head over to the <a href=\"https://nodejs.org/en/download/\">official download page</a> and grab the correct binaries for your system, or use a <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">version manager</a> such as nvm. We&#8217;ll also assume a working installation of <a href=\"https://git-scm.com/downloads\">Git</a>.</p>\n<p>Two important terms I&#8217;ll use below are &#8220;main&#8221; and &#8220;renderer&#8221;. Electron applications are &#8220;managed&#8221; by a Node.js JavaScript file. This file is called the &#8220;main&#8221; process, and it&#8217;s responsible for anything operating-system related, and for creating browser windows. These browser windows run Chromium, and are referred to as the &#8220;renderer&#8221; part of Electron, because it&#8217;s the part that actually renders something to the screen.</p>\n<p>Now let&#8217;s begin by setting up a new project. Since we want to use Electron Forge and React, we&#8217;ll head over to the Forge website and look at <a href=\"https://www.electronforge.io/guides/framework-integration/react\">the guide for integrating React</a>.</p>\n<p>First off, we need to set up Electron Forge with the webpack template. Here&#8217;s how we can do that in one terminal command:</p>\n<pre><code class=\"bash language-bash\">$ npx create-electron-app scratchpad --template=webpack\r\n</code></pre>\n<p>Running that command will take a little while as it sets up and configures everything from Git to webpack to a <code>package.json</code> file. When that&#8217;s done and we <code>cd</code> into that directory, this is what we see:</p>\n<pre><code class=\"bash language-bash\">➜  scratchpad git:(master) ls\r\nnode_modules\r\npackage.json\r\nsrc\r\nwebpack.main.config.js\r\nwebpack.renderer.config.js\r\nwebpack.rules.js\r\n</code></pre>\n<p>We&#8217;ll skip over the <code>node_modules</code> and <code>package.json</code>, and before we peek into the <code>src</code> folder, let&#8217;s go over the webpack files, since there are three. That&#8217;s because Electron actually runs two JavaScript files: one for the Node.js part, called &#8220;main&#8221;, which is where it creates browser windows and communicates with the rest of the operating system, and the Chromium part called &#8220;renderer&#8221;, which is the part that actually shows up on your screen.</p>\n<p>The third webpack file — <code>webpack.rules.js</code> — is where any shared configuration between Node.js and Chromium is set to avoid duplication.</p>\n<p>Okay, now it&#8217;s time to look into the <code>src</code> folder:</p>\n<pre><code class=\"bash language-bash\">➜  src git:(master) ls\r\nindex.css\r\nindex.html\r\nmain.js\r\nrenderer.js\r\n</code></pre>\n<p>Not too overwhelming: an HTML and CSS file, and a JavaScript file for both the main, and the renderer. That&#8217;s looking good. We&#8217;ll open these up later on in the article.</p>\n<h3 id=\"addingreact\">Adding React</h3>\n<p>Configuring webpack can be pretty daunting, so luckily we can largely follow the <a href=\"https://www.electronforge.io/guides/framework-integration/react\">guide to integrating React</a> into Electron. We&#8217;ll begin by installing all the dependencies we need.</p>\n<p>First, the <code>devDependencies</code>:</p>\n<pre><code class=\"bash language-bash\">npm install --save-dev @babel/core @babel/preset-react babel-loader\r\n</code></pre>\n<p>Followed by React and React-dom as regular dependencies:</p>\n<pre><code class=\"bash language-bash\">npm install --save react react-dom\r\n</code></pre>\n<p>With all the dependencies installed, we need to teach webpack to support JSX. We can do that in either <code>webpack.renderer.js</code> or <code>webpack.rules.js</code>, but we&#8217;ll follow the guide and add the following loader into <code>webpack.rules.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">module.exports = [\r\n  ...\r\n  {\r\n    test: /\\.jsx?$/,\r\n    use: {\r\n      loader: 'babel-loader',\r\n      options: {\r\n        exclude: /node_modules/,\r\n        presets: ['@babel/preset-react']\r\n      }\r\n    }\r\n  },\r\n];\r\n</code></pre>\n<p>Okay, that should work. Let&#8217;s quickly test it by opening up <code>src/renderer.js</code> and replacing its contents with the following:</p>\n<pre><code class=\"javascript language-javascript\">import './app.jsx';\r\nimport './index.css';\r\n</code></pre>\n<p>Then create a new file <code>src/app.jsx</code> and add in the following:</p>\n<pre><code class=\"javascript language-javascript\">import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nReactDOM.render(&lt;h2&gt;Hello from React in Electron!&lt;/h2&gt;, document.body);\r\n</code></pre>\n<p>We can test if that works by running <code>npm start</code> in the console. If it opens a window that says &#8220;Hello from React in Electron!&#8221;, everything is good to go.</p>\n<p>You might have noticed that the devtools are open when the window shows. That&#8217;s because of this line in the <code>main.js</code> file:</p>\n<pre><code class=\"javascript language-javascript\">mainWindow.webContents.openDevTools();\r\n</code></pre>\n<p>It&#8217;s fine to leave this for now, as it will come in handy while we work. We&#8217;ll get to <code>main.js</code> later on in the article as we configure its security and other settings.</p>\n<p>As for the error and the warnings in the console, we can safely ignore them. Mounting a React component on <code>document.body</code> can indeed be problematic with third-party code interfering with it, but we&#8217;re not a website and don&#8217;t run any code that&#8217;s not ours. Electron gives us a warning as well, but we&#8217;ll deal with that later.</p>\n<h2 id=\"buildingourfunctionality\">Building Our Functionality</h2>\n<p>As a reminder, we&#8217;re going to build a small scratchpad: a little application that saves anything we type as we type it.</p>\n<p>To start, we&#8217;ll add <a href=\"https://www.npmjs.com/package/codemirror\">CodeMirror</a> and <a href=\"https://www.npmjs.com/package/react-codemirror\">react-codemirror</a> so we get an easy-to-use editor:</p>\n<pre><code class=\"bash language-bash\">npm install --save react-codemirror codemirror\r\n</code></pre>\n<p>Let&#8217;s set up CodeMirror. First, we need to open up <code>src/renderer.js</code> and import and require some CSS. CodeMirror ships with <a href=\"https://codemirror.net/theme/\">a couple of different themes</a>, so pick one you like, but for this article we&#8217;ll use the Material theme. Your renderer.js should now look like this:</p>\n<pre><code class=\"javascript language-javascript\">import 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport './app.jsx';\r\nimport './index.css';\r\n</code></pre>\n<p><em>Note how we import our own files <strong>after</strong> the CodeMirror CSS. We do this so we can more easily override the default styling later.</em></p>\n<p>Then in our <code>app.jsx</code> file we&#8217;re going to import our <code>CodeMirror</code> component as follows:</p>\n<pre><code class=\"javascript language-javascript\">import CodeMirror from 'react-codemirror';\r\n</code></pre>\n<p>Create a new React component in <code>app.jsx</code> that adds CodeMirror:</p>\n<pre><code class=\"javascript language-javascript\">const ScratchPad = () =&gt; {\r\n  const options = {\r\n    theme: \"material\"\r\n  };\r\n\r\n  const updateScratchpad = newValue =&gt; {\r\n    console.log(newValue)\r\n  }\r\n\r\n  return &lt;CodeMirror\r\n    value=\"Hello from CodeMirror in React in Electron\"\r\n    onChange={updateScratchpad}\r\n    options={options} /&gt;;\r\n}\r\n</code></pre>\n<p>Also replace the render function to load our ScratchPad component:</p>\n<pre><code class=\"javascript language-javascript\">ReactDOM.render(&lt;ScratchPad /&gt;, document.body);\r\n</code></pre>\n<p>When we start the app now, we should see a text editor with the text &#8220;Hello from CodeMirror in React in Electron&#8221;. As we type into it, the updates will show in our console.</p>\n<p>What we also see is that there&#8217;s a white border, and that our editor doesn&#8217;t actually fill the whole window, so let&#8217;s do something about that. While we&#8217;re doing that, we&#8217;ll do some housekeeping in our <code>index.html</code> and <code>index.css</code> files.</p>\n<p>First, in <code>index.html</code>, let&#8217;s remove everything inside the body element, since we don&#8217;t need it anyway. Then we&#8217;ll change the title to &#8220;Scratchpad&#8221;, so that the title bar won&#8217;t say &#8220;Hello World!&#8221; as the app loads.</p>\n<p>We&#8217;ll also add a <code>Content-Security-Policy</code>. What that means is too much to deal with in this article (<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">MDN has a good introduction</a>), but it&#8217;s essentially a way to prevent third-party code from doing things we don&#8217;t want to happen. Here, we tell it to only allow scripts from our origin (file) and nothing else.</p>\n<p>All in all, our <code>index.html</code> will be very empty and will look like this:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;title&gt;Scratchpad&lt;/title&gt;\r\n    &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self';\"&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>Now let&#8217;s move to <code>index.css</code>. We can remove everything that&#8217;s in there now, and replace it with this:</p>\n<pre><code class=\"css language-css\">html, body {\r\n  position: relative;\r\n  width:100vw;\r\n  height:100vh;\r\n  margin:0;\r\n  background: #263238;\r\n}\r\n\r\n.ReactCodeMirror,\r\n.CodeMirror {\r\n  position: absolute;\r\n  height: 100vh;\r\n  inset: 0;\r\n}\r\n</code></pre>\n<p>This does a couple of things:</p>\n<ul>\n<li>It removes the margin that the body element has by default.</li>\n<li>It makes the CodeMirror element the same height and width as the window itself.</li>\n<li>It adds the same background color to the body element so it blends nicely.</li>\n</ul>\n<p><em>Notice how we use <a href=\"https://caniuse.com/mdn-css_properties_inset\">inset</a>, which is a shorthand CSS property for the top, right, bottom and left values. Since we know that our app is always going to run in Chromium version 89, we can use modern CSS without worrying about support!</em></p>\n<p>So this is pretty good: we have an application that we can start up and that lets us type into it. Sweet!</p>\n<p>Except, when we close the application and restart it again, everything&#8217;s gone again. We want to write to the file system so that our text is saved, and we want to do that as safely as possible. For that, we&#8217;ll now shift our focus to the <code>main.js</code> file.</p>\n<p>Now, you might have also noticed that even though we added a background color to the <code>html</code> and <code>body</code> elements, the window is still white while we load the application. That&#8217;s because it takes a few milliseconds to load in our <code>index.css</code> file. To improve how this looks, we can configure the browser window to have a specific background color when we create it. So let&#8217;s go to our <code>main.js</code> file and add a background color. Change your <code>mainWindow</code> so it looks like this:</p>\n<pre><code class=\"javascript language-javascript\">const mainWindow = new BrowserWindow({\r\n  width: 800,\r\n  height: 600,\r\n  backgroundColor: \"#263238\",\r\n});\r\n</code></pre>\n<p>And now when you start, the flash of white should be gone!</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/electron-forge-react-build-secure-desktop-app/?utm_source=rss\">Build a Secure Desktop App with Electron Forge and React</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/electron-forge-react-build-secure-desktop-app/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182165",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Kilian Valkhof"
        ],
        "pubDate": [
            "Tue, 20 Apr 2021 16:00:06 GMT"
        ],
        "metaDesc": [
            "Creating a cross-platform desktop app is easy thanks to Electron. Learn how to create a secure desktop app using React, Electron and Electron Forge."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Building WebRTC Video Chat Applications"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/building-webrtc-video-chat-applications/?utm_source=rss\"\n              title=\"Building WebRTC Video Chat Applications\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624854085webrtc-video.png\"\n        alt=\"Building WebRTC Video Chat Applications\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624854085webrtc-video-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624854085webrtc-video.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>With the advent of WebRTC and the increasing capacity of browsers to handle peer-to-peer communications in real time, it’s easier than ever to build real-time applications. In this article, we’ll take a look at <a href=\"https://www.simplewebrtc.com/\">SimpleWebRTC</a> and how we can use the platform in implementing WebRTC technology. We&#8217;ll also look at other alternatives that could help us achieve the same goal.</strong></p>\n<p>If you need a bit of background regarding WebRTC and peer-to-peer communication, I recommend reading “<a href=\"https://www.sitepoint.com/the-dawn-of-webrtc/\">The Dawn of WebRTC</a>” and “<a href=\"https://www.sitepoint.com/introduction-getusermedia-api/\">An Introduction to the getUserMedia API</a>”.</p>\n<p>Due to the complex nature of building custom WebRTC applications, this won&#8217;t be a step-by-step tutorial on building one. Instead, we&#8217;ll look at the libraries and the types of servers required to build your own reliable app. I&#8217;ll provide links of complete sample apps you can refer to while building yours.</p>\n<p>Our focus will mainly be on <strong>SimpleWebRTC</strong> as a platform. Later on, we&#8217;ll briefly look at other commercial and open-source alternatives that may help you accomplish the same.</p>\n<h2 id=\"whatwebrtcis\">What WebRTC Is</h2>\n<p>WebRTC (Web Real Time Communication) is an open-source project that allows peer-to-peer, real-time communication between web browsers to stream live video, audio and data streams over a network. Modern desktop and mobile browsers such as Google Chrome, Mozilla Firefox, Safari, Opera and other Chromium-based browsers have already implemented this technology natively. This is good news, as users don&#8217;t have to install a third-party plugin or an app to access the technology.</p>\n<p>Older browser versions and legacy browsers such as Internet Explorer don&#8217;t have this technology. Users will need to use up-to-date browsers. You can check the <a href=\"https://caniuse.com/?search=webrtc\">full list of supported browsers</a>:</p>\n<p class=\"ciu_embed\" data-feature=\"mdn-api__RTCPeerConnection\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\">\n<p>Data on support for the mdn-api__RTCPeerConnection feature across the major browsers</p>\n<p>In January 2021, the WebRTC 1.0 specification was transitioned from <strong>Candidate Recommendation</strong> to <strong>Recommendation</strong> status by the <a href=\"https://www.w3.org/TR/2021/REC-webrtc-20210126/\">World Wide Web Consortium</a>. This is a remarkable achievement considering the technology was first released into the public 10 years ago.</p>\n<p>The WebRTC specification covers how browsers can access local media devices and how they can transmit media and generic application data to a browser using a set of real-time protocols. It does this through a set of JavaScript APIs which have already been covered by the articles linked to earlier. The specification also ensures that all communication is encrypted and that unwanted third parties can&#8217;t eavesdrop into the streams.</p>\n<p>It&#8217;s important to note that WebRTC doesn&#8217;t cover everything such as <strong>signaling</strong>, the process of initiating a connection between browsers. This part of the specification was left out in order to prevent limitations with potentially new technology. A second reason was that WebRTC is primarily client-side technology, and issues such as sessions are best handled using server technology.</p>\n<h2 id=\"howsignalingworksforwebbrowsers\">How Signaling Works for Web Browsers</h2>\n<p>The very definition of WebRTC is peer-to-peer communication between web browsers. The reality is, most browsers run in computers that operate behind a NAT (network address translation) device, and optionally a firewall. The NAT device, usually a router or modem, allows computers with private IP addresses to connect to the Internet via a single public IP address.</p>\n<p>NAT devices protect personal computers from being directly exploited by malicious users over the Internet via the IP address. Unfortunately, it also blocks devices with private IP addresses from connecting to another private IP device over the Internet.</p>\n<p>To overcome this challenge, the <strong>ICE (Interactive Connectivity Establishment)</strong> protocol was proposed by the <a href=\"https://tools.ietf.org/html/rfc8445\">Internet Engineering Task Force</a> to allow private IP computers to discover and connect to other private computers over the public network.</p>\n<p>This involves the use of a <strong>public signaling server</strong> that both clients can easily connect to. The peer computers connect to this server and use it to exchange IP addresses and ports required for the data sources and sinks. With this information, they can establish direct connection with each other and start streaming video, audio and data.</p>\n<p>Here&#8217;s an animated demonstration:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162141985401-webrtc-signaling.gif\" alt=\"webrtc stun only signaling\" /></p>\n<p><small>Photo credit: <a href=\"https://www.frozenmountain.com/ultimate-guide-to-webrtc\">WebRTC Signaling</a></small></p>\n<p>To set up WebRTC signaling, the ICE framework requires you to provide two types of servers, detailed below.</p>\n<h3 id=\"1stunserver\">1. STUN Server</h3>\n<p>The <strong>STUN (Session Traversal Utilities for NAT)</strong> server does exactly what I&#8217;ve just described above. It simply provides a meeting space for computers to exchange contact information. Once the information is exchanged, a connection is established between the peer computers and then the STUN server is left out of the rest of the conversation.</p>\n<p>Here&#8217;s an example script that runs on the client, which allows the browser to initiate connection through a STUN server. The script allows for multiple STUN server URLs to be provided in case one fails:</p>\n<pre><code class=\"javascript language-javascript\">function createPeerConnection() {\r\n  myPeerConnection = new RTCPeerConnection({\r\n    iceServers: [\r\n      {\r\n        urls: \"stun:stun.stunprotocol.org\",\r\n      },\r\n    ],\r\n  });\r\n}\r\n</code></pre>\n<p>Connections established via STUN servers are the most ideal and cost-effective type of WebRTC communication. There&#8217;s hardly any running cost incurred by the users. Unfortunately, the connection may fail to establish for some users due to the type of NAT device each peer is using. In such a situation, the ICE protocol requires you to provide a fallback, which is a different type of signaling server known as a <strong>TURN</strong> server.</p>\n<h3 id=\"2turnserver\">2. TURN Server</h3>\n<p>A <strong>TURN (Traversal Using Relay NAT)</strong> server is an extension of the STUN server. Where it differs from its predecessor is that it handles the entire communication session.</p>\n<p>Basically, after establishing a connection between the peers, it receives streams from one peer and relays it to the other, and vice versa. This type of communication is more expensive and the host has to pay for the processing and bandwidth load required to operate a TURN server.</p>\n<p>Below is a graphical depiction of the entire signaling process involving first the STUN server and then the TURN server as fallback:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162141985602-webrtc-signalling-complete.png\" alt=\"webrtc stun turn signalling\" /></p>\n<p><small>Photo credit: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Connectivity\">A complete architectural diagram showing the whole WebRTC process.</a></small></p>\n<h3 id=\"buildingacustomvideochatapplication\">Building a Custom Video Chat Application</h3>\n<p>While it&#8217;s possible to set up your own video chat solution using plain JavaScript code and free public STUN servers, not everyone will be able to connect with each other on your platform. Using TURN servers is mandatory if you want to provide a reliable service to all your users.</p>\n<p>As mentioned earlier, setting up WebRTC platforms can be complex. Fortunately for us, we have all-in-one commercial platforms that make building a WebRTC video chat application a breeze. Let&#8217;s now look at how SimpleWebRTC can lift our burdens.</p>\n<h2 id=\"whatsimplewebrtcis\">What SimpleWebRTC Is</h2>\n<p>SimpleWebRTC is a platform that provides an easy and cost-effective service for developers to build and deploy custom real-time applications using React. Specifically, they provide the following:</p>\n<ul>\n<li>SimpleWebRTC SDK: a front-end library</li>\n<li>Hosting: STUN/TURN and SFU (Selective Forward Unit) servers</li>\n<li>Technical support</li>\n<li>Custom app development and WebRTC consulting services</li>\n<li>Single-tenant and on-premise infrastructure</li>\n<li><a href=\"https://talky.io/\">Talky</a>: a free video chat app built entirely with SimpleWebRTC</li>\n</ul>\n<p>Below are sample screenshots of some of the custom video chat projects they&#8217;ve helped their clients develop and launch.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162141986803-web-talky.jpg\" alt=\"web talky\" /></p>\n<p><small>Photo credit: <a href=\"https://talky.io/\">Talky</a></small></p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/162141987204-web-tutoring.jpg\" alt=\"web tutoring\" /></p>\n<p><small>Photo credit: <a href=\"https://www.simplewebrtc.com/consulting\">Web tutoring app</a></small></p>\n<p>The main WebRTC services provided by SimpleWebRTC platform include:</p>\n<ul>\n<li>secure streaming of video, voice and screen-sharing</li>\n<li>end-to-end encryption</li>\n<li>support for up to 30 concurrent users</li>\n<li>unlimited rooms</li>\n</ul>\n<p>In terms of pricing, they offer the following <a href=\"https://www.simplewebrtc.com/pricing\">plans</a>:</p>\n<ul>\n<li>Small Group: up to 6 participants, starting from $5 per month</li>\n<li>Large Group: up to 30 participants, starting from $3 per month</li>\n</ul>\n<p>The Small Group plan has the benefit of having end-to-end encryption available over the Large Group plan. With the Small Group plan, 60–80% of the sessions are peer-to-peer connections where media streams never touch the servers. Bandwidth consumption for such types of sessions isn&#8217;t charged.</p>\n<p>With Large Group plans, traffic is routed through a server called an <strong>SFU (Selective Forwarding Unit)</strong>, where all streams are metered.</p>\n<p>It&#8217;s important to note that most commercial alternatives, which we&#8217;ll briefly look at later, have <em>per minute</em> pricing. At first glance, it does appear quite affordable. However, you do get charged for peer-to-peer connections, which is free for SimpleWebRTC.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/building-webrtc-video-chat-applications/?utm_source=rss\">Building WebRTC Video Chat Applications</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/building-webrtc-video-chat-applications/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=194412",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Michael Wanyoike"
        ],
        "pubDate": [
            "Sun, 27 Jun 2021 16:00:26 GMT"
        ],
        "metaDesc": [
            "Looking to build a WebRTC video chat app? Learn how use SimpleWebRTC as a platform, as well as commercial and open-source alternatives."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Beyond Console.log() – Level up Your Debugging Skills"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/beyond-console-log-level-up-your-debugging-skills/?utm_source=rss\"\n              title=\"Beyond Console.log() – Level up Your Debugging Skills\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615176675debugging.jpg\"\n        alt=\"Using the browser developer tools like a boss\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615176675debugging-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615176675debugging-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615176675debugging-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615176675debugging.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>You may have established a pattern of coding that utilizes a few key tools offered by your browser&#8217;s console. But have you dug any deeper lately? There are some powerful tools available to you, and they might just revolutionize the way you work.</strong></p>\n<h2 id=\"thecomfortzone\">The Comfort Zone</h2>\n<p>As developers, we like to find a way of working that make us feel efficient. The trap, though, is that we get comfortable with a certain workflow and assume there&#8217;s no better way. We’ve internalized an approach and don&#8217;t have to think about what we do.</p>\n<p>A common developer workflow is to write code in an editor, save it, then switch to the browser and load the product to see if everything works. We then use the developer tools in the browser to tweak the CSS and maybe test how the products react to resizing and mobile emulation. We debug our scripts by adding a <code>console.log()</code> statement wherever we need some insights — keeping a tight connection between line numbers and debugging.</p>\n<p>This results in a bit of a mess. If you keep your browser tools open when surfing the Web, you&#8217;ll see a lot of messages in the code that shouldn’t end up in a final product. It not only makes it confusing for people who open them by accident, but can also be daunting for new developers to look at.</p>\n<p>We only use a small percentage of the tools at our disposal, and we may miss out on opportunities to work better and with less effort. That&#8217;s okay, but let&#8217;s see how we can do better.</p>\n<p>We&#8217;ll look at a few features of freely available developer tools you probably use but don&#8217;t know about. Specifically, these features are in the <a href=\"https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium\">Chromium browser developer tools</a> and some in <a href=\"https://code.visualstudio.com\">Visual Studio Code</a>. Let&#8217;s start by learning more about a perennial favorite — the Console.</p>\n<h2 id=\"levelingupourconsolegame\">Leveling Up Our Console Game</h2>\n<p>We&#8217;re conditioned early on in our development career to add a <code>console.log(thing)</code> anywhere in our code to learn about what&#8217;s going on. Often that&#8217;s enough, but sometimes you still don&#8217;t get the right information, or it&#8217;s in some raw format that&#8217;s hard to understand.</p>\n<p>You can see all the following tricks by grabbing <a href=\"https://github.com/sitepoint-editors/beyond-console-log/blob/main/demos/log-examples.html\">this demo page on GitHub</a> and opening it in your browser with your developer tools open. (Or view a [live demo on CodePen](on <a href=\"https://codepen.io/SitePoint/pen/mdOzyWE?editors=0012\">CodePen</a>).</p>\n<p>The first trick here is to add curly braces to variables you log. This not only prints out their value, but also the name of the variable. It makes it easier to track down in the log what value came from where.</p>\n<pre><code class=\"javascript language-javascript\">let x = 2;\r\nconsole.log(x) // 2\r\nconsole.log({x}) // {x: 2}\r\n</code></pre>\n<h3 id=\"formattinglogs\">Formatting logs</h3>\n<p>You can also use specifiers in your log message which start with a percentage sign. These allow you to log certain values in different formats:</p>\n<ul>\n<li><code>%s</code>: logs as strings</li>\n<li><code>%i</code> or <code>%d</code>: logs as integers</li>\n<li><code>%f</code>: logs as floating-point value</li>\n<li><code>%o</code>: logs as an expandable DOM element</li>\n<li><code>%O</code>: logs as an expandable JavaScript object</li>\n</ul>\n<p>You can mix and match those. The order of replacement in the first string is the parameter order following it:</p>\n<pre><code class=\"javascript language-javascript\">console.log('%ix %s developer', 10, 'console');\r\n// 10x console developer\r\n</code></pre>\n<p>You can even convert with this, in case you get information that isn&#8217;t in a format you like:</p>\n<pre><code class=\"javascript language-javascript\">console.log('%i', 12.34455241234324234); // 12\r\n</code></pre>\n<p>The <code>%c</code> specifier allows you use CSS to style your log message in case you really want to stand out:</p>\n<pre><code class=\"javascript language-javascript\">console.log('%cPay attention to me','color:firebrick;font-size:40px')\r\n</code></pre>\n<p>Logging is great, but there are <a href=\"https://docs.microsoft.com/en-gb/microsoft-edge/devtools-guide-chromium/console/api\">more options you can use</a> to make things more obvious and to avoid having to write functionality yourself.</p>\n<h3 id=\"groupinglogs\">Grouping logs</h3>\n<p>You can group your logs using <code>console.group()</code> to show them as expandable and collapsible groups.</p>\n<pre><code class=\"javascript language-javascript\">const label = 'The Millenium Falcon Crew';\r\nconsole.group(label);\r\nconsole.log('Leia');\r\nconsole.log('Han');\r\nconsole.log('Chewie');\r\nconsole.log('Ben');\r\nconsole.groupEnd(label);\r\n</code></pre>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1615176786toggle-console-group-smaller.gif\" alt=\"Toggling console groups\" width=\"500\" height=\"236\" class=\"alignnone size-full wp-image-181555\" /></p>\n<p>You can nest groups, and you can use <code>console.groupCollapsed()</code> to not expand them by default:</p>\n<pre><code class=\"javascript language-javascript\">const extendedlabel = 'The Millenium Falcon Crew extended';\r\nconst meat = 'Humanoids';\r\nconst metal = 'Droids';\r\nconsole.group(extendedlabel);\r\nconsole.groupCollapsed(meat);\r\nconsole.log('Leia');\r\nconsole.log('Han');\r\nconsole.log('Chewie');\r\nconsole.log('Ben');\r\nconsole.groupEnd(meat);\r\nconsole.group(metal);\r\nconsole.log('R2D2');\r\nconsole.log('C3PO');\r\nconsole.groupEnd(metal);\r\nconsole.groupEnd(extendedlabel);\r\n</code></pre>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1615176832toggle-nested-console-groups-smaller.gif\" alt=\"Toggling nested console groups\" width=\"500\" height=\"379\" class=\"alignnone size-full wp-image-181556\" /></p>\n<h3 id=\"allowforlogfiltering\">Allow for log filtering</h3>\n<p>Instead of <code>console.log()</code> you can also use <code>console.info()</code>, <code>console.error()</code> and <code>console.warn()</code>. This allows you to filter the messages you see in the console using the console sidebar or the levels selector. That way, you make it easier to find your own messages amongst those coming from third-party scripts and other scripts in you project.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1615176867filtering-console.gif\" alt=\"filtering the console output\" width=\"700\" height=\"501\" class=\"alignnone size-full wp-image-181557\" /></p>\n<h3 id=\"otherusefulconsolemethods\">Other useful console methods</h3>\n<p>You&#8217;ve probably created variables in your debugging journey that count how often a certain method was called or functionality executed. You can do the same thing by using the <code>console.count()</code> and <code>console.countReset()</code> methods. You can create as many of them as you want and distinguish by label:</p>\n<pre><code class=\"javascript language-javascript\">console.count('Chocula'); // Chocula: 1\r\nconsole.count(); // default: 1\r\nconsole.count('Chocula'); // Chocula: 2\r\nconsole.countReset('Chocula'); \r\nconsole.count(); // default: 2 \r\nconsole.count(); // default: 3\r\nconsole.count('Chocula'); // Chocula: 1\r\n</code></pre>\n<p>You can also measure how long a certain part of your script takes using the <code>console.time()</code> method:</p>\n<pre><code class=\"javascript language-javascript\">console.time('go');\r\nfor(let i = 0; i &lt; 200000; i+=1) {\r\n  let x = Math.random()*2000;\r\n}\r\nconsole.timeEnd('go'); // go: 11.7861328125 ms\r\n</code></pre>\n<p>Depending on the data you want to log, it also makes sense to use the right method for the job. Using <code>console.dir()</code> displays not only the content but also the type of data you send it. If you want an XML representation of a node, for example, you can use <code>console.dirxml()</code>. And <code>console.table()</code> is excellent for showing JSON data as a sortable table.</p>\n<h2 id=\"replacingloggingwithliveexpressions\">Replacing Logging with Live Expressions</h2>\n<p>It&#8217;s tempting to use <code>console.log()</code> to monitor things that change a lot. This isn&#8217;t only slow, but also pretty tough to follow. While it&#8217;s useful that the console automatically groups similar values as instances, it&#8217;s still a lot of movement, and you often find yourself only wanting to check the value instead of scrolling back to see where a certain change happened.</p>\n<p>This is where <strong>live expressions</strong> come in. You can add live expressions by activating the eye button in the developer tools. You&#8217;re then asked to enter any valid JavaScript expression, and its value will show up above the console.</p>\n<p>Try it out by activating the eye button and entering <code>document.activeElement</code>. The expression should show <code>body</code> as a value until you activate or focus on any other element in the page. You can see it in action on the SitePoint website in the following video:</p>\n[video width=\"718\" height=\"334\" mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615178951sitepoint-active-element.mp4\"][/video]\n<p>Each expression has an <code>x</code> button next to it to stop monitoring the value. Live expressions are persistent and not connected to a certain domain or site. That&#8217;s why it makes sense to remove them after you&#8217;ve finished debugging to avoid errors.</p>\n<p>Live expressions are wonderful little helpers to monitor changes in the data of your scripts without having to use the console. This is especially useful when you log very busy values — such as the mouse position. This is probably how you&#8217;d approach that:</p>\n<pre><code class=\"javascript language-javascript\">let x = 0;\r\nlet y = 0;\r\ndocument.addEventListener('mousemove', e =&gt; {\r\n  x = e.x;\r\n  y = e.y;\r\n  console.log({x}, {y});\r\n});\r\n</code></pre>\n<p>The result is a really busy log, and it&#8217;s easy to miss important information. Using live expressions, you don&#8217;t have to grasp a fast-moving log, which most likely is also a faster debugging experience. You can see the difference in the following video.</p>\n[video width=\"800\" height=\"410\" mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615179082log-vs-live-expression-smaller.mp4\"][/video]\n<p>Try it out yourself: grab the demo code for <a href=\"https://github.com/sitepoint-editors/beyond-console-log/blob/main/demos/mouse/mousemove.html\">moving the mouse with logging</a> and <a href=\"https://github.com/sitepoint-editors/beyond-console-log/blob/main/demos/mouse/mousemove-no-log.html\">moving the mouse without logging</a> and try running both examples in the browser.</p>\n<h2 id=\"usingtheconsoletomanipulatethecurrentdocument\">Using the Console to Manipulate the Current Document</h2>\n<p>The Console in the developer tools is so much more than a way to display a log. It&#8217;s a <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">REPL</a> that allows you to write and execute JavaScript and learn about available methods and properties of the current document using autocomplete. Just go to the Console in the developer tools, type <code>doc</code>, and hit <kbd>tab</kbd>, and it will automatically convert it to <code>document</code>. If you add a full stop, you&#8217;ll see all the available methods and properties. This is an engaging and simple way to learn about available methods and properties, and it allows you to write a lot of code in a short amount of time.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1615176905console-autocomplete.gif\" alt=\"Console autocomplete in action\" width=\"700\" height=\"501\" class=\"alignnone size-full wp-image-181558\" /></p>\n<p>In addition to that, the Console is also an excellent way to interact with the current document and access parts of it. There&#8217;s a large number of convenience methods and shortcuts available to you as <a href=\"https://docs.microsoft.com/en-gb/microsoft-edge/devtools-guide-chromium/console/utilities\">Console Utilities</a>. Some of these are:</p>\n<ul>\n<li><code>$_</code> stores the result of the last command. So if you were to type <code>2+2</code> and hit enter, typing <code>$_</code> will give you 4.</li>\n<li><code>$0</code> to <code>$4</code> is a stack of the last inspected elements, where <code>$0</code> is always the newest one.</li>\n<li><code>$()</code> and <code>$$()</code> are short for <code>document.querySelector()</code> and <code>document.querySelectorAll()</code>.</li>\n<li><code>$x()</code> allows you to select DOM elements by XPATH.</li>\n<li><code>copy()</code> copies whatever you give it to the clipboard.</li>\n<li><code>clear()</code> clears the console.</li>\n<li><code>getEventListeners(node)</code> lists all the event listeners of a node.</li>\n<li><code>monitorEvents(node, events)</code> monitors and logs the events that happen on a node.</li>\n<li><code>monitor(method)</code> creates a log item whenever a method is called.</li>\n</ul>\n<p>Some of these methods are incredibly powerful and are things we probably have written ourselves as a series of <code>console.log()</code> statements in the past.</p>\n<p>Here are some ways you can use these methods:</p>\n<pre><code class=\"javascript language-javascript\">monitorEvents(window, ['resize', 'scroll']);\r\n\r\nmonitorEvents($0, 'key');\r\n</code></pre>\n<p>This logs every time the window scrolls or gets resized. The second example is interesting, as it logs any key action on the currently selected element:</p>\n<pre><code class=\"javascript language-javascript\">console.table($$('a'),['href','text'])\r\n</code></pre>\n<p>This retrieves all the links in the document (as <code>$$('a')</code> is short for <code>document.querySelectorAll('a')</code>) and displays them as a sortable table. The array as a second parameter of the <code>table</code> method defines the columns of the table.  Otherwise, each property of the link would become a column and that&#8217;s hard to navigate. The fun bit is that the table is not only sortable, but you can copy and paste it — for example, into Excel.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1615176947sitepoint-links-to-excel.gif\" alt=\"Grab all links from sitepoint and paste into Excel\" width=\"800\" height=\"389\" class=\"alignnone size-full wp-image-181559\" /></p>\n<p>Instead of writing complex JavaScript to filter these results, you can use the power of CSS selectors. For example, if you want to have a table of the <code>src</code> and <code>alt</code> information of all images in the document that aren&#8217;t inline images, you can use the following:</p>\n<pre><code class=\"javascript language-javascript\">console.table($$('img:not([src^=data])'), ['src','alt'])\r\n</code></pre>\n<p>However, the most fun with this is to write scripts that run in the context of the page.</p>\n<p>For example, when you use Markdown to generate HTML, most page generators will create automatic IDs on headings to allow for deep linking to that part of the document. A <code># New Stuff</code> heading will turn into <code>&lt;h1 id=\"new-stuff\"&gt;New stuff&lt;/h1&gt;</code>. I needed to batch-create a lot of short URLs pointing to these deep links and didn&#8217;t want to create them by hand.</p>\n<p>So I started to write a script for the Console to do that for me:</p>\n<pre><code class=\"JavaScript language-JavaScript\">let out = '';\r\n$$('#main [id]').filter(\r\n    elm =&gt; {return elm.nodeName.startsWith('H')}\r\n).forEach(elm =&gt; {\r\n   out += `${elm.innerText}\r\n${document.location.href}#${elm.id}\r\n` \r\n});\r\ncopy(out);\r\n</code></pre>\n<p>The result is a block of text with the text content of each heading followed by the full URL pointing to it.</p>\n<p>This also shows an interesting extra feature of the <code>$$</code> shortcut. A <code>document.querySelectorAll('#main [id]').filter()</code> would result in an error, as the returned value isn&#8217;t an <code>Array</code> but a <code>NodeList</code>. You&#8217;d need to cast it to an <code>Array</code> with <code>[...document.querySelectoAll('#main [id]').filter()]</code> or <code>Array.from(document.querySelectoAll('#main [id]').filter())</code>, which has been an annoyance for people coming from jQuery to JavaScript for quite a while. The <code>$$</code> convenience method allows for all the Array methods directly.</p>\n<p>Generally, you have a lot of power to access and change anything on the rendered page in the browser from the Console. And you also have the added benefit of using the <strong>Elements</strong> tab of the developer tools to get the correct path. Activate the <code>...</code> menu next to each node and select from the context menu&#8217;s <strong>copy</strong> menu to grab what you need. </p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1615177010selecting-js-path.gif\" alt=\"selecting a part of the page and copying the JS path\" width=\"700\" height=\"369\" class=\"alignnone size-full wp-image-181560\" /></p>\n<h2 id=\"movingfromconsoletosources\">Moving from Console to Sources</h2>\n<p>Once you&#8217;ve found some fun ways to manipulate web sites, you&#8217;ll soon run into the limitations of the Console as a script environment. It can be a bit tough to code on the Console, as you’re working in a single-line environment. Hitting <kbd>Enter</kbd> immediately executes what you typed and often you do that by accident. There&#8217;s a trick, though. You can write multi-line scripts by using <kbd>Shift</kbd> + <kbd>Enter</kbd> instead.</p>\n<p>In general, the Console makes for a great testing environment but for a poor editing experience. Luckily enough, there&#8217;s also a full editor available in the <strong>Sources</strong> panel. There, you can inspect the code of the current page and write more complex scripts to interact with it.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/beyond-console-log-level-up-your-debugging-skills/?utm_source=rss\">Beyond Console.log() – Level up Your Debugging Skills</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/beyond-console-log-level-up-your-debugging-skills/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181552",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Christian Heilmann"
        ],
        "pubDate": [
            "Mon, 08 Mar 2021 00:42:20 GMT"
        ],
        "metaDesc": [
            "console.log() is a great tool, but your browser's developer tools can do so much more. Learn how to take your coding and debugging to the next level."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Chromium spelling and grammar features"
        ],
        "link": [
            "https://www.azabani.com/2021/05/17/spelling-grammar.html"
        ],
        "comments": [
            "https://css-tricks.com/chromium-spelling-and-grammar-features/#respond"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Tue, 29 Jun 2021 20:25:00 +0000"
        ],
        "category": [
            "Link",
            "pseudo classes"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343260",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p><a href=\"https://www.azabani.com/2021/05/17/spelling-grammar.html\">Delan Azabani digs into</a> the (hopefully) coming soon <code>::spelling-error</code> and <code>::grammar-error</code> pseudo selectors in CSS. Design control is always nice. Hey, if we can <a href=\"https://css-tricks.com/the-current-state-of-styling-scrollbars/\">style scrollbars</a> and <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\">style selected text</a>, why not this?</p>\n<blockquote class=\"wp-block-quote is-style-default\">\n<p>The squiggly lines that indicate possible&#160;spelling&#160;or&#160;grammar&#160;errors </p>\n</blockquote>\n<p>&#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/chromium-spelling-and-grammar-features/\">Chromium spelling and grammar features</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p><a href=\"https://www.azabani.com/2021/05/17/spelling-grammar.html\">Delan Azabani digs into</a> the (hopefully) coming soon <code>::spelling-error</code> and <code>::grammar-error</code> pseudo selectors in CSS. Design control is always nice. Hey, if we can <a href=\"https://css-tricks.com/the-current-state-of-styling-scrollbars/\">style scrollbars</a> and <a href=\"https://css-tricks.com/almanac/selectors/s/selection/\">style selected text</a>, why not this?</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>The squiggly lines that indicate possible&nbsp;spelling&nbsp;or&nbsp;grammar&nbsp;errors have been a staple of word processing on computers for decades. But on the web, these indicators are powered by the browser, which doesn’t always have the information needed to place and render them most appropriately. For example, authors might want to provide their own grammar checker (placement), or tweak colors to improve contrast (rendering).</p><p>To address this, the CSS pseudo and text decoration specs have defined new pseudo-elements <code>::spelling-error</code> and <code>::grammar-error</code>, allowing authors to style those indicators, and new&nbsp;<code>text-decoration-line</code>&nbsp;values&nbsp;<code>spelling-error</code>&nbsp;and&nbsp;<code>grammar-error</code>, allowing authors to mark up their text with the same kind of decorations as native indicators.</p></blockquote>\n\n\n\n<p>This is a unique post too, as Delan is literally the person implementing the feature in the browser. So there is all sorts of deep-in-the-weeds stuff about how complex all this is and what all the considerations are. Kinda like, ya know, web development. Love to see this. I&#8217;ve long felt that it&#8217;s weird there is seemingly such little communication between browser engineers and website authors, despite the latter being a literal consumer of the former&#8217;s work.</p>\n<p><a href=\"https://www.azabani.com/2021/05/17/spelling-grammar.html\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/chromium-spelling-and-grammar-features/\">Permalink</a></p><hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/chromium-spelling-and-grammar-features/\">Chromium spelling and grammar features</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/chromium-spelling-and-grammar-features/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "343260",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Positioning Overlay Content with CSS Grid"
        ],
        "link": [
            "https://css-tricks.com/positioning-overlay-content-with-css-grid/"
        ],
        "comments": [
            "https://css-tricks.com/positioning-overlay-content-with-css-grid/#comments"
        ],
        "dc:creator": [
            "Ryan Mulligan"
        ],
        "pubDate": [
            "Mon, 28 Jun 2021 14:25:33 +0000"
        ],
        "category": [
            "Article",
            "grid",
            "grid-area",
            "grid-template"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=342971",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>Not news to any web developer in 2021: <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS</a> <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">G</a><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">rid</a> is an incredibly powerful tool for creating complex, distinct two-dimensional modern web layouts.</p>\n<p>Recently, I have been experimenting with CSS Grid and alignment properties to create component layouts that &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/positioning-overlay-content-with-css-grid/\">Positioning Overlay Content with CSS Grid</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>Not news to any web developer in 2021: <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">CSS</a> <a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">G</a><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">rid</a> is an incredibly powerful tool for creating complex, distinct two-dimensional modern web layouts.</p>\n\n\n\n<p>Recently, I have been experimenting with CSS Grid and alignment properties to create component layouts that contain multiple overlapping elements. These layouts could be styled using absolute positioning and a mix of offset values (<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>), negative margins, and transforms. But, with CSS Grid, positioning overlay elements can be built using more logical, readable properties and values. The following are a few examples of where these grid properties come in handy.</p>\n\n\n\n<span id=\"more-342971\"></span>\n\n\n\n<p class=\"is-style-explanation\">It will help to read up on <code><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#prop-grid-template-areas\">grid-template-areas</a></code> and <code><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/#grid-area\">grid-area</a></code> properties if you’re not yet familiar with them.</p>\n\n\n\n<h3 id=\"h-expanding-images-inside-limited-dimensions\">Expanding images inside limited dimensions</h3>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_VwpXJRv\" src=\"//codepen.io/anon/embed/VwpXJRv?height=750&amp;theme-id=1&amp;slug-hash=VwpXJRv&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed VwpXJRv\" title=\"CodePen Embed VwpXJRv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p class=\"is-style-explanation\">In the demo, there is a checkbox that toggles the overflow visibility so that we can see where the image dimensions expand beyond the container on larger viewport widths.</p>\n\n\n\n<p>Here’s a common hero section with a headline overlapping an image. Although the image is capped with a <code>max-width</code>, it scales up to be quite tall on desktop. Because of this, the content strategy team has requested that some of the pertinent page content below the hero remain visible in the viewport as much as possible. Combining this layout technique and a fluid container <code>max-height</code> using the CSS <code>clamp()</code> function, we can develop something that adjusts based on the available viewport space while anchoring the hero image to the center of the container.</p>\n\n\n\n<p class=\"is-style-explanation\">CSS <code>clamp()</code>, along with the <code>min()</code> and <code>max()</code> comparison functions, are well-supported in all modern browsers. Haven’t used them? Ahmad Shadeed conducts a fantastic deep dive in <a href=\"https://ishadeed.com/article/css-min-max-clamp/\">this article</a>.</p>\n\n\n\n<p><a href=\"https://codepen.io/hexagoncircle/full/594996d52e52b0a34022af77e9a85be7\">Open this Pen</a> and resize the viewport width. Based on the image dimensions, the container height expands until it hits a maximum height. Notice that the image continues to grow while remaining centered in the container. Resize the viewport height and the container will flex between its <code>max-height</code>’s lower and upper bound values defined in the <code>clamp()</code> function.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2021/06/snuggle-zone-resize-demo-1.mp4\"></video></figure>\n\n\n\n<p>Prior to using grid for the layout styles, I might have tried absolute positioning on the image and title, used an <a href=\"https://css-tricks.com/aspect-ratio-boxes/\">aspect ratio padding trick</a> to create a responsive height, and <code>object-fit</code> to retain the ratio of the image. Something like this could get it there:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container {\n  position: relative;\n  max-height: clamp(400px, 50vh, 600px);\n}\n\n.container::before {\n  content: '';\n  display: block;\n  padding-top: 52.25%;\n}\n\n.container > * {\n  max-width: 1000px;\n}\n\n.container .image {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.container .title {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  text-align: center;\n}</code></pre>\n\n\n\n<p>Maybe it’s possible to whittle the code down some more, but there’s still a good chunk of styling needed. Managing the same responsive layout with CSS Grid will simplify these layout style rules while making the code more readable. Check it out in the following iteration:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container {\n  display: grid;\n  grid-template: \"container\";\n  place-items: center;\n  place-content: center;\n  overflow: hidden;\n  max-height: clamp(450px, 50vh, 600px);\n}\n\n.container > * {\n  grid-area: container;\n  max-width: 1000px;\n}</code></pre>\n\n\n\n<p class=\"is-style-explanation\"><code>place-content: center</code> instructs the image to continue growing out from the middle of the container. Remove this line and see that, while the image is still vertically centered via <code>place-items</code>, once the <code>max-height</code> is reached, the image will stick to the top of the container block and go on scaling beyond its bottom. Set <code>place-content: end center</code> and you’ll see the image spill over the top of the container.</p>\n\n\n\n<p>This behavior may seem conceptually similar to applying <code>object-fit: cover</code> on an image as <a href=\"https://css-tricks.com/on-object-fit-and-object-position/#first-lets-dig-into-object-fit\">a styling method</a> for preserving its intrinsic ratio while resizing to fill its content-box dimensions (it was utilized in the absolute position iteration). However, in this grid context, the image element governs the height of its parent and, once the parent’s <code>max-height</code> is reached, the image continues to expand, maintaining its ratio, and remains completely visible if the parent overflow is shown. <code>object-fit</code> could even be used with the <code>aspect-ratio</code> property here to create a consistent <a href=\"https://css-tricks.com/almanac/properties/a/aspect-ratio/\">aspect ratio</a> pattern for the hero image:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container .image {\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  aspect-ratio: 16 / 9;\n}</code></pre>\n\n\n\n<h3 id=\"h-the-overlay-grid-area\">The overlay <code>grid-area</code></h3>\n\n\n\n<p>Moving on to the container’s direct children, <code>grid-area</code> arranges each of them so that they overlap the same space. In this example, <code>grid-template-areas</code> with the named grid area makes the code a little more readable and works well as a pattern for other overlay-style layouts within a component library. That being said, it is possible to get this same result by removing the template rule and, instead of <code>grid-area: container</code>, using integers:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container > * {\n  grid-area: 1 / 1;\n}</code></pre>\n\n\n\n<p>This is shorthand for <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code>, and <code>grid-column-end</code>. Since the siblings in this demo all share the same single row/column area, only the start lines need to be set for the desired result.</p>\n\n\n\n<h3 id=\"h-setting-place-self-to-place-itself\">Setting <code>place-self</code> to place itself</h3>\n\n\n\n<p>Another common overlay pattern can be seen on image carousels. Interactive elements are often placed on top of the carousel viewport. I’ve extended the first demo and replaced the static hero image with a carousel.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_NWpBgdW\" src=\"//codepen.io/anon/embed/NWpBgdW?height=750&amp;theme-id=1&amp;slug-hash=NWpBgdW&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed NWpBgdW\" title=\"CodePen Embed NWpBgdW\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Same story as before: This layout could fall back on absolute positioning and use integer values in a handful of properties to push and pull elements around their parent container. Instead, we’ll reuse the grid layout rulesets from the previous demo. Once applied, it appears as you might expect: all of the child elements are centered inside the container, overlapping one another.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://paper-attachments.dropbox.com/s_0F168734155B8F539F1702579F564CE286034435D1AB76EED13CC4FE89A78778_1623332993456_centered-overlapping-elements.png\" alt=\"Picture of a cute light brown puppy with the words Welcome to the Snuggle Zone on top in white. The text overlaps over text elements and is hard to read.\"/><figcaption>With <code>place-items: center</code> declared on the container, all of its direct children will overlap one another.</figcaption></figure>\n\n\n\n<p>The next step is to set alignment values on individual elements. The <code><a href=\"https://css-tricks.com/almanac/properties/p/place-self/\">place-self</a></code> property—shorthand for <code>align-self</code> and <code>justify-self</code>—provides granular control over the position of a single item inside the container. Here are the layout styles altogether:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container {\n  display: grid;\n  grid-template:\"container\";\n  place-items: center;\n  place-content: center;\n  overflow: hidden;\n  max-height: clamp(450px, 50vh, 600px);\n}\n\n.container > * {\n  grid-area: container;\n  max-width: 1000px;\n}\n\n.title {\n  place-self: start center;\n}\n\n.carousel-control.prev {\n  place-self: center left;\n}\n\n.carousel-control.next {\n  place-self: center right;\n}\n\n.carousel-dots {\n  place-self: end center;\n}</code></pre>\n\n\n\n<p>There’s just one small problem: The title and carousel dot indicators get pulled out into the overflow when the image exceeds the container dimensions.</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2021/06/snuggle-carousel-position-overflow.mp4\"></video></figure>\n\n\n\n<p>To properly contain these elements within the parent, a <code>grid-template-row</code> value needs to be 100% of the container, set here as one fractional unit.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container {\n  grid-template-areas: \"container\";\n  grid-template-rows: 1fr;\n}</code></pre>\n\n\n\n<p>For this demo, I leaned into the the <code>grid-template</code> shorthand (which we will see again later in this article).</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.container {\n  grid-template: \"container\" 1fr;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2021/06/snuggle-carousel-position-contained.mp4\"></video></figure>\n\n\n\n<p>After providing that little update, the overlay elements stay within the parent container, even when the carousel images spread beyond the carousel’s borders.</p>\n\n\n\n<h3 id=\"h-alignment-and-named-grid-template-areas\">Alignment and named <code>grid-template-areas</code></h3>\n\n\n\n<p>Let’s use the previous overlay layout methods for one more example. In this demo, each box contains elements positioned in different areas on top of an image.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_YzZadLx\" src=\"//codepen.io/anon/embed/YzZadLx?height=750&amp;theme-id=1&amp;slug-hash=YzZadLx&amp;default-tab=result\" height=\"750\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed YzZadLx\" title=\"CodePen Embed YzZadLx\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>For the first iteration, a named template area is declared to overlay the children on the parent element space, similar to the previous demos:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  display: grid;\n  grid-template-areas: \"box\";\n}\n\n.box > *,\n.box::before {\n  grid-area: box;\n}</code></pre>\n\n\n\n<p>The image and semi-transparent overlay now cover the box area, but these style rules also stretch the other items over the entire space. This seems like the right time for <code>place-self</code> to pepper these elements with some alignment magic!</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.tag {\n  place-self: start;\n}\n\n.title {\n  place-self: center;\n}\n\n.tagline {\n  place-self: end start;\n}\n\n.actions {\n  place-self: end;\n}</code></pre>\n\n\n\n<p>That‘s looking great! Every element is positioned in their defined places over the image as intended. Well, almost. There’s a bit of nuance to the bottom area where the tagline and action buttons reside. Hover over an image to reveal the tagline. This might look fine with a short string of text on a desktop screen, but if the tagline becomes longer (or the boxes in the viewport smaller), it will eventually extend behind the action buttons.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"990\" height=\"682\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_0F168734155B8F539F1702579F564CE286034435D1AB76EED13CC4FE89A78778_1622900089500_box-tagline-overflow.png?resize=990%2C682&#038;ssl=1\" alt=\"A two by two grid of images with text overlaid on top, as well as a tag label in the top right corner and, tagline in the bottom left corner and actions to like and share in the bottom right corner of each one.\" class=\"wp-image-342975\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_0F168734155B8F539F1702579F564CE286034435D1AB76EED13CC4FE89A78778_1622900089500_box-tagline-overflow.png?w=990&amp;ssl=1 990w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_0F168734155B8F539F1702579F564CE286034435D1AB76EED13CC4FE89A78778_1622900089500_box-tagline-overflow.png?resize=300%2C207&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_0F168734155B8F539F1702579F564CE286034435D1AB76EED13CC4FE89A78778_1622900089500_box-tagline-overflow.png?resize=768%2C529&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Note how the tagline in the first box on the second row overlaps the action buttons.</figcaption></figure>\n\n\n\n<p>To clean this up, the <code>grid-template-areas</code> use named areas for the tagline and actions. The <code>grid-template-columns</code> rule is introduced so that the actions container only scales to accommodate the size of its buttons while the tagline fills in the rest of the inline area using the <code>1fr</code> value.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  display: grid;\n  grid-template-areas: \"tagline actions\";\n  grid-template-columns: 1fr auto;\n}</code></pre>\n\n\n\n<p>This can also be combined with the <code>grid-template</code> shorthand. The column values are defined after a slash, like so:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  grid-template: \"tagline actions\" / 1fr auto;\n}</code></pre>\n\n\n\n<p>The <code>grid-area</code> is then converted to integers now that the “box” keyword has been removed.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box > *,\n.box::before {\n  grid-area: 1 / 1 / -1 / -1;\n}</code></pre>\n\n\n\n<p>Everything should look the way it did before. Now for the finishing touch. The <code>tagline</code> and <code>actions</code> keywords are set as their respective element <code>grid-area</code> values:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.tagline {\n  grid-area: tagline;\n  place-self: end start;\n}\n\n.actions {\n  grid-area: actions;\n  place-self: end;\n}</code></pre>\n\n\n\n<p>Now, when hovering over the cards in the demo, the tagline wraps to multiple lines when the text becomes too long, rather than pushing past the action buttons like it did before.</p>\n\n\n\n<h3 id=\"h-named-grid-lines\">Named grid lines</h3>\n\n\n\n<p>Looking back at the first iteration of this code, I really liked having the default <code>grid-area</code> set to the <code>box</code> keyword. There’s a way to get that back.</p>\n\n\n\n<p>I’m going add some named grid lines to the template. In the <code>grid-template</code> rule below, the first line defines the named template areas, which also represents the row. After the slash are the explicit column sizes (moved to a new line for readability). The <code>[box-start]</code> and <code>[box-end]</code> custom identifiers represent the <code>box</code> area.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.box {\n  display: grid;\n  grid-template: \n    [box-start] \"tagline actions\" [box-end] /\n    [box-start] 1fr auto [box-end];\n}\n\n.box > *,\n.box::before {\n  grid-area: box;\n}</code></pre>\n\n\n\n<p>Passing a name with the <code>-start</code> and <code>-end</code> syntax into brackets defines an area for that name. This name, known as a <a href=\"https://drafts.csswg.org/css-values-4/#custom-idents\">custom ident</a>, can be anything but <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Layout_using_Named_Grid_Lines#implicit_grid_areas_from_named_lines\">words from the CSS spec should be avoided</a>.</p>\n\n\n\n<h3 id=\"h-logical-placement-values\">Logical placement values</h3>\n\n\n\n<p>One of the really interesting parts to observe in this last example is the use of logical values, like <code>start</code> and <code>end</code>, for placing elements. If the <code>direction</code> or <code>writing-mode</code> were to change, then the elements would reposition accordingly.</p>\n\n\n\n<figure class=\"wp-block-video ticss-7202e66c\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2021/06/image-box-logical-values-demo-3.mp4\"></video></figure>\n\n\n\n<p>When the “right to left” direction is selected from the dropdown, the inline start and end positions are reversed. This layout is ready to accommodate languages, such as Arabic or Hebrew, that read from right to left without having to override any of the existing CSS.</p>\n\n\n\n<h3 id=\"h-wrapping-up\">Wrapping up</h3>\n\n\n\n<p>I hope you enjoyed these demos and that they provide some new ideas for your own project layouts—I’ve compiled a <a href=\"https://codepen.io/collection/rxBOQG\">collection of examples</a> you can check out over at CodePen. The amount of power packed into the CSS Grid spec is incredible. Take a minute to reflect on the days of <a href=\"https://css-tricks.com/in-defense-of-tables-and-floats-in-modern-day-development/\">using floats</a> and a <a href=\"https://css-tricks.com/snippets/css/clear-fix/\">clearfix</a> for primitive grid row design, then return to the present day and behold the glorious layout and display properties of today‘s CSS. To make these things work well is no easy task, so let’s applaud the members of the CSS working group. The web space continues to evolve and they continue to make it a fun place to build.</p>\n\n\n\n<p>Now let’s release <a href=\"https://css-tricks.com/tag/container-queries/\">container queries</a> and really get this party started.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/positioning-overlay-content-with-css-grid/\">Positioning Overlay Content with CSS Grid</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/positioning-overlay-content-with-css-grid/feed/"
        ],
        "slash:comments": [
            "3"
        ],
        "post-id": [
            {
                "_": "342971",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "5 Web Design Trends for 2021"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/web-design-trends/?utm_source=rss\"\n              title=\"5 Web Design Trends for 2021\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612665278web-design-trends-2021.png\"\n        alt=\"5 Web Design Trends for 2021\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612665278web-design-trends-2021-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612665278web-design-trends-2021.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p class=\"wp-special\"><em>This sponsored article was created by our content partner, <a href=\"https://bawmedia.com\" rel=\"sponsored\">BAW Media</a>. Thank you for supporting the partners who make SitePoint possible.</em></p>\n<p><strong>For almost everyone, 2020 was a bummer. Many businesses were forced to take creative measures just to survive. Consumers had to make adjustments as well, and even the Web has had to make some changes.</strong>&nbsp;</p>\n<p>Some of *yesterday’s” design trends had to make way for new ones too.</p>\n<p>What, then, can we expect to see in the way of new design trends in 2021? </p>\n<p>We’ll show you some examples of websites that have incorporated some of these new trends, along with a selection of <a href=\"https://themes.muffingroup.com/\" rel=\"sponsored\">BeTheme pre-built websites</a> that are also putting them to good use.</p>\n<p>Whether you’ll be creating sites for new clients or reworking existing sites to align with the newest trends, the following five design approaches should give you some valuable insight.</p>\n<h2 id=\"1usesoothingreassuringcolorpalettes\">1. Use Soothing, Reassuring Color Palettes</h2>\n<p>Recent design trends have favored strong, bold colors. Various gradient schemes have also been both popular and effective. Why? Because these distinctive trends had a strong tendency to capture a visitor’s attention.</p>\n<p>2020 gave us more than our fair share of worry, stress, and drama. We eagerly look forward to a return to a time in which we’ll once again feel more comfortable in our surroundings.</p>\n<p>We don’t want people shouting at us, or websites shouting at us either, for that matter. Hence, the change to calmer, more toned-down color palettes.</p>\n<p>The <a href=\"https://bellroy.com/\" rel=\"sponsored\">Bellroy</a> website offers a good example of this toned-down look, with a calming color scheme that fits right in with its line of useful everyday products. </p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/02/1612661279bellroy.png\" alt=\"A Bellroy site screenshot\" width=\"1425\" height=\"789\" class=\"alignnone size-full wp-image-181021\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661279bellroy.png 1425w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661279bellroy-300x166.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661279bellroy-768x425.png 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661279bellroy-1024x567.png 1024w\" sizes=\"(max-width: 1425px) 100vw, 1425px\" /></p>\n<p>Note that when a brightly-colored product is displayed against a natural color palette it will still stand out, but without getting in your face.<br />\n&nbsp;<br />\nThe <a href=\"https://themes.muffingroup.com/be/spa6/?utm_source=sitepoint.com&amp;utm_medium=content&amp;utm_campaign=jan21\" rel=\"sponsored\">BeSpa</a> pre-built website, with its soothing color scheme, is another example of sending a message that’s calm and inspiring.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/02/1612661421bespa-theme.png\" alt=\"Screenshot of the BeSpa theme\" width=\"1425\" height=\"789\" class=\"alignnone size-full wp-image-181022\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661421bespa-theme.png 1425w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661421bespa-theme-300x166.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661421bespa-theme-768x425.png 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661421bespa-theme-1024x567.png 1024w\" sizes=\"(max-width: 1425px) 100vw, 1425px\" /></p>\n<p>Calm and comfortable doesn’t need to be boring. Far from it. An image like this encourages a visitor to live for the moment, and the safety and security that goes with it. </p>\n<h2 id=\"2strivetocreativelyblendphysicalexperiencewithdigitalimagery\">2. Strive to Creatively Blend Physical Experience with Digital Imagery</h2>\n<p>For the first time in their lives, many people found themselves stuck at home in 2020, with little to do but look at their screens — which in some cases involved remote work, and in other cases playing digital games.</p>\n<p>Some web designers have picked up on this by blending real-world images with illustrations and/or special effects.</p>\n<p>A case in point is seen on designer <a href=\"https://constanceburke.com/\" rel=\"sponsored\">Constance Burke’s website</a>.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/02/1612661559bourke.png\" alt=\"A screenshot of the Constance Burke website: six women wearing an assortment of clothes\" width=\"1425\" height=\"789\" class=\"alignnone size-full wp-image-181023\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661559bourke.png 1425w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661559bourke-300x166.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661559bourke-768x425.png 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661559bourke-1024x567.png 1024w\" sizes=\"(max-width: 1425px) 100vw, 1425px\" /></p>\n<p>Instead of showing hand-drawn fashion sketches, or real models wearing real products, her portfolio creatively blends the two. </p>\n<p>The <a href=\"https://themes.muffingroup.com/be/ski2/?utm_source=sitepoint.com&amp;utm_medium=content&amp;utm_campaign=jan21\" rel=\"sponsored\">BeSki</a> pre-built site also blends the digital with the physical, but in a&nbsp;vastly different way.</p>\n[video width=\"900\" height=\"492\" mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612661749beski.mp4\"][/video]\n<p>The home page starts with a physical image of a skier. Notice how the snow in the hero section blends in with the next section, a section comprised of digital imagery. That section then blends into another real image, which blends back into a digital design.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/web-design-trends/?utm_source=rss\">5 Web Design Trends for 2021</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/web-design-trends/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181019",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Design",
            "Design & UX",
            "Layout"
        ],
        "dc:creator": [
            "SitePoint Sponsors"
        ],
        "pubDate": [
            "Wed, 17 Feb 2021 16:45:09 GMT"
        ],
        "metaDesc": [
            "Web design trends come and go. 2020 was no exception. Web designers will see some familiar trends replaced by safer and more dependable design choices."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Guide to Obsidian: Local, Markdown-Powered Networked Notes"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/obsidian-beginner-guide/?utm_source=rss\"\n              title=\"A Guide to Obsidian: Local, Markdown-Powered Networked Notes\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617670247obsidian.jpg\"\n        alt=\"A Beginner's Guide to Obsidian\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617670247obsidian-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617670247obsidian-768x403.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617670247obsidian-1024x538.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617670247obsidian.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a style=\"font-weight:bold\" href=\"https://obsidian.md/\">Obsidian</a> is a note-taking and knowledge management app by the people who created Dynalist, a popular online outliner and one of my favorite tools. They think of it as “an IDE for your notes.” It lets you turn a collection of plain text files into a rich network of linked thought.</strong></p>\n<p>Obsidian&#8217;s data is stored in a local folder of Markdown files. The app’s powerful linking and backlinking features turn these separate files into a knowledge base that operates as your second brain. I was initially underwhelmed with the application until I discovered the extensive functionality that can be added through plugins. You can really make it your own.</p>\n<p>Developers use it as a task manager, a <a href=\"https://joshwin.imprint.to/post/how-i-use-obsidian-to-manage-my-goals-tasks-notes-and-software-development-knowledge-base\">software development knowledge base</a>, and as a repository for notes, ideas and code snippets. It’s appreciated for its open architecture, extensibility, code blocks, GitHub integration, Vim key bindings, and configurable hotkeys.</p>\n<h2 id=\"whatisobsidian\">What Is Obsidian?</h2>\n<p>Obsidian stores its data in folders of Markdown files, so there’s absolutely no lock-in and you can access your notes with any text editor or Markdown app. Existing folders of Markdown files can be opened in Obsidian. Your notes are stored locally and can be stored on the cloud using iCloud, Google Drive, GitHub and more.</p>\n<p>Obsidian’s <a href=\"https://obsidian.md/about\">About us</a> page lists three fundamental directions the developers are following with the app:</p>\n<ul>\n<li>local-first and plain text</li>\n<li>link as first-class citizen</li>\n<li>make it super extensible</li>\n</ul>\n<p>Those values resonate with me. They keep my data secure and under my control, and allow me to decide which features I need and which I don’t. Many of its more advanced features are turned off by default, making it easier to use for less technical users. But there’s a lot of power under the hood.</p>\n<p>The application is modal and offers Preview and Edit modes. The first hides the markup and displays images, while the second displays the Markdown syntax and the path to the images. Links are clickable in Preview mode, but in Edit mode you need to <kbd>Command</kbd>-click. I guess this makes editing links simpler. You choose which mode is active by default. </p>\n<p>Electron-based apps are available for macOS, Windows, and Linux. There&#8217;s currently no web app, and mobile apps are currently in alpha. I’ve only heard positive things from users who are testing them.</p>\n<h2 id=\"obsidianmainconcepts\">Obsidian Main Concepts</h2>\n<p>Here are some of the main concepts you need to understand to use Obsidian.</p>\n<p><strong>Links and backlinks:</strong> links transform individual notes into a network of related ideas. Links are created using either Markdown links or <code>[[wikilinks]]</code> according to your choice in the settings. Backlinks are automatically generated and displayed in the sidebar and the context is included. Unlinked mentions are also listed. Follow a link by clicking in Preview mode and <kbd>Command</kbd>-clicking in Edit mode, and go back with <kbd>Command</kbd> + <kbd>Option</kbd> + left arrow.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631446obsidian01-links-1024x822.png\" alt=\"Backlinks\" width=\"1024\" height=\"822\" class=\"alignnone size-large wp-image-181907\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631446obsidian01-links-1024x822.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631446obsidian01-links-300x241.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631446obsidian01-links-768x617.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631446obsidian01-links.png\" alt=\"Backlinks\" /> --></p>\n<p><strong>Aliases:</strong> aliases can be created for each note so that you can link to them using different names.</p>\n<p><strong>Sidebar:</strong> the left sidebar displays backlinks and unlinked references. Unlinked references can be changed into links with a single click. It’s also used by plugins to display an outline of your headings, a tag pane, and more.</p>\n<p><strong>Graph view:</strong> this is a graphical representation of the relationships between your notes. Hovering over a note shows you all related notes in purple and clicking on a note takes you there.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631456obsidian03-graphview-1024x822.png\" alt=\"Graph\" width=\"1024\" height=\"822\" class=\"alignnone size-large wp-image-181909\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631456obsidian03-graphview-1024x822.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631456obsidian03-graphview-300x241.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631456obsidian03-graphview-768x617.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631456obsidian03-graphview.png\" alt=\"Graph\" /> --></p>\n<p><strong>Blocks:</strong> Each page is made up of blocks which may be paragraphs, lists and more. Each block has an empty line before and after it. You can create links to specific blocks or headings using the syntax  <code>[[filename^block]]</code>.</p>\n<p><strong>Search:</strong> search looks for notes containing a word or phrase and displays them in the navigation bar and highlights them in the selected note. Case sensitivity can be turned on and off and operators are available for path, file, tag, line, and section.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631451obsidian02-search-1024x822.png\" alt=\"Search\" width=\"1024\" height=\"822\" class=\"alignnone size-large wp-image-181908\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631451obsidian02-search-1024x822.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631451obsidian02-search-300x241.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631451obsidian02-search-768x617.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631451obsidian02-search.png\" alt=\"Search\" /> --></p>\n<p><strong>Split window:</strong> Obsidian allows you to split the window multiple times like in an IDE. Panes can be linked so they scroll together. One use of this is to display the Edit and Preview modes of the same note in two linked panes. Another is to open a link in a new pane.</p>\n<p><strong>Markdown:</strong> Markdown is supported and displayed in Edit mode but not Preview mode. Like Dynalist and Roam, it’s not quite standard. For example, <code>**bold**</code> text is created with double asterisks and <code>__italics__</code> requires double underscores rather than single underscores or asterisks. Tables, task lists, strikethrough, and footnotes are supported.</p>\n<p><strong>Latex:</strong> you can add mathematical notation to Obsidian by enclosing Latex code inside double dollar symbols.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631470obsidian07-latex-1024x379.png\" alt=\"Latex\" width=\"1024\" height=\"379\" class=\"alignnone size-large wp-image-181913\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631470obsidian07-latex-1024x379.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631470obsidian07-latex-300x111.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631470obsidian07-latex-768x284.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631470obsidian07-latex.png\" alt=\"Latex\" /> --></p>\n<p><strong>Code blocks:</strong> code blocks are available and syntax highlighting is supported. Prism is used, and <a href=\"https://prismjs.com/#supported-languages\">255 languages are supported</a>. </p>\n<p><strong>Folding:</strong> there&#8217;s a setting that allows you to fold headings and/or indents, allowing you to use Obsidian as an outliner. The Outline plugin displays a table of contents of your headings in the sidebar.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631463obsidian05-folding-1024x822.png\" alt=\"Folding\" width=\"1024\" height=\"822\" class=\"alignnone size-large wp-image-181911\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631463obsidian05-folding-1024x822.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631463obsidian05-folding-300x241.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631463obsidian05-folding-768x617.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631463obsidian05-folding.png\" alt=\"Folding\" /> --></p>\n<p><strong>Tags:</strong> standard hashtags are supported, as well as nested tags. Multi-word tags aren&#8217;t supported. A tag pane can be displayed in the sidebar using a plugin.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631460obsidian04-tags-1024x822.png\" alt=\"Tags\" width=\"1024\" height=\"822\" class=\"alignnone size-large wp-image-181910\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631460obsidian04-tags-1024x822.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631460obsidian04-tags-300x241.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631460obsidian04-tags-768x617.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631460obsidian04-tags.png\" alt=\"Tags\" /> --></p>\n<p><strong>Folders:</strong> notes can be organized in hierarchical folders, allowing you to create an outline of documents.</p>\n<p><strong>Embeds:</strong> notes and other files can be embedded using <code>![[filename]]</code>. Voice memos can be embedded with the audio recorder plugin.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631474obsidian08-embeds-1024x791.png\" alt=\"Embeds\" width=\"1024\" height=\"791\" class=\"alignnone size-large wp-image-181914\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631474obsidian08-embeds-1024x791.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631474obsidian08-embeds-300x232.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631474obsidian08-embeds-768x593.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n<p><!-- \n\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631474obsidian08-embeds.png\" alt=\"Embeds\" /> --></p>\n<p><strong>Vaults:</strong> an unlimited number of knowledge bases can be created by using different Vaults. These are simply different folders of Markdown files.</p>\n<p><strong>Plugins:</strong>  extensibility is one of Obsidian’s core values. Currently, <a href=\"https://publish.obsidian.md/help/Plugins/List+of+plugins\">22 plugins are available</a>, including backlinks, graph view, search, tag pane, daily notes, starred notes, templates, and outline.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616631467obsidian06-plugins-1024x822.png\" alt=\"Plugins\" width=\"1024\" height=\"822\" class=\"alignnone size-large wp-image-181912\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631467obsidian06-plugins-1024x822.png 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631467obsidian06-plugins-300x241.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616631467obsidian06-plugins-768x617.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" /></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/obsidian-beginner-guide/?utm_source=rss\">A Guide to Obsidian: Local, Markdown-Powered Networked Notes</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/obsidian-beginner-guide/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182033",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Adrian Try"
        ],
        "pubDate": [
            "Mon, 05 Apr 2021 16:00:57 GMT"
        ],
        "metaDesc": [
            "Need a better note-taking app? Learn how Obsidian can turn your plain text files into a rich, sophisticated network of linked thoughts."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How you can use next-gen image formats in CSS now"
        ],
        "link": [
            "https://frontendfoc.us/issues/497"
        ],
        "description": [
            "\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align=\"center\" border=\"0\">\n  <tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <div>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n      <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0>\n        <tr>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <a href=\"https://frontendfoc.us/link/110486/rss\" style=\" color: #D94306; font-weight: 600;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1602675575/hhmdxfk96fnbq3effjk1.png\" width=\"60\" style=\"margin-top: 7px;     line-height: 100%; \"></a>\n          </td>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <div style=\"margin-left: 25px; color: #fff;\">\n<p>Frontend Focus</p>\n<p>#​497 — June 30, 2021 | <a href=\"https://frontendfoc.us/link/110487/rss\" style=\"color: #fff;  font-weight: 600;\">Read on the web</a></p>\n</div>\n          </td>\n        </tr>\n      </table>\n     </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110488/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1625062368/cvaux8ecfyj8ke26xncb.png\" width=\"640\" style=\"      line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110488/rss\" title=\"css-irl.info\" style=\" color: #D94306; font-size: 1.15em; line-height: 1.25em; font-weight: 400;\">Detecting Hover-Capable Devices</a></span> — A good look, complete with code examples, at how some new media queries (<em>part of the <a href=\"https://frontendfoc.us/link/110489/rss\" style=\" color: #D94306;\">CSS Level 5 Media Queries spec</a></em>) can help us target based on input device. </p>\n  <p>Michelle Barker </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110490/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306;\">Meet <code>:has</code>, A Native CSS Parent Selector (And More)</a></span> — A detailed look at the early spec of the <code>:has</code> selector, and how it should improve the CSS workflow once it’s released.</p>\n  <p>Adrian Bece </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/110491/rss\" style=\" color: #D94306;\"><img src=\"https://copm.s3.amazonaws.com/64d5d1f6.png\" width=\"146\" height=\"110\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110491/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">The CSV Importer You’ll Love to Build</a></span> — Flatfile integrates with your app, in minutes, to auto-validate and transform messy spreadsheet data. The slick import wizard guides users through an intuitive import flow and enables your users to import their own spreadsheet data, with confidence.</p>\n  <p>Flatfile Portal <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110492/rss\" title=\"css-tricks.com\" style=\" color: #D94306;\">Using Performant Next-Gen Images in CSS with <code>image-set</code></a></span> — How you can use the <code>image-set()</code> function to adopt the latest image formats in CSS while still catering for older browsers.</p>\n  <p>Ollie Williams </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110493/rss\" title=\"css-tricks.com\" style=\" color: #D94306;\">Web History: Community</a></span> — We’ve been sharing Jay’s regular write-ups on the history of the web, and the latest, looking at all things community (think bulletin boards, GeoCities, NeoPets, etc) is out now. An always excellent chronicle, the series is well worth <a href=\"https://frontendfoc.us/link/110494/rss\" style=\" color: #D94306;\">catching up on</a>.</p>\n  <p>Jay Hoffmann </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n<p><strong>⚡️ Quick bits:</strong></p>\n                  <ul>\n                  \n                  <li>\n<a href=\"https://frontendfoc.us/link/110495/rss\" style=\" color: #D94306; font-weight: 600;\">Version 6.3</a> of popular component builder Storybook UI is out now.</li>\n                  \n                  <li>Google has <a href=\"https://frontendfoc.us/link/110496/rss\" style=\" color: #D94306; font-weight: 600;\">delayed its plans to block third-party cookies in Chrome</a> until at least 2023.</li> \n                  \n                  <li>\n<a href=\"https://frontendfoc.us/link/110497/rss\" style=\" color: #D94306; font-weight: 600;\">This Core Web Vitals report</a> is worth playing around with — it uses data from the HTTP Archive to highlight how different technologies fare on the new page experience metrics.</li>\n\n                  </ul>\n                                \n  </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>📙 <strong>Tutorials, Articles &amp; Opinion</strong></p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110498/rss\" title=\"mxb.dev\" style=\" color: #D94306;\">Media Queries in Times of <code>@container</code></a></span> — With container queries now on the horizon - will we need media queries at all? The author explores use cases where <code>@container</code> probably <em>won’t</em> fit.</p>\n  <p>Max Böck </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110499/rss\" title=\"overlayfactsheet.com\" style=\" color: #D94306;\">Overlay Fact Sheet</a></span> — A lot of notable signatories from the frontend world on this open letter/information sheet aimed at educating on web-accessibility overlays.</p>\n  <p>Karl Groves </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110500/rss\" title=\"developer.chrome.com\" style=\" color: #D94306;\">Chrome Extensions: Clarifying Extension Policies for A Safer, More Consistent Web Store</a></span> — An update from the Chrome team on refreshed security requirements and clarifications on policy to keep the quality of extensions high, and the experience for developers consistent.</p>\n  <p>Rebecca Soares and Benjamin Ackerman (Google) </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110501/rss\" title=\"thenewstack.io\" style=\" color: #D94306;\">CSS Frameworks in Vogue, But Don't Forget Style Fundamentals</a></span> — Yes, CSS frameworks are here to stay, but Richard reminds us not to become overly-reliant on frameworks and to learn the fundamentals below the abstractions.</p>\n  <p>Richard MacManus </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110502/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1625062247/tizbkbma0macirlutsd1.png\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110502/rss\" title=\"uxdesign.cc\" style=\" color: #D94306;\">Accessible Design: How Much Motion Is Too Much Motion?</a></span> — A process breakdown of how to create Accessibility compliant interaction design within a framework.</p>\n  <p>Heather Waroff </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110503/rss\" title=\"www.theregister.com\" style=\" color: #D94306;\">Google No Longer Requires Publishers to Use The AMP Format. Bad News: What Replaces It Might Be Worse</a></span></p>\n  <p>Scott Gilbertson <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;  padding: 1px 4px; \">opinion</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110504/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">Remove Guesswork from Website Bugs with Screenshots and Technical Info</a></span></p>\n  <p>Bugherd <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110505/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Tips &amp; Tricks for Testing Accessibility with Assistive Technologies</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Karl Groves</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110506/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Cypress or How I Learned to Stop Worrying and Love E2E</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Emma Fabre</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110507/rss\" style=\" color: #D94306; font-weight: 400 !important;\">The Master Guide to Smooth, Realistic Shadows in CSS</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Devang Saklani</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110508/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Using CSS with ARIA to Enforce Accessibility</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Adrian Roselli</span> \n  </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110509/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Senior Front End Engineer</a></span> — Austin startup protecting consumers from unwanted telemarketing. Hard problems, large scale, world-class team. JavaScript, Vue.js.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">ActiveProspect</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110522/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Front-End Developer - Utrust (Remote, GMT -2/+4)</a></span> — We are changing the world with crypto. Join our team, working with technologies such as React, Redux, GraphQL and TypeScript.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Utrust</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110510/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Senior Frontend Developer (Vue, Nuxt) - Remote</a></span> — We’re seeking an engineer to join our team at Upwork. You’ll be building apps (using Vue &amp; Nuxt) that are used by millions of our users daily.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Upwork</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>🧑‍💻 Got a job listing to share? <em><a href=\"https://frontendfoc.us/link/110511/rss\" style=\" color: #D94306; font-weight: 600;\">Here's how</a></em>.</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>🔧 <strong> Code, Tools and Resources</strong></p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110512/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/skpo77vvlfwyyrft8zfb.jpg\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110512/rss\" title=\"indiepen.tech\" style=\" color: #D94306;\">Indiepen: A Privacy-Friendly Way to Embed HTML, CSS and JS Examples</a></span> — A privacy-friendly solution to embed HTML, CSS and JS code examples on your site, blog, etc. with no cookies or tracking. Does require some fiddling in hosting your code though.</p>\n  <p>Henrik and André </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110513/rss\" title=\"getstream.io\" style=\" color: #D94306;\">Free Chat &amp; Activity Feed APIs for Qualifying Teams</a></span> — Unlock enterprise-grade features, functions, and UI components completely free for your startup or side project.</p>\n  <p>Stream <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110514/rss\" title=\"rtl.wtf\" style=\" color: #D94306;\">RTL:WTF: Experiment with Right-to-Left Directionality Online</a></span> — This site lets you read the web like right-to-left readers do so you can help solve the challenges such readers face while educating you a little about internationalization and accessibility.</p>\n  <p>Moriel Schottlender </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/110515/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1625059931/nseyisghihnmyqo7ftea.png\" width=\"150\" height=\"\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110515/rss\" title=\"tannerv.com\" style=\" color: #D94306;\">iPod.js: A Working Web-Based JavaScript-Powered 'iPod'</a></span> — This isn't just a fun UI experiment.. as it can actually connect to either Apple Music or Spotify to play tracks from your library too. <a href=\"https://frontendfoc.us/link/110516/rss\" style=\" color: #D94306;\">Source here.</a></p>\n  <p>Tanner Villarete </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110517/rss\" title=\"github.com\" style=\" color: #D94306;\">Resemble.js: Image Analysis and Comparison Library</a></span> — A Canvas-based approach for performing basic color/brightness analysis of images or to test how two images ‘resemble’ each other. Here’s <a href=\"https://frontendfoc.us/link/110518/rss\" style=\" color: #D94306;\">a live demo.</a></p>\n  <p>Resemble </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110519/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Time.lol: Convert Date and Time to ISO 8601, RFC, Unix Timestamp, Week Number,  Any Time Zone, and More</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Alex Gamburg</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110520/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Berry: A Free Admin Template Built with React and Material UI</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">CodedThemes</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110521/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Temp API: Test Your Frontend Apps with Temporary REST APIs</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Arjun Ganesan</span> \n  </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n\n            \n    </div>\n  </td></tr>\n</table>\n\n\n\n\n<img src=\"https://frontendfoc.us/open/497/rss\" width=\"1\" height=\"1\" />"
        ],
        "pubDate": [
            "Wed, 30 Jun 2021 00:00:00 +0000"
        ],
        "guid": [
            "https://frontendfoc.us/issues/497"
        ],
        "provider": "Frontend Focus"
    },
    {
        "author": [
            "Adebiyi Adedotun"
        ],
        "title": [
            "Client-Side Routing In Next.js"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/client-side-routing-next-js/"
        ],
        "pubDate": [
            "Fri, 18 Jun 2021 13:00:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/client-side-routing-next-js/"
        ],
        "description": [
            "Hyperlinks have been one of the jewels of the Web since its inception . According to MDN, hyperlinks are what makes the Web, a web. While used for purposes such as linking between documents, its primary use is to reference different web pages identifiable by a unique web address or a URL.\nRouting is an important aspect of each web application as much as hyperlinks are to the Web. It is a mechanism through which requests are routed to the code that handles them."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/client-side-routing-next-js/\" />\n              <title>Client-Side Routing In Next.js</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Client-Side Routing In Next.js</h1>\n                  \n                    \n                    <address>Adebiyi Adedotun</address>\n                  \n                  <time datetime=\"2021-06-18T13:00:00&#43;00:00\" class=\"op-published\">2021-06-18T13:00:00+00:00</time>\n                  <time datetime=\"2021-06-18T13:00:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>Hyperlinks have been one of the jewels of the Web <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks\">since its inception</a> . According to MDN, hyperlinks are what makes the Web, <em>a web.</em> While used for purposes such as linking between documents, its primary use is to reference different web pages identifiable by a unique web address or a <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL\">URL</a>.</p>\n\n<p>Routing is an important aspect of each web application as much as hyperlinks are to the Web. It is a mechanism through which requests are routed to the code that handles them. In relation to routing, Next.js pages are referenced and identifiable by a unique URL path. If the Web consists of <strong>navigational</strong> <strong>web pages</strong> interconnected by <strong>hyperlinks</strong>, then each Next.js app consists of route-able pages (route handlers or routes) interconnected by a router.</p>\n\n<p>Next.js has built-in support for routing that can be unwieldy to unpack, especially when considering rendering and data fetching. As a prerequisite to understanding client-side routing in Next.js, it is necessary to have an overview of concepts like routing, rendering, and data fetching in Next.js.</p>\n\n<p>This article will be beneficial to React developers who are familiar with Next.js and want to learn how it handles routing. You need to have a working knowledge of React and Next.js to get the most out of the article, which is solely about client-side routing and related concepts in Next.js.</p>\n\n<h3 id=\"routing-and-rendering\">Routing And Rendering</h3>\n\n<p>Routing and Rendering are complementary to each other and will play a huge part through the course of this article. I like how <a href=\"https://www.pluralsight.com/guides/pros-and-cons-of-client-side-routing-with-react\">Gaurav explains</a> them:</p>\n\n<blockquote><strong>Routing</strong> is the process through which the user is navigated to different pages on a website.<br /><br /><strong>Rendering</strong> is the process of putting those pages on the UI. Every time you request a route to a particular page, you are also rendering that page, but not every render is an outcome of a route.</blockquote>\n\n<p><a href=\"https://signalvnoise.com/posts/3124-give-it-five-minutes\">Take five minutes</a> to think about that.</p>\n\n<p>What you need to understand about rendering in Next.js is that each page is <a href=\"https://nextjs.org/docs/basic-features/pages#pre-rendering\">pre-rendered</a> in advance alongside the minimal JavaScript code necessary for it to become fully interactive through a process known as hydration. How Next.js does this is highly dependent on the <a href=\"https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering\">form of pre-rendering</a>: <strong>Static Generation</strong> or <strong>Server-side rendering</strong>, which are both highly coupled to the data fetching technique used, and separated by <strong>when</strong> the HTML for a page is generated.</p>\n\n<p>Depending on your data fetching requirements, you might find yourself using built-in data fetching functions like <code>getStaticProps</code>, <code>getStaticPaths</code>, or, <code>getServerSideProps</code>, client-side data fetching tools like SWR, react-query, or traditional data fetching approaches like <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-1-fetch-on-render-not-using-suspense\">fetch-on-render</a>, <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-2-fetch-then-render-not-using-suspense\">fetch-then-render</a>, <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#approach-3-render-as-you-fetch-using-suspense\">render-as-you-fetch</a> (with <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html\">Suspense</a>).</p>\n\n<p>Pre-rendering (before rendering &mdash; <em>to the UI</em>) is complementary to Routing, and highly coupled with data fetching &mdash; a whole topic of its own in Next.js. So while these concepts are either complementary or closely related, this article will be solely focused on mere navigation between pages (routing), with references to related concepts where necessary.</p>\n\n<p>With that out of the way, let’s begin with the fundamental gist: Next.js has a file-system-based router built on the <a href=\"https://nextjs.org/docs/basic-features/pages\">concept of pages</a>.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p><p>Meet <a data-instant href=\"/the-smashing-newsletter/\"><strong>Smashing Email Newsletter</strong></a> with useful tips on front-end, design &amp; UX. Subscribe and <strong>get “Smart Interface Design Checklists”</strong> &mdash; a <strong>free PDF deck</strong> with 150+ questions to ask yourself when designing and building almost anything.</p><div><section class=\"nlbf\"><form action=\"//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0\" method=\"post\"><div class=\"nlbwrapper\"><label for=\"mce-EMAIL-hp\" class=\"sr-only\">Your (smashing) email</label><div class=\"nlbgroup\"><input type=\"email\" name=\"EMAIL\" class=\"nlbf-email\" id=\"mce-EMAIL-hp\" placeholder=\"Your email\">\n<input type=\"submit\" value=\"Meow!\" name=\"subscribe\" class=\"nlbf-button\"></div></div></form><style>.nlbf{display:flex;padding-bottom:.25em;padding-top:.5em;text-align:center;letter-spacing:-.5px;color:#fff;font-size:1.15em}.nlbgroup:hover{box-shadow:0 1px 7px -5px rgba(50,50,93,.25),0 3px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025)}.nlbf .nlbf-button,.nlbf .nlbf-email{flex-grow:1;flex-shrink:0;width:auto;margin:0;padding:.75em 1em;border:0;border-radius:11px;background:#fff;font-size:1em;box-shadow:none}.promo-box .nlbf-button:focus,.promo-box input.nlbf-email:active,.promo-box input.nlbf-email:focus{box-shadow:none}.nlbf-button:-ms-input-placeholder,.nlbf-email:-ms-input-placeholder{color:#777;font-style:italic}.nlbf-button::-webkit-input-placeholder,.nlbf-email::-webkit-input-placeholder{color:#777;font-style:italic}.nlbf-button:-ms-input-placeholder,.nlbf-button::-moz-placeholder,.nlbf-button::placeholder,.nlbf-email:-ms-input-placeholder,.nlbf-email::-moz-placeholder,.nlbf-email::placeholder{color:#777;font-style:italic}.nlbf .nlbf-button{transition:all .2s ease-in-out;color:#fff;background-color:#0168b8;font-weight:700;box-shadow:0 1px 1px rgba(0,0,0,.3);width:100%;border:0;border-left:1px solid #ddd;flex:2;border-top-left-radius:0;border-bottom-left-radius:0}.nlbf .nlbf-email{border-top-right-radius:0;border-bottom-right-radius:0;width:100%;flex:4;min-width:150px}@media all and (max-width:650px){.nlbf .nlbgroup{flex-wrap:wrap;box-shadow:none}.nlbf .nlbf-button,.nlbf .nlbf-email{border-radius:11px;border-left:none}.nlbf .nlbf-email{box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);min-width:100%}.nlbf .nlbf-button{margin-top:1em;box-shadow:0 1px 1px rgba(0,0,0,.5)}}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus,.nlbf .nlbf-button:hover{cursor:pointer;color:#fff;background-color:#0168b8;border-color:#dadada;box-shadow:0 1px 1px rgba(0,0,0,.3)}.nlbf .nlbf-button:active,.nlbf .nlbf-button:focus{outline:0!important;text-shadow:1px 1px 1px rgba(0,0,0,.3);box-shadow:inset 0 3px 3px rgba(0,0,0,.3)}.nlbgroup{display:flex;box-shadow:0 13px 27px -5px rgba(50,50,93,.25),0 8px 16px -8px rgba(0,0,0,.3),0 -6px 16px -6px rgba(0,0,0,.025);border-radius:11px;transition:box-shadow .2s ease-in-out}.nlbwrapper{display:flex;flex-direction:column;justify-content:center}.nlbf form{width:100%}.nlbf .nlbgroup{margin:0}.nlbcaption{font-size:.9em;line-height:1.5em;color:#fff;border-radius:11px;padding:.5em 1em;display:inline-block;background-color:#0067b859;text-shadow:1px 1px 1px rgba(0,0,0,.3)}.wf-loaded-stage2 .nlbf .nlbf-button{font-family:Mija}</style></section><p class=\"mtn mbn\"><small class=\"promo-box__footer mtm block grey\"><em>Once a week. Useful tips on <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">front-end &amp; UX</a>. Trusted by 190.000 friendly folks.</em></small></p></div></p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-firechat.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"310\"\n\t\t\t\t\t\t\t\t\t\theight=\"400\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"pages\">Pages</h3>\n\n<p>Pages in Next.js are React Components that are automatically available as routes. They are exported as default exports from the pages directory with supported file extensions like <code>.js</code>, <code>.jsx</code>, <code>.ts</code>, or <code>.tsx</code>.</p>\n\n<p>A typical Next.js app will have a folder structure with top-level directories like <strong>pages</strong>, <strong>public</strong>, and <strong>styles.</strong></p>\n\n<pre><code class=\"language-javascript\">next-app\n├── node_modules\n├── pages\n│   ├── index.js // path: base-url (/)\n│   ├── books.jsx // path: /books\n│   └── book.ts // path: /book\n├── public\n├── styles\n├── .gitignore\n├── package.json\n└── README.md</code></pre>\n\n<p>Each page is a React component:</p>\n\n<pre><code class=\"language-javascript\">// pages/books.js &mdash; `base-url/book`\nexport default function Book() {\n  return <h1>Books</h1>\n}</code></pre>\n\n<p><strong>Note</strong>: <em>Keep in mind that pages can also be referred to as “route handlers”.</em></p>\n\n<h3 id=\"custom-pages\">Custom Pages</h3>\n\n<p>These are special pages that reside in the <strong>pages</strong> directory but do not participate in routing. They are prefixed with the underscore symbol, as in, <code>_app.js</code>, and <code>_document.js</code>.</p>\n\n<ul>\n<li><code>_app.js</code><br />\nThis is a custom component that resides in the pages folder. Next.js uses this component to initialize pages.</li>\n<li><code>_document.js</code><br />\nLike <code>_app.js</code>, <code>_document.js</code> is a custom component that Next.js uses to augment your applications <code>&lt;html&gt;</code> and <code>&lt;body&gt;</code> tags. This is necessary because Next.js pages skip the definition of the surrounding document’s markup.</li>\n</ul>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">next-app\n├── node_modules\n├── pages\n│   ├── _app.js // ⚠️ Custom page (unavailable as a route)\n│   ├── _document.jsx // ⚠️ Custom page (unavailable as a route)\n│   └── index.ts // path: base-url (/)\n├── public\n├── styles\n├── .gitignore\n├── package.json\n└── README.md</code></pre>\n</div>\n\n<h3 id=\"linking-between-pages\">Linking Between Pages</h3>\n\n<p>Next.js exposes a <code>Link</code> component from the <code>next/link</code> API that can be used to perform client-side route transitions between pages.</p>\n\n<pre><code class=\"language-javascript\">// Import the &lt;Link/&gt; component\nimport Link from \"next/link\";\n\n// This could be a page component\nexport default function TopNav() {\n  return (\n    &lt;nav&gt;\n      &lt;Link href=\"/\"&gt;Home&lt;/Link&gt;\n      &lt;Link href=\"/\"&gt;Publications&lt;/Link&gt;\n      &lt;Link href=\"/\"&gt;About&lt;/Link&gt;\n    &lt;/nav&gt;\n  )\n}\n\n// This could be a non-page component\nexport default function Publications() {\n  return (\n    &lt;section&gt;\n      &lt;TopNav/&gt;\n      {/* ... */}\n    &lt;/section&gt;\n  )\n}</code></pre>\n\n<p>The <code>Link</code> component can be used inside any component, page or not. When used in its most basic form as in the example above, the <code>Link</code> component translates to a hyperlink with an <code>href</code> attribute. (More on <code>Link</code> in the next/link section below.)</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"routing\">Routing</h3>\n\n<p>Next.js file-based routing system can be used to define the most common route patterns. To accommodate for these patterns, each route is separated based on its <em>definition.</em></p>\n\n<h4 id=\"index-routes\">Index Routes</h4>\n\n<p>By default, in your Next.js app, the initial/default route is <code>pages/index.js</code> which automatically serves as the starting point of your application as <code>/</code>. With a base URL of <code>localhost:3000</code>, this index route can be accessed at the base URL level of the application in the browser.</p>\n\n<p>Index routes automatically act as the default route for each directory and can eliminate naming redundancies. The directory structure below exposes two route paths: <code>/</code> and <code>/home</code>.</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js // path: base-url (/)\n    └── home.js // path: /home</code></pre>\n\n<p>The elimination is more apparent with <strong>nested routes</strong>.</p>\n\n<h4 id=\"nested-routes\">Nested Routes</h4>\n\n<p>A route like <code>pages/book</code> is one level deep. To go deeper is to create nested routes, which requires a nested folder structure. With a base-url of <code>https://www.smashingmagazine.com</code>, you can access the route <code>https://www.smashingmagazine.com/printed-books/printed-books</code> by creating a folder structure similar to the one below:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js // top index route\n    └── printed-books // nested route\n        └── printed-books.js // path: /printed-books/printed-books</code></pre>\n</div>\n\n<p>Or eliminate path redundancy with index routes and access the route for printed books at <code>https://www.smashingmagazine.com/printed-books</code>.</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js // top index route\n    └── printed-books // nested route\n        └── index.js // path: /printed-books</code></pre>\n\n<p><strong>Dynamic routes</strong> also play an important role in eliminating redundancies.</p>\n\n<h4 id=\"dynamic-routes\">Dynamic Routes</h4>\n\n<p>From the previous example we use the index route to access all printed books. To access individual books requires either creating different routes for each book like:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">// ⚠️ Don't do this.\nnext-app\n└── pages\n    ├── index.js // top index route\n    └── printed-books // nested route\n        ├── index.js // path: /printed-books\n        ├── typesript-in-50-lessons.js // path: /printed-books/typesript-in-50-lessons\n        ├── checklist-cards.js // path: /printed-books/checklist-cards\n        ├── ethical-design-handbook.js // path: /printed-books/ethical-design-handbook\n        ├── inclusive-components.js // path: /printed-books/inclusive-components\n        └── click.js // path: /printed-books/click</code></pre>\n</div>\n\n<p>which is highly redundant, unscalable, and can be remedied with dynamic routes like:</p>\n\n<pre><code class=\"language-javascript\">// ✅ Do this instead.\nnext-app\n└── pages\n    ├── index.js // top index route\n    └── printed-books\n        ├── index.js // path: /printed-books\n        └── [book-id].js // path: /printed-books/:book-id</code></pre>\n\n<p>The bracket syntax &mdash; <code>[book-id]</code> &mdash; is the <strong>dynamic segment</strong>, and is not limited to files alone. It can also be used with folders like the example below, making the author available at the route <code>/printed-books/:book-id/author</code>.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js // top index route\n    └── printed-books\n        ├── index.js // path: /printed-books\n        └── [book-id]\n            └── author.js // path: /printed-books/:book-id/author</code></pre>\n</div>\n\n<p>The dynamic segment(s) of a route is exposed as a query parameter that can be accessed in any of the connecting component involved in the route with <code>query</code> object of the <code>useRouter()</code> hook &mdash; (More on this in the next/router API section).</p>\n\n<pre><code class=\"language-javascript\">// printed-books/:book-id\nimport { useRouter } from 'next/router';\n\nexport default function Book() {\n  const { query } = useRouter();\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\n        book-id &lt;em&gt;{query['book-id']}&lt;/em&gt;\n      &lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">// /printed-books/:book-id/author\nimport { useRouter } from 'next/router';\n\nexport default function Author() {\n  const { query } = useRouter();\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\n        Fetch author with book-id &lt;em&gt;{query['book-id']}&lt;/em&gt;\n      &lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n</div>\n\n<h4 id=\"extending-dynamic-route-segments-with-catch-all-routes\">Extending Dynamic Route Segments With Catch All Routes</h4>\n\n<p>You’ve seen the dynamic route segment bracket syntax as in the previous example with <code>[book-id].js</code>. The beauty of this syntax is that it takes things even further with <em>Catch-All Routes</em>. You can infer what this does from the name: it catches all routes.</p>\n\n<p>When we looked at the dynamic example, we learned how it helps eliminate file creation redundancy for a single route to access multiple books with their ID. But there’s something else we could have done.</p>\n\n<p>Specifically, we had the path <code>/printed-books/:book-id</code>, with a directory structure:</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js\n    └── printed-books\n        ├── index.js\n        └── [book-id].js</code></pre>\n\n<p>If we updated the path to have more segments like categories, we might end up with something like: <code>/printed-books/design/:book-id</code>, <code>/printed-books/engineering/:book-id</code>, or better still <code>/printed-books/:category/:book-id</code>.</p>\n\n<p>Let’s add the release year: <code>/printed-books/:category/:release-year/:book-id</code>. Can you see a pattern? The directory structure becomes:</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js\n    └── printed-books\n        └── [category]\n            └── [release-year]\n                └── [book-id].js</code></pre>\n\n<p>We substituted the use of named files for dynamic routes, but somehow still ended up with another form of redundancy. Well, there’s a fix: Catch All Routes that eliminates the need for deeply nested routes:</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js\n    └── printed-books\n        └── [...slug].js</code></pre>\n\n<p>It uses the same bracket syntax except that it is prefixed with three dots. Think of the dots like the JavaScript spread syntax. You might be wondering: If I use the catch-all routes, how do I access the category (<code>[category]</code>), and release year (<code>[release-year]</code>). Two ways:</p>\n\n<ol>\n<li>In the case of the printed-books example, the end goal is the book, and each book info will have its metadata attached with it, or</li>\n<li>The “slug” segments are returned as an array of query parameter(s).</li>\n</ol>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import { useRouter } from 'next/router';\n\nexport default function Book() {\n  const { query } = useRouter();\n  // There's a brief moment where `slug` is undefined\n  // so we use the Optional Chaining (?.) and Nullish coalescing operator (??)\n  // to check if slug is undefined, then fall back to an empty array\n  const [category, releaseYear, bookId] = query?.slug ?? [];\n\n  return (\n    &lt;table&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Book Id&lt;/th&gt;\n          &lt;td&gt;{bookId}&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Category&lt;/th&gt;\n          &lt;td&gt;{category}&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Release Year&lt;/th&gt;\n          &lt;td&gt;{releaseYear}&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  );\n}</code></pre>\n</div>\n\n<p>Here’s more example for the route <code>/printed-books/[…slug]</code>:</p>\n\n<table>\n    <thead>\n        <tr>\n            <th>Path</th>\n            <th>Query parameter</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n      <td><code>/printed-books/click.js</code></td>\n            <td>{ “slug”: [“click”] }</td>\n        </tr>\n        <tr>\n      <td><code>/printed-books/2020/click.js</code></td>\n            <td>{ “slug”: [“2020”, “click”] }</td>\n        </tr>\n        <tr>\n      <td><code>/printed-books/design/2020/click.js</code></td>\n            <td>{ “slug”: [“design”, “2020”, “click”] }</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>As it is with the catch-all route, the route <code>/printed-books</code> will throw a 404 error unless you provide a fallback index route.</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js\n    └── printed-books\n        ├── index.js // path: /printed-books\n        └── [...slug].js</code></pre>\n\n<p>This is because the catch-all route is “strict”. It either matches a slug, or it throws an error. If you’d like to avoid creating index routes alongside catch-all routes, you can use the <strong>optional catch-all routes</strong> instead.</p>\n\n<h4 id=\"extending-dynamic-route-segments-with-optional-catch-all-routes\">Extending Dynamic Route Segments With Optional Catch-All Routes</h4>\n\n<p>The syntax is the same as catch-all-routes, but with double square brackets instead.</p>\n\n<pre><code class=\"language-javascript\">next-app\n└── pages\n    ├── index.js\n    └── printed-books\n        └── [[...slug]].js</code></pre>\n\n<p>In this case, the catch-all route (slug) is optional and if not available, fallbacks to the path <code>/printed-books</code>, rendered with <code>[[…slug]].js</code> route handler, without any query params.</p>\n\n<blockquote>Use catch-all alongside index routes, or optional catch-all routes alone. Avoid using catch-all and optional catch-all routes alongside.</blockquote>\n\n<h4 id=\"routes-precedence\">Routes Precedence</h4>\n\n<p>The capability to be able to define the most common routing patterns can be a “black swan”. The possibility of routes clashing is a looming threat, most especially when you start getting dynamic routes worked up.</p>\n\n<p>When it makes sense to do so, Next.js lets you know about route clashes in the form of errors. When it doesn’t, it applies precedence to routes according to their specificity.</p>\n\n<p>For example, it is an error to have more than one dynamic route on the same level.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">// ❌ This is an error\n// Failed to reload dynamic routes: Error: You cannot use different slug names for the // same dynamic path ('book-id' !== 'id').\nnext-app\n└── pages\n    ├── index.js\n    └── printed-books\n        ├── [book-id].js\n        └── [id].js</code></pre>\n</div>\n\n<p>If you look closely at the routes defined below, you’d notice the potential for clashes.</p>\n\n<pre><code class=\"language-javascript\">// Directory structure flattened for simplicity\nnext-app\n└── pages\n    ├── index.js // index route (also a predefined route)\n    └── printed-books\n        ├── index.js\n        ├── tags.js // predefined route\n        ├── [book-id].js // handles dynamic route\n        └── [...slug].js // handles catch all route</code></pre>\n\n<p>For example, try answering this: what route handles the path <code>/printed-books/inclusive-components</code>?</p>\n\n<ul>\n<li><code>/printed-books/[book-id].js</code>, or</li>\n<li><code>/printed-books/[…slug].js</code>.</li>\n</ul>\n\n<p>The answer lies in the “specificity” of the route handlers. Predefined routes come first, followed by dynamic routes, then catch-all routes. You can think of the route request/handling model as a pseudo-code with the following steps:</p>\n\n<ol>\n<li>Is there is a <strong>predefined route handler</strong> that can handle the route?\n\n<ul>\n<li><code>true</code> &mdash; handle the route request.</li>\n<li><code>false</code> &mdash; go to 2.</li>\n</ul></li>\n<li>Is there a <strong>dynamic route handler</strong> that can handle the route?\n\n<ul>\n<li><code>true</code> &mdash; handle the route request.</li>\n<li><code>false</code> &mdash; go to 3.</li>\n</ul></li>\n<li>Is there a <strong>catch-all route handler</strong> that can handle the route?\n\n<ul>\n<li><code>true</code> &mdash; handle the route request.</li>\n<li><code>false</code> &mdash; throw a 404 page not found.</li>\n</ul></li>\n</ol>\n\n<p>Therefore, <code>/printed-books/[book-id].js</code> wins.</p>\n\n<p>Here are more examples:</p>\n\n<table class=\"tablesaw break-out\">\n    <thead>\n        <tr>\n            <th>Route</th>\n            <th>Route handler</th>\n      <th>Type of route</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n      <td><code>/printed-books</code></td>\n            <td><code>/printed-books</code></td>\n      <td>Index route</td>\n        </tr>\n        <tr>\n            <td><code>/printed-books/tags</code></td>\n            <td><code>/printed-books/tags.js</code></td>\n      <td>Predefined route</td>\n        </tr>\n        <tr>\n            <td><code>/printed-books/inclusive-components</code></td>\n            <td><code>/printed-books/[book-id].js</code></td>\n      <td>Dynamic route</td>\n        </tr>\n    <tr>\n            <td><code>/printed-books/design/inclusive-components</code></td>\n            <td><code>/printed-books/[...slug].js</code></td>\n      <td>Catch-all route</td>\n        </tr>\n    </tbody>\n</table>\n\n<h3 id=\"the-next-link-api\">The <code>next/link</code> API</h3>\n\n<p>The <code>next/link</code> API exposes the <code>Link</code> component as a declarative way to perform client-side route transitions.</p>\n\n<pre><code class=\"language-javascript\">import Link from 'next/link'\n\nfunction TopNav() {\n  return (\n    &lt;nav&gt;\n      &lt;Link href=\"/\"&gt;Smashing Magazine&lt;/Link&gt;\n      &lt;Link href=\"/articles\"&gt;Articles&lt;/Link&gt;\n      &lt;Link href=\"/guides\"&gt;Guides&lt;/Link&gt;\n      &lt;Link href=\"/printed-books\"&gt;Books&lt;/Link&gt;\n    &lt;/nav&gt;\n  )\n}</code></pre>\n\n<p>The <code>Link</code> component will resolve to a regular HTML hyperlink. That is, <code>&lt;Link href=&quot;/&quot;&gt;Smashing Magazine&lt;/Link&gt;</code> will resolve to  <code>&lt;a href=&quot;/&quot;&gt;Smashing Magazine&lt;/a&gt;</code>.</p>\n\n<p>The <code>href</code> prop is the only required prop to the <code>Link</code> component. See the <a href=\"https://nextjs.org/docs/api-reference/next/link\">docs</a> for a complete list of props available on the <code>Link</code> component.</p>\n\n<p>There are other mechanisms of the <code>Link</code> component to be aware of.</p>\n\n<h4 id=\"routes-with-dynamic-segments\">Routes With Dynamic Segments</h4>\n\n<p>Prior to Next.js 9.5.3, <code>Link</code>ing to dynamic routes meant that you had to provide both the <code>href</code> and <code>as</code> prop to <code>Link</code> as in:</p>\n\n<pre><code class=\"language-javascript\">import Link from 'next/link';\n\nconst printedBooks = [\n  { name: 'Ethical Design', id: 'ethical-design' },\n  { name: 'Design Systems', id: 'design-systems' },\n];\n\nexport default function PrintedBooks() {\n  return printedBooks.map((printedBook) =&gt; (\n    &lt;Link\n      href=\"/printed-books/[printed-book-id]\"\n      as={`/printed-books/${printedBook.id}`}\n    &gt;\n      {printedBook.name}\n    &lt;/Link&gt;\n  ));\n}</code></pre>\n\n<p>Although this allowed Next.js to interpolate the href for the dynamic parameters, it was tedious, error-prone, and somewhat imperative, and has now been fixed for the majority of use-cases with the release of Next.js 10.</p>\n\n<p>This fix is also backward compatible. If you have been using both <code>as</code> and <code>href</code>, nothing breaks. To adopt the new syntax, discard the <code>href</code> prop and its value, and rename the <code>as</code> prop to <code>href</code> as in the example below:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import Link from 'next/link';\n\nconst printedBooks = [\n  { name: 'Ethical Design', id: 'ethical-design' },\n  { name: 'Design Systems', id: 'design-systems' },\n];\n\nexport default function PrintedBooks() {\n  return printedBooks.map((printedBook) =&gt; (\n    &lt;Link href={`/printed-books/${printedBook.id}`}&gt;{printedBook.name}&lt;/Link&gt;\n  ));\n}</code></pre>\n</div>\n\n<blockquote>\n<p>See <a href=\"https://nextjs.org/blog/next-10#automatic-resolving-of-href\">Automatic resolving of href</a>.</p>\n</blockquote>\n\n<h4 id=\"use-cases-for-the-passhref-prop\">Use-cases For The <code>passHref</code> Prop</h4>\n\n<p>Take a close look at the snippet below:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import Link from 'next/link';\n\nconst printedBooks = [\n  { name: 'Ethical Design', id: 'ethical-design' },\n  { name: 'Design Systems', id: 'design-systems' },\n];\n\n// Say this has some sort of base styling attached\nfunction CustomLink({ href, name }) {\n  return &lt;a href={href}&gt;{name}&lt;/a&gt;;\n}\n\nexport default function PrintedBooks() {\n  return printedBooks.map((printedBook) =&gt; (\n    &lt;Link href={`/printed-books/${printedBook.id}`} passHref&gt;\n      &lt;CustomLink name={printedBook.name} /&gt;\n    &lt;/Link&gt;\n  ));\n}</code></pre>\n</div>\n\n<p>The <code>passHref</code> props force the <code>Link</code> component to pass the <code>href</code> prop down to the <code>CustomLink</code> child component. This is compulsory if the <code>Link</code> component wraps over a component that returns a hyperlink <code>&lt;a&gt;</code> tag. Your use-case might be because you are using a library like styled-components, or if you need to pass multiple children to the <code>Link</code> component, as it only expects a single child.</p>\n\n<blockquote>\n<p>See the <a href=\"https://nextjs.org/docs/api-reference/next/link#if-the-child-is-a-custom-component-that-wraps-an-a-tag\">docs</a> to learn more.</p>\n</blockquote>\n\n<h4 id=\"url-objects\">URL Objects</h4>\n\n<p>The <code>href</code> prop of the <code>Link</code> component can also be a URL object with properties like <code>query</code> which is automatically formatted into a URL string.</p>\n\n<p>With the <code>printedBooks</code> object, the example below will link to:</p>\n\n<ol>\n<li><code>/printed-books/ethical-design?name=Ethical+Design</code> and</li>\n<li><code>/printed-books/design-systems?name=Design+Systems</code>.</li>\n</ol>\n\n<pre><code class=\"language-javascript\">import Link from 'next/link';\n\nconst printedBooks = [\n  { name: 'Ethical Design', id: 'ethical-design' },\n  { name: 'Design Systems', id: 'design-systems' },\n];\n\nexport default function PrintedBooks() {\n  return printedBooks.map((printedBook) =&gt; (\n    &lt;Link\n      href={{\n        pathname: `/printed-books/${printedBook.id}`,\n        query: { name: `${printedBook.name}` },\n      }}\n    &gt;\n      {printedBook.name}\n    &lt;/Link&gt;\n  ));\n}</code></pre>\n\n<p>If you include a dynamic segment in the <code>pathname</code>, then you must also include it as a property in the query object to make sure the query is interpolated in the <code>pathname</code>:</p>\n\n<pre><code class=\"language-javascript\">import Link from 'next/link';\n\nconst printedBooks = [\n  { name: 'Ethical Design', id: 'ethical-design' },\n  { name: 'Design Systems', id: 'design-systems' },\n];\n\n// In this case the dynamic segment `[book-id]` in pathname\n// maps directly to the query param `book-id`\nexport default function PrintedBooks() {\n  return printedBooks.map((printedBook) =&gt; (\n    &lt;Link\n      href={{\n        pathname: `/printed-books/[book-id]`,\n        query: { 'book-id': `${printedBook.id}` },\n      }}\n    &gt;\n      {printedBook.name}\n    &lt;/Link&gt;\n  ));\n}</code></pre>\n\n<p>The example above have paths:</p>\n\n<ol>\n<li><code>/printed-books/ethical-design</code>, and</li>\n<li><code>/printed-books/design-systems</code>.</li>\n</ol>\n\n<p>If you inspect the <code>href</code> attribute in VSCode, you’d find the type <code>LinkProps</code>, with the <code>href</code> property a <code>Url</code> type, which is either a <code>string</code> or <code>UrlObject</code> as mentioned previously.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"618\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A screenshot of the inspected LinkProps type in VSCode\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Inspecting <code>LinkProps</code> in VSCode. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/742d24b6-2df9-4547-b6ae-29ec805103fa/1-client-side-routing-next-js.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Inspecting the <code>UrlObject</code> further leads to the interface with the properties:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"596\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A screenshot of the inspected &lt;code&gt;UrlObject&lt;/code&gt; in VSCode\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Inspecting UrlObject in VSCode. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1f943f3e-3c10-4cc8-b386-c8237a0f8cfd/2-client-side-routing-next-js.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>You can learn more about these properties in the <a href=\"https://nodejs.org/api/url.html#url_url_strings_and_url_objects\">Node.js URL module documentation</a>.</p>\n\n<p>One use case of the hash is to link to specific sections in a page.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import Link from 'next/link';\n\nconst printedBooks = [{ name: 'Ethical Design', id: 'ethical-design' }];\n\nexport default function PrintedBooks() {\n  return printedBooks.map((printedBook) =&gt; (\n    &lt;Link\n      href={{\n        pathname: `/printed-books/${printedBook.id}`,\n        hash: 'faq',\n      }}\n    &gt;\n      {printedBook.name}\n    &lt;/Link&gt;\n  ));\n}</code></pre>\n</div>\n\n<p>The hyperlink will resolve to <code>/printed-books/ethical-design#faq</code>.</p>\n\n<blockquote>\n<p>Learn more in <a href=\"https://nextjs.org/docs/api-reference/next/link#with-url-object\">the docs</a>.</p>\n</blockquote>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"the-next-router-api\">The <code>next/router</code> API</h3>\n\n<p>If the <code>next/link</code> is declarative, then the <code>next/router</code> is imperative. It exposes a <code>useRouter</code> hook that allows access to the <a href=\"https://nextjs.org/docs/api-reference/next/router#router-object\"><code>router</code></a> object inside any function component. You can use this hook to manually perform routing, most especially in certain scenarios where the <code>next/link</code> is not enough, or where you need to “hook” into the routing.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import { useRouter } from 'next/router';\n\nexport default function Home() {\n  const router = useRouter();\n\n  function handleClick(e) {\n    e.preventDefault();\n    router.push(href);\n  }\n\n  return (\n    &lt;button type=\"button\" onClick={handleClick}&gt;Click me&lt;/button&gt;\n  )\n}</code></pre>\n</div>\n\n<p><code>useRouter</code> is a React hook and cannot be used with classes. Need the <code>router</code> object in class components? Use <code>withRouter</code>.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import { withRouter } from 'next/router';\n\nfunction Home({router}) {\n  function handleClick(e) {\n    e.preventDefault();\n    router.push(href);\n  }\n\n  return (\n    &lt;button type=\"button\" onClick={handleClick}&gt;Click me&lt;/button&gt;\n  )\n}\n\nexport default withRouter(Home);</code></pre>\n</div>\n\n<h4 id=\"the-router-object\">The <code>router</code> Object</h4>\n\n<p>Both the <code>useRouter</code> hook and <code>withRouter</code> higher-order component, return a router object with properties like <code>pathname</code>, <code>query</code>, <code>asPath</code>, and <code>basePath</code> that gives you information about the URL state of the current page, <code>locale</code>, <code>locales</code>, and <code>defaultLocale</code> that gives information about the active, supported, or current default locale.</p>\n\n<p>The router object also has methods like <code>push</code> for navigating to a new URL by adding a new URL entry into the history stack, <code>replace</code>, similar to push but replaces the current URL instead of adding a new URL entry into the history stack.</p>\n\n<p>Learn more about the <a href=\"https://nextjs.org/docs/api-reference/next/router#router-object\">router object</a>.</p>\n\n<h3 id=\"custom-route-configuration-with-next-config-js\">Custom Route Configuration With <code>next.config.js</code></h3>\n\n<p>This is a regular Node.js module that can be used to configure certain Next.js behavior.</p>\n\n<pre><code class=\"language-javascript\">module.exports = {\n  // configuration options\n}</code></pre>\n\n<blockquote>\n<p>Remember to restart your server anytime you update <code>next.config.js</code>. <a href=\"https://nextjs.org/docs/api-reference/next.config.js/introduction\">Learn more</a>.</p>\n</blockquote>\n\n<h4 id=\"base-path\">Base Path</h4>\n\n<p>It was mentioned that the initial/default route in Next.js is <code>pages/index.js</code> with path <code>/</code>. This is configurable and you can make your default route a sub-path of the domain.</p>\n\n<pre><code class=\"language-javascript\">module.exports = {\n  // old default path: /\n  // new default path: /dashboard\n  basePath: '/dashboard',\n};</code></pre>\n\n<p>These changes will automatically take effect in your application with all <code>/</code> paths routed to <code>/dashboard</code>.</p>\n\n<blockquote>\n<p>This feature can only be used with Next.js 9.5 and above. <a href=\"https://nextjs.org/docs/api-reference/next.config.js/basepath\">Learn more</a>.</p>\n</blockquote>\n\n<h4 id=\"trailing-slash\">Trailing Slash</h4>\n\n<p>By default, a trailing slash will not be available at the end of each URL. However, you can switch that with:</p>\n\n<pre><code class=\"language-javascript\">module.exports = {\n  trailingSlash: true\n};</code></pre>\n\n<pre><code class=\"language-javascript\"># trailingSlash: false\n/printed-books/ethical-design#faq\n# trailingSlash: true\n/printed-books/ethical-design/#faq</code></pre>\n\n<p>Both the <a href=\"https://nextjs.org/docs/api-reference/next.config.js/basepath\">base path</a> and <a href=\"https://nextjs.org/docs/api-reference/next.config.js/trailing-slash\">trailing slash</a> features can only be used with Next.js 9.5 and above.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>Routing is one of the most important parts of your Next.js application, and it reflects in the file-system-based router built on the concept of pages. Pages can be used to define the most common route patterns. The concepts of routing and rendering are closely related. Take the lessons of this article with you as you build your own Next.js app or work on a Next.js codebase. And check the resources below to learn more.</p>\n\n<h4 id=\"related-resources\">Related Resources</h4>\n\n<ul>\n<li><a href=\"https://nextjs.org/docs/basic-features/pages\">Next.js official documentation for Pages</a></li>\n<li><a href=\"https://nextjs.org/docs/basic-features/data-fetching\">Next.js official documentation for data fetching</a></li>\n<li><a href=\"https://nextjs.org/docs/api-reference/next.config.js/introduction\">Next.js official documentation for next.config.js</a></li>\n<li><a href=\"https://nextjs.org/blog/next-10#automatic-resolving-of-href\">Next.js 10: Automatic resolving of</a> <a href=\"https://nextjs.org/blog/next-10#automatic-resolving-of-href\"><code>href</code></a></li>\n<li><a href=\"https://nextjs.org/docs/api-reference/next/link\">Next.js official documentation for next/link</a></li>\n<li><a href=\"https://nextjs.org/docs/api-reference/next/router\">Next.js official documentation for next/router</a></li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, yk, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Squeaky Portraits: Having Fun with the CSS path() Function"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/css-path-function-squeaky-portraits/?utm_source=rss\"\n              title=\"Squeaky Portraits: Having Fun with the CSS path() Function\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616632213jhey.jpg\"\n        alt=\"Squeaky Portraits: Having Fun with the CSS path() Function\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616632213jhey-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616632213jhey-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616632213jhey-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616632213jhey.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>With the Chrome 88 release, we got support for <code>clip-path: path()</code>. That means it <a style=\"font-weight:bold\" href=\"https://caniuse.com/mdn-css_properties_clip-path_path\">now has support</a> in &#8220;most&#8221; major browsers!</strong></p>\n<p>With <code>path()</code>, we’re able to use path definitions for a <code>clip-path</code>. (You catch up on what <code>clip-path</code> is <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path\">here</a>). These path definition strings are the same as those we can use with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\">SVG path element</a>. What&#8217;s cool about this is that it provides a way to create shapes that before may have meant using SVG. We can even create paths that break without requiring any tricks. </p>\n<p>With the increased support came an opportunity to try something fun with it! Let’s make “Squeaky Portraits”! It&#8217;s a fun take on using <code>clip-path: path()</code> to clip the viewable area of an element into these “Nickelodeon-esque” splats.</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">&quot;Squeaky Portraits 👇😅&quot;</p>\n<p>Wasn&#39;t done playing with CSS clip-path: path() 😂</p>\n<p>Aiming for a splat but settled for a squeaky sound effect 😆</p>\n<p>Powered by scoped variables! 💪</p>\n<p>(Better with sound 👍)</p>\n<p>👉 <a href=\"https://t.co/Nuqyivpm5Y\">https://t.co/Nuqyivpm5Y</a> via <a href=\"https://twitter.com/CodePen?ref_src=twsrc%5Etfw\">@CodePen</a> <a href=\"https://t.co/TCCouglKpd\">pic.twitter.com/TCCouglKpd</a></p>\n<p>&mdash; Jhey 🐻🛠 (@jh3yy) <a href=\"https://twitter.com/jh3yy/status/1360019670393360389?ref_src=twsrc%5Etfw\">February 12, 2021</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<h2 id=\"creatingapath\">Creating a Path</h2>\n<p>First up, we need our own SVG style path definition string. And in this case, more than one. The neat thing with <code>clip-path</code> is that we can transition them with CSS. As long as the <code>clip-path</code> function and number of nodes are consistent, we can transition.</p>\n<p>To make some paths, we can hop in any vector graphic editor. In this case, I’m using <a href=\"https://www.figma.com/\">Figma</a>. And instead of creating the paths from scratch, we can use a desired &#8220;splat&#8221; as a foundation. This one looks good!</p>\n[caption id=\"attachment_181886\" align=\"alignnone\" width=\"300\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616540613splat.png\" alt=\"Splat Example Found Online\" width=\"300\" height=\"300\" class=\"size-full wp-image-181886\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540613splat.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540613splat-150x150.png 150w\" sizes=\"(max-width: 300px) 100vw, 300px\" /> Splat Example Found Online[/caption]\n<p>The trick here is to create more splats based on the foundation splat. And we need to do this without introducing or removing any nodes. These are the three splats I came up with. But you could make any shapes you like as long as you stick to that rule!</p>\n[caption id=\"attachment_181887\" align=\"alignnone\" width=\"980\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616540650splats.png\" alt=\"Three Different Splats Built From One Splat\" width=\"980\" height=\"300\" class=\"size-full wp-image-181887\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540650splats.png 980w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540650splats-300x92.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540650splats-768x235.png 768w\" sizes=\"(max-width: 980px) 100vw, 980px\" /> Three Different Splats Built From One Splat[/caption]\n<p>You may notice that the third splat has two blobs that separate off from the main shape. This is fine, because SVG path definitions allow us to do this. We can start a line, close it, and move to another point to start another. </p>\n<p>But didn&#8217;t I say they needed a consistent number of points? They do. And that&#8217;s what we have here! Those two blobs appear for each splat. But the trick is that we can move them behind the rest of the path when they aren&#8217;t needed.</p>\n[caption id=\"attachment_181888\" align=\"alignnone\" width=\"300\"]<img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1616540711two-blobs.png\" alt=\"Figma showing two blobs behind main path\" width=\"300\" height=\"300\" class=\"size-full wp-image-181888\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540711two-blobs.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616540711two-blobs-150x150.png 150w\" sizes=\"(max-width: 300px) 100vw, 300px\" /> Figma showing two blobs behind main path[/caption]\n<p>Once we have our splats, we can export them and grab the path definition strings:</p>\n<p class=\"codepen\" data-height=\"1000\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"ExZxbNW\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"1. SVG Splats\">\n  <span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/ExZxbNW\"><br />\n  1. SVG Splats</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<h2 id=\"applyingsplats\">Applying Splats</h2>\n<p>To apply the splats, we&#8217;re going to create variables for each path:</p>\n<pre><code class=\"css language-css\">.portrait {\r\n  --splat: \"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919 180.294...\";\r\n  --splattier: \"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919...\";\r\n  --splatted: \"M232.5 256C225 251 209.5 262.5 224 281.5C232.736 292.948...\";\r\n}\r\n</code></pre>\n<p>These are the paths we’ve lifted straight out of the exported SVG.</p>\n<p>We’re going with the names “splat”, “splattier”, and “splatted”. Naming things is hard. Ha! But take, for example, the “splatted” SVG:</p>\n<pre><code class=\"markup language-markup\">&lt;svg width=\"300\" height=\"300\" viewBox=\"0 0 300 300\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\r\n  &lt;path d=\"M232.5 256C225 251 209.5 262.5 224 281.5C232.736 292.948 238.561 297.756 251 290.5C257 287 256.114 271.924 250 264.5C243.886 257.076 240 261 232.5 256ZM147 92.5C118.738 94.6708 118 17 93 44C68 71 123.543 76.5 108 101.5C90.5 115 70.81 98.3664 64 115C56.7766 132.643 91.1967 136.948 90.5 156C89.4406 184.974 19.1766 161.499 24.5 190C29.9178 219.006 78.6461 172.635 100 193C130.207 221.808 1 248.5 58.5 291.5C94.5576 318.465 114.991 206.551 140.5 211C183.5 218.5 134.5 294 186.5 279.5C207.5 273 174.638 224.658 196 204C223.117 177.777 275.916 253 291.5 218.5C311.375 174.5 228.698 194.565 224 160C219.553 127.282 291.5 123.5 267.5 87.5C238.5 57 247 125.5 196 105.5C147 92.5 229.5 13.5 173.5 2.5C140.5 2.49999 183.532 89.694 147 92.5ZM45 92.5C36.8766 80.3149 14.1234 75.3149 6.00001 87.5C0.584412 95.6234 2.00001 120.357 14.5 115C27.9606 109.231 36.8766 124.685 45 112.5C50.4156 104.377 50.4156 100.623 45 92.5Z\" fill=\"#A91CFF\"/&gt;\r\n&lt;/svg&gt;\r\n</code></pre>\n<p>We’re lifting out the <code>d</code> attribute from the <code>path</code> elements and creating CSS variables for them. Next, we need an element to apply these to. Let&#8217;s create an element with the class &#8220;portrait&#8221;:</p>\n<pre><code class=\"markup language-markup\">&lt;div class=\"portrait\"&gt;&lt;/div&gt;\r\n</code></pre>\n<p>Next, apply some styling to it:</p>\n<pre><code class=\"css language-css\">.portrait {\r\n  --splat: \"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919 180.294...\";\r\n  --splattier: \"M161 188.375C170 193.5 177.919 193.854 186 188.375C197.919...\";\r\n  --splatted: \"M232.5 256C225 251 209.5 262.5 224 281.5C232.736 292.948...\";\r\n  --none: \"\";\r\n  height: 300px;\r\n  width: 300px;\r\n  background: #daa3f5;\r\n  clip-path: path(var(--clip, var(--none)));\r\n  transition: clip-path 0.2s;\r\n}\r\n</code></pre>\n<p>And we&#8217;re good to go! Here’s a demo where you can switch between the different clip states:</p>\n<p class=\"codepen\" data-height=\"600\" data-theme-id=\"6441\" data-default-tab=\"css,result\" data-user=\"SitePoint\" data-slug-hash=\"LYxYOwg\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"2. Applying Clip Splat\">\n  <span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/LYxYOwg\"><br />\n  2. Applying Clip Splat</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script><br />\n<!-- [https://codepen.io/jh3y/pen/wvobxVy](https://codepen.io/jh3y/pen/wvobxVy) --></p>\n<p>Note how the shape transitions between the three splat shapes. But, also note how we&#8217;ve given our element an explicit height and width. This size matches the dimensions of our SVG exports. This is <em>important</em>. This is the one drawback of using <code>clip-path: path()</code>. It&#8217;s not responsive. The path definition is relative to the dimensions of your element. This is the same problem faced by CSS motion paths.</p>\n<p>This is fine if we&#8217;re mindful of the sizes of things we&#8217;re clipping. We could also create different path variables for different viewport sizes. But if you have images that resize in a fluid way, other solutions using SVG are going to be more robust.</p>\n<h2 id=\"interaction\">Interaction</h2>\n<p>For our demo, we want the splat to be interactive. We can do this with CSS alone. We can use a scoped CSS variable — <code>--clip</code> — to control the current clip. And then we can update that variable on both <code>:hover</code> and <code>:active</code>. The <code>--active</code> state is triggered when we press our pointer down:</p>\n<pre><code class=\"css language-css\">.portrait {\r\n  clip-path: path(var(--clip, var(--splat)));\r\n}\r\n.portrait:hover {\r\n  --clip: var(--splattier);\r\n}\r\n.portrait:active {\r\n  --clip: var(--splatted);\r\n}\r\n</code></pre>\n<p>Throw that together and we get something like this. Try hovering over the splat and pressing it:</p>\n<p class=\"codepen\" data-height=\"600\" data-theme-id=\"6441\" data-default-tab=\"css,result\" data-user=\"SitePoint\" data-slug-hash=\"mdRdpMJ\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"3. Interactive Splat\">\n  <span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/mdRdpMJ\"><br />\n  3. Interactive Splat</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<h2 id=\"addingsomecharacter\">Adding Some Character</h2>\n<p>Now that we can transition the splat, it needs a little something extra. What if we transform it in those states too?</p>\n<pre><code class=\"css language-css\">.portrait {\r\n  transition: clip-path 0.2s, transform 0.2s;\r\n  transform: scale(var(--scale, 1)) rotate(var(--rotate, 0deg));\r\n}\r\n.portrait:hover {\r\n  --scale: 1.15;\r\n  --rotate: 30deg;\r\n}\r\n.portrait:active {\r\n  --scale: 0.85;\r\n  --rotate: -10deg;\r\n}\r\n</code></pre>\n<p>Using scoped CSS variables to apply a <code>transform</code>, we can add something. Here we update the <code>scale</code> and <code>rotation</code> of our splat. We can experiment with different values and play with different effects here. Translating the element a little could look good?</p>\n<p class=\"codepen\" data-height=\"600\" data-theme-id=\"6441\" data-default-tab=\"css,result\" data-user=\"SitePoint\" data-slug-hash=\"VwPwyQZ\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"4. Adding Some Character\">\n  <span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/VwPwyQZ\"><br />\n  4. Adding Some Character</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/css-path-function-squeaky-portraits/?utm_source=rss\">Squeaky Portraits: Having Fun with the CSS path() Function</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/css-path-function-squeaky-portraits/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181883",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "CSS3",
            "HTML & CSS",
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Jhey Tompkins"
        ],
        "pubDate": [
            "Wed, 24 Mar 2021 15:00:53 GMT"
        ],
        "metaDesc": [
            "The CSS path() function finally has wide browser support. Learn how to use it to take your clips paths to awesome new heights."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Comprehensive Guide to Vue Slots"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/vue-slots-comprehensive-guide/?utm_source=rss\"\n              title=\"A Comprehensive Guide to Vue Slots\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623030328vue-slots.png\"\n        alt=\"A Comprehensive Guide to Vue Slots\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623030328vue-slots-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623030328vue-slots.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Components are the heart of modern web application development. Every app is composed of a number of components smoothly stitched together in order to work as a whole unit. These components need to be maximally flexible and reusable to allow for using them in different situations and even in different apps. One of the main mechanisms many frameworks use to meet such requirements — in partucular Vue — is called a “slot”.</strong></p>\n<p>Slots are a powerful and versatile content distribution and composition mechanism. You can think of slots as customizable templates (similar to PHP templates, for example) which you can use in different places, for various use cases, producing different effects. For example, in UI frameworks like <a href=\"https://vuetifyjs.com/en/\">Vuetify</a>, slots are used to make generic components such as an <a href=\"https://vuetifyjs.com/en/api/v-alert/#slots\">alert component</a>. In these kinds of components, slots are used as placeholders for the default content and any additional/optional content, such as icons, images, and so on. </p>\n<p>Slots allow you to add any structure, style, and functionality to a particular component. By using slots, developers can drastically reduce the number of props used in a single component, making components much cleaner and manageable. </p>\n<p>In this tutorial, we&#8217;ll explore how to harness the power of slots in the context of Vue 3. Let&#8217;s get started.</p>\n<h2 id=\"basicusageofslots\">Basic Usage of Slots</h2>\n<p>Basically, Vue offers two kinds of slots: a simple slot, and a scoped slot. Let&#8217;s start with the simple one. Consider the following example:</p>\n<pre><code class=\"javascript language-javascript\">const app = Vue.createApp({})\r\n\r\napp.component('primary-button', {\r\n  template: `\r\n    &lt;button&gt;\r\n      &lt;slot&gt;OK&lt;/slot&gt;\r\n    &lt;/button&gt;`\r\n})\r\n\r\napp.mount('#app')\r\n</code></pre>\n<p>Here, we have a primary button component. We want the button&#8217;s text to be customizable, so we use the <code>slot</code> component inside the <code>button</code> element to add a placeholder for the text. We also want a default (fallback) generic value in case we don&#8217;t provide a custom one. Vue uses as default slot content everything we put inside the <code>slot</code> component. So we just put the text “OK” inside the component. Now we can use the component like this:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;primary-button&gt;&lt;/primary-button&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p><!-- [CodePen Example](https://codepen.io/codeknack/pen/RwpRKxj?editors=1010) --></p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"oNZyNyO\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue 3 Slots: Basic Slot\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/oNZyNyO\"><br />\nVue 3 Slots: Basic Slot</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>The result is a button with text “OK”, because we haven&#8217;t provided any value. But what if we want to create a button with custom text? In that case, we provide custom text in the component implementation like this:</p>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;primary-button&gt;Subscribe&lt;/primary-button&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Here, Vue takes the custom “Subscribe” text and uses it instead of the default one.</p>\n<p>As you can see, even in this simple example, we get a great amount of flexibility over how we want to present our component. But this is only the tip of the iceberg. Let&#8217;s look at a more complex example.</p>\n<h3 id=\"buildingaquoteofthedaycomponent\">Building a Quote of the Day Component</h3>\n<p>Now, we&#8217;ll build a quote component which displays the quote of the day. Here&#8217;s the code:</p>\n<pre><code class=\"javascript language-javascript\">const app = Vue.createApp({}) \r\n\r\napp.component('quote', {\r\n  template: `\r\n    &lt;article&gt;\r\n      &lt;h2&gt;The quote of the day says:&lt;/h2&gt;\r\n      &lt;p class=\"quote-text\"&gt;\r\n        &lt;slot&gt;&lt;/slot&gt;\r\n      &lt;/p&gt;\r\n    &lt;/article&gt;`\r\n})\r\n\r\napp.mount('#app')\r\n</code></pre>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;quote&gt;\r\n    &lt;div class=\"quote-box\"&gt;\r\n      \"Creativity is just connecting things.\"\r\n      &lt;br&gt;&lt;br&gt;\r\n      - Steve Jobs\r\n    &lt;/div&gt;\r\n  &lt;/quote&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<pre><code class=\"css language-css\">.quote-box {\r\n  background-color: lightgreen;\r\n  width: 300px;\r\n  padding: 5px 10px;\r\n}\r\n\r\n.quote-text {\r\n  font-style: italic;\r\n}\r\n</code></pre>\n<p>In this example, we create a title heading whose content will be constant, and then we put a slot component inside a paragraph, whose content will vary depending on the current day&#8217;s quote. When the component is rendered, Vue will display the title from the quote component followed by the content we put inside the quote tags. Also pay attention to the CSS classes used both in the quote creation and implementation. We can style our components in both ways depending on our needs.</p>\n<p><!-- [CodePen Example](https://codepen.io/codeknack/pen/KKWMaZY) --></p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"ZEeREjr\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue 3 Slots: Quote Component\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/ZEeREjr\"><br />\nVue 3 Slots: Quote Component</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Our quote of the day component works fine, but we still need to update the quote manually. Let&#8217;s make it dynamic by using the <a href=\"https://favqs.com/api\">Fav Quotes API</a>:</p>\n<pre><code class=\"javascript language-javascript\">const app = Vue.createApp({   \r\n  data() {\r\n    return {\r\n      quoteOfTheDay: null,\r\n      show: false\r\n    };\r\n  },\r\n  methods: {\r\n    showQuote() {\r\n      axios.get('https://favqs.com/api/qotd').then(result =&gt; {\r\n        this.quoteOfTheDay = result.data\r\n        this.show = true\r\n      }); \r\n    }\r\n  }\r\n})\r\n\r\n...\r\n\r\napp.mount('#app')\r\n</code></pre>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;quote&gt;\r\n    &lt;button v-if=\"show == false\" @click=\"showQuote\"&gt;Show Quote of the Day&lt;/button&gt;\r\n    &lt;div v-if=\"show\" class=\"quote-box\"&gt;\r\n      {{ quoteOfTheDay.quote.body }} \r\n      &lt;br&gt;&lt;br&gt;\r\n      - {{ quoteOfTheDay.quote.author }}\r\n    &lt;/div&gt;\r\n  &lt;/quote&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Here, we use <a href=\"https://github.com/axios/axios\">Axios</a> to make a call to the “Quote of the Day” API endpoint, and then we use the <code>body</code> and <code>author</code> properties, from the returned JSON object, to populate the quote. So we no longer need to add the quote manually; it&#8217;s done automatically for us.</p>\n<p><!-- [CodePen Example](https://codepen.io/codeknack/pen/zYZBNRv) --></p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"js,result\" data-user=\"SitePoint\" data-slug-hash=\"QWpxWVv\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue 3 Slots: Quote Component with Axios\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/QWpxWVv\"><br />\nVue 3 Slots: Quote Component with Axios</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<h2 id=\"usingmultipleslots\">Using Multiple Slots</h2>\n<p>Although a single slot can be quite powerful, in many cases this won&#8217;t be enough. In a real-world scenario, we&#8217;ll often need more than one single slot to do the job. Fortunately, Vue allows us to use as many slots as we need. Let&#8217;s see how we can use multiple slots by building a simple card component.</p>\n<h3 id=\"buildingabasiccardcomponent\">Building a Basic Card Component</h3>\n<p>We&#8217;ll build a card component with three sections: a header, a body, and a footer:</p>\n<pre><code class=\"javascript language-javascript\">const app = Vue.createApp({})\r\n\r\napp.component('card', {\r\n  template: `\r\n    &lt;div class=\"container\"&gt;\r\n      &lt;header&gt;\r\n        &lt;slot name=\"header\"&gt;&lt;/slot&gt;\r\n      &lt;/header&gt;\r\n      &lt;main&gt;\r\n        &lt;slot&gt;&lt;/slot&gt;\r\n      &lt;/main&gt;\r\n      &lt;footer&gt;\r\n        &lt;slot name=\"footer\"&gt;&lt;/slot&gt;\r\n      &lt;/footer&gt;\r\n    &lt;/div&gt;`\r\n})\r\n\r\napp.mount('#app')\r\n</code></pre>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;card&gt;\r\n    &lt;template v-slot:header&gt;\r\n      &lt;h2&gt;Card Header Title&lt;/h2&gt;\r\n    &lt;/template&gt;\r\n\r\n    &lt;template v-slot:default&gt;\r\n      &lt;p&gt;\r\n        Lorem ipsum leo risus, porta ac consectetur ac, vestibulum at eros. Donec id elit non mi porta gravida at eget metus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras mattis consectetur purus sit amet fermentum.\r\n      &lt;/p&gt;\r\n    &lt;/template&gt;\r\n\r\n    &lt;template v-slot:footer&gt;\r\n      &lt;a href=\"#\"&gt;Save&lt;/a&gt; -\r\n      &lt;a href=\"#\"&gt;Edit&lt;/a&gt; -\r\n      &lt;a href=\"#\"&gt;Delete&lt;/a&gt;\r\n    &lt;/template&gt;\r\n  &lt;/card&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>In order to use multiple slots, we must provide a name for each of them. The only exception is the default slot. So, in the above example, we add a <code>name</code> property for the header and footer slots. The slot with no name provided is considered default.</p>\n<p>When we use the <code>card</code> component, we need to use the <code>template</code> element with the <code>v-slot</code> directive with the slot name: <code>v-slot:[slot-name]</code>.</p>\n<p><!-- [CodePen Example](https://codepen.io/codeknack/pen/vYxKgde) --></p>\n<p class=\"codepen\" data-height=\"450\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"qBrKBMg\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue 3 Slots: Card Component\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/qBrKBMg\"><br />\nVue 3 Slots: Card Component</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p><em>Note: the <code>v-slot</code> directive has a shorthand, which uses special symbol <code>#</code> followed by the slot&#8217;s name. So, for example, instead of <code>v-slot:header</code>, we can write <code>#header</code>.</em> </p>\n<p>Named slots can also be used with third-party components, as we&#8217;ll see in the next section.</p>\n<h3 id=\"usingnamedslotswithbulmascardcomponent\">Using Named Slots with Bulma&#8217;s Card Component</h3>\n<p>Let&#8217;s take the <a href=\"https://bulma.io/documentation/components/card/\">Bulma&#8217;s Card component</a> and tweak it a little bit:</p>\n<pre><code class=\"javascript language-javascript\">const app = Vue.createApp({})\r\n\r\napp.component('card', {\r\n  template: `\r\n    &lt;div class=\"container\"&gt;\r\n      &lt;div class=\"card\"&gt;\r\n        &lt;header class=\"card-header\"&gt;\r\n          &lt;slot name=\"header\"&gt;&lt;/slot&gt;\r\n        &lt;/header&gt;\r\n        &lt;main class=\"card-content\"&gt;\r\n          &lt;slot&gt;&lt;/slot&gt;\r\n        &lt;/main&gt;\r\n        &lt;footer class=\"card-footer\"&gt;\r\n          &lt;slot name=\"footer\"&gt;&lt;/slot&gt;\r\n        &lt;/footer&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;`\r\n})\r\n\r\napp.mount('#app')\r\n</code></pre>\n<pre><code class=\"css language-css\">.container {\r\n  width: 300px;\r\n}\r\n</code></pre>\n<pre><code class=\"markup language-markup\">&lt;div id=\"app\"&gt;\r\n  &lt;card&gt;\r\n    &lt;template v-slot:header&gt;\r\n      &lt;p class=\"card-header-title\"&gt;\r\n        Card Header Title\r\n      &lt;/p&gt;\r\n    &lt;/template&gt;\r\n\r\n    &lt;template v-slot:default&gt;\r\n      &lt;p&gt;\r\n        Lorem ipsum leo risus, porta ac consectetur ac, vestibulum at eros. Donec id elit non mi porta gravida at eget metus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras mattis consectetur purus sit amet fermentum.\r\n      &lt;/p&gt;\r\n    &lt;/template&gt;\r\n\r\n    &lt;template v-slot:footer&gt;\r\n      &lt;a href=\"#\" class=\"card-footer-item\"&gt;Save&lt;/a&gt;\r\n      &lt;a href=\"#\" class=\"card-footer-item\"&gt;Edit&lt;/a&gt;\r\n      &lt;a href=\"#\" class=\"card-footer-item\"&gt;Delete&lt;/a&gt;\r\n    &lt;/template&gt;\r\n  &lt;/card&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>Here, we use the classes from the Bulma Card component as a base skeleton and add a slot for each section (header, content, footer). Then, when we add the content, everything is structured properly.</p>\n<p><!-- [CodePen Example](https://codepen.io/codeknack/pen/QWpEdQY) --></p>\n<p class=\"codepen\" data-height=\"500\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"MWpXWPr\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Vue 3 Slots: Card Component with Bulma\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/MWpXWPr\"><br />\nVue 3 Slots: Card Component with Bulma</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/vue-slots-comprehensive-guide/?utm_source=rss\">A Comprehensive Guide to Vue Slots</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/vue-slots-comprehensive-guide/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191553",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Ivaylo Gerchev"
        ],
        "pubDate": [
            "Sun, 06 Jun 2021 16:00:27 GMT"
        ],
        "metaDesc": [
            "With slots, you can produce highly reusable and versatile components. Learn how to harness the power of slots in the context of Vue 3."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Issue #454"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/l8eLoa1rQzk/"
        ],
        "pubDate": [
            "Wed, 07 Apr 2021 21:20:31 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-454/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to create a dark theme with inverted lightness variables, how to future-proof your CSS, what are the best tools to audit your CSS, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://lea.verou.me/2021/03/inverted-lightness-variables/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Dark Mode in 5 Minutes, With Inverted Lightness Variables</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://lea.verou.me/2021/03/inverted-lightness-variables/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/inverted-lightness-variables.jpg\" alt=\"Dark Mode in 5 Minutes, With Inverted Lightness Variables\" /></a>\n\t\t\t\t\t\t<p>Lea Verou shows an interesting technique to create a dark theme quickly.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://lea.verou.me/2021/03/inverted-lightness-variables/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://moderncss.dev/developing-for-imperfect-future-proofing-css-styles/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Developing For Imperfect: Future Proofing CSS Styles</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://moderncss.dev/developing-for-imperfect-future-proofing-css-styles/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/developing-for-imperfect-future-proofing-css-styles.jpg\" alt=\"Developing For Imperfect: Future Proofing CSS Styles\" /></a>\n\t\t\t\t\t\t<p>Stephanie Eckles explores how to future-proof styles in a world with an infinite degree of device and user ability variance.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://moderncss.dev/developing-for-imperfect-future-proofing-css-styles/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/spring-summit-fuel-your-creativity\">Fuel your creativity: three days of learning on CSS, design, and more</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/spring-summit-fuel-your-creativity\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/spring-summit-fuel-your-creativity-learning-css-design.png\" alt=\"Fuel your creativity: three days of learning on CSS, design, and more\" /></a>\n\t\t\t\t\t\t<p>We’re just a couple weeks away from <a href=\"https://cssw.io/spring-summit-fuel-your-creativity\" rel=\"noopener\" target=\"_blank\">An Event Apart Online Together: Spring Summit</a>, a three-day conference with an intense focus on digital design, UX, content, code, and more. Featuring 15+ in-depth sessions from world-class experts, you’ll get deep insights into where we are now and where things are going next. Join us online April 19–21.</p>\n<p>Save $100 on any multi-day pass with promo code <strong>AEACSSW21</strong>.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/spring-summit-fuel-your-creativity\">See the detailed three-day agenda and register now.</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/tools-for-auditing-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Tools for Auditing CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Silvestar Bistrović gives a comprehensive overview of tools for auditing your CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/tools-for-auditing-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://piccalil.li/blog/container-queries-are-actually-coming?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Container Queries Are Actually Coming</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Andy Bell explains how to create a progressively enhanced card with upcoming container queries.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://piccalil.li/blog/container-queries-are-actually-coming?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.cassie.codes/posts/swipey-image-grids/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Swipey Image Grids</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Cassie Evans demonstrates how to use SVG to make responsive, animated image grids.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.cassie.codes/posts/swipey-image-grids/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/fixing-a-slow-site-iteratively/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Fixing a Slow Site Iteratively</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Kealan Parr reveals how to improve the performance of your site incrementally.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/fixing-a-slow-site-iteratively/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://kittygiraudel.com/2021/04/05/an-accessible-toggle/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">An Accessible Toggle</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Kitty Giraudel shows a small HTML + CSS-only implementation of an accessible toggle that you can easily tweak and use in your projects.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://kittygiraudel.com/2021/04/05/an-accessible-toggle/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/hover-the-conference-css-deserves\">Hover, the Conference CSS Deserves</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/hover-the-conference-css-deserves\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/hover-the-conference-css-deserves.png\" alt=\"Hover, the Conference CSS Deserves\" /></a>\n\t\t\t\t\t\t<p>Hover is an online conference exclusively focussed on CSS, and covers what you need to know to level up.</p>\n<p>Curated by Hui Jing Chen, presented by Web Directions, it&#8217;s the conference CSS deserves.</p>\n<p>Online April 23 and 30, at a time zone convenient to you.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/hover-the-conference-css-deserves\">Pay just $99, 30% off, when you register with the code '<strong>cssweekly</strong>'</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://spline.design/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Spline</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>A 3d design tool that will help you create and publish 3D web experiences.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://spline.design/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://github.com/szhsin/react-menu?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">React-Menu</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>React component for building accessible menus, dropdowns, submenus, context menus, and more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://github.com/szhsin/react-menu?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/tiffachoo/pen/vYgmQgJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Warming Up</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/tiffachoo/pen/vYgmQgJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/css-warming-up.png\" alt=\"Warming Up\" /></a>\n\t\t\t\t\t\t<p>Tiffany Choong created a lovely illustration using only CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/tiffachoo/pen/vYgmQgJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/l8eLoa1rQzk\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-454/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "A Guide to Serverless Functions and How to Deploy Them"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/serverless-functions/?utm_source=rss\"\n              title=\"A Guide to Serverless Functions and How to Deploy Them\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615574644serverless.jpg\"\n        alt=\"Serverless Functions: A Guide to Usage and Deployment\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615574644serverless-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615574644serverless-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615574644serverless-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615574644serverless.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Over the last few years, serverless functions (sometimes also referred to as &#8220;serverless&#8221; or &#8220;serverless computing&#8221;) has become a popular technology. However, there&#8217;s still a lot of confusion around the term. How can you run code without servers? What are the pros and cons of the technology? What are the situations where you might use it? In this article, I hope answer these questions and give you a good overview of the technology.</strong></p>\n<h2 id=\"whatareserverlessfunctions\">What are Serverless Functions?</h2>\n<p>The term &#8220;serverless&#8221; is sure to provoke curiosity the first time you hear it. &#8220;How do you run code on the web without a server?&#8221; you might wonder. What it actually means is that you, as a developer, don&#8217;t have to worry about the servers your code runs on. Provisioning of hardware, configuring networking, installing software, and scaling are all abstracted away by the serverless provider.</p>\n<p>From a development perspective, a serverless function is a bundle of code that you upload to a serverless provider (such as AWS or Google). This code can be configured to respond to requests via a URL, run on a schedule (that is, via a cron job), or called from other services or serverless functions.</p>\n<p>Serverless functions are ideal for adding a dash of backend functionality to frontend applications without the complexity and cost of running a full server.</p>\n<p>At the other end of the scale, you can also build whole applications with serverless functions. In conjunction with other cloud services providing file storage, database systems, and authentication, it&#8217;s possible to build large, robust and scalable applications without having to provision a single server.</p>\n<h2 id=\"theadvantages\">The Advantages</h2>\n<p>Serverless functions are run in micro-containers that are started up on demand. They&#8217;re designed for fairly short-running processes, and so billing is set with this in mind. Unlike full server instances, which are often billed by the hour, serverless functions are typically billed by the GB-second. With minimum billing durations in the order of milliseconds, low-frequency or sporadic workloads are much cheaper to run as serverless functions than traditional server instances. Light workloads and prototyping can even fall within the free tier of some providers.</p>\n<p>The on-demand invocation of serverless functions means they scale quickly and easily with no extra work on the part of the developer. This makes them ideal for situations where traffic may spike unpredictably, as more instances of the function will automatically be made available to handle the load. The function will be scaled back down afterward, meaning you won&#8217;t be paying for unused capacity.</p>\n<p>A key advantage to the serverless model is not having to deal with servers. Running a web application requires a lot of time and expertise in server administration in order to keep the software up to date with the latest security patches, and ensure that the server is correctly configured in order to be secure and performant. For start-ups and small businesses, hiring someone to deal with server administration is a large additional overhead. With serverless, developers can focus on creating solutions.</p>\n<h2 id=\"thedisadvantages\">The Disadvantages</h2>\n<p>Of course, no technology is perfect, and serverless functions aren&#8217;t without their drawbacks. As I mentioned earlier, the serverless model is designed with short-lived processes in mind. With the maximum execution time measured in minutes (for example, 15 on AWS and 9 on Google), it&#8217;s not suitable for longer-running jobs like processing large batches of data.</p>\n<p>Another widely discussed issue is that of the cold-start time. This is the time taken for the provider to provision and initialize a container for your serverless function before it&#8217;s ready to start running. Once a function has finished running, the container is kept around for a short time to be reused if the code is executed again. This &#8220;cold-start&#8221; delay could add <a href=\"https://mikhail.io/serverless/coldstarts/aws\">between half a second to a second&#8217;s delay</a> to your function&#8217;s response time. There are work-arounds for this, including the Serverless framework&#8217;s <a href=\"https://www.serverless.com/blog/keep-your-lambdas-warm\">WarmUp plugin</a>, which pings your function on a schedule to keep the container alive.</p>\n<p>Although serverless functions free you up from having to worry about server provisioning and maintenance, that&#8217;s not to say there isn&#8217;t a learning curve. Building applications with serverless requires a different mindset to working with traditional monolithic codebases. You have to structure your code in a different way, breaking down the functionality into smaller, discrete services that fit within the constraints of the serverless functions. Deployment is also more complex, as each function is independently versioned and updated.</p>\n<p>There&#8217;s also the issue of vendor lock-in that&#8217;s sometimes mentioned as a downside to serverless tech. As it currently stands, the major providers in this space (AWS, Google, Azure) have their own different implementations and management tools. This can make it difficult to move a serverless application from one cloud provider to another. Projects such as the <a href=\"https://www.serverless.com/\">Serverless Framework</a> have attempted to abstract away the underlying services in order to make applications portable between providers.</p>\n<h2 id=\"usecases\">Use Cases</h2>\n<p>Although serverless functions can be used to build entire applications, let&#8217;s take a look at some less ambitious use cases where serverless can benefit the average developer.</p>\n<h3 id=\"formmailer\">Form mailer</h3>\n<p>It&#8217;s not uncommon to have websites that are completely static, apart from a contact form that the client wants to be emailed to them when the user hits send. The site&#8217;s hosting provider may or may not support server-side scripting, and even then it may not be in a language you&#8217;re familiar with. Setting up a serverless function as a form mailer allows you to add the functionality to sites that are on static hosting.</p>\n<h3 id=\"cronjob\">Cron job</h3>\n<p>Sometimes you may need a scheduled task to be run in the background. Normally, you&#8217;d have to pay for a server in order to set up a cron job, and this server would sit idle in between jobs. With a serverless function, you&#8217;ll only pay for the time the job spends running (and perhaps not at all, if it falls within the free tier).</p>\n<h3 id=\"thumbnailgenerator\">Thumbnail generator</h3>\n<p>Imagine that your React application allows the user to upload a photo to be used as an avatar throughout the app. You want to resize the uploaded image so you&#8217;re not wasting bandwidth by serving images that are far larger than needed. A serverless function could be used process the upload request, resizing the image to the required sizes and saving to a service such as S3 or Google Storage.</p>\n<h2 id=\"apracticalexample\">A Practical Example</h2>\n<p>In order to get a more hands-on understanding of working with serverless functions, let&#8217;s walk through a real-world example. We&#8217;ll create a static page with a newsletter signup form, that uses a serverless function to save the user&#8217;s name and email address to a Google spreadsheet. </p>\n<p>Depending on the provider, serverless functions can be written in a variety of languages, but we&#8217;re going to use JavaScript, as Netlify supports Node.js functions. I&#8217;m going to assume you&#8217;ve got a recent version of Node/npm installed on your local machine in order to follow along.</p>\n<h3 id=\"1signupforanetlifyaccount\">1. Sign up for a Netlify account</h3>\n<p>We&#8217;re going to use Netlify as the host for this example, as they provide a free tier that includes serverless functions, and it&#8217;s very easy to get up and running. Firstly, pop over to their site and <a href=\"https://app.netlify.com/signup\">sign up for a free account</a>.</p>\n<h3 id=\"2installthenetlifyclitool\">2. Install the Netlify CLI tool</h3>\n<p>In order to test our example site locally and deploy to Netlify, we&#8217;re going to make use of their CLI tool. This can be installed as a global npm module from the command line:</p>\n<pre><code class=\"bash language-bash\">npm install -g netlify-cli\r\n</code></pre>\n<p>Once the CLI is installed, running the following command will open a browser window to connect the CLI to your account:</p>\n<pre><code class=\"bash language-bash\">netlify login\r\n</code></pre>\n<h3 id=\"3createaprojectfolderandinstalldependencies\">3. Create a project folder and install dependencies</h3>\n<p>Let&#8217;s create a folder for the project, and initialize a new npm project:</p>\n<pre><code class=\"bash language-bash\">mkdir serverless-mailinglist &amp;&amp; cd serverless-mailinglist\r\nnpm init -y\r\n</code></pre>\n<p>This will set us up with a <code>package.json</code> file for the project, ready to install dependencies. Speaking of which, we&#8217;re going to need a couple of packages for our serverless function:</p>\n<pre><code class=\"bash language-bash\">npm install dotenv google-spreadsheet\r\n</code></pre>\n<p>The first, <a href=\"https://www.npmjs.com/package/dotenv\">dotenv</a>, is a package that will allow us to load values from a <code>.env</code> file in the root of our project and expose them to a Node script (our serverless function) as if they were environment variables. The other is <a href=\"https://www.npmjs.com/package/google-spreadsheet\">google-spreadsheet</a>, a package that wraps the Google Sheets API and makes it easier to work with.</p>\n<h3 id=\"4enablethegooglesheetsapiandcreatecredentials\">4. Enable the Google Sheets API and create credentials</h3>\n<p>In order to use the Sheets API, we need to do a bit of prep work. First, you&#8217;ll need to enable the API for your Google account by heading over to <a href=\"https://console.developers.google.com/apis/library/sheets.googleapis.com\">the API console</a>. Create a new project from the menu across the top, and then click the <strong>Enable</strong> button.</p>\n<p>Once that&#8217;s done, you&#8217;ll need to create a Service Account. This account will give you a set of credentials with the necessary permissions to access the API. To do this, follow these steps:</p>\n<ol>\n<li>Make sure you&#8217;re on the <a href=\"https://console.cloud.google.com/apis/api/sheets.googleapis.com/overview\">Sheets API management screen</a>.</li>\n<li>Click <strong>Credentials</strong> in the left sidebar, then click <strong>+ CREATE CREDENTIALS</strong> and choose <strong>Service account</strong> from the drop-down.</li>\n<li>Fill out the form, choosing a name for the service account. The name you choose, plus the project name, will form part of the service account ID. For example, if you name the account &#8220;Mailing List&#8221; and the project name is &#8220;Sitepoint Serverless Demo&#8221;, the ID would be something like <code>mailing-list@sitepoint-serverless-demo.iam.gserviceaccount.com</code>. Click <strong>CREATE</strong>.</li>\n<li>You can skip the remaining two optional sections on the page. Click <strong>CONTINUE</strong> and then <strong>DONE</strong>.</li>\n<li>Next, click on the newly created service account. This should take you to a screen showing the account details. Click <strong>KEYS</strong> in the top menu, then <strong>Add Key</strong> and <strong>Create new key</strong>. Choose JSON as the key type. </li>\n<li>Click the <strong>CREATE</strong> button and a JSON key file will be downloaded to your computer. (Note: this is the <strong>only</strong> copy, so keep it safe!)</li>\n</ol>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/serverless-functions/?utm_source=rss\">A Guide to Serverless Functions and How to Deploy Them</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/serverless-functions/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181617",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Programming"
        ],
        "dc:creator": [
            "Nilson Jacques"
        ],
        "pubDate": [
            "Mon, 15 Mar 2021 15:00:12 GMT"
        ],
        "metaDesc": [
            "How can you run code without servers? Learn all about serverless functions, their pros and cons, and situations where you might want to use them."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Use ngrok to Share a Local Development Site"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/use-ngrok-test-local-site/?utm_source=rss\"\n              title=\"How to Use ngrok to Share a Local Development Site\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2015/05/1618802574ngrok-b_result_1200.jpg\"\n        alt=\"How to Use ngrok to Test a Local Site\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2015/05/1618802574ngrok-b_result_1200-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2015/05/1618802574ngrok-b_result_1200-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2015/05/1618802574ngrok-b_result_1200-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2015/05/1618802574ngrok-b_result_1200.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This tutorial demonstrates a way to share your localhost development server with anyone, anywhere using ngrok to create a secure tunnel to your local machine.</strong></p>\n<p>Demonstrating your application&#8217;s latest features to project managers or clients isn&#8217;t easy unless they&#8217;re sitting a few desks away. It may be possible to commit the changes and deploy to a public staging server, but that process can be impractical if you&#8217;re just seeking an opinion about a widget color or demonstrating the futility of their ridiculous suggestion!</p>\n<p>Ideally, you need some way to share access to a web application currently running on your <code>localhost</code> development server. ngrok provides that solution.</p>\n<h2 id=\"whatisngrok\">What is ngrok?</h2>\n<p>Your development machine may be connected to a secure network behind a firewall. To work around access restrictions, ngrok runs a small client process on your machine which creates a private connection tunnel to the ngrok cloud service. Your <code>localhost</code> development server is mapped to an <code>ngrok.io</code> sub-domain, which a remote user can then access. There&#8217;s no need to expose ports, set up forwarding, or make other network changes.</p>\n<p>The ngrok client software is available for Windows, macOS, and Linux.</p>\n<h2 id=\"isngroksecure\">Is ngrok Secure?</h2>\n<p>The connection tunnel established by ngrok is secure and can only transmit data to the <code>localhost</code> port you have open. It would be difficult to do any damage, but ngrok is only as secure as the application you&#8217;re testing.</p>\n<p>In most cases, you&#8217;ll use ngrok to temporarily grant access to someone by issuing them with a randomly generated URL. It&#8217;s best to assume that anyone could access your app while the tunnel is open. You may want to disable that <em>&#8220;delete all files&#8221;</em> option while ngrok is active!</p>\n<h2 id=\"whatdoesngrokcost\">What Does ngrok Cost?</h2>\n<p>The basic <a href=\"https://ngrok.com/pricing\">ngrok service</a> is free and permits up to four tunnels and 40 connections per minute. Commercial options start from $5 per month, providing further connections and custom domains.</p>\n<h2 id=\"downloadngrok\">Download ngrok</h2>\n<p>To start, open <a href=\"https://ngrok.com/\">ngrok.com</a> in your browser and click <a href=\"https://dashboard.ngrok.com/signup\"><strong>Sign up</strong></a> to register. A Google or GitHub account is easiest, but you can choose standard registration with an email address and password. An email verification link will be sent to you.</p>\n<p>After login, you&#8217;ll be directed to the <a href=\"https://dashboard.ngrok.com/\">ngrok dashboard</a> where you can download the client for your operating system.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616499813ngrok-signin.png\" alt=\"ngrok dashboard\" /></p>\n<p>Download and extract the file, following any specific instructions for your OS. It&#8217;s then necessary to add your authentication token by running the command shown in the <strong>Connect your account</strong> section a little further down the page.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1616499812ngrok-configure.png\" alt=\"ngrok configure\" /></p>\n<pre><code class=\"bash language-bash\">./ngrok authtoken &lt;token&gt;\r\n</code></pre>\n<p><em>Note: Windows users will enter <code>./ngrok.exe</code>.</em></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/use-ngrok-test-local-site/?utm_source=rss\">How to Use ngrok to Share a Local Development Site</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/use-ngrok-test-local-site/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=106567",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "HTML",
            "Web"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Wed, 21 Apr 2021 16:40:06 GMT"
        ],
        "metaDesc": [
            "Need to share your localhost dev server? Learn how to use ngrok to easily create a secure tunnel to your local machine so that others can view your work."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How do you make a layout with pictures down one side of a page matched up with paragraphs on the other side?"
        ],
        "link": [
            "https://css-tricks.com/how-do-you-make-a-layout-with-pictures-down-one-side-of-a-page-matched-up-with-paragraphs-on-the-other-side/"
        ],
        "comments": [
            "https://css-tricks.com/how-do-you-make-a-layout-with-pictures-down-one-side-of-a-page-matched-up-with-paragraphs-on-the-other-side/#comments"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Wed, 30 Jun 2021 20:36:52 +0000"
        ],
        "category": [
            "Article",
            "grid",
            "questions"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343224",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I got this exact question in an email the other day, and I thought it would make a nice blog post because of how wonderfully satisfying this is to do in CSS these days. Plus we can sprinkle in polish &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-do-you-make-a-layout-with-pictures-down-one-side-of-a-page-matched-up-with-paragraphs-on-the-other-side/\">How do you make a layout with pictures down one side of a page matched up with paragraphs on the other side?</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I got this exact question in an email the other day, and I thought it would make a nice blog post because of how wonderfully satisfying this is to do in CSS these days. Plus we can sprinkle in polish to it as we go.</p>\n\n\n\n<span id=\"more-343224\"></span>\n\n\n\n<p>HTML-wise, I&#8217;m thinking image, text, image, text, etc.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;img src=\"...\" alt=\"...\" height=\"\" width=\"\" />\n&lt;p>Text text text...&lt;/p>\n\n&lt;img src=\"...\" alt=\"...\" height=\"\" width=\"\" />\n&lt;p>Text text text...&lt;/p>\n\n&lt;img src=\"...\" alt=\"...\" height=\"\" width=\"\" />\n&lt;p>Text text text...&lt;/p></code></pre>\n\n\n\n<p>If that was our entire body in an HTML document,<strong> the answer to the question in the blog post title is literally two lines of CSS</strong>:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  display: grid;\n  grid-template-columns: min-content 1fr;\n}</code></pre>\n\n\n\n<p>It&#8217;s going to look something like this&#8230; </p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full\"><img loading=\"lazy\" width=\"1746\" height=\"1488\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?resize=1746%2C1488&#038;ssl=1\" alt=\"\" class=\"wp-image-343227\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?w=1746&amp;ssl=1 1746w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?resize=300%2C256&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?resize=1024%2C873&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?resize=768%2C655&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?resize=1536%2C1309&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-11.33.34-AM.png?resize=1000%2C852&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Not pretty but we got the job done very quickly.</figcaption></figure></div>\n\n\n\n<p>So cool. Thanks CSS. But let&#8217;s clean it up. Let&#8217;s make sure there is a gap, set the default type, and reign in the layout. </p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">body {\n  display: grid;\n  padding: 2rem;\n  grid-template-columns: 300px 1fr;\n  gap: 1rem;\n  align-items: center;\n  max-width: 800px;\n  margin: 0 auto;\n  font: 500 100%/1.5 system-ui;\n}\nimg {\n  max-width: 100%;\n  height: auto;\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1704\" height=\"1434\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?resize=1704%2C1434&#038;ssl=1\" alt=\"\" class=\"wp-image-343251\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?w=1704&amp;ssl=1 1704w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?resize=300%2C252&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?resize=1024%2C862&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?resize=768%2C646&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?resize=1536%2C1293&amp;ssl=1 1536w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.37.07-PM.png?resize=1000%2C842&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>I mean&#8230; ship it, right? Close, but maybe we can just add a quick mobile style.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">@media (max-width: 650px) {\n  body {\n    display: block;\n    font-size: 80%;\n  }\n  p {\n    position: relative;\n    margin: -3rem 0 2rem 1rem;\n    padding: 1rem;\n    background: rgba(white, 0.8);\n  }\n}</code></pre>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-full is-resized\"><img loading=\"lazy\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.44.34-PM-1.png?resize=381%2C1114&#038;ssl=1\" alt=\"\" class=\"wp-image-343253\" width=\"381\" height=\"1114\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.44.34-PM-1.png?w=762&amp;ssl=1 762w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.44.34-PM-1.png?resize=103%2C300&amp;ssl=1 103w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.44.34-PM-1.png?resize=350%2C1024&amp;ssl=1 350w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.44.34-PM-1.png?resize=525%2C1536&amp;ssl=1 525w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-25-at-2.44.34-PM-1.png?resize=700%2C2048&amp;ssl=1 700w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure></div>\n\n\n\n<p>OK, NOW ship it! </p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvJVbrp\" src=\"//codepen.io/anon/embed/wvJVbrp?height=600&amp;theme-id=1&amp;slug-hash=wvJVbrp&amp;default-tab=result\" height=\"600\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvJVbrp\" title=\"CodePen Embed wvJVbrp\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/how-do-you-make-a-layout-with-pictures-down-one-side-of-a-page-matched-up-with-paragraphs-on-the-other-side/\">How do you make a layout with pictures down one side of a page matched up with paragraphs on the other side?</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/how-do-you-make-a-layout-with-pictures-down-one-side-of-a-page-matched-up-with-paragraphs-on-the-other-side/feed/"
        ],
        "slash:comments": [
            "1"
        ],
        "post-id": [
            {
                "_": "343224",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Scaling Organizations Should Consider Building a Website Backed by a CRM Platform"
        ],
        "link": [
            "https://css-tricks.com/scaling-organizations-should-consider-building-a-website-backed-by-a-crm-platform/"
        ],
        "comments": [
            "https://css-tricks.com/scaling-organizations-should-consider-building-a-website-backed-by-a-crm-platform/#respond"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Mon, 28 Jun 2021 13:29:00 +0000"
        ],
        "category": [
            "Article",
            "Sponsored",
            "CMS",
            "crm",
            "hubspot"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343072",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>To make some terminology clear here:</p>\n<ul>\n<li><strong>CMS</strong> = Content Management System</li>\n<li><strong>CRM</strong> = Customer Relationship Management</li>\n</ul>\n<p>Both are essentially database-backed systems for managing data. <a href=\"https://developers.hubspot.com/cms?utm_source=CSS-Tricks&#38;utm_medium=Sponsored%20Post&#38;utm_campaign=Post%202\">HubSpot</a> is both, and much more. Where a CMS might be very focused on content and &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/scaling-organizations-should-consider-building-a-website-backed-by-a-crm-platform/\">Scaling Organizations Should Consider Building a Website Backed by a CRM Platform</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>To make some terminology clear here:</p>\n\n\n\n<ul><li><strong>CMS</strong> = Content Management System</li><li><strong>CRM</strong> = Customer Relationship Management</li></ul>\n\n\n\n<p>Both are essentially database-backed systems for managing data. <a href=\"https://developers.hubspot.com/cms?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">HubSpot</a> is both, and much more. Where a CMS might be very focused on content and the metadata around making content useful, a CRM is focused on leads and making communicating with current and potential customers easier.</p>\n\n\n\n<p>They can be brothers-in-arms. We&#8217;ll get to that.</p>\n\n\n\n<span id=\"more-343072\"></span>\n\n\n\n<p>Say a CRM is set up for people. You run a Lexus dealership. There is a quote form on the website. People fill it out and enter the CRM. That lead can go to your sales team for taking care of that customer. </p>\n\n\n\n<p>But a CRM could be based on other things. Say instead of people it&#8217;s based on real estate listings. Each main entry is a property, with essentially metadata like photos, address, square footage, # of bedrooms/baths, etc. Leads can be associated with properties. </p>\n\n\n\n<p>That would be a nice CRM setup for a real estate agency, but the data that is in that CRM might be awfully nice for literally building a website around those property listings. Why not tap into that CRM data as literal data to build website pages from? </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"2970\" height=\"1878\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=2970%2C1878&#038;ssl=1\" alt=\"\" class=\"wp-image-343083\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?w=2970&amp;ssl=1 2970w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=300%2C190&amp;ssl=1 300w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=1024%2C647&amp;ssl=1 1024w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=768%2C486&amp;ssl=1 768w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=1536%2C971&amp;ssl=1 1536w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=2048%2C1295&amp;ssl=1 2048w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.23.04-PM.png?resize=1000%2C632&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>That&#8217;s what I mean by a CRM and CMS being brothers-in-arms. Use them both! That&#8217;s why HubSpot can be an ideal home for websites like this. </p>\n\n\n\n<p>To keep that tornado of synergy going, HubSpot can also help with marketing, customer service, and integrations. So there is a lot of power packed into one platform. </p>\n\n\n\n<p>And with that power, also a lot of comfort and flexibility. </p>\n\n\n\n<div class=\"wp-block-columns\">\n<div class=\"wp-block-column\">\n<ul><li>You&#8217;re still developing locally.</li><li>You&#8217;re still using Git.</li><li>You can use whatever framework or site-building tools you want.</li><li>You&#8217;ve got a CLI to control things.</li><li>There is a VS Code Extension for super useful auto-complete of your data.</li><li>There is a staging environment.</li></ul>\n</div>\n\n\n\n<div class=\"wp-block-column\">\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1466\" height=\"1172\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.11.46-PM.png?resize=1466%2C1172&#038;ssl=1\" alt=\"\" class=\"wp-image-343082\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.11.46-PM.png?w=1466&amp;ssl=1 1466w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.11.46-PM.png?resize=300%2C240&amp;ssl=1 300w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.11.46-PM.png?resize=1024%2C819&amp;ssl=1 1024w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.11.46-PM.png?resize=768%2C614&amp;ssl=1 768w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-22-at-5.11.46-PM.png?resize=1000%2C799&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n</div>\n</div>\n\n\n\n<p>And the feature just keep coming. HubSpot really has a robust set of tools to make sure you can do what you need to do.</p>\n\n\n\n<ul><li>Need serverless functions? <a href=\"https://developers.hubspot.com/docs/cms/guides/getting-started-with-serverless-functions?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">They got &#8217;em.</a></li><li>Where do you keep files? <a href=\"https://developers.hubspot.com/docs/cms/features/file-manager?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">The file manager.</a></li><li>Is there a generic database for data? <a href=\"https://developers.hubspot.com/docs/cms/features/hubdb?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">Yes.</a></li><li>Does the site need to support multiple languages? That&#8217;s <a href=\"https://developers.hubspot.com/docs/cms/features/multi-language-content?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">a first-class feature</a>.</li><li>What about auth? One better, they give you <a href=\"https://developers.hubspot.com/docs/cms/features/memberships/sso?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">SSO</a>.</li><li>Do you have to use some third-party thing for search? Nope, <a href=\"https://developers.hubspot.com/docs/cms/features/content-search?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">they got it</a>.</li></ul>\n\n\n\n<p>As developer-rich as this all is, it doesn&#8217;t mean that it&#8217;s developer-only. There are loads of tools for working with the website you build that require no coding at all. Dashboard for content management, data wrangling, style control, and even literal drag-and-drop page builders.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1560\" height=\"878\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?resize=1560%2C878&#038;ssl=1\" alt=\"\" class=\"wp-image-343085\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?w=1560&amp;ssl=1 1560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?resize=300%2C169&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?resize=1024%2C576&amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?resize=768%2C432&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?resize=1536%2C864&amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/code-no-code-graphic.png?resize=1000%2C563&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>It&#8217;s all part of a very learnable system. </p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p><a href=\"https://developers.hubspot.com/docs/cms/building-blocks/themes?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">Themes</a>,&nbsp;<a href=\"https://developers.hubspot.com/docs/cms/building-blocks/templates?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">templates</a>,&nbsp;<a href=\"https://developers.hubspot.com/docs/cms/building-blocks/modules?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">modules</a>, and&nbsp;<a href=\"https://developers.hubspot.com/docs/cms/building-blocks/module-theme-fields?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">fields</a>&nbsp;are the objects you’ll work with most in HubSpot CMS as a developer. Using these different objects effectively lets you give content creators the freedom to work and iterate on websites independently while staying inside style and layout guardrails you set.</p></blockquote>\n\n\n\n<div class=\"wp-block-buttons\">\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" href=\"https://developers.hubspot.com/docs/cms/guides/getting-started?utm_source=CSS-Tricks&amp;utm_medium=Sponsored%20Post&amp;utm_campaign=Post%202\">Get Started with HubSpot CMS</a></div>\n</div>\n\n\n\n<p></p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/scaling-organizations-should-consider-building-a-website-backed-by-a-crm-platform/\">Scaling Organizations Should Consider Building a Website Backed by a CRM Platform</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/scaling-organizations-should-consider-building-a-website-backed-by-a-crm-platform/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "343072",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Fixing a Bug in Low-Resolution Mode"
        ],
        "link": [
            "https://css-tricks.com/fixing-a-bug-in-low-resolution-mode/"
        ],
        "comments": [
            "https://css-tricks.com/fixing-a-bug-in-low-resolution-mode/#comments"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Wed, 30 Jun 2021 14:44:54 +0000"
        ],
        "category": [
            "Article",
            "debugging"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343182",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I was working on a bug ticket the other day where it was reported that an icon was sitting low in a button. Just not aligned like it should be. I had to go on a little journey to figure &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/fixing-a-bug-in-low-resolution-mode/\">Fixing a Bug in Low-Resolution Mode</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I was working on a bug ticket the other day where it was reported that an icon was sitting low in a button. Just not aligned like it should be. I had to go on a little journey to figure out how to replicate it before I could fix it. Lemme set the scene.</p>\n\n\n\n<p>Here&#8217;s the screenshot:</p>\n\n\n\n<span id=\"more-343182\"></span>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"392\" height=\"218\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.23.57@2x.png?resize=392%2C218&#038;ssl=1\" alt=\"\" class=\"wp-image-343186\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.23.57@2x.png?w=392&amp;ssl=1 392w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.23.57@2x.png?resize=300%2C167&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>See how the icon is just&#8230; riding low?</figcaption></figure>\n\n\n\n<p>But I go to look at the button on my machine, and it looks perfectly fine: </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"396\" height=\"214\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.25.34@2x.png?resize=396%2C214&#038;ssl=1\" alt=\"\" class=\"wp-image-343188\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.25.34@2x.png?w=396&amp;ssl=1 396w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.25.34@2x.png?resize=300%2C162&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /></figure>\n\n\n\n<p>What the heck, right? Same platform (macOS), same browser (Firefox), same version, everything. Other people on the team looked too, and it was fine for them.</p>\n\n\n\n<p>Then a discovery! (Thanks, <a href=\"https://klare.io/\">Klare</a>.)</p>\n\n\n\n<p>It only showed up that way on her low-resolution external monitor. I don&#8217;t know if &#8220;low&#8221; is fair, but it&#8217;s not the &#8220;retina&#8221; of a MacBook Pro, whatever that is. </p>\n\n\n\n<p>My problem is I don&#8217;t even have a monitor anymore that isn&#8217;t high resolution. So how I can test this? Maybe I just&#8230; can&#8217;t? Nope! I can! Check it out. I can &#8220;Get Info&#8221; on the Firefox app on my machine, and check this box:</p>\n\n\n\n<figure class=\"wp-block-image size-full is-resized\"><img loading=\"lazy\" src=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.28.21@2x.png?resize=426%2C641&#038;ssl=1\" alt=\"\" class=\"wp-image-343189\" width=\"426\" height=\"641\" srcset=\"https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.28.21@2x.png?w=851&amp;ssl=1 851w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.28.21@2x.png?resize=199%2C300&amp;ssl=1 199w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.28.21@2x.png?resize=680%2C1024&amp;ssl=1 680w, https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-13.28.21@2x.png?resize=768%2C1156&amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Checked box for &#8220;Open in Low Resolution&#8221;</figcaption></figure>\n\n\n\n<p>Now I can literally see the bug. It is unique to Firefox as far as I can tell. Perhaps something to do with pixel&#8230; rounding? I have no idea. <a href=\"https://codepen.io/chriscoyier/pen/wvJVJEJ\">Here&#8217;s a reduced test case</a> of the HTML/CSS at play though. </p>\n\n\n\n<p>The solution? Rather than using an <code>inline-block</code> display type for buttons, we moved to <code>inline-flex</code>, which feels like the correct display type for buttons because of how good flexbox is at centering.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.button {\n   /* a million things so that all buttons are perfect and... */\n\n  display: inline-flex;\n  align-items: center;\n}</code></pre>\n\n\n\n<p></p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/fixing-a-bug-in-low-resolution-mode/\">Fixing a Bug in Low-Resolution Mode</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/fixing-a-bug-in-low-resolution-mode/feed/"
        ],
        "slash:comments": [
            "2"
        ],
        "post-id": [
            {
                "_": "343182",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Collective #666"
        ],
        "link": [
            "https://tympanus.net/codrops/collective/collective-666/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Thu, 17 Jun 2021 12:33:17 +0000"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?post_type=collective&p=55015",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>The State of Independence Report 2021 * snk * Storage Foundation API * Implementing Private Fields for JavaScript </p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-666/\">Collective #666</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://thirdbykenjiro.com/en/home\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_WOTW.jpg\" alt=\"\" class=\"wp-image-55036\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://thirdbykenjiro.com/en/home\">Inspirational Website of the Week: THIRD by Kenjiro</a></h2>\n<p class=\"ct-coll-p\">This design is like a painting that came to life! The soft color theme and beautiful typography make it a joy to browse.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://thirdbykenjiro.com/en/home\">Get inspired</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item ct-coll-item--sponsor\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n        <a class=\"ct-coll-thumb\" href=\"https://web-design-articles.medium.com/15-cool-tools-and-resources-for-designers-and-agencies-94ea8a1c47f3?utm_source=tympanus.net&amp;utm_medium=newsletter&amp;utm_campaign=tools21\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_baw.jpg\" alt=\"\" class=\"wp-image-55025\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_baw.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_baw-300x300.jpg 300w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_baw-105x105.jpg 105w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<div class=\"ct-coll-sponsorship\">Our Sponsor</div>\n<h2><a href=\"https://web-design-articles.medium.com/15-cool-tools-and-resources-for-designers-and-agencies-94ea8a1c47f3?utm_source=tympanus.net&amp;utm_medium=newsletter&amp;utm_campaign=tools21\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">15 Cool Tools and Resources for Designers and Agencies</a></h2>\n<p class=\"ct-coll-p\">These 15 tools and services as providing the best foundation for building an online presence.</p>\n<p>        <a class=\"ct-coll-link\" target=\"_blank\" href=\"https://web-design-articles.medium.com/15-cool-tools-and-resources-for-designers-and-agencies-94ea8a1c47f3?utm_source=tympanus.net&amp;utm_medium=newsletter&amp;utm_campaign=tools21\" rel=\"nofollow sponsored noopener noreferrer\">Check them out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://contra.com/freelance-industry-report-2021/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_liefstyle.jpg\" alt=\"\" class=\"wp-image-55031\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://contra.com/freelance-industry-report-2021/\">Contra: The State of Independence Report 2021</a></h2>\n<p class=\"ct-coll-p\">Contra surveyed over 10,000 freelancers across design, engineering, product, writing, marketing, and social to gather insights on the future of work.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://contra.com/freelance-industry-report-2021/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mxb.dev/blog/media-queries-in-times-of-container-queries/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_container.jpg\" alt=\"\" class=\"wp-image-55026\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://mxb.dev/blog/media-queries-in-times-of-container-queries/\">Media Queries in Times of @container</a></h2>\n<p class=\"ct-coll-p\">Max Böck asks an important question: With container queries now on the horizon &#8211; will we need media queries at all?</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mxb.dev/blog/media-queries-in-times-of-container-queries/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/millionjs/million\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_million.jpg\" alt=\"\" class=\"wp-image-55021\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/millionjs/million\">Million</a></h2>\n<p class=\"ct-coll-p\">Current Virtual DOM implementations are inadequate — Ranging from overcomplicated to abandoned, most are unusable without sacrificing raw performance and size. Million aims to fix this, providing a library-agnostic Virtual DOM to serve as the core for JavaScript libraries.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/millionjs/million\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://edmondng.ca/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_experments.jpg\" alt=\"\" class=\"wp-image-55019\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://edmondng.ca/\">Edmond Ng</a></h2>\n<p class=\"ct-coll-p\">On Edmond Ng&#8217;s website you can browse through a variety of experiment.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://edmondng.ca/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Platane/snk\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_snake.jpg\" alt=\"\" class=\"wp-image-55034\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/Platane/snk\">snk</a></h2>\n<p class=\"ct-coll-p\">Generates a snake game from a Github user contributions graph and outputs a screen capture as animated SVG or GIF.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Platane/snk\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://greensock.com/3-7\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_gsap.jpg\" alt=\"\" class=\"wp-image-55028\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_gsap.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_gsap-280x300.jpg 280w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://greensock.com/3-7\">GSAP 3.7 Released</a></h2>\n<p class=\"ct-coll-p\">GSAP 3.7 is here! Check out all the new things it brings.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://greensock.com/3-7\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/storage-foundation/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_cache.jpg\" alt=\"\" class=\"wp-image-55016\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://web.dev/storage-foundation/\">High performance storage for your app: the Storage Foundation API</a></h2>\n<p class=\"ct-coll-p\">The Storage Foundation API resembles a basic file system, with direct access to stored data through buffers and offsets. Learn all about it in this article by Thomas Steiner.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/storage-foundation/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ez.substack.com/p/the-work-from-home-future-is-destroying\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_workfromhome.jpg\" alt=\"\" class=\"wp-image-55035\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://ez.substack.com/p/the-work-from-home-future-is-destroying\">The Work-From-Home Future Is Destroying Bosses&#8217; Brains</a></h2>\n<p class=\"ct-coll-p\">An interesting article by Ed Zitron on why it has become so painful to bosses to let their employees work from home. Spoiler: it has nothing to do with productivity.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ez.substack.com/p/the-work-from-home-future-is-destroying\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_SM.jpg\" alt=\"\" class=\"wp-image-55033\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/\">Implementing Private Fields for JavaScript</a></h2>\n<p class=\"ct-coll-p\">Private fields are a language feature being added to the JavaScript language through the TC39 proposal process. Learn all about it in this article by Matthew Gaudet.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hacks.mozilla.org/2021/06/implementing-private-fields-for-javascript/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://healthicons.org/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_icons.jpg\" alt=\"\" class=\"wp-image-55030\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://healthicons.org/\">Health Icons</a></h2>\n<p class=\"ct-coll-p\">Completely free, open source health icons that you can use in your next commercial or personal project.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://healthicons.org/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ishadeed.com/article/css-aspect-ratio/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_ahmad.jpg\" alt=\"\" class=\"wp-image-55023\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://ishadeed.com/article/css-aspect-ratio/\">Let&#8217;s Learn About Aspect Ratio In CSS</a></h2>\n<p class=\"ct-coll-p\">Learn how to use the native CSS aspect-ratio property in this article by Ahmad Shadeed.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ishadeed.com/article/css-aspect-ratio/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://wayfinder.nfb.ca/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_game.jpg\" alt=\"\" class=\"wp-image-55027\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://wayfinder.nfb.ca/\">Wayfinder</a></h2>\n<p class=\"ct-coll-p\">A game of poetry and animated exploration across the land. Made by by Matt DesLauriers.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://wayfinder.nfb.ca/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_access.jpg\" alt=\"\" class=\"wp-image-55022\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/\">When CSS Isn’t Enough: JavaScript Requirements For Accessible Components</a></h2>\n<p class=\"ct-coll-p\">Learn why components like tooltips, modals, tabs, carousels, and dropdown menus are some of the user interface components that require more than CSS in order to ensure accessibility of your interface.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.smashingmagazine.com/2021/06/css-javascript-requirements-accessible-components/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_highresolution.jpg\" alt=\"\" class=\"wp-image-55029\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/\">Serving sharp images to high density screens</a></h2>\n<p class=\"ct-coll-p\">A very interesting article by Jake Archibald on how to target images at the user&#8217;s device pixels, rather than their CSS pixels in order to provide sharp images.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://prestigemad.com/#!/doc/browser/master\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_prestige.jpg\" alt=\"\" class=\"wp-image-55032\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://prestigemad.com/#!/doc/browser/master\">Prestige</a></h2>\n<p class=\"ct-coll-p\">In case you didn&#8217;t know about it: Prestige is a powerful, text-based, in-browser, HTTP client app built by Shrikant Sharat Kandula.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://prestigemad.com/#!/doc/browser/master\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://icons8.com/mega-creator\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_createdesigns.jpg\" alt=\"\" class=\"wp-image-55018\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://icons8.com/mega-creator\">Mega Creator</a></h2>\n<p class=\"ct-coll-p\">Create instant designs for social media online with a wast library of resources.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://icons8.com/mega-creator\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://astro.build/blog/introducing-astro\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_astro.jpg\" alt=\"\" class=\"wp-image-55024\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://astro.build/blog/introducing-astro\">Introducing Astro: Ship Less JavaScript</a></h2>\n<p class=\"ct-coll-p\">Learn all about Astro, a new way to build static websites and deliver lightning-fast performance without sacrificing a modern developer experience.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://astro.build/blog/introducing-astro\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloudfour.com/thinks/component-specific-design-tokens/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_components.jpg\" alt=\"\" class=\"wp-image-55017\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://cloudfour.com/thinks/component-specific-design-tokens/\">Component-Specific Design Tokens</a></h2>\n<p class=\"ct-coll-p\">Danielle Romo explains what component-specific tokens are and how to use them.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://cloudfour.com/thinks/component-specific-design-tokens/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://graphcdn.io/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C666_graphqlcdn.jpg\" alt=\"\" class=\"wp-image-55020\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://graphcdn.io/\">GraphCDN</a></h2>\n<p class=\"ct-coll-p\">With GraphCDN you can scale, inspect and protect your GraphQL API. Cache your queries at the edge, get insights into its usage and protect it from malicious queries.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://graphcdn.io/\">Check it out</a><br />\n</article>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-666/\">Collective #666</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "An Introduction to Wireframing with Figma"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/wireframing-figma/?utm_source=rss\"\n              title=\"An Introduction to Wireframing with Figma\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613785932figma-wireframing-1200.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613785932figma-wireframing-1200-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613785932figma-wireframing-1200-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613785932figma-wireframing-1200-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613785932figma-wireframing-1200.jpg 1235w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll explore what wireframing is, and why it&#8217;s worth doing it with <a href=\"https://figma.com/\">Figma</a> — the most-used UI design tool on the market today.</strong> </p>\n<p>We&#8217;ll take a deep dive into Figma, and learn how to design user interfaces with it — digging into wireframing as we go.</p>\n<p><em>BTW: if you take a look at the <a href=\"https://uxtools.co/survey-2020/#toolkit\">2020 Design Tools Survey</a>, Figma won in most categories: User Flows, UI Design, Prototyping, Handoff, Design Systems, Versioning, and even “most excited to try in 2021”.</em></p>\n<h2 id=\"wireframing\">Wireframing</h2>\n<p>Wireframes are diagrams that depict the structure of a design, and they can be either low-fidelity (for user research) or mid-fidelity (for UX research). We’ll be focusing on the latter (UX research), and visuals will be of no concern to us here, because all we want to do at this stage is figure out the content and layout (otherwise known as the “information architecture”).</p>\n<h3 id=\"whatarewewireframing\">What are we wireframing?</h3>\n<p>First, a little background on the UI we&#8217;ll be building. It will be a table-like structure showing various UX design tools and which step of the UX design workflow each tool is used in. The data will be user-submitted, so the aim is to see which UX <em>design workflow</em> is best, rather the overdone “which UI <em>design tool</em> is best?”</p>\n<p>Wireframing will help me to figure out how best to structure this interface without wasting time on figuring out the little visual details. It won’t look amazing, but that’s fine; it just needs to look nice enough that users can offer me some feedback. </p>\n<p>Yes, it’s a real UI. At the moment I’m calling it “Toolflows”.</p>\n<p>Let’s begin!</p>\n<h2 id=\"step1setuptheartboard\">Step 1: Set Up the Artboard</h2>\n<p>The majority of my website’s users are desktop users, so it makes sense to wireframe my design on a desktop artboard. Press <kbd>A</kbd> on your keyboard, then click <em>Design</em> &gt; <em>Desktop</em> &gt; <em>MacBook</em> from the right sidebar of Figma.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/16106949441.jpg\" alt=\"Creating artboards in Figma\" /></p>\n<h2 id=\"step2gatherfunctionalrequirements\">Step 2: Gather Functional Requirements</h2>\n<p>Assuming that you or somebody else did some user research at some stage, we’ll need to refer to that to create our wireframe. While conducting user research (<em>specifically, user interviews, focus groups, and user testing with low-fidelity wireframes</em>), we would have been made aware of any functional requirements.</p>\n<p><em>Ours</em> are:</p>\n<ul>\n<li>filter by tool</li>\n<li>number of workflow users</li>\n</ul>\n<p>Let’s start wireframing!</p>\n<h2 id=\"step3createtextandshapes\">Step 3: Create Text and Shapes</h2>\n<p>First of all, there <em>are</em> <a href=\"https://figma.com/templates/wireframe-kits/\">Figma wireframe kits</a> available, but I’m not a fan of them exactly. They make me feel constrained to work only with what’s available in the kit, so it hinders creativity.</p>\n<p>Instead, we’ll wireframe using text and shapes.</p>\n<p>As we learned before with the artboard, the easiest way to create anything in Figma is to abuse the keyboard shortcuts:</p>\n<ul>\n<li><kbd>T</kbd>: Text</li>\n<li><kbd>O</kbd>: Ellipse</li>\n<li><kbd>R</kbd>: Rectangle</li>\n<li><kbd>⇧⌘K</kbd>: Image</li>\n<li><kbd>⇧L</kbd>: Arrow</li>\n<li><kbd>L</kbd>: Line</li>\n</ul>\n<p>After that, it’s simply a case of clicking on the artboard roughly where you’d like the object to appear, and then you can use your mouse and arrow keys to adjust the size and alignment.</p>\n<p>Useful shortcuts:</p>\n<ul>\n<li><kbd>⌘-/+</kbd> to Zoom.</li>\n<li><kbd>⌘D</kbd> to Duplicate selected objects.</li>\n<li><kbd>⌘G</kbd> to Group selected objects (<kbd>⌘rc</kbd> to select within).</li>\n<li>Hold <kbd>⌘</kbd> when mouse-resizing to rotate objects.</li>\n<li>Hold <kbd>⇧</kbd> when mouse-resizing to maintain aspect ratio.</li>\n<li>Use arrow keys to move objects by 1px (Hold <kbd>⇧</kbd> for 10px).</li>\n<li>Arrow keys + <kbd>⌘</kbd> to resize by 1px (Hold <kbd>⌘⇧</kbd> for 10px).</li>\n</ul>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/16106949452.jpg\" alt=\"Quick wireframing with Figma\" /></p>\n<p>Next, we’ll move on to styling.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/wireframing-figma/?utm_source=rss\">An Introduction to Wireframing with Figma</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/wireframing-figma/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181055",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Design",
            "Design & UX",
            "UI Design",
            "UX"
        ],
        "dc:creator": [
            "Daniel Schwarz"
        ],
        "pubDate": [
            "Tue, 09 Feb 2021 15:00:48 GMT"
        ],
        "metaDesc": [
            "Wireframes are important for ensuring good UX. Learn how to use Figma to figure out the best UX design workflow for your layout."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Beginner’s Guide to Roam Research"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/roam-research-beginners-guide/?utm_source=rss\"\n              title=\"A Beginner’s Guide to Roam Research\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138761roam-1200.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138761roam-1200-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138761roam-1200-768x403.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138761roam-1200-1024x538.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617138761roam-1200.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong><a style=\"font-weight:bold\" href=\"https://roamresearch.com/\">Roam Research</a> is a friction-free, note-taking and knowledge-management application. It’s getting a lot of attention, and the label “game changer” has been used. You’re likely reading this article because you’ve heard the hype and are wondering if it’s true, and whether its features are a good fit for your needs.</strong></p>\n<p>At first glance, it appears to be a Workflowy-type online outliner, but first impressions can be deceptive. There’s a lot more power under the hood, such as the capability to create a network of knowledge that connects your thoughts using links and backlinks.</p>\n<p>It’s a flexible tool that can be used for many tasks, including note taking and knowledge management, writing and outlining, journalling, <abbr title=\"getting things done\">GTD</abbr>, research, and more. Developers are using it to <a href=\"https://dev.to/theianjones/roam-research-to-explore-ideas-5cge\">explore ideas</a>, <a href=\"https://www.reddit.com/r/RoamResearch/comments/ip9hzr/roam_research_for_learning_java/\">create documentation</a>, and <a href=\"https://medium.com/@bonjarber/how-to-remember-everything-3cf29540b5d5\">log issues</a>.</p>\n<p>The more you store in it, the more useful it becomes. It’s not yet one of my primary tools, but it stands a good chance of becoming one. Perhaps it will become one of yours as well.</p>\n<h2 id=\"personalknowledgemanagementishottingup\">Personal Knowledge Management Is Hotting Up</h2>\n<p>I’ve been a little disillusioned with the personal knowledge management space over the last few decades. In the early, wild days of personal computing, “second brain” applications offered interesting and unique ways of viewing and manipulating your data:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Ecco_Pro\">Ecco Pro</a> used a combination of tabs, outlines, and columns. Each column was a field in a relational database.</li>\n<li><a href=\"https://winworldpc.com/product/infocentral/110\">InfoCentral</a> allowed you to connect people, events, and objects in a way that could be viewed as an outline. Each connection allowed you to precisely define the relationship.</li>\n<li>DayINFO let you build impromptu fields and branches to describe each person and object. Each object could exist in multiple places within your network of knowledge.</li>\n</ul>\n<p>Unfortunately, they were lobotomized in the 1990s. Many were purchased during the Office Suite Wars and dumbed down or abandoned because they didn’t appeal to the average, non-technical user. Promising newcomers have since arisen — <a href=\"https://www.zootsoftware.com/\">Zoot</a> and <a href=\"https://www.infoqube.biz/\">InfoQube</a>, for example — but they haven’t gained much traction … until recently. Roam Research, Obsidian, Craft, and others are gaining loyal followings by offering enticing new features. Automatic backlinks is the one attracting attention.</p>\n<h2 id=\"whatisroamresearch\">What Is Roam Research?</h2>\n<p>Like all good apps, Roam Research is opinionated, written by Conor White-Sullivan to scratch his own itch. It’s an outliner with links and backlinks, is online-only, and intentionally expensive — to price it out of the reach of casual users.</p>\n<p>It’s unusual in that it allows you to structure your data simultaneously from the top down and bottom up. Each page is an outliner, allowing you to impose structure on your information as you type, edit, and rethink. I love outliners and find Roam’s very fluid.</p>\n<p>The ability to link separate notes also allows you to create structure from the bottom up as you notice relationships between your notes over time. This can lead to unexpected discoveries and is a central principle of the Zettelkasten method of note-taking, and one that Roam was built to encapsulate.</p>\n<p>The methodology was created by the sociologist Niklas Luhmann as he used analog index cards to explore the relationships between ideas. It worked and was directly responsible for his prolific creation of around 70 books and 400 academic articles.</p>\n<p>It’s built on the idea of anatomic notes written in your own words that contain just one idea. Structure is an afterthought and develops organically as you notice new relationships between your thoughts. You reference one note in another, and then create a backlink to the original note.</p>\n<p>You can learn more by perusing <a href=\"https://zettelkasten.de\">Zettelkasten.de</a> and reading the book <em><a href=\"https://www.amazon.com/How-Take-Smart-Notes-Nonfiction-ebook/dp/B06WVYW33Y/\">How to Take Smart Notes</a></em>, by Sonke Ahrens.</p>\n<h2 id=\"roamresearchmainconcepts\">Roam Research Main Concepts</h2>\n<p>Here are the main concepts used by Roam Research. Use them as building blocks to design your own information system.</p>\n<p><strong>Outliner</strong>: each page is a single-pane outliner made up of hierarchical blocks of text and images. This encourages both anatomic and structured thinking. <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>Up</kbd> and <kbd>Down</kbd> move blocks higher and lower. <kbd>Tab</kbd> and <kbd>Shift</kbd> + <kbd>Tab</kbd> change indentation. <kbd>Command</kbd> + <kbd>Up</kbd> and <kbd>Down</kbd> expand and contract the outline.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333591roam01-outliner.png\" alt=\"Outliner\" /></p>\n<p><strong>Find</strong>: the Find feature at the top of the page will find all pages containing a phrase. It also allows you to create a page with that name if one doesn’t already doesn’t exist, similar to the way nvAlt works.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333593roam02-find.png\" alt=\"Find\" /></p>\n<p><strong>Filter</strong>: the Filter icon allows you to show or hide blocks containing specific links on a page.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333595roam03-filter.png\" alt=\"Filter\" /></p>\n<p><strong>Boolean queries</strong>: queries are embedded in the outline and are a way you can ask Roam Research questions. Logical Boolean operators like “and”, “or”, and “not” are supported. Matching hits are pulled into the outline.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333597roam04-query.png\" alt=\"Query\" /></p>\n<p><strong>Links and backlinks</strong>: links allow you to create a system of networked thought or a personal wiki. You link to another page using <code>[[wikilinks]]</code> and a new page is created if it doesn’t already exist. Backlinks are automatically generated, and the context of the link is included, adding helpful information to the page.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333599roam05-backlinks.png\" alt=\"Backlinks\" /></p>\n<p><strong>Tags</strong>: in Roam, tags are similar to pages, in that every tag automatically gets its own page. As with pages, every page that contains the tag is listed as a backlink.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333600roam06-tag.png\" alt=\"Tags\" /></p>\n<p><strong>Embed</strong>: blocks from one part of Roam can be referenced or embedded somewhere else. You can also embed pages, websites, videos, and more.</p>\n<p><strong>Graph</strong>: a digital representation of the relationships between pages. Clicking on one page will color all related pages blue. Double-clicking a page will open it.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333606roam07-graph.png\" alt=\"Graph\" /></p>\n<p><strong>Markdown</strong>: Markdown is supported and is hidden until you edit a block. Unfortunately, it’s not quite standard. While <code>**bold**</code> text is created with double asterisks, <code>__italics__</code> requires double underscores rather than single underscores or asterisks. Dynalist does the same and is probably the inspiration here.</p>\n<p><strong>Latex notation</strong>: you can add mathematical notation to Roam by enclosing Latex code inside double dollar symbols.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333608roam08-latex.png\" alt=\"Latex support\" /></p>\n<p><strong>Code blocks</strong>: Roam offers code blocks with syntax highlighting. Start a code block with triple back ticks and a single back tick is used for inline code.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333609roam09-codeblock.png\" alt=\"Code blocks\" /></p>\n<p><strong>Slash menu</strong>: like Notion, Slack, and others, Roam offers quick access to features through a slash menu.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1615333610roam10-slashmenu.png\" alt=\"Slash menu\" /></p>\n<p><strong>Sidebars</strong>: sidebars allow you to access information elsewhere in Roam without losing your spot. The right and left pane can be shown or hidden using <kbd>Command</kbd> + <kbd>/</kbd> and <kbd>Command</kbd> + <kbd>\\</kbd> respectively. <kbd>Shift</kbd>-click to open a link in the sidebar.</p>\n<p><strong>Components</strong>: Roam’s features can be extended using components, which currently include an inline calculator (<code>{{calc: 4 + 5}}</code>), word count, date picker, block/page embed, PDF embed, video embed, website embed, encrypted text, Kanban board, mentions, Pomodoro timer, and tables.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/roam-research-beginners-guide/?utm_source=rss\">A Beginner’s Guide to Roam Research</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/roam-research-beginners-guide/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181681",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Business",
            "Web"
        ],
        "dc:creator": [
            "Adrian Try"
        ],
        "pubDate": [
            "Mon, 22 Mar 2021 15:00:00 GMT"
        ],
        "metaDesc": [
            "Note taking and knowledge management are tricky. The Roam app organizes your notes into a network of knowledge through outlining, linking, and embedding."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Build a Rest API for the Jamstack with Hapi and TypeScript"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/jamstack-rest-api-hapi/?utm_source=rss\"\n              title=\"Build a Rest API for the Jamstack with Hapi and TypeScript\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612836072jamstack-rest-api.png\"\n        alt=\"Build a Jamstack REST API with Hapi & a Pinch of TypeScript\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612836072jamstack-rest-api-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612836072jamstack-rest-api.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>The <a href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a> has a nice way of separating the front end from the back end to where the entire solution doesn’t have to ship in a single monolith — and all at the exact same time. When the Jamstack is paired with a REST API, the client and the API can evolve <em>independently</em>. This means both front and back ends are not tightly coupled, and changing one doesn’t necessarily mean changing the other.</strong></p>\n<p>In this article, I’ll take a look at a REST API from the perspective of the Jamstack. I&#8217;ll show how to evolve the API without breaking existing clients and adhere to REST standards. I’ll pick Hapi as the tool of choice to build the API, and Joi for endpoint validations. The database persistence layer will go in MongoDB via Mongoose to access the data. Test-driven development will help me iterate through changes and provide a quick way to get feedback with less cognitive load. At the end, the goal is for you to see how REST, and the Jamstack, can provide a solution with high cohesion and low coupling between software modules. This type of architecture is best for distributed systems with lots of microservices each on their own separate domains. I’ll assume a working knowledge of NPM, ES6+, and a basic familiarity with API endpoints.</p>\n<p>The API will work with author data, with a name, email, and an optional 1:N (<a href=\"https://www.mongodb.com/blog/post/6-rules-of-thumb-for-mongodb-schema-design-part-1\">one-to-few via document embedding</a>) relationship on favorite topics. I’ll write a GET, PUT (with an upsert), and DELETE endpoints. To test the API, any client that supports <code>fetch()</code> will do, so I’ll pick <a href=\"https://hoppscotch.io/\">Hoppscotch</a> and CURL.</p>\n<p>I’ll keep the reading flow of this piece like a tutorial where you can follow along from top to bottom. For those who’d rather skip to the code, it is <a href=\"https://github.com/sitepoint-editors/hapi-authors-rest-api\">available on GitHub</a> for your viewing pleasure. This tutorial assumes a <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">working version of Node</a> (preferably the latest LTS) and <a href=\"https://www.sitepoint.com/an-introduction-to-mongodb/\">MongoDB already installed</a>.</p>\n<h2 id=\"initialsetup\">Initial Setup</h2>\n<p>To start the project up from scratch, create a folder and <code>cd</code> into it:</p>\n<pre><code class=\"shell language-shell\">mkdir hapi-authors-rest-api\r\ncd hapi-authors-rest-api\r\n</code></pre>\n<p>Once inside the project folder, fire up <code>npm init</code> and follow the prompt. This creates a <code>package.json</code> at the root of the folder.</p>\n<p>Every Node project has dependencies. I’ll need Hapi, Joi, and Mongoose to get started:</p>\n<pre><code class=\"shell language-shell\">npm i @hapi/hapi joi mongoose --save-exact\r\n</code></pre>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/@hapi/hapi\">@hapi/hapi</a>: HTTP REST server framework</li>\n<li><a href=\"https://www.npmjs.com/package/joi\">Joi</a>: powerful object schema validator</li>\n<li><a href=\"https://www.npmjs.com/package/mongoose\">Mongoose</a>: MongoDB object document modeling</li>\n</ul>\n<p>Inspect the <code>package.json</code> to make sure all dependencies and project settings are in place. Then, add an entry point to this project:</p>\n<pre><code class=\"javascript language-javascript\">\"scripts\": {\r\n  \"start\": \"node index.js\"\r\n},\r\n</code></pre>\n<h2 id=\"mvcfolderstructurewithversioning\">MVC Folder Structure with Versioning</h2>\n<p>For this REST API, I’ll use a typical MVC folder structure with controllers, routes, and a database model. The controller will have a version like <code>AuthorV1Controller</code> to allow the API to evolve when there are breaking changes to the model. Hapi will have a <code>server.js</code> and <code>index.js</code> to make this project testable via test-driven development. The <code>test</code> folder will contain the unit tests.</p>\n<p>Below is the overall folder structure:</p>\n<pre><code class=\"text language-text\">┳\r\n┣━┓ config\r\n┃ ┣━━ dev.json\r\n┃ ┗━━ index.js\r\n┣━┓ controllers\r\n┃ ┗━━ AuthorV1Controller.js\r\n┣━┓ model\r\n┃ ┣━━ Author.js\r\n┃ ┗━━ index.js\r\n┣━┓ routes\r\n┃ ┣━━ authors.js\r\n┃ ┗━━ index.js\r\n┣━┓ test\r\n┃ ┗━━ Author.js\r\n┣━━ index.js\r\n┣━━ package.json\r\n┗━━ server.js\r\n</code></pre>\n<p>For now, go ahead and create the folders and respective files inside each folder.</p>\n<pre><code class=\"shell language-shell\">mkdir config controllers model routes test\r\ntouch config/dev.json config/index.js controllers/AuthorV1Controller.js model/Author.js model/index.js routes/authors.js routes/index.js test/Authors.js index.js server.js\r\n</code></pre>\n<p>This is what each folder is intended for:</p>\n<ul>\n<li><code>config</code>: configuration info to plug into the Mongoose connection and the Hapi server.</li>\n<li><code>controllers</code>: these are Hapi handlers that deal with the Request/Response objects. Versioning allows multiple endpoints per version number — that is, <code>/v1/authors</code>, <code>/v2/authors</code>, etc.</li>\n<li><code>model</code>: connects to the MongoDB database and defines the Mongoose schema.</li>\n<li><code>routes</code>: defines the endpoints with Joi validation for REST purists.</li>\n<li><code>test</code>: unit tests via Hapi’s lab tool. (More on this later.)</li>\n</ul>\n<p>In a real project, you may find it useful to abstract common business logic into a separate folder, say <code>utils</code>. I recommend creating a <code>AuthorUtil.js</code> module with purely functional code to make this reusable across endpoints and easy to unit test. Because this solution doesn’t have any complex business logic, I’ll choose to skip this folder.</p>\n<p>One gotcha to adding more folders is having more layers of abstraction and more cognitive load while making changes. With exceptionally large code bases, it’s easy to get lost in the chaos of layers of misdirection. Sometimes it’s better to keep the folder structure as simple and as flat as possible.</p>\n<h2 id=\"typescript\">TypeScript</h2>\n<p>To improve the developer experience, I’ll now add TypeScript type declarations. Because Mongoose and Joi define the model at runtime, there’s little value in adding a type checker at compile time. In TypeScript, it’s possible to add type definitions to a vanilla JavaScript project and still reap the benefits of a type checker in the code editor. Tools like WebStorm or VS Code will pick up type definitions and allow the programmer to “dot” into the code. This technique is often called <em>IntelliSense</em>, and it&#8217;s enabled when the IDE has the types available. What you get with this is a nice way to define the programming interface so developers can dot into objects without looking at the documentation. The editor too will sometimes show warnings when developers dot into the wrong object.</p>\n<p>This is what IntelliSense looks like in VS Code:</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/editor/intellisense/intellisense.gif\" alt=\"VSCode IntelliSense\" /></p>\n<p>In WebStorm, this is called code completion, but it&#8217;s essentially the same thing. Feel free to pick whichever IDE you prefer to write the code. I use Vim and WebStorm, but you may choose differently.</p>\n<p>To enable TypeScript type declarations in this project, fire up NPM and save these developer dependencies:</p>\n<pre><code class=\"shell language-shell\">npm i @types/hapi @types/mongoose --save-dev\r\n</code></pre>\n<p>I recommend keeping developer dependencies separate from app dependencies. This way, it’s clear to other devs in the organization what the packages are meant for. When a build server pulls down the repo, it also has the option to skip packages the project doesn’t need at runtime.</p>\n<p>With all the developer niceties in place, it’s now time to start writing code. Open the Hapi <code>server.js</code> file and put in place the main server:</p>\n<pre><code class=\"javascript language-javascript\">const config = require('./config')\r\nconst routes = require('./routes')\r\nconst db = require('./model')\r\nconst Hapi = require('@hapi/hapi')\r\n\r\nconst server = Hapi.server({\r\n  port: config.APP_PORT,\r\n  host: config.APP_HOST,\r\n  routes: {\r\n    cors: true\r\n  }\r\n})\r\n\r\nserver.route(routes)\r\n\r\nexports.init = async () =&gt; {\r\n  await server.initialize()\r\n  await db.connect()\r\n  return server\r\n}\r\n\r\nexports.start = async () =&gt; {\r\n  await server.start()\r\n  await db.connect()\r\n  console.log(`Server running at: ${server.info.uri}`)\r\n  return server\r\n}\r\n\r\nprocess.on('unhandledRejection', (err) =&gt; {\r\n  console.error(err)\r\n  process.exit(1)\r\n})\r\n</code></pre>\n<p>I’ve enabled CORS by setting <code>cors</code> to true so this REST API can work with Hoppscotch.</p>\n<p>To keep it simple, I’ll forgo semicolons in this project. It’s somewhat freeing to skip a <a href=\"https://www.sitepoint.com/introduction-to-typescript/\">TypeScript build in this project</a> and typing that extra character. This follows the Hapi mantra, because it’s all about the developer happiness anyway.</p>\n<p>Under <code>config/index.js</code>, be sure to export the <code>dev.json</code> info:</p>\n<pre><code class=\"javascript language-javascript\">module.exports = require('./dev')\r\n</code></pre>\n<p>To flesh out configuring the server, put this in <code>dev.json</code>:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"APP_PORT\": 3000,\r\n  \"APP_HOST\": \"127.0.0.1\"\r\n}\r\n</code></pre>\n<h2 id=\"restvalidation\">REST Validation</h2>\n<p>To keep the REST endpoints following the HTTP standards, I’ll add Joi validations. These validations help to decouple the API from the client, because they enforce resource integrity. For the Jamstack, this means the client no longer cares about implementation details behind each resource. It’s free to treat each endpoint independently, because the validation will ensure a valid request to the resource. Adhering to a strict HTTP standard makes the client evolve based on a target resource that sits behind an HTTP boundary, which enforces the decoupling. Really, the goal is to use versioning and validations to keep a clean boundary in the Jamstack.</p>\n<p>With REST, the main goal is to maintain <em><a href=\"https://www.restapitutorial.com/lessons/idempotency.html\">idempotency</a></em> with the GET, PUT, and DELETE methods. These are safe request methods because subsequent requests to same resource don’t have any side effects. The same intended effect gets repeated even if the client fails to establish a connection.</p>\n<p>I’ll choose to skip POST and PATCH, since these aren’t safe methods. This is for the sake of brevity and idempotency, but not because these methods tight couple the client in any way. The same strict HTTP standards can apply to these methods, except that they don’t guarantee idempotency.</p>\n<p>In <code>routes/authors.js</code>, add the following Joi validations:</p>\n<pre><code class=\"javascript language-javascript\">const Joi = require('joi')\r\n\r\nconst authorV1Params = Joi.object({\r\n  id: Joi.string().required()\r\n})\r\n\r\nconst authorV1Schema = Joi.object({\r\n  name: Joi.string().required(),\r\n  email: Joi.string().email().required(),\r\n  topics: Joi.array().items(Joi.string()), // optional\r\n  createdAt: Joi.date().required()\r\n})\r\n</code></pre>\n<p>Note that any changes to the versioned model will likely need a new version, like a <code>v2</code>. This guarantees backwards compatibility for existing clients and allows the API to evolve independently. Required fields will fail the request with a 400 (Bad Request) response when there are fields missing.</p>\n<p>With the params and schema validations in place, add the actual routes to this resource:</p>\n<pre><code class=\"javascript language-javascript\">// routes/authors.js\r\nconst v1Endpoint = require('../controllers/AuthorV1Controller')\r\n\r\nmodule.exports = [{\r\n  method: 'GET',\r\n  path: '/v1/authors/{id}',\r\n  handler: v1Endpoint.details,\r\n  options: {\r\n    validate: {\r\n      params: authorV1Params\r\n    },\r\n    response: {\r\n      schema: authorV1Schema\r\n    }\r\n  }\r\n}, {\r\n  method: 'PUT',\r\n  path: '/v1/authors/{id}',\r\n  handler: v1Endpoint.upsert,\r\n  options: {\r\n    validate: {\r\n      params: authorV1Params,\r\n      payload: authorV1Schema\r\n    },\r\n    response: {\r\n      schema: authorV1Schema\r\n    }\r\n  }\r\n}, {\r\n  method: 'DELETE',\r\n  path: '/v1/authors/{id}',\r\n  handler: v1Endpoint.delete,\r\n  options: {\r\n    validate: {\r\n      params: authorV1Params\r\n    }\r\n  }\r\n}]\r\n</code></pre>\n<p>To make these routes available to the <code>server.js</code>, add this in <code>routes/index.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">module.exports = [\r\n  ...require('./authors')\r\n]\r\n</code></pre>\n<p>The Joi validations go in the <code>options</code> field of the routes array. Each request path takes in a string ID param that matches the <code>ObjectId</code> in MongoDB. This <code>id</code> is part of the versioned route because it’s the target resource the client needs to work with. For a PUT, there’s a payload validation that matches the response from the GET. This is to adhere to REST standards where the <a href=\"https://tools.ietf.org/html/rfc7231#section-4.3.4\">PUT response must match a subsequent GET</a>.</p>\n<p>This is what it says in the standard:</p>\n<blockquote>\n<p>A successful PUT of a given representation would suggest that a subsequent GET on that same target resource will result in an equivalent representation being sent in a 200 (OK) response.</p>\n</blockquote>\n<p>This makes it inappropriate for a PUT to support partial updates since a subsequent GET would not match the PUT. For the Jamstack, it’s important to adhere to HTTP standards to ensure predictability for clients and decoupling.</p>\n<p>The <code>AuthorV1Controller</code> handles the request via a method handler in <code>v1Endpoint</code>. It’s a good idea to have one controller for each version, because this is what sends the response back to the client. This makes it easier to evolve the API via a new versioned controller without breaking existing clients.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/jamstack-rest-api-hapi/?utm_source=rss\">Build a Rest API for the Jamstack with Hapi and TypeScript</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/jamstack-rest-api-hapi/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181047",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Camilo Reyes"
        ],
        "pubDate": [
            "Mon, 08 Feb 2021 15:00:33 GMT"
        ],
        "metaDesc": [
            "Ever taken a Jamstack view of a REST API? Learn how to evolve an API without breaking clients, with the help of Hapi, Joi, TypeScript, TDD, Mongo and more."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "5 React Architecture Best Practices for 2021"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/react-architecture-best-practices/?utm_source=rss\"\n              title=\"5 React Architecture Best Practices for 2021\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2018/04/1619743379react-architecture.png\"\n        alt=\"5 React Architecture Best Practices\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2018/04/1619743379react-architecture-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2018/04/1619743379react-architecture.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>There can be no doubt that React has revolutionized the way we build user interfaces. It’s easy to learn and greatly facilitates creating reusable components that offer your site a consistent look and feel.</strong></p>\n<p>However, as React only takes care of the view layer of an application, it doesn’t enforce any specific architecture (such as MVC or MVVM). This can make it difficult to keep your codebase organized as your React project grows.</p>\n<p>At <a href=\"https://9elements.com/\">9elements</a>, one of our flagship products is <a href=\"https://www.photoeditorsdk.com/?utm_source=Sitepoint&#038;utm_medium=article&#038;utm_campaign=sitepoint-react-best-practices-2021\">PhotoEditorSDK</a> — a fully customizable photo editor that easily integrates into your HTML5, iOS or Android app. PhotoEditorSDK is a large-scale React app aimed at developers. It requires high performance, small builds, and needs to be very flexible with regards to styling and especially theming.</p>\n<p>Throughout the many iterations of PhotoEditorSDK, my team and I have picked up a number of best practices for organizing a large React app, some of which we’d like to share with you in this article.</p>\n<h2 id=\"1directorylayout\">1. Directory Layout</h2>\n<p>Originally, the styling and the code for our components were separated. All styles lived in a shared CSS file (we use SCSS for preprocessing). The actual component (in this case <code>FilterSlider</code>), was decoupled from the styles:</p>\n<pre><code class=\"bash language-bash\">├── components\r\n│   └── FilterSlider\r\n│       ├──  __tests__\r\n│       │   └── FilterSlider-test.js\r\n│       └── FilterSlider.jsx\r\n└── styles\r\n    └── photo-editor-sdk.scss\r\n</code></pre>\n<p>Over multiple refactorings, we found that this approach didn’t scale very well. In the future, our components would need to be shared between multiple internal projects, like the SDK and an experimental text tool we’re currently developing. So we switched to a component-centric file layout:</p>\n<pre><code class=\"bash language-bash\">components\r\n    └── FilterSlider\r\n        ├── __tests__\r\n        │   └── FilterSlider-test.js\r\n        ├── FilterSlider.jsx\r\n        └── FilterSlider.scss\r\n</code></pre>\n<p>The idea was that all the code that belongs to a component (such as JavaScript, CSS, assets, tests) is located in a single folder. This makes it very easy to extract the code into an npm module or, in case you’re in a hurry, to simply share the folder with another project.</p>\n<h3 id=\"importingcomponents\">Importing components</h3>\n<p>One of the drawbacks of this directory structure is that importing components requires you to import the fully qualified path, like so:</p>\n<pre><code class=\"javascript language-javascript\">import FilterSlider from 'components/FilterSlider/FilterSlider'\r\n</code></pre>\n<p>But what we’d really like to write is this:</p>\n<pre><code class=\"javascript language-javascript\">import FilterSlider from 'components/FilterSlider'\r\n</code></pre>\n<p>To solve this problem, you can create an <code>index.js</code> and immediately export the default:</p>\n<pre><code class=\"javascript language-javascript\">export { default } from './FilterSlider';\r\n</code></pre>\n<p>Another solution is a little bit more extensive, but it uses a Node.js standard resolving mechanism, making it rock solid and future-proof. All we do is add a <code>package.json</code> file to the file structure:</p>\n<pre><code class=\"bash language-bash\">components\r\n    └── FilterSlider\r\n        ├── __tests__\r\n        │   └── FilterSlider-test.js\r\n        ├── FilterSlider.jsx\r\n        ├── FilterSlider.scss\r\n        └── package.json\r\n</code></pre>\n<p>And within <code>package.json</code>, we use the <a href=\"https://docs.npmjs.com/files/package.json#main\">main property</a> to set our entry point to the component, like so:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"main\": \"FilterSlider.jsx\"\r\n}\r\n</code></pre>\n<p>With that addition, we can import a component like this:</p>\n<pre><code class=\"javascript language-javascript\">import FilterSlider from 'components/FilterSlider'\r\n</code></pre>\n<h2 id=\"2cssinjavascript\">2. CSS in JavaScript</h2>\n<p>Styling, and especially theming, has always been a bit of a problem. As mentioned above, in our first iteration of the app we had a big CSS (SCSS) file, in which all of our classes lived. To avoid name collisions, we used a global prefix and followed the <a href=\"https://www.sitepoint.com/css-architecture-block-element-modifier-bem/\">BEM conventions</a> to craft CSS rule names. When our application grew, this approach didn’t scale very well, so we searched for a replacement. First we evaluated <a href=\"https://www.sitepoint.com/understanding-css-modules-methodology/\">CSS modules</a>, but at that time they had some performance issues. Also, extracting the CSS via webpack’s <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\">Extract Text plugin</a> didn’t work that well (although it should be OK at the time of writing). Additionally, this approach created a heavy dependency on webpack and made testing quite difficult.</p>\n<p>Next, we evaluated some of the other CSS-in-JS solutions that had recently arrived on the scene:</p>\n<ul>\n<li><a href=\"https://github.com/styled-components/styled-components\">Styled Components</a>: the most popular choice with the biggest community</li>\n<li><a href=\"https://github.com/emotion-js/emotion\">EmotionJS</a>: the hot competitor</li>\n<li><a href=\"https://github.com/callstack/linaria\">Linaria</a>: the zero runtime solution</li>\n</ul>\n<p>Choosing one of these libraries heavily depends on your use case:</p>\n<ul>\n<li>Do you need the library to spit out a compiled CSS file for production? EmotionJS and Linaria can do that! Linaria even doesn&#8217;t require a runtime. It maps props to CSS via <a href=\"https://www.sitepoint.com/practical-guide-css-variables-custom-properties/\">CSS variables</a>, which rules out IE11 support — but who needs IE11 anyways?</li>\n<li>Does it need to run on the server? That’s no problem for recent versions of all libraries!</li>\n</ul>\n<p>For the directory structure we like to put all the styles in a <code>styles.js</code>:</p>\n<pre><code class=\"javascript language-javascript\">export const Section = styled.section`\r\n  padding: 4em;\r\n  background: papayawhip;\r\n`;\r\n</code></pre>\n<p>This way, pure front-end folks are also able to edit some styles without dealing with React, but they have to learn minimal JavaScript and how to map props to CSS attributes:</p>\n<pre><code class=\"bash language-bash\">components\r\n    └── FilterSlider\r\n        ├── __tests__\r\n        │   └── FilterSlider-test.js\r\n        ├── styles.js\r\n        ├── FilterSlider.jsx\r\n        └── index.js\r\n</code></pre>\n<p>It’s a good practice to declutter your main component file from HTML.</p>\n<h2 id=\"strivingforthesingleresponsibilityofreactcomponents\">Striving for the Single Responsibility of React Components</h2>\n<p>When you develop highly abstract UI components, it’s sometimes hard to separate the concerns. At some points, your component will need a certain domain logic from your model, and then things get messy. In the following sections, we’d like to show you certain methods for DRYing up your components. The following techniques overlap in functionality, and choosing the right one for your architecture is more a preference in style rather than based on hard facts. But let me introduce the use cases first:</p>\n<ul>\n<li>We had to introduce a mechanism to deal with components that are context-aware of the logged-in user.</li>\n<li>We had to render a table with multiple collapsible <code>&lt;tbody&gt;</code> elements.</li>\n<li>We had to display different components depending on different states.</li>\n</ul>\n<p>In the following section, I’ll show different solutions for the problems described above.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/react-architecture-best-practices/?utm_source=rss\">5 React Architecture Best Practices for 2021</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/react-architecture-best-practices/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=165278",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "React",
            "Tools & Libraries"
        ],
        "dc:creator": [
            "Sebastian Deutsch"
        ],
        "pubDate": [
            "Tue, 04 May 2021 18:30:59 GMT"
        ],
        "metaDesc": [
            "It's tricky to keep your codebase organized as your React project grows. Here are five best-practice tips for organizing your large React app."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Getting Started with Laravel Livewire"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/laravel-livewire-getting-started/?utm_source=rss\"\n              title=\"Getting Started with Laravel Livewire\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611102843laravel-livewire4.png\"\n        alt=\"Getting Started with Laravel Livewire\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611102843laravel-livewire4-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611102843laravel-livewire4.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>As developers, we’re always looking for tools, libraries, and frameworks that will make our lives easier. It’s no different for Laravel developers. That’s the reason why we love this framework to begin with, as everything is made easy for us — allowing us to focus on building awesome applications instead of getting bogged down with how to implement stuff.</strong></p>\n<p>In this tutorial, we’ll be looking at another tool which can make your life easier as a Laravel developer. Specifically, we’ll be looking into Livewire, a full-stack framework for Laravel that allows us to build dynamic interfaces without writing a whole lot of JavaScript. Everything is essentially done with tools you’re already familiar with as a Laravel developer.</p>\n<h2 id=\"whatislivewire\">What is Livewire?</h2>\n<p><a href=\"https://laravel-livewire.com/\">Livewire</a> is a library that allows us to build reactive and dynamic interfaces using Blade and a little bit of JavaScript. I say “a little” because we’re only going to write JavaScript to pass data around via browser events and responding to them.</p>\n<p>You can use Livewire to implement the following functionality, without the page reload:</p>\n<ul>\n<li>pagination</li>\n<li>form validation</li>\n<li>notifications</li>\n<li>file uploads preview</li>\n</ul>\n<p>Note that Livewire isn’t limited to the above functionality. You can use it for so much more. The features above are just the most common one you might like to implement in your apps.</p>\n<h2 id=\"livewirevsvue\">Livewire vs Vue</h2>\n<p>Vue has always been the preferred front-end framework for Laravel developers to add interactivity to their apps. If you’re already using Vue to power your apps, Livewire is optional for you to learn. But if you’re fairly new to doing front end in Laravel, and you’re looking into Livewire as a Vue replacement, then yes, you can use Livewire as a replacement for Vue. The learning curve<br />\nwon’t be as steep as learning Vue, since you’ll mostly be using Blade to write your template files.</p>\n<p>For more information on how Livewire and Vue compare, check out “<a href=\"https://blog.logrocket.com/livewire-vs-vue/\">Laravel Livewire vs Vue</a>”.</p>\n<h2 id=\"appoverview\">App overview</h2>\n<p>We’re going to create a live CRUD app. So it’s basically a CRUD app without the page reloads. Livewire will handle all the AJAX requests required to update the UI. This includes filtering the results via the search field, sorting via the column header, and a simple pagination (previous and next). Creating and editing users will make use of Bootstrap Modals.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610188415livecrud-app.png\" alt=\"Live CRUD\" /></p>\n<p>You can view the source code of this project on its <a href=\"https://github.com/sitepoint-editors/livecrud\">GitHub repo</a>.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>This tutorial assumes that you have experience with PHP application development. Experience in Laravel is helpful but not required. You can still follow along if you only know plain PHP or another PHP framework.</p>\n<p>This tutorial assumes that you have the following software installed on your machine:</p>\n<ul>\n<li><a href=\"https://www.php.net/manual/en/install.php\">PHP</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/installing.html\">MySQL</a></li>\n<li><a href=\"https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/\">NGINX</a></li>\n<li><a href=\"https://getcomposer.org/download/\">Composer</a></li>\n<li><a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">Node and npm</a></li>\n</ul>\n<p>If you&#8217;re on a Mac, a more convenient option instead of installing MySQL and NGINX would be to install <a href=\"https://dbngin.com/\">DBngin</a> and <a href=\"https://laravel.com/docs/8.x/valet\">Laravel Valet</a> instead.</p>\n<h2 id=\"settinguptheproject\">Setting Up the Project</h2>\n<p>You can now create a new Laravel project:</p>\n<pre><code class=\"bash language-bash\">composer create-project laravel/laravel livecrud\r\n</code></pre>\n<p>Navigate inside the <code>livecrud</code> folder that it will generate. This will be the root project folder where you execute all of the commands throughout this tutorial.</p>\n<p>The next step is to create a MySQL database using your database management tool of choice. Name the database as <code>livecrud</code>.</p>\n<h3 id=\"installthebackenddependencies\">Install the back-end dependencies</h3>\n<p>We only have one dependency for the back end and that’s Livewire. Install it with the following command:</p>\n<pre><code class=\"bash language-bash\">composer require livewire/livewire:2.3\r\n</code></pre>\n<p><em>Note: we’re installing the specific version I’ve used in creating the demo. If you’re reading this in the future, it’s recommended that you install the most recent version. Don’t forget to check the <a href=\"https://github.com/livewire/livewire/releases\">project’s changelog</a> on their GitHub repo to make sure you’re not missing anything.</em></p>\n<h3 id=\"settingupthedatabase\">Setting up the database</h3>\n<p>Update the default migration for creating the <code>users</code> table and add the custom fields that we’re going to use:</p>\n<pre><code class=\"php language-php\">// database/migrations/&lt;timestamp&gt;_create_users_table.php\r\npublic function up()\r\n{\r\n    Schema::create('users', function (Blueprint $table) {\r\n        $table-&gt;id();\r\n        $table-&gt;string('name');\r\n        $table-&gt;string('email')-&gt;unique();\r\n        $table-&gt;enum('user_type', ['admin', 'user'])-&gt;default('user'); // add this\r\n        $table-&gt;tinyInteger('age'); // add this\r\n        $table-&gt;string('address')-&gt;nullable(); // add this\r\n        $table-&gt;timestamp('email_verified_at')-&gt;nullable();\r\n        $table-&gt;string('password');\r\n        $table-&gt;rememberToken();\r\n        $table-&gt;timestamps();\r\n    });\r\n}\r\n</code></pre>\n<p>Next, update the <code>database/factories/UserFactory.php</code> file and supply values to the custom fields that we’ve added:</p>\n<pre><code class=\"php language-php\">// database/factories/UserFactory.php\r\npublic function definition()\r\n{\r\n    return [\r\n        'name' =&gt; $this-&gt;faker-&gt;name,\r\n        'email' =&gt; $this-&gt;faker-&gt;unique()-&gt;safeEmail,\r\n        'email_verified_at' =&gt; now(),\r\n        'password' =&gt; '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\r\n        'remember_token' =&gt; Str::random(10),\r\n\r\n        // add these\r\n        'user_type' =&gt; 'user',\r\n        'age' =&gt; $this-&gt;faker-&gt;numberBetween(18, 60),\r\n        'address' =&gt; $this-&gt;faker-&gt;address,\r\n    ];\r\n}\r\n</code></pre>\n<p>Lastly, open the <code>database/seeders/DatabaseSeeder.php</code> file and uncomment the call to create dummy users:</p>\n<pre><code class=\"php language-php\">// database/seeders/DatabaseSeeder.php\r\npublic function run()\r\n{\r\n    \\App\\Models\\User::factory(100)-&gt;create();\r\n}\r\n</code></pre>\n<p>Don’t forget to update your <code>.env</code> file with the test database you’re going to use. In this case, I’ve named the database as <code>livecrud</code>. Once that’s done, run the migrations and the seeder to populate the database:</p>\n<pre><code class=\"bash language-bash\">php artisan migrate\r\nphp artisan db:seed\r\n</code></pre>\n<h3 id=\"settingupfrontenddependencies\">Setting up front-end dependencies</h3>\n<p>To simplify things, we’re going to use Laravel scaffold for Bootstrap. To use that, you first need to install the <code>laravel/ui</code> package:</p>\n<pre><code class=\"bash language-bash\">composer require laravel/ui\r\n</code></pre>\n<p>Next, install Bootstrap 4. This adds the config on your <code>webpack.mix.js</code> file and creates the <code>resources/js/app.js</code> and <code>resources/sass/app.scss</code> files:</p>\n<pre><code class=\"bash language-bash\">php artisan ui bootstrap\r\n</code></pre>\n<p>Next, add Font Awsome to the <code>resources/sass/app.scss</code> file. By default, there should already be the fonts, variables, and bootstrap imports in there:</p>\n<pre><code class=\"scss language-scss\">// Fonts\r\n@import url(\"https://fonts.googleapis.com/css?family=Nunito\");\r\n\r\n// Variables\r\n@import \"variables\";\r\n\r\n// Bootstrap\r\n@import \"~bootstrap/scss/bootstrap\";\r\n\r\n// add these:\r\n@import \"~@fortawesome/fontawesome-free/scss/fontawesome\";\r\n@import \"~@fortawesome/fontawesome-free/scss/brands\";\r\n@import \"~@fortawesome/fontawesome-free/scss/regular\";\r\n@import \"~@fortawesome/fontawesome-free/scss/solid\";\r\n</code></pre>\n<p>Once that’s done, install all the dependencies:</p>\n<pre><code class=\"bash language-bash\">npm install @fortawesome/fontawesome-free\r\nnpm install\r\n</code></pre>\n<h2 id=\"createthelivewirecomponent\">Create the Livewire Component</h2>\n<p>You can use the <code>make:livewire</code> command to create a new Livewire component:</p>\n<pre><code class=\"bash language-bash\">php artisan make:livewire LiveTable\r\n</code></pre>\n<p>This will create the following files:</p>\n<ul>\n<li><code>app/Http/Livewire/LiveTable.php</code> — the controller for the component</li>\n<li><code>resources/views/livewire/live-table.blade.php</code> — the view file for the component</li>\n</ul>\n<p>Open the <code>resources/views/livewire/live-table.blade.php</code> file and add the following:</p>\n<pre><code class=\"php language-php\">&lt;div&gt;\r\n    &lt;div class=\"row mb-4\"&gt;\r\n        &lt;div class=\"col-md-12\"&gt;\r\n          &lt;div class=\"float-right mt-5\"&gt;\r\n              &lt;input wire:model=\"search\" class=\"form-control\" type=\"text\" placeholder=\"Search Users...\"&gt;\r\n          &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=\"row\"&gt;\r\n        @if ($users-&gt;count())\r\n        &lt;table class=\"table\"&gt;\r\n            &lt;thead&gt;\r\n                &lt;tr&gt;\r\n                    &lt;th&gt;\r\n                        &lt;a wire:click.prevent=\"sortBy('name')\" role=\"button\" href=\"#\"&gt;\r\n                            Name\r\n                            @include('includes.sort-icon', ['field' =&gt; 'name'])\r\n                        &lt;/a&gt;\r\n                    &lt;/th&gt;\r\n                    &lt;th&gt;\r\n                        &lt;a wire:click.prevent=\"sortBy('email')\" role=\"button\" href=\"#\"&gt;\r\n                            Email\r\n                            @include('includes.sort-icon', ['field' =&gt; 'email'])\r\n                        &lt;/a&gt;\r\n                    &lt;/th&gt;\r\n                    &lt;th&gt;\r\n                        &lt;a wire:click.prevent=\"sortBy('address')\" role=\"button\" href=\"#\"&gt;\r\n                            Address\r\n                            @include('includes.sort-icon', ['field' =&gt; 'address'])\r\n                        &lt;/a&gt;\r\n                    &lt;/th&gt;\r\n                    &lt;th&gt;\r\n                        &lt;a wire:click.prevent=\"sortBy('age')\" role=\"button\" href=\"#\"&gt;\r\n                            Age\r\n                            @include('includes.sort-icon', ['field' =&gt; 'age'])\r\n                        &lt;/a&gt;\r\n                    &lt;/th&gt;\r\n                    &lt;th&gt;\r\n                        &lt;a wire:click.prevent=\"sortBy('created_at')\" role=\"button\" href=\"#\"&gt;\r\n                        Created at\r\n                        @include('includes.sort-icon', ['field' =&gt; 'created_at'])\r\n                        &lt;/a&gt;\r\n                    &lt;/th&gt;\r\n                    &lt;th&gt;\r\n                        Delete\r\n                    &lt;/th&gt;\r\n                    &lt;th&gt;\r\n                        Edit\r\n                    &lt;/th&gt;\r\n                &lt;/tr&gt;\r\n            &lt;/thead&gt;\r\n            &lt;tbody&gt;\r\n                @foreach ($users as $user)\r\n                    &lt;tr&gt;\r\n                        &lt;td&gt;{{ $user-&gt;name }}&lt;/td&gt;\r\n                        &lt;td&gt;{{ $user-&gt;email }}&lt;/td&gt;\r\n                        &lt;td&gt;{{ $user-&gt;address }}&lt;/td&gt;\r\n                        &lt;td&gt;{{ $user-&gt;age }}&lt;/td&gt;\r\n                        &lt;td&gt;{{ $user-&gt;created_at-&gt;format('m-d-Y') }}&lt;/td&gt;\r\n                        &lt;td&gt;\r\n                            &lt;button class=\"btn btn-sm btn-danger\"&gt;\r\n                            Delete\r\n                            &lt;/button&gt;\r\n                        &lt;/td&gt;\r\n                        &lt;td&gt;\r\n                            &lt;button class=\"btn btn-sm btn-dark\"&gt;\r\n                            Edit\r\n                            &lt;/button&gt;\r\n                        &lt;/td&gt;\r\n                    &lt;/tr&gt;\r\n                @endforeach\r\n            &lt;/tbody&gt;\r\n        &lt;/table&gt;\r\n        @else\r\n            &lt;div class=\"alert alert-warning\"&gt;\r\n                Your query returned zero results.\r\n            &lt;/div&gt;\r\n        @endif\r\n    &lt;/div&gt;\r\n\r\n    &lt;div class=\"row\"&gt;\r\n        &lt;div class=\"col\"&gt;\r\n            {{ $users-&gt;links() }}\r\n        &lt;/div&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</code></pre>\n<p>That’s a lot of code, so let’s break it down from top to bottom. First, we have the search field for searching for users. We want the users to be able to see the results of their query as they type. The way we implement that is by using <code>wire:model</code>. This allows us to pass in the name of the variable from the component class (<code>LiveTable</code>). Whatever the user types in this field will then be synced to the value for that variable. In this case, we’re binding the <code>search</code> variable:</p>\n<pre><code class=\"markup language-markup\">&lt;input wire:model=\"search\" class=\"form-control\" type=\"text\" placeholder=\"Search Users...\"&gt;\r\n</code></pre>\n<p>Later on in the code for the LiveTable component class, you’ll see the bound variable like in the below code. These are called <a href=\"https://laravel-livewire.com/docs/2.x/properties\">properties</a> in Livewire. If you’re coming from Vue, then this is the equivalent of the state. Only <code>public</code> properties can be accessed directly from the front end:</p>\n<pre><code class=\"php language-php\">// app/Http/Livewire/LiveTable.php\r\n&lt;?php\r\nclass LiveTable extends Component\r\n{\r\n  public $search = ''; // don't add this yet\r\n}\r\n</code></pre>\n<p>Next, we have the table headers. Here we’re using <code>wire:click.prevent</code> to listen for click events in the link element. These are called <a href=\"https://laravel-livewire.com/docs/2.x/actions\">actions</a> in Livewire. They essentially allow you to listen for browser events but respond to it using methods in the back end. Using <code>.prevent</code> prevents the default browser action. The value you supply to this is the name of the method you want to execute in the component class. In this case it’s <code>sortBy</code>. Then we’re passing in the name of the column we want to sort:</p>\n<pre><code class=\"php language-php\">&lt;th&gt;\r\n  &lt;a wire:click.prevent=\"sortBy('name')\" role=\"button\" href=\"#\"&gt;\r\n      Name\r\n      @include('includes.sort-icon', ['field' =&gt; 'name'])\r\n  &lt;/a&gt;\r\n&lt;/th&gt;\r\n</code></pre>\n<p>Here’s what the corresponding method in the component class looks like. We’ll add the code for this later:</p>\n<pre><code class=\"php language-php\">// app/Http/Livewire/LiveTable.php\r\npublic function sortBy($field)\r\n{\r\n  //\r\n}\r\n</code></pre>\n<p>In the above code, we’ve included another view file called <code>sort-icon</code>. Create a <code>resources/views/includes/sort-icon.blade.php</code> file and add the following. This will render the current sorting icon based on the current sort selected by the user:</p>\n<pre><code class=\"php language-php\">@if ($sortField !== $field)\r\n    &lt;i class=\"text-muted fas fa-sort\"&gt;&lt;/i&gt;\r\n@elseif ($sortAsc)\r\n    &lt;i class=\"fas fa-sort-up\"&gt;&lt;/i&gt;\r\n@else\r\n    &lt;i class=\"fas fa-sort-down\"&gt;&lt;/i&gt;\r\n@endif\r\n</code></pre>\n<p>That’s pretty much it for the markup. The rest of the code is basically the same as your standard Blade template. So we still use the <code>links()</code> method to show the pagination and the <code>@if</code> directive to conditionally show something.</p>\n<p>We now move on to the component class. Open the <code>app/Http/Livewire/LiveTable.php</code> file and update it so it contains the following code:</p>\n<pre><code class=\"php language-php\">&lt;?php\r\n\r\nnamespace App\\Http\\Livewire;\r\n\r\nuse Livewire\\Component;\r\nuse Livewire\\WithPagination;\r\nuse App\\Models\\User;\r\n\r\nclass LiveTable extends Component\r\n{\r\n    use WithPagination;\r\n\r\n    public $sortField = 'name'; // default sorting field\r\n    public $sortAsc = true; // default sort direction\r\n    public $search = '';\r\n\r\n    public function sortBy($field)\r\n    {\r\n        if ($this-&gt;sortField === $field) {\r\n            $this-&gt;sortAsc = !$this-&gt;sortAsc;\r\n        } else {\r\n            $this-&gt;sortAsc = true;\r\n        }\r\n\r\n        $this-&gt;sortField = $field;\r\n    }\r\n\r\n    public function render()\r\n    {\r\n        return view('livewire.live-table', [\r\n            'users' =&gt; User::search($this-&gt;search)\r\n                -&gt;orderBy($this-&gt;sortField, $this-&gt;sortAsc ? 'asc' : 'desc')\r\n                -&gt;simplePaginate(10),\r\n        ]);\r\n    }\r\n}\r\n</code></pre>\n<p>As mentioned earlier, we’ve bound the value of the <code>search</code> variable to a specific text field in the client-side via the <code>wire:model</code>. So every time the user types something, the <code>search</code> variable is also updated. And when it’s updated, the component is also re-rendered. This is because in the <code>render()</code> function we’re depending on the value of the <code>search</code> variable to fetch user data. So for each keystroke, we’re actually fetching data from the database by supplying the user’s query and selected sort (we’ll take a look at how to improve this later in the <strong>Optimizations</strong> section):</p>\n<pre><code class=\"php language-php\">User::search($this-&gt;search)\r\n                -&gt;orderBy($this-&gt;sortField, $this-&gt;sortAsc ? 'asc' : 'desc')\r\n                -&gt;simplePaginate(10)\r\n</code></pre>\n<p>The <code>sortBy()</code> method is what we use to update the field for sorting the users table. Each field can be sorted by either ascending or descending order. By default, clicking on a sorting field will sort it by ascending. Clicking it again will simply do the opposite:</p>\n<pre><code class=\"php language-php\">public function sortBy($field)\r\n{\r\n    if ($this-&gt;sortField === $field) {\r\n        $this-&gt;sortAsc = !$this-&gt;sortAsc; // if field is already sorted, use the opposite instead\r\n    } else {\r\n        $this-&gt;sortAsc = true; // sort selected field by ascending by default\r\n    }\r\n\r\n    $this-&gt;sortField = $field;\r\n}\r\n</code></pre>\n<p>When filtering the <code>users</code> table, we use the <code>search()</code> method. But we haven’t added that yet. Update the <code>app/Models/User.php</code> file to include the <code>search()</code> method. This filters the user table to only return users of type <code>user</code>. Then the rest of the conditions will be the fields we want to use for filtering the search field:</p>\n<pre><code class=\"php language-php\">protected $casts = [\r\n    //\r\n];\r\n\r\npublic static function search($query)\r\n{\r\n    return empty($query) ? static::query()-&gt;where('user_type', 'user')\r\n        : static::where('user_type', 'user')\r\n            -&gt;where(function($q) use ($query) {\r\n                $q\r\n                    -&gt;where('name', 'LIKE', '%'. $query . '%')\r\n                    -&gt;orWhere('email', 'LIKE', '%' . $query . '%')\r\n                    -&gt;orWhere('address', 'LIKE ', '%' . $query . '%');\r\n            });\r\n}\r\n</code></pre>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/laravel-livewire-getting-started/?utm_source=rss\">Getting Started with Laravel Livewire</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/laravel-livewire-getting-started/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180727",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "PHP"
        ],
        "dc:creator": [
            "Wern Ancheta"
        ],
        "pubDate": [
            "Tue, 19 Jan 2021 14:00:34 GMT"
        ],
        "metaDesc": [
            "Attention Laravel lovers! The Livewire framework for Laravel can help you build awesome, dynamic interfaces without writing a whole lot of JavaScript."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "5 Hidden Mistakes That Can Ruin a Developer’s Career"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/developers-career-mistakes/?utm_source=rss\"\n              title=\"5 Hidden Mistakes That Can Ruin a Developer’s Career\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624955559developer-mistakes.png\"\n        alt=\"5 Hidden Mistakes That Can Ruin a Developer's Career\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624955559developer-mistakes-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1624955559developer-mistakes.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p>It&rsquo;s hard to find a new development job, so when you&rsquo;ve got one, the last thing you want to do is lose it without even knowing why. In this article, we look at five ways you can inadvertently pull the rug out from under your developer career. A Dreaded Pattern When you accept a new [&hellip;]</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/developers-career-mistakes/?utm_source=rss\">5 Hidden Mistakes That Can Ruin a Developer’s Career</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/developers-career-mistakes/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=194647",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Andrew McDermott"
        ],
        "pubDate": [
            "Tue, 29 Jun 2021 16:00:11 GMT"
        ],
        "metaDesc": [
            "Have you lost a development job without knowing why? Learn about five serious mistakes that can put your development job or career at risk."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Create Powerful CSS Animation Effects without JavaScript"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/css-animation-no-javascript/?utm_source=rss\"\n              title=\"Create Powerful CSS Animation Effects without JavaScript\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1612050702css-animations.png\"\n        alt=\"Create Powerful Animations Using Only CSS\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1612050702css-animations-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1612050702css-animations.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll explore the world of animations on the Web using only CSS. We&#8217;ll first create a simple animation using a combination of SVG and CSS. We’ll then create another couple of animations using only HTML and CSS. We’ll also discuss when we need to call JavaScript into action and the limitations of CSS.</strong></p>\n<p>By the end of this article, you’ll be able to use CSS to create animations in favor of using JavaScript. You’ll also be able to identify when you’ll need to use JavaScript to create an animation.</p>\n<p><em>To get the most out of this article, it’s presumed you have at least a core knowledge of CSS and HTML. If you’re just starting with web development, there are some great resources for learning and getting help, such as <a href=\"https://www.sitepoint.com/premium/library\">learning resources on sitePoint</a>, the very helpful <a href=\"https://www.sitepoint.com/community/\">SitePoint forums</a>, and also <a href=\"https://www.freecodecamp.org\">freecodecamp</a>.</em></p>\n<h2 id=\"drawingeffectanimation\">Drawing Effect Animation</h2>\n<p>This is an impressive animation that’s deceptively easy to create. Below is a screenshot of what we’re aiming for.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1610725258powerful-css-svg-animation.gif\" alt=\"final animation\"/></p>\n<p>We first need to create the SVG for our logo:</p>\n<pre><code class=\"markup language-markup\">&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"279.15\" height=\"343.95\" overflow=\"visible\" stroke=\"#000\" stroke-width=\"1\"&gt;\r\n &lt;path d=\"M110.57 248.64c-22.7-21.25-45.06-42.09-67.31-63.06-11.73-11.06-23.32-22.26-34.87-33.51C-2.6 141.35-2.86 128 8.02 117.42 47.67 78.82 87.46 40.35 127.21 1.84c.46-.44 1.03-.77 2.47-1.84 12.52 13.66 25.06 27.34 37.1 40.47-4.44 4.76-10.06 11.31-16.21 17.33-22.69 22.2-45.56 44.22-68.34 66.32-7.89 7.66-7.97 13.48.11 21.07 19.38 18.19 38.85 36.29 58.37 54.33 7.53 6.96 7.75 12.42.32 19.64-10.01 9.72-20.05 19.4-30.46 29.48z\"/&gt;\r\n &lt;path d=\"M150.02 343.95c-13.41-13.03-26.71-25.97-40.2-39.08 1.23-1.32 2.19-2.44 3.24-3.46 27.8-26.95 55.61-53.89 83.42-80.83 8.32-8.05 8.41-13.92-.01-21.79-19.54-18.27-39.14-36.47-58.77-54.63-6.52-6.04-6.76-12.11-.37-18.33 10.24-9.96 20.52-19.87 31.15-30.16 6.33 5.89 12.53 11.58 18.65 17.37 27.53 26.03 55.07 52.05 82.52 78.16 12.57 11.96 12.66 24.78.33 36.75-38.99 37.85-78.04 75.64-117.07 113.45-.82.79-1.71 1.51-2.89 2.55z\"/&gt;\r\n&lt;/svg&gt;\r\n</code></pre>\n<p>Here’s a <a href=\"https://codepen.io/SitePoint/pen/ZEBEEbw\">Pen</a> with that SVG set up. Feel free to fork it so you can follow along with the steps below.</p>\n<p>With our SVG in place, we now set the <code>fill-opacity</code> to <code>0</code>. We’ll animate this back in later:</p>\n<pre><code class=\"css language-css\">svg {\r\n  fill-opacity: 0;\r\n}\r\n</code></pre>\n<p>(<a href=\"https://codepen.io/SitePoint/pen/xxRxxOb\">Updated Pen</a>)</p>\n<p>We can now concentrate on drawing the SVG. We’ll achieve this by using the CSS <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> properties.</p>\n<p>The <code>stroke-dasharray</code> property controls the pattern of gaps and dashes used to make a stroke a path. For example, <code>stroke-dasharray: 10</code> applied to the paths in the SVG creates a dashed effect with stroke and gap lengths of ten pixels:</p>\n<p class=\"codepen\" data-height=\"450\" data-theme-id=\"6441\" data-default-tab=\"result\" data-user=\"SitePoint\" data-slug-hash=\"XWNWWNv\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"Stroke-dasharray demo\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/XWNWWNv\"><br />\nStroke-dasharray demo</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Now, for the animation we&#8217;re creating here, we want our gap and dash to be the same length as our <code>path</code>. That is, the whole length of our logo outline will be considered “one dash”, so to speak, and one gap will also be the whole length of the outline too. The idea is that we&#8217;ll start with the logo outline as a gap, and then animate in the outline as the dash.</p>\n<p>But how long is the logo&#8217;s outline? An easy way to deal with this is to set the length. Let&#8217;s edit our SVG code by adding <code>pathLength=\"1\"</code> to each path:</p>\n<pre><code class=\"markup language-markup\"> …\r\n &lt;path pathLength=\"1\" d=\"M110.57 … &gt;\r\n …\r\n</code></pre>\n<p>(<a href=\"https://codepen.io/SitePoint/pen/xxRxKrm\">Updated Pen</a>)</p>\n<p>This makes it much easier to do the drawing animation. Now that we&#8217;ve set the <code>pathLength</code>, we can also set the <code>stroke-dasharray</code> to <code>1</code> in the CSS:</p>\n<pre><code class=\"css language-css\">svg path {\r\n  stroke-dasharray: 1;\r\n}\r\n</code></pre>\n<p>(<a href=\"https://codepen.io/SitePoint/pen/RwowwZg\">Updated Pen</a>)</p>\n<p>Now, it appears that nothing has changed here, but that&#8217;s okay. The whole path for each part of the logo is just one big dash now. (You can experiment by removing <code>pathLength=\"1\"</code> from one of the paths. It will suddenly become a dotted line of 1px line and gaps.)</p>\n<p>We can now use <code>stroke-dashoffset</code>, which specifies how far into the dash pattern we should start the dash. In our case, we want to set <code>stroke-dashoffset</code> to <code>1</code>, so we start on a <code>gap</code> rather than a <code>dash</code>. Since the length of each of our gaps is the entire length of our <code>path</code>, we’ll now see a blank screen:</p>\n<pre><code class=\"css language-css\">svg path {\r\n  stroke-dasharray: 1;\r\n  stroke-dashoffset: 1;  \r\n}\r\n</code></pre>\n<p>We can now animate <code>stroke-dashoffset</code> back to <code>0</code>, which will give a drawing effect:</p>\n<pre><code class=\"css language-css\">svg path {\r\n  stroke-dasharray: 1;\r\n  stroke-dashoffset: 1;  \r\n  animation: draw 2s forwards;\r\n}\r\n\r\n@keyframes draw {\r\n  from {\r\n    stroke-dashoffset: 1;\r\n  }\r\n  to {\r\n    stroke-dashoffset: 0;\r\n  }\r\n}\r\n</code></pre>\n<p>Cool! With this in place we now have this:</p>\n<p class=\"codepen\" data-height=\"450\" data-theme-id=\"6441\" data-default-tab=\"result\" data-user=\"SitePoint\" data-slug-hash=\"oNYNNEB\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"SitePoint Logo Animation: Step 5\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/oNYNNEB\"><br />\nSitePoint Logo Animation: Step 5</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>To complete our animation, we just have to animate in our <code>fill-opacity</code>:</p>\n<pre><code class=\"css language-css\">svg {\r\n  width: 40%;\r\n  fill-opacity: 0;\r\n  // we set a delay of 2s so it won't start until our drawing is finished\r\n  animation: fadeOpacity 2s forwards 2s;\r\n}\r\n\r\n@keyframes fadeOpacity {\r\n  from {\r\n    fill-opacity: 0;\r\n  }\r\n  to {\r\n    fill-opacity: 1;\r\n  }\r\n}\r\n</code></pre>\n<p>We now have our final animation:</p>\n<p class=\"codepen\" data-height=\"450\" data-theme-id=\"6441\" data-default-tab=\"result\" data-user=\"SitePoint\" data-slug-hash=\"WNoNeXO\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"SitePoint Logo Animation: Step 6 (final)\">\n<span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/WNoNeXO\"><br />\nSitePoint Logo Animation: Step 6 (final)</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\non <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>I bet that was a lot easier than you thought! I know the <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> attributes can be a little confusing, but when you set your <code>path</code> to have a length of <code>1</code>, they’re much easier to work with.</p>\n<p>That’s a quick example of the power of CSS combined with SVG. Now let’s push this further in our next example.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/css-animation-no-javascript/?utm_source=rss\">Create Powerful CSS Animation Effects without JavaScript</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/css-animation-no-javascript/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180864",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Animation",
            "CSS",
            "CSS3",
            "HTML & CSS",
            "HTML & CSS",
            "Sass"
        ],
        "dc:creator": [
            "Paul Ryan"
        ],
        "pubDate": [
            "Sun, 31 Jan 2021 15:00:06 GMT"
        ],
        "metaDesc": [
            "Do animations need JavaScript? No! Learn some amazing CSS animation tricks you can perform with just a small amount of really cool CSS."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "10 Client-side Storage Options and When to Use Them"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/client-side-storage-options-comparison/?utm_source=rss\"\n              title=\"10 Client-side Storage Options and When to Use Them\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621499954browser-storage.png\"\n        alt=\"Ten Client-side Storage Options\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621499954browser-storage-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1621499954browser-storage.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Storing and manipulating data in the browser — also known as client-side storage — is useful when it’s not necessary or practical to send it to the web server.</strong></p>\n<p>Situations for storing and manipulating data in the browser include:</p>\n<ul>\n<li>retaining the state of a client-side application — such as the current screen, entered data, user preferences, etc.</li>\n<li>utilities which access local data or files and have strict privacy requirements</li>\n<li>progressive web apps (PWAs) which work offline</li>\n</ul>\n<p>Here are ten ways to store browser data:</p>\n<ul>\n<li>with <a href=\"#toc_1\">JavaScript variables</a></li>\n<li>via <a href=\"#toc_2\">DOM Node Storage</a></li>\n<li>via <a href=\"#toc_3\">Web Storage</a> (<code>localStorage</code> and <code>sessionStorage</code>)</li>\n<li>with <a href=\"#toc_4\">IndexedDB</a></li>\n<li>with the <a href=\"#toc_5\">Cache API</a> (don’t use <a href=\"#toc_6\">AppCache</a>!)</li>\n<li>via the <a href=\"#toc_7\">File System Access API</a></li>\n<li>via the <a href=\"#toc_8\">File and Directory Entries API</a></li>\n<li>with <a href=\"#toc_9\">cookies</a></li>\n<li>by using <a href=\"#toc_10\"><code>window.name</code></a></li>\n<li>with <a href=\"#toc_11\">WebSQL</a></li>\n</ul>\n<p>This article digs into these ten different ways to store data in the browser, covering their limits, pros, cons, and the best uses of each technique.</p>\n<p>Before we browse the options, a quick note about data persistence …</p>\n<h2 id=\"toc_0\">Data Persistence</h2>\n<p>In general, data you store will either be:</p>\n<ol>\n<li><em>persistent</em>: it remains until your code chooses to delete it, or</li>\n<li><em>volatile</em>: it remains until the browser session ends, typically when the user closes the tab</li>\n</ol>\n<p>The reality is more nuanced.</p>\n<p>Persistent data can be blocked or deleted by the user, operating system, browser, or plugins at any point. The browser can decide to delete older or larger items as it approaches the capacity allocated to that storage type.</p>\n<p>Browsers also record page state. You can navigate away from a site and click back or close and re-open a tab; the page <em>should</em> look identical. Variables and data regarded as session-only are still available.</p>\n<h2 id=\"toc_1\">1. JavaScript Variables</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: right\">metric</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: right\">capacity</td>\n<td>no strict limit but browser slowdowns or crashes could occur as you fill memory</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">read/write speed</td>\n<td>the fastest option</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">persistence</td>\n<td>poor: data is wiped by a browser refresh</td>\n</tr>\n</tbody>\n</table>\n<p>Storing state in JavaScript variables is the quickest and easiest option. I’m sure you don’t need an example, but …</p>\n<div>\n<pre><code class=\"language-javascript\">const\r\n  a = 1,\r\n  b = &#39;two&#39;,\r\n  state = {\r\n    msg:  &#39;Hello&#39;,\r\n    name: &#39;Craig&#39;\r\n  };</code></pre>\n</div>\n<p>Advantages:</p>\n<ul>\n<li>easy to use</li>\n<li>fast</li>\n<li>no need for serialization or de-serialization</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>fragile: refreshing or closing the tab wipes everything</li>\n<li>third-party scripts can examine or overwrite global (<code>window</code>) values</li>\n</ul>\n<p>You’re already using variables. You could consider permanently storing variable state when the <a href=\"https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event\">page unloads</a>.</p>\n<h2 id=\"toc_2\">2. DOM Node Storage</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: right\">metric</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: right\">capacity</td>\n<td>no strict limit but not ideal for lots of data</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">read/write speed</td>\n<td>fast</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">persistence</td>\n<td>poor: data can be wiped by other scripts or a refresh</td>\n</tr>\n</tbody>\n</table>\n<p>Most DOM elements, either on the page or in-memory, can store values in named attributes. It’s safer to use attribute names prefixed with <code>data-</code>:</p>\n<ol>\n<li>the attribute will never have associated HTML functionality</li>\n<li>you can access values via a <a href=\"https://developer.mozilla.org/docs/Web/API/HTMLOrForeignElement/dataset\"><code>dataset</code> property</a> rather than the longer <a href=\"https://developer.mozilla.org/docs/Web/API/Element/setAttribute\"><code>.setAttribute()</code></a> and <a href=\"https://developer.mozilla.org/docs/Web/API/Element/getAttribute\"><code>.getAttribute()</code></a> methods.</li>\n</ol>\n<p>Values are stored as strings so serialization and de-serialization may be required. For example:</p>\n<div>\n<pre><code class=\"language-javascript\">// locate &lt;main&gt; element\r\nconst main = document.querySelector(&#39;main&#39;);\r\n\r\n// store values\r\nmain.dataset.value1 = 1;\r\nmain.dataset.state = JSON.stringify({ a:1, b:2 });\r\n\r\n// retreive values\r\nconsole.log( main.dataset.value1 ); // &quot;1&quot;\r\nconsole.log( JSON.parse(main.dataset.state).a ); // 1</code></pre>\n</div>\n<p>Advantages:</p>\n<ul>\n<li>you can define values in JavaScript or HTML — such as <code>&lt;main data-value1=&quot;1&quot;&gt;</code></li>\n<li>useful for storing the state of a specific component</li>\n<li>the DOM is fast! (contrary to popular opinion)</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>fragile: refreshing or closing the tab wipes everything (unless a value is server-rendered into the HTML)</li>\n<li>strings only: requires serialization and de-serialization</li>\n<li>a larger DOM affects performance</li>\n<li>third-party scripts can examine or overwrite values</li>\n</ul>\n<p>DOM node storage is slower than variables. Use it sparingly in situations where it’s practical to store a component’s state in HTML.</p>\n<h2 id=\"toc_3\">3. Web Storage (<code>localStorage</code> and <code>sessionStorage</code>)</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: right\">metric</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: right\">capacity</td>\n<td>5MB per domain</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">read/write speed</td>\n<td>synchronous operation: can be slow</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">persistence</td>\n<td>data remains until cleared</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/Web_Storage_API\">Web Storage</a> provides two similar APIs to define name/value pairs. Use:</p>\n<ol>\n<li><code>window.localStorage</code> to store persistent data, and</li>\n<li><code>window.sessionStorage</code> to retain session-only data while the browser tab remains open (but see <a href=\"#toc_0\">Data Persistence</a>)</li>\n</ol>\n<p>Store or update named items with <a href=\"https://developer.mozilla.org/docs/Web/API/Storage/setItem\"><code>.setItem()</code></a>:</p>\n<div>\n<pre><code class=\"language-javascript\">localStorage.setItem(&#39;value1&#39;, 123);\r\nlocalStorage.setItem(&#39;value2&#39;, &#39;abc&#39;);\r\nlocalStorage.setItem(&#39;state&#39;, JSON.stringify({ a:1, b:2, c:3 }));</code></pre>\n</div>\n<p>Retrieve them with <a href=\"https://developer.mozilla.org/docs/Web/API/Storage/getItem\">.<code>getItem()</code></a>:</p>\n<div>\n<pre><code class=\"language-javascript\">const state = JSON.parse( localStorage.getItem(&#39;state&#39;) );</code></pre>\n</div>\n<p>And delete them with <a href=\"https://developer.mozilla.org/docs/Web/API/Storage/removeItem\">.<code>removeItem()</code></a>:</p>\n<div>\n<pre><code class=\"language-javascript\">localStorage.removeItem(&#39;state&#39;)</code></pre>\n</div>\n<p>Other properties and methods include:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/Storage/length\"><code>.length</code></a>: the number of items stored</li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/Storage/key\"><code>.key(N)</code></a>: the name of the Nth key</li>\n<li><a href=\"https://developer.mozilla.org/docs/Web/API/Storage/clear\"><code>.clear()</code></a>: delete all stored items</li>\n</ul>\n<p>Changing any value raises a storage event in other browser tabs/windows connected to the same domain. Your application can respond accordingly:</p>\n<div>\n<pre><code class=\"language-javascript\">window.addEventListener(&#39;storage&#39;, s =&gt; {\r\n\r\n  console.log(`item changed: ${ s.key }`);\r\n  console.log(`from value  : ${ s.oldValue }`);\r\n  console.log(`to new value: ${ s.newValue }`);\r\n\r\n});</code></pre>\n</div>\n<p>Advantages:</p>\n<ul>\n<li>simple name/value pair API</li>\n<li>session and persistent storage options</li>\n<li>good browser support</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>strings only: requires serialization and de-serialization</li>\n<li>unstructured data with no transactions, indexing, or search</li>\n<li>synchronous access will affect the performance of large datasets</li>\n</ul>\n<p>Web Storage is ideal for simpler, smaller, ad-hoc values. It’s less practical for storing large volumes of structured information, but you may be able to avoid performance issues by writing data when the <a href=\"https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event\">page unloads</a>.</p>\n<h2 id=\"toc_4\">4. IndexedDB</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: right\">metric</th>\n<th>comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: right\">capacity</td>\n<td>depends on device. At least 1GB, but can be up to 60% of remaining disk space</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">read/write speed</td>\n<td>fast</td>\n</tr>\n<tr>\n<td style=\"text-align: right\">persistence</td>\n<td>data remains until cleared</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://developer.mozilla.org/docs/Web/API/IndexedDB_API\">IndexedDB</a> offers a NoSQL-like low-level API for storing large volumes of data. The store can be indexed, updated using transactions, and searched using asynchronous methods.</p>\n<p>The IndexedDB API is complex and requires some event juggling. The following function opens a database connection when passed a name, version number, and optional upgrade function (called when the version number changes):</p>\n<div>\n<pre><code class=\"language-javascript\">// connect\r\nfunction dbConnect(dbName, version, upgrade) {\r\n\r\n  return new Promise((resolve, reject) =&gt; {\r\n\r\n    const request = indexedDB.open(dbName, version);\r\n\r\n    request.onsuccess = e =&gt; {\r\n      resolve(e.target.result);\r\n    };\r\n\r\n    request.onerror = e =&gt; {\r\n      console.error(`indexedDB error: ${ e.target.errorCode }`);\r\n    };\r\n\r\n    request.onupgradeneeded = upgrade;\r\n\r\n  });\r\n\r\n}</code></pre>\n</div>\n<p>The following code connects to a <code>myDB</code> database and initializes a <code>todo</code> object store (analogous to a SQL table or MongoDB collection). It then defines an auto-incrementing key named <code>id</code>:</p>\n<div>\n<pre><code class=\"language-javascript\">(async () =&gt; {\r\n\r\n  const db = await dbConnect(&#39;myDB&#39;, 1.0, e =&gt; {\r\n\r\n    db = e.target.result;\r\n    const store = db.createObjectStore(&#39;todo&#39;, { keyPath: &#39;id&#39;, autoIncrement: true });\r\n\r\n  })\r\n\r\n})();</code></pre>\n</div>\n<p>Once the <code>db</code> connection is ready, you can <code>.add</code> new data items in a transaction:</p>\n<div>\n<pre><code class=\"language-javascript\">db.transaction([&#39;todo&#39;], &#39;readwrite&#39;)\r\n  .objectStore(&#39;todo&#39;)\r\n  .add({ task: &#39;do something&#39; })\r\n  .onsuccess = () =&gt; console.log( &#39;added&#39; );</code></pre>\n</div>\n<p>And you can retrieve values, such as the first item:</p>\n<div>\n<pre><code class=\"language-javascript\">db.transaction([&#39;todo&#39;], &#39;readonly&#39;)\r\n  .objectStore(&#39;todo&#39;)\r\n  .get(1)\r\n  .onsuccess = data =&gt; console.log( data.target.result );\r\n  // { id: 1, task: &#39;do something&#39; }</code></pre>\n</div>\n<p>Advantages:</p>\n<ul>\n<li>flexible data store with the largest space</li>\n<li>robust transactions, indexing, and search options</li>\n<li>good browser support</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>a complex callback and event-based API</li>\n</ul>\n<p>IndexedDB is the best option for reliably storing large quantities of data, but you’ll want to reach for a wrapper library such as <a href=\"https://www.npmjs.com/package/idb\">idb</a>, <a href=\"https://dexie.org/\">Dexie.js</a>, or <a href=\"https://jsstore.net/\">JsStore</a>.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/client-side-storage-options-comparison/?utm_source=rss\">10 Client-side Storage Options and When to Use Them</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/client-side-storage-options-comparison/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=184842",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Mon, 24 May 2021 16:00:22 GMT"
        ],
        "metaDesc": [
            "Sometimes you want to store data in the browser and not send it to a server. Learn 10 ways to do so, their pros, cons, limits, and use cases."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Immutable Array Methods: How to Write Remarkably Clean JavaScript Code"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/immutable-array-methods-javascript/?utm_source=rss\"\n              title=\"Immutable Array Methods: How to Write Remarkably Clean JavaScript Code\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032818Immutability.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032818Immutability-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032818Immutability-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032818Immutability-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032818Immutability-1536x808.jpg 1536w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622032818Immutability.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In our <a href=\"https://www.sitepoint.com/variable-assignment-mutation-javascript\">guide to variable assignment and mutation in JavaScript</a>, we covered the concepts of variable assignment and mutation, looking at issues with mutations and how to manage them. In this article, we&rsquo;ll see how JavaScript makes life extra difficult for us by including array methods that mutate the original array as part of the language. But it&rsquo;s not all doom and gloom. By the end of the article, we&rsquo;ll have written some functions that fix these issues — and you&rsquo;ll be able to start using these functions in your code today.</strong></p>\n<p><em>If you&rsquo;d like to explore this topic in greater detail, or get up to speed with modern JavaScript, check out my new book <a href=\"https://www.sitepoint.com/premium/books/learn-to-code-with-javascript/\"><strong>Learn to Code with JavaScript</strong></a>.</em></p>\n<h2 id=\"toc_0\">Array Mutations in JavaScript</h2>\n<p>Arrays in JavaScript are just objects, which means they can be mutated. In fact, many of the built-in array methods will mutate the array itself. This can mean the golden rule from above gets broken, just by using one of the built-in methods.</p>\n<p>Here&rsquo;s an example showing how it can potentially cause some problems:</p>\n<div>\n<pre><code class=\"language-javascript\">const numbers = [1,2,3];\r\nconst countdown = numbers.reverse();</code></pre>\n</div>\n<p>This code looks fine. We have an array called <code>numbers</code> and we want another array called <code>countdown</code> that lists the numbers in reverse order. And it seems to work. If you check the value of the <code>countdown</code> variable, it&rsquo;s what we expect:</p>\n<div>\n<pre><code class=\"language-javascript\">countdown\r\n&lt;&lt; [3,2,1]</code></pre>\n</div>\n<p>But the unfortunate side effect of the operation is that the <code>reverse()</code> method has mutated the <code>numbers</code> array as well, which is not what we wanted at all:</p>\n<div>\n<pre><code class=\"language-javascript\">numbers\r\n&lt;&lt; [3,2,1]</code></pre>\n</div>\n<p>Even worse, the two variables both reference the same array, so any changes that we subsequently make to one will affect the other. For example, if we use the <code>Array.prototype.push()</code> method to add a value of <code>0</code> to the end of the <code>countdown</code> array, it will do the same to the <code>numbers</code> array (because they&rsquo;re both referencing the same array):</p>\n<div>\n<pre><code class=\"language-javascript\">countdown.push(0)\r\n&lt;&lt; 4\r\ncountdown\r\n&lt;&lt; [3,2,1,0]\r\nnumbers\r\n&lt;&lt; [3,2,1,0]</code></pre>\n</div>\n<p>It&rsquo;s these sort of side effects that can go unnoticed — especially in the depths of a large application — and cause some very hard to track bugs.</p>\n<p>And <code>reverse</code> isn&rsquo;t the only array method that causes this sort of mutation mischief. Here&rsquo;s a list of array methods that mutate the array they&rsquo;re called on:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">Array.prototype.pop()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">Array.prototype.push()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\">Array.prototype.shift()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\">Array.prototype.unshift()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">Array.prototype.reverse()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">Array.prototype.sort()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">Array.prototype.splice()</a></li>\n</ul>\n<p>Slightly confusingly, arrays also have some methods that don&rsquo;t mutate the original array, but return a new array instead:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">Array.prototype.slice()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">Array.prototype.concat()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.prototype.map()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.prototype.filter()</a></li>\n</ul>\n<p>These methods will return a new array based on the operation they&rsquo;ve carried out. For example, the <code>map()</code> method can be used to double all the numbers in an array:</p>\n<div>\n<pre><code class=\"language-javascript\">const numbers = [1,2,3];\r\nconst evens = numbers.map(number =&gt; number * 2);\r\n&lt;&lt; [2,4,6]</code></pre>\n</div>\n<p>Now, if we check the <code>numbers</code> array, we can see that it hasn&rsquo;t been affected by calling the method:</p>\n<div>\n<pre><code class=\"language-javascript\">numbers\r\n&lt;&lt; [1,2,3]</code></pre>\n</div>\n<p>There doesn&rsquo;t seem to be any reason for why some methods mutate the array and others don&rsquo;t (although the trend with recent additions is to make them non-mutating), so it can be hard to remember which do which. </p>\n<p>Ruby has a nice solution to this in the way it uses bang notation. Any method that causes a permanent change to the object calling it ends in a bang, so <code>[1,2,3].reverse!</code> will reverse the array, whereas <code>[1,2,3].reverse</code> will return a new array with the elements reversed.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/immutable-array-methods-javascript/?utm_source=rss\">Immutable Array Methods: How to Write Remarkably Clean JavaScript Code</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/immutable-array-methods-javascript/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=183814",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Darren Jones"
        ],
        "pubDate": [
            "Tue, 18 May 2021 16:00:38 GMT"
        ],
        "metaDesc": [
            "Mutation can be a pain when dealing with JavaScript's built-in array methods. Learn how write functions that will make your life much easier!"
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Safari Web Extensions go mobile"
        ],
        "link": [
            "https://frontendfoc.us/issues/494"
        ],
        "description": [
            "\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align=\"center\" border=\"0\">\n  <tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <div>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n      <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0>\n        <tr>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <a href=\"https://frontendfoc.us/link/109270/rss\" style=\" color: #D94306; font-weight: 600;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1602675575/hhmdxfk96fnbq3effjk1.png\" width=\"60\" style=\"margin-top: 7px;     line-height: 100%; \"></a>\n          </td>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <div style=\"margin-left: 25px; color: #fff;\">\n<p>Frontend Focus</p>\n<p>#​494 — June 9, 2021 | <a href=\"https://frontendfoc.us/link/109271/rss\" style=\"color: #fff;  font-weight: 600;\">Read on the web</a></p>\n</div>\n          </td>\n        </tr>\n      </table>\n     </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/109272/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1623238888/p3iww5h7idszz4zkvu4b.jpg\" width=\"640\" style=\"      line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109272/rss\" title=\"www.slashgear.com\" style=\" color: #D94306; font-size: 1.15em; line-height: 1.25em; font-weight: 400;\">Safari Overhaul Includes Tab Groups and Web Extensions On Mobile</a></span> — Apple unveiled its next version of Safari at WWDC earlier this week, featuring a new design, improvements to tab management, and the expansion of web extensions to both iPhone and iPad. If you're feeling spicy and are running the beta you can find <a href=\"https://frontendfoc.us/link/109273/rss\" style=\" color: #D94306;\">Apple's release notes for Safari 15 here</a>.</p>\n  <p>Brittany A. Roston </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/109274/rss\" style=\" color: #D94306;\"><img src=\"https://copm.s3.amazonaws.com/52033e4c.png\" width=\"146\" height=\"110\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109274/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">Let Your Users Import Their Own Data, with Confidence</a></span> — Integrate a production-ready data importer from Flatfile in minutes and let your users import their own data, securely, and with confidence. No Excel formatting, no custom import scripts, and no need to build vs. buy.</p>\n  <p>Flatfile Portal <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109275/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306;\">How To Fix Cumulative Layout Shift (CLS) Issues</a></span> — Google’s Core Web Vitals initiative has seen many sites get busy optimizing their Page Experience to maximize ranking factor. Here, Barry Pollard looks at the Cumulative Layout Shift metric that’s “<em>causing trouble to a lot of sites</em>”, and looks at ways of addressing any issues that come with it.</p>\n  <p>Smashing Magazine </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109276/rss\" title=\"css-tricks.com\" style=\" color: #D94306;\">Looking at WCAG 2.5.5 for Better Target Sizes</a></span> — Ever experienced the frustration of trying to tap a button on a mobile device only to have it do nothing because the target size is just not large enough? Todd dives into all things target size here, with advice on how to get the sizing just right.</p>\n  <p>Todd Libby </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109277/rss\" title=\"css-tricks.com\" style=\" color: #D94306;\">Serverless Functions: The Secret to Ultra-Productive Front-End Teams?</a></span> — The title screams evangelism but it’s really genuine excitement at the opportunities serverless platforms open up for front-end developers.</p>\n  <p>Jason Lengstorf </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n<p><strong>⚡️ Quick bits:</strong></p>\n                  <ul>\n                  <li>Yup, <a href=\"https://frontendfoc.us/link/109278/rss\" style=\" color: #D94306; font-weight: 600;\">large chunks of the web went offline yesterday</a>, following <a href=\"https://frontendfoc.us/link/109279/rss\" style=\" color: #D94306; font-weight: 600;\">disruptions at Fastly</a>. Will be interesting to see a full post-mortem on this one.</li>\n                  \n                                    <li>Version three of <a href=\"https://frontendfoc.us/link/109280/rss\" style=\" color: #D94306; font-weight: 600;\">SF Symbols</a>, Apple's icon library, is out now with over 600 new symbols to use.</li>\n                                    \n                                    <li>Version 4.0 of the <a href=\"https://frontendfoc.us/link/109281/rss\" style=\" color: #D94306; font-weight: 600;\">Vivaldi browser</a> is out now.</li>\n                                    \n                                    <li>Thanks to new JavaScript compiler <a href=\"https://frontendfoc.us/link/109282/rss\" style=\" color: #D94306; font-weight: 600;\">Sparkplug</a>, Chrome is now said to be <a href=\"https://frontendfoc.us/link/109283/rss\" style=\" color: #D94306; font-weight: 600;\">up to 23% faster</a>.</li> \n                                    \n                                                                        <li>Yes, it's in beta, but a floating UI element in Safari for iOS 15 <a href=\"https://frontendfoc.us/link/109284/rss\" style=\" color: #D94306; font-weight: 600;\">looks like it may cause a bit of frontend head-scratching</a>. However, Apple's Jen Simmons reassures us <a href=\"https://frontendfoc.us/link/109285/rss\" style=\" color: #D94306; font-weight: 600;\">it won't be an issue</a>, and <a href=\"https://frontendfoc.us/link/109286/rss\" style=\" color: #D94306; font-weight: 600;\">environment variables will help</a> here.</li> \n                                    \n                                    <li>At least a few of these <a href=\"https://frontendfoc.us/link/109287/rss\" style=\" color: #D94306; font-weight: 600;\">'HTTP status codes as dogs'</a> will crack a smile.</li>\n\n                  </ul>\n                                \n  </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>📙 <strong>Tutorials, Articles &amp; Opinion</strong></p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109288/rss\" title=\"localghost.dev\" style=\" color: #D94306;\">The Right Tag for The Job: Why You Should Use Semantic HTML</a></span> — Here’s a decent guide to semantic HTML: what it is, why it’s so important, and how to use it.</p>\n  <p>Sophie Koonin </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\">▶  <a href=\"https://frontendfoc.us/link/109289/rss\" title=\"blog.testdouble.com\" style=\" color: #D94306;\">How to Find and Remove Dead CSS</a></span> — Do you have old CSS styles hanging around in your project that you’re afraid to remove because you’re not sure if anything else is depending on them? This 25-minute video explores one way to get more confidence about which styles are actually unused and safe to delete.</p>\n  <p>Justin Searls </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109290/rss\" title=\"css-tricks.com\" style=\" color: #D94306;\">VS Code Extensions for HTML</a></span> — Let’s look at some extensions for VS Code that make writing and editing HTML (and languages that are basically HTML with extra powers) better.</p>\n  <p>Chris Coyier </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109291/rss\" title=\"www.techradar.com\" style=\" color: #D94306;\">Can Firefox’s New Look Save The Web Browser?</a></span> — We shared news last week of Firefox 89 — it’s out now, complete with a fresh design. Here’s a quick interview with the team at Mozilla discussing the new look and its accessibility wins.</p>\n  <p>Daryl Baxter </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109292/rss\" title=\"getstream.io\" style=\" color: #D94306;\">New Mobile Chat Kit From Stream</a></span> — Chat UI &amp; SDKs for Figma, Sketch, Flutter, React Native, iOS, &amp; Android. The UI includes flexible assets for creating customized, scalable, and beautiful in-app chat experiences.</p>\n  <p>Stream <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109293/rss\" title=\"colinoakley.medium.com\" style=\" color: #D94306;\">The Web We Choose to Build</a></span> — Establishing principles for what you do can help frame things, and give focus. Here’s some thoughts on defining such principles for user-centred front-end development.</p>\n  <p>Colin Oakley </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109294/rss\" title=\"meyerweb.com\" style=\" color: #D94306;\">Ancestors and Descendants</a></span> — Some more worthwhile reflections from Eric on the evolution of CSS over the past 25 years, warts and all:</p>\n  \n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 20px;\">\n  <p>“I know it’s still fashionable to complain about how CSS is all janky and weird and unapproachable, but child, the wrinkles of today are a sunny park stroll compared to the jagged icebound cliff we faced at the dawn of CSS”</p>\n\n  \n    <p>___<br><a href=\"https://frontendfoc.us/link/109294/rss\" style=\" color: #D94306 !important; font-weight: 400;\">Eric Meyer</a></p>\n  \n</td></tr></table>\n<div style=\"   margin-top: 14px; margin-bottom: 8px;  \"></div>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109295/rss\" style=\" color: #D94306; font-weight: 400 !important;\">How to Create Neon Text With CSS</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Silvia O'Dwyer</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109296/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Three Tips About Flexbox That Will Make Your CSS Better</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Stas Melnikov</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109297/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Getting Started with <code>webpack</code></a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Nwani Victory</span> \n  </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109298/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Senior Frontend Engineer (Remote)</a></span> — We're looking for a Senior Front-End Engineer to join the web team at Unsplash. Small team but big product. Strict TypeScript with plenty of functional programming.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Unsplash</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>🧑‍💻 Got a job listing to share? <em><a href=\"https://frontendfoc.us/link/109299/rss\" style=\" color: #D94306; font-weight: 600;\">Here's how</a></em>.</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>🔧 <strong> Code, Tools and Resources</strong></p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/109300/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1623239188/hsse3biibygdn0hxzjhx.png\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109300/rss\" title=\"daisyui.com\" style=\" color: #D94306;\">daisyUI: A Library of Tailwind CSS Components in Multiple Themes</a></span> — Includes dozens of ready-made components that you can try out using about 20 different themes, all of which are testable live in <a href=\"https://frontendfoc.us/link/109301/rss\" style=\" color: #D94306;\">the docs</a>.</p>\n  <p>Redfern Dev </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109302/rss\" title=\"compressimage.io\" style=\" color: #D94306;\">CompressImage.io: A Client-Side, Privacy-Friendly Compression Tool for PNG and JPG</a></span> — Seems to work really quickly. You can choose from a few different settings and you have the option to convert to WebP format.</p>\n  <p>Towfiq I </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109303/rss\" title=\"assetroulette.com\" style=\" color: #D94306;\">Assetroulette: Randomized Assets for Web Design</a></span> — This is a new spin on placeholder images, allowing you to generate random images, memes, pics from Unsplash, or even a random stylesheet (though we can’t figure how the latter would be useful).</p>\n  <p>Karim Jedda </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109304/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">Remove Guesswork from Website Bugs with Screenshots and Technical Info</a></span></p>\n  <p>BugHerd <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109305/rss\" title=\"github.com\" style=\" color: #D94306;\">ts-audio: Work with AudioContext More Easily</a></span> — Want a demo complete with code? <a href=\"https://frontendfoc.us/link/109306/rss\" style=\" color: #D94306;\">Here you go.</a> You can create audio playlists too.</p>\n  <p>Evandro Leopoldino Gonçalves </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109307/rss\" title=\"layout.bradwoods.io\" style=\" color: #D94306;\">CSS Layout Generator</a></span> — A CSS Grid and Flexbox generator for creating layout components.</p>\n  <p>Brad Woods </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109308/rss\" style=\" color: #D94306; font-weight: 400 !important;\">yare.io: A Real-Time Strategy Game Where You Control Your Units by Writing JavaScript Code</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Vilem Ries</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109309/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Angular Flex-Layout: A Layout API for Angular using Flexbox Media Queries</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Angular</span> \n  </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n\n            \n    </div>\n  </td></tr>\n</table>\n\n\n\n\n<img src=\"https://frontendfoc.us/open/494/rss\" width=\"1\" height=\"1\" />"
        ],
        "pubDate": [
            "Wed, 9 Jun 2021 00:00:00 +0000"
        ],
        "guid": [
            "https://frontendfoc.us/issues/494"
        ],
        "provider": "Frontend Focus"
    },
    {
        "title": [
            "How to See Which Branch Your Teammates are on in VS Code"
        ],
        "author": [
            "SuDa2103"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:20:33 +0000"
        ],
        "link": [
            "https://dev.to/gitlive/how-to-see-which-branch-your-teammates-are-on-in-vs-code-cb1"
        ],
        "guid": [
            "https://dev.to/gitlive/how-to-see-which-branch-your-teammates-are-on-in-vs-code-cb1"
        ],
        "description": [
            "<p><em>\"What branch are you on?\"</em> is often the first question you ask when a teammate says <em>\"The tests aren't passing\"</em> or <em>\"The build failed\"</em>. Here's how you can get an answer to that question without even needing to ask.<br>\nIn VS Code, open up the team tab by clicking on the GitLive icon on the activity bar.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UM7feG5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2f057742ba751f4b670d_P4%25258lkvvRciwZO%252BKdU4Vkg_thumb_337.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--UM7feG5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2f057742ba751f4b670d_P4%25258lkvvRciwZO%252BKdU4Vkg_thumb_337.jpg\" alt=\"vs code view\"></a></p>\n\n<p>This will show a list of your teammates, if they are online (or away) and the issue they are currently working on. Locate the teammate you are interested in and click the arrow on the left-hand side of their avatar.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y2Kg2VaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2ef91526165c62dc08a1_img%25202.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Y2Kg2VaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2ef91526165c62dc08a1_img%25202.png\" alt=\"vs code view\"></a></p>\n\n<p>Now you will see all the repositories they have cloned including the name of their current branch!</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wLyB4Xgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2ef4934bbc85921ee87f_image.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--wLyB4Xgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2ef4934bbc85921ee87f_image.png\" alt=\"vs code view\"></a></p>\n\n<p><strong>NOTE</strong>: If an issue has been connected to the branch you'll see the issue name instead, if that's the case just hover your cursor over the issue name and a tooltip will appear showing you the branch name (and even the commit hash).</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nU5tTMZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2eff1f3a80255c49f6e6_img%25204.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nU5tTMZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/6033cf9dce54c65d97d57571/60dc2eff1f3a80255c49f6e6_img%25204.png\" alt=\"vs code view\"></a></p>\n\n<p>Don't have the GitLive extension installed yet? You can find it <a href=\"https://marketplace.visualstudio.com/items?itemName=TeamHub.teamhub\">here</a> and, if you need help setting it up, follow the instructions <a href=\"https://docs.git.live/docs/installation/\">here</a> .</p>\n\n"
        ],
        "category": [
            "programming",
            "productivity",
            "webdev",
            "vscode"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "ES6 Arrow Functions: Fat and Concise Syntax in JavaScript"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/?utm_source=rss\"\n              title=\"ES6 Arrow Functions: Fat and Concise Syntax in JavaScript\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2018/04/1615529772arrows.jpg\"\n        alt=\"ES6 Arrow Functions: Fat and Concise Syntax in JavaScript\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2018/04/1615529772arrows-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2018/04/1615529772arrows.jpg 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, you&#8217;ll learn all about JavaScript&#8217;s arrow function syntax — including some of the gotchas you need to be aware of when leveraging arrow functions in your code. You&#8217;ll see lots of examples that illustrate how they work.</strong></p>\n<p>Arrow functions were introduced into JavaScript with the release of ECMAScript 2015, also known as ES6. Their concise syntax, and the way they handle the <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\">this</a></em> keyword, are among the main features that have contributed to arrow functions&#8217; considerable success among developers.</p>\n<h2 id=\"turningaprees6functionintoanarrowfunction\">Turning a Pre-ES6 Function into an Arrow Function</h2>\n<p>You could consider functions as a sort of recipe where you store useful instructions to accomplish something you need done in your program, like performing an action or returning a value. By calling your function, you execute the steps included in your recipe, and you can do so every time you call that function without needing to rewrite the recipe again and again. </p>\n<p>Here&#8217;s a standard way to declare a function and then call it in JavaScript: </p>\n<pre><code class=\"javascript language-javascript\">// function declaration\r\nfunction sayHiStranger() {\r\n  return 'Hi, stranger!'\r\n}\r\n\r\n// call the function\r\nsayHiStranger()\r\n</code></pre>\n<p>You can also write the same function as a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">function expression</a>, like this: </p>\n<pre><code class=\"javascript language-javascript\">const sayHiStranger = function () {\r\n  return 'Hi, stranger!'\r\n}\r\n</code></pre>\n<p>Arrow functions are always expressions. Here&#8217;s how you could rewrite the function above using the fat arrow notation:  </p>\n<pre><code class=\"javascript language-javascript\">const sayHiStranger = () =&gt; 'Hi, stranger'\r\n</code></pre>\n<p>The benefits of this include:</p>\n<ul>\n<li>just one line of code </li>\n<li>no <code>function</code> keyword </li>\n<li>no <code>return</code> keyword </li>\n<li>no curly braces {} </li>\n</ul>\n<p>In JavaScript, functions are &#8220;first-class citizens&#8221;. That is, you can store functions in variables, pass them to other functions as arguments, and return them from other functions as values. You can do all this using arrow functions. </p>\n<p>Let&#8217;s go through the various ways you can write arrow functions. </p>\n<h2 id=\"thenoparenssyntax\">The No Parens Syntax</h2>\n<p>In the above example, the function has no parameters. In this case, you must add a set of empty parentheses <code>()</code> before the fat arrow (<code>=&gt;</code>) symbol. The same holds when you have <a href=\"http://jsbin.com/doporef/edit?html,js,console,output\">more than one parameter</a>: </p>\n<pre><code class=\"javascript language-javascript\">const getNetflixSeries = (seriesName, releaseDate) =&gt; `The ${seriesName} series was released in ${releaseDate}`\r\n// call the function\r\nconsole.log(getNetflixSeries('Bridgerton', '2020') )\r\n// output: The Bridgerton series was released in 2020\r\n</code></pre>\n<p>With <a href=\"http://jsbin.com/fitubus/edit?html,js,console,output\">just one parameter</a>, however, you can go ahead and leave out the parentheses (you don&#8217;t have to, but you can):  </p>\n<pre><code class=\"javascript language-javascript\">const favoriteSeries = seriesName =&gt; seriesName === \"Bridgerton\" ? \"Let's watch it\" : \"Let's go out\"\r\n// call the function\r\nconsole.log(favoriteSeries(\"Bridgerton\"))\r\n// output: \"Let's watch it\"\r\n</code></pre>\n<p>Be careful, though. If, for example, you decide to use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\">default parameter</a>, you must <a href=\"http://jsbin.com/cesehiv/edit?html,js,console,output\">wrap it inside parentheses</a>: </p>\n<pre><code class=\"javascript language-javascript\">// with parentheses: correct\r\nconst bestNetflixSeries = (seriesName = \"Bridgerton\") =&gt; `${seriesName} is the best`\r\n// outputs: \"Bridgerton is the best\"\r\nconsole.log(bestNetflixSeries())\r\n\r\n// no parentheses: error\r\nconst bestNetflixSeries = seriesName = \"Bridgerton\" =&gt; `${seriesName} is the best`\r\n// Uncaught SyntaxError: invalid arrow-function arguments (parentheses around the arrow-function may help)\r\n</code></pre>\n<p>And just because you can, doesn&#8217;t mean you should. Mixed with a little bit of light-hearted, well-meaning sarcasm, Kyle Simpson (of You Don&#8217;t Know JS fame) has put his thoughts on omitting parentheses into <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20&#038;%20beyond/fig1.png\">this flow chart</a>.</p>\n<h2 id=\"implicitreturn\">Implicit Return</h2>\n<p>When you only have one expression in your function body, you can keep everything on one line, remove the curly braces, and do away with the <code>return</code> keyword. You&#8217;ve just seen how these nifty one-liners work in the examples above. Here&#8217;s <a href=\"http://jsbin.com/bamudij/edit?html,js,console,output\">one more example</a>, just for good measure. The <code>orderByLikes()</code> function does what it says on the tin: that is, it returns an array of Netflix series objects ordered by the highest number of likes:</p>\n<pre><code class=\"javascript language-javascript\">// using the JS sort() function to sort the titles in descending order \r\n// according to the number of likes (more likes at the top, fewer at the bottom\r\nconst orderByLikes = netflixSeries.sort( (a, b) =&gt; b.likes - a.likes )\r\n\r\n// call the function \r\n// output:the titles and the n. of likes in descending order\r\nconsole.log(orderByLikes)\r\n</code></pre>\n<p>This is cool, but keep an eye on your code&#8217;s readability — especially when sequencing a bunch of arrow functions using one-liners and the no parentheses syntax, like in <a href=\"http://jsbin.com/bicapuf/edit?html,js,console,output\">this example</a>:  </p>\n<pre><code class=\"javascript language-javascript\">const greeter = greeting =&gt; name =&gt; `${greeting}, ${name}!`\r\n</code></pre>\n<p>What&#8217;s going on there? Try using the regular function syntax: </p>\n<pre><code class=\"javascript language-javascript\">function greeter(greeting) {\r\n  return function(name) {\r\n    return `${greeting}, ${name}!` \r\n  }\r\n} \r\n</code></pre>\n<p>Now, you can quickly see how the outer function <code>greeter</code> has a parameter, <code>greeting</code>, and returns an anonymous function. This inner function in its turn has a parameter called <code>name</code> and returns a string using the value of both <code>greeting</code> and <code>name</code>. Here&#8217;s how you can call the function:  </p>\n<pre><code class=\"javascript language-javascript\">const myGreet = greeter('Good morning')\r\nconsole.log( myGreet('Mary') )   \r\n\r\n// output: \r\n\"Good morning, Mary!\" \r\n</code></pre>\n<h3 id=\"watchoutfortheseimplicitreturngotchas\">Watch Out for these Implicit Return Gotchas</h3>\n<p>When your arrow function contains more than one statement, you need to wrap all of them in curly braces and use the <code>return</code> keyword. In the <a href=\"http://jsbin.com/nulexar/edit?html,js,console,output\">code below</a>, the function builds an object containing the title and summary of a few Netflix series (Netflix reviews are from the <a href=\"https://editorial.rottentomatoes.com/guide/best-netflix-shows-and-movies-to-binge-watch-now/\">Rotten Tomatoes</a> website) :</p>\n<pre><code class=\"javascript language-javascript\">const seriesList = netflixSeries.map( series =&gt; {\r\n  const container = {}\r\n  container.title = series.name \r\n  container.summary = series.summary\r\n\r\n  // explicit return\r\n  return container\r\n} )\r\n</code></pre>\n<p>The arrow function inside the <code>.map()</code> function develops over a series of statements, at the end of which it returns an object. This makes using curly braces around the body of the function unavoidable. Also, as you&#8217;re using curly braces, an implicit return is not an option. You must use the <code>return</code> keyword.</p>\n<p>If your arrow function <em>returns an object literal</em> using the implicit return, you need to wrap the object inside round parentheses. Not doing so will result in an error, because the JS engine mistakenly parses the object literal&#8217;s curly braces as the function&#8217;s curly braces. And as you&#8217;ve just noticed above, when you use curly braces in an arrow function, you can&#8217;t omit the return keyword. </p>\n<p>This syntax is demonstrated in the shorter version of the previous code:</p>\n<pre><code class=\"javascript language-javascript\">// Uncaught SyntaxError: unexpected token: ':'\r\nconst seriesList = netflixSeries.map(series =&gt; { title: series.name });\r\n\r\n// Works fine\r\nconst seriesList = netflixSeries.map(series =&gt; ({ title: series.name }));\r\n</code></pre>\n<h2 id=\"youcantnamearrowfunctions\">You Can&#8217;t Name Arrow Functions</h2>\n<p>Functions that don&#8217;t have a name identifier between the <code>function</code> keyword and the parameter list are called <em>anonymous functions</em>. Here&#8217;s what a regular anonymous function expression looks like: </p>\n<pre><code class=\"javascript language-javascript\">const anonymous = function() {\r\n  return 'You can\\'t identify me!' \r\n}\r\n</code></pre>\n<p><strong>Arrow functions are all anonymous functions</strong>: </p>\n<pre><code class=\"javascript language-javascript\">const anonymousArrowFunc = () =&gt; 'You can\\'t identify me!' \r\n</code></pre>\n<p>As of ES6, variables and methods can infer the name of an anonymous function from its syntactic position, using its <code>name</code> property. This makes it possible to identify the function when inspecting its value or reporting an error. </p>\n<p><a href=\"http://jsbin.com/menowoy/edit?html,js,console,output\">Check this out</a> using <code>anonymousArrowFunc</code>: </p>\n<pre><code class=\"javascript language-javascript\">console.log(anonymousArrowFunc.name)\r\n// output: \"anonymousArrowFunc\"\r\n</code></pre>\n<p>But be aware that this inferred <code>name</code> property only exists when the anonymous function is assigned to a variable, as in the examples above. If you use an anonymous function as a callback, for example, you lose this useful feature. This is exemplified in the <a href=\"http://jsbin.com/yofizis/edit?html,js,console,output\">demo below</a> where the anonymous function inside the <code>.setInterval()</code> method can&#8217;t avail itself of the <code>name</code> property:  </p>\n<pre><code class=\"javascript language-javascript\">let counter = 5\r\nlet countDown = setInterval(() =&gt; {\r\n  console.log(counter)\r\n  counter--\r\n  if (counter === 0) {\r\n    console.log(\"I have no name!!\")\r\n    clearInterval(countDown)\r\n  }\r\n}, 1000)\r\n</code></pre>\n<p>And that&#8217;s not all. This inferred <code>name</code> property still doesn&#8217;t work as a proper identifier that you can use to refer to the function from inside itself — such as for recursion, unbinding events, etc. </p>\n<p>The intrinsic anonymity of arrow functions has led Kyle Simpson to express his view on arrow functions as follows:  </p>\n<blockquote>\n<p>Since I don&#8217;t think anonymous functions are a good idea to use frequently in your programs, I&#8217;m not a fan of using the <code>=&gt;</code> arrow function form. — <em><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/apA.md\">You Don&#8217;t Know JS</a></em></p>\n</blockquote>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/?utm_source=rss\">ES6 Arrow Functions: Fat and Concise Syntax in JavaScript</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=123787",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "ES6",
            "JavaScript"
        ],
        "dc:creator": [
            "Maria Antonietta Perna"
        ],
        "pubDate": [
            "Thu, 11 Mar 2021 15:00:14 GMT"
        ],
        "metaDesc": [
            "Arrow functions provide a handy syntax for writing JavaScript functions. Learn about how and when to use them, and about some gotchas to watch out for."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Issue #460"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/_Sr8vPzxwzc/"
        ],
        "pubDate": [
            "Wed, 19 May 2021 20:57:20 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-460/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how Container Queries work, why we need Container Queries in HTML, how to use DevTools for CSS layouts, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.sarasoueidan.com/blog/component-level-art-direction-with-container-queries-and-picture/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Component-Level Art Direction With CSS Container Queries</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://www.sarasoueidan.com/blog/component-level-art-direction-with-container-queries-and-picture/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/component-level-art-direction-with-container-queries-and-picture.jpg\" alt=\"Component-Level Art Direction With CSS Container Queries\" /></a>\n\t\t\t\t\t\t<p>Sara Soueidan discusses why it would be useful and handy to get Container Queries in HTML.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.sarasoueidan.com/blog/component-level-art-direction-with-container-queries-and-picture/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">A Primer On CSS Container Queries</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/complete-guide-css-container-queries.jpg\" alt=\"A Primer On CSS Container Queries\" /></a>\n\t\t\t\t\t\t<p>Stephanie Eckles looks at what problems are Container Queries solving, explains how they work and compare with existing CSS features for layout.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"https://css-weekly.com/advertise/\" target=\"_blank\">From Our Sponsor <small style=\"text-decoration:underline;\">(via Paved)</small></a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/tired-of-cleaning-spreadsheets\">Tired of cleaning spreadsheets?</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/tired-of-cleaning-spreadsheets\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/flatfile-tired-of-cleaning-spreadsheets.jpg\" alt=\"Tired of cleaning spreadsheets?\" /></a>\n\t\t\t\t\t\t<p>Let your customers import their own data, with confidence. No manual formatting, no custom import scripts, and no need to choose build vs. buy. Integrate a production-ready data importer from Flatfile in minutes. <img src='https://www.vpdae.com/open/2327.gif?opens=1' width='1' height='1'></p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/tired-of-cleaning-spreadsheets\">Get a demo</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://chenhuijing.com/blog/devtools-for-css-layouts-2021-edition/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">DevTools for CSS Layouts 2021 Edition</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Chen Hui Jing gives an overview of layout-related DevTools features.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://chenhuijing.com/blog/devtools-for-css-layouts-2021-edition/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/advanced-css-animation-using-cubic-bezier/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Advanced CSS Animation Using cubic-bezier()</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Temani Afif shows you the power of <code>cubic-bezier()</code> and how it can be used to create fancy animations without too much complexity.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/advanced-css-animation-using-cubic-bezier/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/variable-aspect-ratio-card-with-conic-gradients-meeting-along-the-diagonal/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Variable Aspect Ratio Card With Conic Gradients Meeting Along the Diagonal</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ana Tudor demonstrates how to create variable aspect ratio cards with conic gradients.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/variable-aspect-ratio-card-with-conic-gradients-meeting-along-the-diagonal/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://calibreapp.com/blog/cumulative-layout-shift?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Cumulative Layout Shift: Measure and Avoid Visual Instability</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Karolina Szczur explains how to reduce content shifts by monitoring the Core Web Vital metric.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://calibreapp.com/blog/cumulative-layout-shift?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://levelup.gitconnected.com/web-accessibility-for-newbies-1098fa15f9f0?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Web Accessibility for Newbies</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Karina Chow provides introductory information and advice on how to think about and approach web accessibility.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://levelup.gitconnected.com/web-accessibility-for-newbies-1098fa15f9f0?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/polypane2\">Polypane — Build Responsive & Accessible Websites 5x Faster</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/polypane2\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/build-responsive-and-accessible-websites-5x-faster.jpg\" alt=\"Polypane — Build Responsive & Accessible Websites 5x Faster\" /></a>\n\t\t\t\t\t\t<p>Polypane is a standalone browser to guide your web development workflow every step of the way with built-in tools for responsive design, accessibility, meta information, and so much more.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/polypane2\">Try Polypane for free</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://github.com/InstantDomain/instant-vitals?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Instant Vitals</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Instant Vitals is a set of simple tools to track and improve your Web Vitals scores.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://github.com/InstantDomain/instant-vitals?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.euismod.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Anyone Can Learn CSS Grid</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>An interactive tutorial that explains basic CSS Grid concepts.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.euismod.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/amit_sheen/pen/XWMXwvJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Newton's CSS Cradle</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/amit_sheen/pen/XWMXwvJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/05/newtons-css-cradle.jpg\" alt=\"Newton's CSS Cradle\" /></a>\n\t\t\t\t\t\t<p>Amit Sheen created a stunning animation using only CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/amit_sheen/pen/XWMXwvJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/_Sr8vPzxwzc\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-460/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "Adding Voice Search to a React Application"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/voice-search-react/?utm_source=rss\"\n              title=\"Adding Voice Search to a React Application\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623726203voice-search-react.png\"\n        alt=\"Adding Voice Search to a React Application\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623726203voice-search-react-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623726203voice-search-react.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Voice commands are not only for assistants like Google or Alexa. They can also be added to your mobile and desktop apps, offering both extra functionality and even fun for your end users. And adding voice commands or voice search to your apps can be very easy to implement. In this article, we&rsquo;ll use the Web Speech API to build a voice controlled book search application.</strong></p>\n<p>The complete code for what we&rsquo;ll build is available on <a href=\"https://github.com/sitepoint-editors/book-voice-search\">GitHub</a>. And for the impatient, there&rsquo;s a working <a href=\"#demo\">demo</a> of what we&rsquo;ll build at the end of the article.</p>\n<h2 id=\"toc_0\">Introduction to the Web Speech API</h2>\n<p>Before we get started, it’s important to note that the Web Speech API currently has limited <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API#browser_compatibility\">browser support</a>. To follow along with this article, you&rsquo;ll need to <strong>use a supported browser</strong>.</p>\n<p><script src=\"https://cdn.jsdelivr.net/gh/ireade/caniuse-embed/public/caniuse-embed.min.js\"></script></p>\n<p class=\"ciu_embed\" data-feature=\"mdn-api__SpeechRecognition\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\">\n<p><small>Data on support for the mdn-api__SpeechRecognition feature across the major browsers</small></p>\n<p>First, let&rsquo;s see how easy it is to get the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API\">Web Speech API</a> up and running. (You might also like to read SitePoint&rsquo;s <a href=\"https://www.sitepoint.com/introducing-web-speech-api/\">introduction to the Web Speech API</a> and check out some other <a href=\"https://www.sitepoint.com/experimenting-web-speech-api/\">experiments with the Web Speech API</a>.) To start using the Speech API, we just need to instantiate a new <code>SpeechRecognition</code> class to allow us to listen to the user’s voice:</p>\n<div>\n<pre><code class=\"language-javascript\">const SpeechRecognition = webkitSpeechRecognition;\r\nconst speech = new SpeechRecognition();\r\nspeech.onresult = event =&gt; {\r\n   console.log(event);\r\n};\r\nspeech.start();</code></pre>\n</div>\n<p>We start by creating a <code>SpeechRecognition</code> constant, which is equal to the global browser vendor prefix <code>webkitSpeechRecognition</code>. After this, we can then create a speech variable that will be the new instance of our <code>SpeechRecognition</code> class. This will allow us to start listening to the user’s speech. To be able to handle the results from a user’s voice, we need to create an event listener that will be triggered when the user stops speaking. Finally, we call the <code>start</code> function on our class instance. </p>\n<p>When running this code for the first time, the user will be prompted to allow access to the mic. This a security check that the browser puts in place to prevent unwanted snooping. Once the user has accepted, they can start speaking, and they won&rsquo;t be asked for permission again on that domain. After the user has stopped speaking, the <code>onresult</code> event handler function will be triggered. </p>\n<p>The <code>onresult</code> event is passed a <code>SpeechRecognitionEvent</code> object, which is made up of a <code>SpeechRecognitionResultList</code> results array. The <code>SpeechRecognitionResultList</code> object contains <code>SpeechRecognitionResult</code> objects. The first item in the array returns a <code>SpeechRecognitionResult</code> object, which contains a further array. The first item in this array contains the transcript of what the user had spoken. </p>\n<p>The above code can be run from the Chrome DevTools or a normal JavaScript file. Now that we have the basics understood, let’s look at building this into a React application. We can see the results below when running via the Chrome DevTools console. </p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1622796070dev-tools-speechRecognitionEvent.jpg\" alt=\"Browser devtools showing SpeechRecognitionResultList\"/></p>\n<h2 id=\"toc_1\">Using Web Speech in React</h2>\n<p>Using what we&rsquo;ve already learned, it&rsquo;s a simple process to add the Web Speech API to a React application. The only issue we have to deal with is the React component lifecycle. First, let&rsquo;s create a new project with <a href=\"https://reactjs.org/docs/create-a-new-react-app.html#create-react-app\">Create React App</a>, following its getting start guide. This assumes that <a href=\"https://nodejs.org/en/download/current/\">Node</a> is installed on your machine:</p>\n<div>\n<pre><code class=\"language-bash\">npx create-react-app book-voice-search\r\ncd book-voice-search\r\nnpm start</code></pre>\n</div>\n<p>Next, we replace the <code>App</code> file with the code below to define a basic React component. Then we can add some speech logic to it:</p>\n<div>\n<pre><code class=\"language-javascript\">// App.js\r\nimport React from &#39;react&#39;;\r\n\r\nconst App = () =&gt; {\r\n  return (\r\n    &lt;div&gt;\r\n      Example component\r\n    &lt;/div&gt;\r\n  );\r\n};\r\n\r\nexport default App;</code></pre>\n</div>\n<p>This simple component renders a div with some text inside it. Now we can start adding our speech logic to the component. We want to build a component that creates the speech instance, then uses this inside the React lifecycle. When the React component renders for the first time, we want to create the speech instance, start listening to results, and provide the user a way to start the speech recognition. We first need to import some React hooks (you can learn more about the core React hooks <a href=\"https://www.sitepoint.com/react-hooks/\">here</a>), some CSS <a href=\"https://github.com/sitepoint-editors/book-voice-search/blob/main/src/index.css\">styles</a>, and a <a href=\"https://github.com/sitepoint-editors/book-voice-search/blob/main/src/microphone-black-shape.svg\">mic image</a> for our user to click:</p>\n<div>\n<pre><code class=\"language-javascript\">// App.js\r\n\r\nimport { useState, useEffect } from &quot;react&quot;;\r\n\r\nimport &quot;./index.css&quot;;\r\n\r\nimport Mic from &quot;./microphone-black-shape.svg&quot;;</code></pre>\n</div>\n<p>After this, we&rsquo;ll create our speech instance. We can use what we learned earlier when looking at the basics of the Web Speech API. We have to make a few changes to the original code we pasted into the browser developer tools. Firstly, we make the code more robust by adding browser support detection. We can do this by checking if the <code>webkitSpeechRecognition</code> class exists on the window object. This will tell us if the browser knows of the API we want to use. </p>\n<p>Then we change the <code>continuous</code> setting to true. This configures the speech recognition API to keep listening. In our very first example, this was defaulted to false and meant that when the user stopped speaking, the <code>onresult</code> event handler would trigger. But as we&rsquo;re allowing the user to control when they want the site to stop listening, we use <code>continuous</code> to allow the user to talk for as long as they want: </p>\n<div>\n<pre><code class=\"language-javascript\">// App.js\r\nlet speech;\r\nif (window.webkitSpeechRecognition) {\r\n  // eslint-disable-next-line\r\n  const SpeechRecognition = webkitSpeechRecognition;\r\n  speech = new SpeechRecognition();\r\n  speech.continuous = true;\r\n} else {\r\n  speech = null;\r\n}\r\n\r\nconst App = () =&gt; { ... };</code></pre>\n</div>\n<p>Now that we&rsquo;ve set up the speech recognition code, we can start to use this inside the React component. As we saw before, we imported two React hooks — the <code>useState</code> and <code>useEffect</code> hooks. These will allow us to add the <code>onresult</code> event listener and store the user transcript to state so we can display it on the UI:</p>\n<div>\n<pre><code class=\"language-jsx\">// App.js\r\nconst App = () =&gt; {\r\n const [isListening, setIsListening] = useState(false);\r\n const [text, setText] = useState(&quot;&quot;);\r\n const listen = () =&gt; {\r\n   setIsListening(!isListening);\r\n   if (isListening) {\r\n     speech.stop();\r\n   } else {\r\n     speech.start();\r\n   }\r\n };\r\n\r\n useEffect(() =&gt; {\r\n  //handle if the browser does not support the Speech API\r\n   if (!speech) {\r\n      return;\r\n    }\r\n   speech.onresult = event =&gt; {\r\n     setText(event.results[event.results.length - 1][0].transcript);\r\n   };\r\n }, []);\r\n\r\n return (\r\n   &lt;&gt;\r\n     &lt;div className=&quot;app&quot;&gt;\r\n       &lt;h2&gt;Book Voice Search&lt;/h2&gt;\r\n       &lt;h3&gt;Click the Mic and say an author&#39;s name&lt;/h3&gt;\r\n       &lt;div&gt;\r\n         &lt;img\r\n           className={`microphone ${isListening &amp;&amp; &quot;isListening&quot;}`}\r\n           src={Mic}\r\n           alt=&quot;microphone&quot;\r\n           onClick={listen}\r\n         /&gt;\r\n       &lt;/div&gt;\r\n       &lt;p&gt;{text}&lt;/p&gt;\r\n     &lt;/div&gt;\r\n   &lt;/&gt;\r\n );\r\n}\r\n\r\nexport default App;</code></pre>\n</div>\n<p>In our component, we firstly declare two state variables — one to hold the transcript text from the user’s speech, and one to determine if our application is listening to the user. We call the React <code>useState</code> hook, passing the default value of <code>false</code> for <code>isListening</code> and an empty string for text. These values will be updated later in the component based on the user&rsquo;s interactions. </p>\n<p>After we set up our state, we create a function that will be triggered when the user clicks the mic image. This checks if the application is currently listening. If it is, we stop the speech recognition; otherwise, we start it. This function is later added to the <code>onclick</code> for the mic image. </p>\n<p>We then need to add our event listener to capture results from the user. We only need to create this event listener once, and we only need it when the UI has rendered. So we can use a <code>useEffect</code> hook to capture when the component has mounted and create our <code>onresult</code> event. We also pass an empty array to the <code>useEffect</code> function so that it will only run once. </p>\n<p>Finally, we can render out the UI elements needed to allow the user to start talking and see the text results. </p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/voice-search-react/?utm_source=rss\">Adding Voice Search to a React Application</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/voice-search-react/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191752",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Chris Laughlin"
        ],
        "pubDate": [
            "Mon, 14 Jun 2021 16:00:27 GMT"
        ],
        "metaDesc": [
            "Ever thought of adding voice search to your app? It's quite easy! Learn how to use the Web Speech API to build a voice controlled app."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Develop WordPress Locally with DevKinsta"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/how-to-develop-wordpress-locally-with-devkinsta/?utm_source=rss\"\n              title=\"How to Develop WordPress Locally with DevKinsta\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622514635devkinsta.jpg\"\n        alt=\"How to Develop WordPress Locally with DevKinsta\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622514635devkinsta-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622514635devkinsta-768x405.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/05/1622514635devkinsta.jpg 968w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Local development is the practice of building, editing, and testing code on a local machine, without the need for internet connectivity.</strong> </p>\n<p>The benefits are plentiful:</p>\n<ul>\n<li>You can work on your own code (or your client’s code) from anywhere.</li>\n<li>You can debug plugins and themes within different environments with a few clicks.</li>\n<li>You can expedite your development and web design workflow by tweaking things locally as you need and pushing them to a <a href=\"https://kinsta.com/knowledgebase/staging-environment/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\">staging environment</a>.</li>\n</ul>\n<p><!-- [TOC] --></p>\n<h2 id=\"introducingdevkinsta\">Introducing DevKinsta</h2>\n<div style=\"position: relative; padding-bottom: 56.25%; overflow: hidden; margin: 32px 0;\">\n<iframe style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0;\" src=\"https://www.youtube.com/embed/f0sUUlnDgH8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><br />\n</iframe>\n</div>\n<p><a href=\"https://kinsta.com/devkinsta/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\">DevKinsta</a> is Kinsta’s <strong>free</strong> suite of tools for local WordPress development that lets you create local instances of WordPress with a complete hosting stack consisting of PHP, Nginx, and MySQL in just a few minutes. </p>\n<p>DevKinsta comes with a solid and ever-growing list of features such as:</p>\n<ul>\n<li>one-click WordPress site creation</li>\n<li>PHP 7.x and 8.x support</li>\n<li>local email management</li>\n<li>built-in database manager</li>\n<li>seamless integration with MyKinsta</li>\n<li>a community of WordPress experts</li>\n</ul>\n<p>DevKinsta supports macOS, Windows, and Ubuntu/Linux, and is available for free to everyone, not just Kinsta customers. </p>\n<h3 id=\"howtodownloaddevkinsta\">How to download DevKinsta</h3>\n<div style=\"position: relative; padding-bottom: 56.25%; overflow: hidden; margin: 32px 0;\">\n<iframe style=\"width: 100%; height: 100%; position: absolute; top: 0; left: 0;\" src=\"https://www.youtube.com/embed/4AiJgowutl8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><br />\n</iframe>\n</div>\n<p>DevKinsta is available for macOS, Windows, and Ubuntu/Linux. Here’s how to get started:</p>\n<ol>\n<li>Visit kinsta.com/devkinsta and click the <strong>Download</strong> button.</li>\n<li>Add your name and email address in the modal window, then click the button.</li>\n<li>The download process will initiate automatically and, based on your operating system, you’ll be downloading either the <code>.dmg</code>, <code>.exe</code> file, or <code>.deb</code>.</li>\n<li>Click the file and kick off the installation process.</li>\n</ol>\n<p>When you start DevKinsta for the first time, <a href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop</a> will be installed as a dependency. DevKinsta uses Docker Desktop for creating containerized WordPress environments.</p>\n<p>During the DevKinsta installation process, you may see a popup message that says “Docker Desktop needs privileged access”. If you see that message, click <strong>Okay</strong> and provide the password for your user account so Docker Desktop can be installed correctly.</p>\n<p>After you provide the password for installation, DevKinsta will install Docker Desktop along with some Docker images. The installation can take some time depending on the speed of your internet connection, so feel free to step away from the computer for a while.</p>\n<h3 id=\"systemrequirements\">System requirements</h3>\n<p>To successfully install DevKinsta, you’ll need to make sure your local machine meets the following requirements:</p>\n<ul>\n<li>at least 5 GB of disk space. 20 GB+ is recommended</li>\n<li>at least 1 GB of RAM. 2 GB+ is recommended</li>\n<li>a stable internet connection for the download</li>\n<li>virtualization enabled in BIOS</li>\n</ul>\n<p>For more detailed information, please make sure to go through the <a href=\"https://kinsta.com/knowledgebase/devkinsta/installation/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\">recommended installation process in our documentation</a>.</p>\n<h2 id=\"howtocreatealocalwordpresssitewithdevkinsta\">How to Create a Local WordPress Site with DevKinsta</h2>\n<p>DevKinsta supports three methods for creating local WordPress sites:</p>\n<ol>\n<li><strong>New WordPress Site</strong> lets you create a local site with the default hosting stack consisting of Nginx, MySQL, PHP 7.4, and the latest version of WordPress.</li>\n<li><strong>Import from Kinsta</strong> lets you clone a site hosted on Kinsta to your local computer with just a few clicks. After you’re finished with your work, you can even push changes back to a Kinsta staging environment!</li>\n<li><strong>Custom Site</strong> lets you create a local site with a customized <a href=\"https://kinsta.com/blog/fastest-wordpress-hosting/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\">hosting stack</a>. This option allows you to <a href=\"https://kinsta.com/blog/install-php/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\">choose your PHP version</a>, specify your database name, and enable <a href=\"https://kinsta.com/blog/wordpress-multisite/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\">WordPress multisite</a>.</li>\n</ol>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/16225104351-devkinsta-create-new-site.png\" /><span style=\"display:block; font-size:0.8em; text-align:center; margin: 0;\">Creating a new site with DevKinsa</span>\n</div>\n<h3 id=\"newwordpresssite\">New WordPress Site</h3>\n<p>To get started, select the <a href=\"https://kinsta.com/knowledgebase/devkinsta/creating-a-site/#new-wordpress-site/?utm_source=sitepoint&#038;utm_medium=article&#038;utm_campaign=devkinsta\"><strong>New WordPress Site</strong> option</a>. For this site creation method, all you have to do is specify a site name, WordPress admin username, and WordPress admin password. After you’ve filled in these three fields, click <strong>Create Site</strong>.</p>\n<div style=\"margin-bottom: 1.5em;\">\n<img style=\"margin-bottom: 0.5em;\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/05/16225104782-devkinsta-new-wordpress-site-settings.png\" /><span style=\"display:block; font-size:0.8em; text-align:center; margin: 0;\">Create a new WordPress site in DevKinsta</span>\n</div>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/how-to-develop-wordpress-locally-with-devkinsta/?utm_source=rss\">How to Develop WordPress Locally with DevKinsta</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/how-to-develop-wordpress-locally-with-devkinsta/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=190532",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web",
            "WordPress"
        ],
        "dc:creator": [
            "SitePoint Team"
        ],
        "pubDate": [
            "Mon, 31 May 2021 16:00:00 GMT"
        ],
        "metaDesc": [
            "Looking for an easy way to develop WordPress locally? Learn how build, edit and test your WP site locally with the free DevKinsta tool."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Use JSON Data Fields in MySQL Databases"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/use-json-data-fields-mysql-databases/?utm_source=rss\"\n              title=\"How to Use JSON Data Fields in MySQL Databases\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2016/04/1616284736db.jpg\"\n        alt=\"How to Use JSON Data Fields in MySQL Databases\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2016/04/1616284736db-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2016/04/1616284736db-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2016/04/1616284736db-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2016/04/1616284736db.jpg 1900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>My article &#8220;<a style=\"font-weight:bold\" href=\"http://www.sitepoint.com/sql-vs-nosql-differences/\">SQL vs NoSQL: The Differences</a>&#8221; noted that the line between SQL and NoSQL databases has become increasingly blurred, with each camp adopting features from the other. MySQL 5.7+ InnoDB databases and PostgreSQL 9.2+ both directly support JSON document types in a single field. In this article, we&#8217;ll examine the MySQL 8.0 JSON implementation in more detail.</strong></p>\n<p>Note that any database will accept JSON documents as a single string blob. However, MySQL and PostgreSQL support validated JSON data in real key/value pairs rather than a basic string.</p>\n<h2 id=\"justbecauseyoucanstorejsonhellip\">Just Because You Can Store JSON &hellip;</h2>\n<p><em>&hellip; it doesn&#8217;t follow you should.</em></p>\n<p>Normalization is a technique used to optimize the database structure. The First Normal Form (1NF) rule governs that every column should hold a single value — which is clearly broken by storing multi-value JSON documents.</p>\n<p>If you have clear relational data requirements, use appropriate single-value fields. JSON should be used sparingly as a last resort. JSON value fields can&#8217;t be indexed, so avoid using it on columns which are updated or searched regularly. In addition, fewer client applications support JSON and the technology is newer, so it could be less stable than other types.</p>\n<p>That said, there are good JSON use cases for sparsely populated data or custom attributes.</p>\n<h2 id=\"createatablewithajsonfield\">Create a Table With a JSON Field</h2>\n<p>Consider a shop selling books. All books have an ID, ISBN, title, publisher, number of pages and other clear relational data. Presume you want to add any number of category tags to each book. You could achieve this in SQL using:</p>\n<ol>\n<li>a <strong>tag</strong> table which stored each tag name with a unique ID, and</li>\n<li>a <strong>tagmap</strong> table with many-to-many records mapping book IDs to tag IDs</li>\n</ol>\n<p>It&#8217;ll work, but it&#8217;s cumbersome and considerable effort for a minor feature. Therefore, you can define a <strong>tags</strong> JSON field in your MySQL database&#8217;s <strong>book</strong> table:</p>\n<pre><code class=\"sql language-sql\">CREATE TABLE `book` (\r\n  `id` MEDIUMINT(8) UNSIGNED NOT NULL AUTO_INCREMENT,\r\n  `title` VARCHAR(200) NOT NULL,\r\n  `tags` JSON DEFAULT NULL,\r\n  PRIMARY KEY (`id`)\r\n) ENGINE=INNODB;\r\n</code></pre>\n<p>Note that JSON columns can&#8217;t have a default value, be used as a primary key, be used as a foreign key, or have an index. You can create <a href=\"https://dev.mysql.com/doc/refman/en/create-table-secondary-indexes.html\">secondary indexes on generated virtual columns</a>, but it&#8217;s easier and more practical to retain a value in a separate field if indexes are required.</p>\n<h2 id=\"addingjsondata\">Adding JSON Data</h2>\n<p>Whole JSON documents can be passed in <strong>INSERT</strong> or <strong>UPDATE</strong> statements. For example, our book tags can be passed as an array (inside a string):</p>\n<pre><code class=\"sql language-sql\">INSERT INTO `book` (`title`, `tags`)\r\nVALUES (\r\n  'ECMAScript 2015: A SitePoint Anthology',\r\n  '[\"JavaScript\", \"ES2015\", \"JSON\"]'\r\n);\r\n</code></pre>\n<p>JSON can also be created with these:</p>\n<ul>\n<li>\n<p><a href=\"https://dev.mysql.com/doc/refman/en/json-creation-functions.html#function_json-array\">JSON_ARRAY() function</a>, which creates arrays. For example:</p>\n<pre><code class=\"sql language-sql\">-- returns [1, 2, \"abc\"]:\r\nSELECT JSON_ARRAY(1, 2, 'abc');\r\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://dev.mysql.com/doc/refman//en/json-creation-functions.html#function_json-object\">JSON_OBJECT() function</a>, which creates objects. For example:</p>\n<pre><code class=\"sql language-sql\">-- returns {\"a\": 1, \"b\": 2}:\r\nSELECT JSON_OBJECT('a', 1, 'b', 2);\r\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://dev.mysql.com/doc/refman//en/json-creation-functions.html#function_json-quote\">JSON_QUOTE() function</a>, which quotes a string as a JSON value. For example:</p>\n<pre><code class=\"sql language-sql\">-- returns \"[1, 2, \\\"abc\\\"]\":\r\nSELECT JSON_QUOTE('[1, 2, \"abc\"]');\r\n</code></pre>\n</li>\n<li>\n<p>or you can <code>(CAST anyValue AS JSON)</code>.</p>\n</li>\n</ul>\n<p>The <a href=\"https://dev.mysql.com/doc/refman//en/json-attribute-functions.html#function_json-type\">JSON_TYPE() function</a> allows you to check JSON value types. It should return OBJECT, ARRAY, a scalar type (INTEGER, BOOLEAN, etc), NULL, or an error. For example:</p>\n<pre><code class=\"sql language-sql\">-- returns ARRAY:\r\nSELECT JSON_TYPE('[1, 2, \"abc\"]');\r\n\r\n-- returns OBJECT:\r\nSELECT JSON_TYPE('{\"a\": 1, \"b\": 2}');\r\n\r\n-- returns an error:\r\nSELECT JSON_TYPE('{\"a\": 1, \"b\": 2');\r\n</code></pre>\n<p>The <a href=\"https://dev.mysql.com/doc/refman//en/json-attribute-functions.html#function_json-valid\">JSON_VALID() function</a> returns 1 if the JSON is valid or 0 otherwise:</p>\n<pre><code class=\"sql language-sql\">-- returns 1:\r\nSELECT JSON_TYPE('[1, 2, \"abc\"]');\r\n\r\n-- returns 1:\r\nSELECT JSON_TYPE('{\"a\": 1, \"b\": 2}');\r\n\r\n-- returns 0:\r\nSELECT JSON_TYPE('{\"a\": 1, \"b\": 2');\r\n</code></pre>\n<p>Attempting to insert an invalid JSON document will raise an error and the whole record will not be inserted/updated.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/use-json-data-fields-mysql-databases/?utm_source=rss\">How to Use JSON Data Fields in MySQL Databases</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/use-json-data-fields-mysql-databases/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "http://www.sitepoint.com/?p=129275",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Databases",
            "Open Source",
            "Programming",
            "Web"
        ],
        "dc:creator": [
            "Craig Buckler"
        ],
        "pubDate": [
            "Tue, 23 Mar 2021 19:00:00 GMT"
        ],
        "metaDesc": [
            "MySQL 5.7+ InnoDB databases and PostgreSQL 9.2+ support JSON document types in a single field. We explore the MySQL 8.0 JSON implementation in more detail."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How I Built a Wheel of Fortune JavaScript Game for My Zoom Group"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/javascript-game-zoom-group/?utm_source=rss\"\n              title=\"How I Built a Wheel of Fortune JavaScript Game for My Zoom Group\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775759zoom-game-sm.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775759zoom-game-sm-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775759zoom-game-sm-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775759zoom-game-sm-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775759zoom-game-sm.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, I describe how I developed a JavaScript “Wheel of Fortune” game to make online meetings via Zoom a little more fun during the global pandemic.</strong></p>\n<p>The current pandemic has forced many social activities to go virtual. Our local Esperanto group, for example, now meets online (instead of in person) for our monthly language study meetups. And as the group’s organizer, I&#8217;ve had to to re-think many of our activities because of the coronavirus. Previously, I could add watching a film, or even a stroll through the park, to our mix of activities in an effort to avoid fatigue (constant grammar drills don’t encourage repeat attendance). </p>\n<p>Our new Wheel of Fortune game was well received. Of course, SitePoint is a tech blog, so I’ll be presenting an overview of what went into building a rudimentary version of the game to screenshare in our online meetings. I’ll discuss some of the trade-offs I made along the way, as well as highlight some possibilities for improvement and things I should have done differently in hindsight.</p>\n<h2 id=\"firstthingsfirst\">First Things First</h2>\n<p>If you’re from the United States, you’re probably already familiar with <a href=\"https://en.wikipedia.org/wiki/Wheel_of_Fortune_%28American_game_show%29\">Wheel of Fortune</a>, as it’s the longest-running American game show in history. (Even if you’re not in the United States, you’re probably familiar with some variant of the show, as it’s been adapted and aired in over 40 international markets.) The game is essentially Hangman: contestants try to solve a hidden word or phrase by guessing its letters. Prize amounts for each correct letter is determined by spinning a large roulette-style wheel bearing dollar amounts — and the dreaded Bankrupt spots. A contestant spins the wheel, guesses a letter, and any instances of said letter in the puzzle are revealed. Correct guesses earn the contestant another chance to spin and guess, while incorrect guesses advance game play to the next contestant. The puzzle is solved when a contestant successfully guesses the word or phrase. The rules and various elements of the game have been tweaked over the years, and you can certainly adapt your own version to the needs of your players.</p>\n<p>For me, the first order of business was to decide how we physically (virtually) would play the game. I only needed the game for one or two meetings, and I wasn’t willing to invest a lot of time building a full-fledged gaming platform, so building the app as a web page that I could load locally and screenshare with others was fine. I would emcee the activity and drive the gameplay with various keystrokes based on what the players wanted. I also decided to keep score using pencil and paper —something I’d later regret. But in the end, plain ol’ JavaScript, a little bit of canvas, and a handful of images and sound effect files was all I needed to build the game.</p>\n<h2 id=\"thegameloopandgamestate\">The Game Loop and Game State</h2>\n<p>Although I was envisioning this as a “quick and dirty” project rather than some brilliantly coded masterpiece following every known best practice, my first thought was still to start building a <a href=\"https://www.sitepoint.com/quick-tip-game-loop-in-javascript/\">game loop</a>. Generally speaking, gaming code is a state machine that maintains variables and such, representing the current state of the game with some extra code bolted on to handle user input, manage/update the state, and render the state with pretty graphics and sound effects. Code known as the game loop repeatedly executes, triggering the input checks, state updates, and rendering. If you’re going to build a game properly, you’ll most likely be following this pattern. But I soon realized I didn’t need constant state monitoring/updating/rendering, and so I forwent the game loop in favor of basic event handling.</p>\n<p>In terms of maintaining state, the code needed to know the current puzzle, which letters have been guessed already, and which view to display (either the puzzle board or the spinning wheel). Those would be globally available to any callback logic. Any activities within the game would be triggered when handling a keypress.</p>\n<p>Here’s what the core code started to look like:</p>\n<pre><code class=\"javascript language-javascript\">(function (appId) {\r\n  // canvas context\r\n  const canvas = document.getElementById(appId);\r\n  const ctx = canvas.getContext('2d');\r\n\r\n  // state vars\r\n  let puzzles = [];\r\n  let currentPuzzle = -1;\r\n  let guessedLetters = [];\r\n  let isSpinning = false;\r\n\r\n  // play game\r\n  window.addEventListener('keypress', (evt) =&gt; {\r\n    //... respond to inputs\r\n  });\r\n})('app');\r\n</code></pre>\n<h2 id=\"thegameboardandpuzzles\">The Game Board and Puzzles</h2>\n<p>Wheel of Fortune’s game board is essentially a grid, with each cell in one of three states:</p>\n<ul>\n<li>empty: empty cells aren’t used in the puzzle (green)</li>\n<li>blank: the cell represents a hidden letter in the puzzle (white)</li>\n<li>visible: the cell reveals a letter in the puzzle</li>\n</ul>\n<p>One approach to writing the game would be to use an array representing the game board, with each element as a cell in one of those states, and rendering that array could be accomplished several different ways. Here’s one example:</p>\n<pre><code class=\"javascript language-javascript\">let puzzle = [...'########HELLO##WORLD########'];\r\n\r\nconst cols = 7;\r\nconst width = 30;\r\nconst height = 35;\r\n\r\npuzzle.forEach((letter, index) =&gt; {\r\n  // calculate position\r\n  let x = width * (index % cols);\r\n  let y = height * Math.floor(index / cols);\r\n\r\n  // fill\r\n  ctx.fillStyle = (letter === '#') ? 'green' : 'white';\r\n  ctx.fillRect(x, y, width, height);\r\n\r\n  // stroke\r\n  ctx.strokeStyle = 'black';\r\n  ctx.strokeRect(x, y, width, height);\r\n\r\n  // reveal letter\r\n  if (guessedLetters.includes(letter)) {\r\n      ctx.fillStyle = 'black';\r\n      ctx.fillText(letter, x + (width / 2), y + (height / 2));\r\n  }\r\n});\r\n</code></pre>\n<p>This approach iterates through each letter in a puzzle, calculating the starting coordinates, drawing a rectangle for the current cell based on the index and other details — such as the number of columns in a row and the width and height of each cell. It checks the character and colors the cell accordingly, assuming <code>#</code> is used to denote an empty cell and a letter denotes a blank. Guessed letters are then drawn on the cell to reveal them.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612369681img-1.png\" alt=\"A potential game board rendered using the above code\" /></p>\n<p>Another approach would be to prepare a static image of the board for each puzzle beforehand, which would be drawn to the canvas. This approach can add a fair amount of effort to puzzle preparation, as you’ll need to create additional images, possibly determine the position of each letter to draw on the custom board, and encode all of that information into a data structure suitable for rendering. The trade-off would be better-looking graphics and perhaps better letter positioning.</p>\n<p>This is what a puzzle might look like following this second approach:</p>\n<pre><code class=\"javascript language-javascript\">let puzzle = {\r\n  background: 'img/puzzle-01.png',\r\n  letters: [\r\n    {chr: 'H', x: 45,  y: 60},\r\n    {chr: 'E', x: 75,  y: 60},\r\n    {chr: 'L', x: 105, y: 60},\r\n    {chr: 'L', x: 135, y: 60},\r\n    {chr: 'O', x: 165, y: 60},\r\n    {chr: 'W', x: 45,  y: 100},\r\n    {chr: 'O', x: 75,  y: 100},\r\n    {chr: 'R', x: 105, y: 100},\r\n    {chr: 'L', x: 135, y: 100},\r\n    {chr: 'D', x: 165, y: 100}\r\n  ]\r\n};\r\n</code></pre>\n<p>For the sake of efficiency, I’d recommend including another array to track matching letters. With only the <code>guessedLetters</code> array available, you’d need to scan the puzzle’s letters repeatedly for multiple matches. Instead, you can set up an array to track the solved letters and just copy the matching definitions to it when the player makes their guess, like so:</p>\n<pre><code class=\"javascript language-javascript\">const solvedLetters = [];\r\n\r\npuzzle.letters.forEach((letter) =&gt; {\r\n  if (letter.chr === evt.key) {\r\n    solvedLetters.push(letter);\r\n  }\r\n});\r\n</code></pre>\n<p>Rendering this puzzle then looks like this:</p>\n<pre><code class=\"javascript language-javascript\">// draw background\r\nconst imgPuzzle = new Image();\r\nimgPuzzle.onload = function () {\r\n  ctx.drawImage(this, 0, 0);\r\n};\r\nimgPuzzle.src = puzzle.background;\r\n\r\n// reveal letters\r\nsolvedLetters.forEach((letter) =&gt; {\r\n  ctx.fillText(letter.chr, letter.x, letter.y);\r\n});\r\n</code></pre>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612369699img-2.png\" alt=\"A potential game board rendered using the alternative approach\" /></p>\n<p>For the record, I took the second approach when writing my game. But the important takeaway here is that there are often multiple solutions to the same problem. Each solution comes with its own pros and cons, and deciding on a particular solution will inevitably affect the design of your program.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/javascript-game-zoom-group/?utm_source=rss\">How I Built a Wheel of Fortune JavaScript Game for My Zoom Group</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/javascript-game-zoom-group/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181149",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Timothy Boronczyk"
        ],
        "pubDate": [
            "Thu, 18 Feb 2021 06:00:14 GMT"
        ],
        "metaDesc": [
            "Have you ever wanted to build a JavaScript game but didn't know where to start? Learn how to quickly create a simple, fun game to share with friends."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "An Introduction to Genetic Algorithms"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/genetic-algorithms-introduction/?utm_source=rss\"\n              title=\"An Introduction to Genetic Algorithms\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614930410gene-alg.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614930410gene-alg-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614930410gene-alg-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614930410gene-alg-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614930410gene-alg.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>A genetic algorithm is a procedure that searches for the best solution to a problem using operations that emulate the natural processes involved in evolution, such as “survival of the fittest”, chromosomal crossover, and mutation. This article provides a gentle introduction to writing genetic algorithms, discusses some important considerations when writing your own algorithm, and presents a few examples of genetic algorithms in action.</strong></p>\n<h2 id=\"guessingtheunknown\">Guessing the Unknown</h2>\n<p>The year is 2369 and humankind has spread out across the stars. You’re a young, bright doctor stationed at a star base in deep space that’s bustling with interstellar travelers, traders, and the occasional ne’er-do-well. Almost immediately after your arrival, one of the station’s shopkeeps takes an interest in you. He claims to be nothing more than a simple tailor, but rumors say he’s black ops working for a particularly nasty regime.</p>\n<p>The two of you begin to enjoy weekly lunches together and discuss everything from politics to poetry. Even after several months, you still aren’t certain whether he’s making romantic gestures or fishing for secrets (not that you know any). Perhaps it&#8217;s a bit of both.</p>\n<p>One day over lunch he presents you with this challenge: “I have a message for you, dear doctor! I can’t say what it is, of course. But I will tell you it’s 12 characters long. Those characters can be any letter of the alphabet, a space, or punctuation mark. And I’ll tell you how far off your guesses are. You’re smart; do you think you can figure it out?”</p>\n<p>You return to your office in the medical bay still thinking about what he said. Suddenly, a gene sequencing simulation you left running on a nearby computer as part of an experiment gives you an idea. You’re not a code breaker, but maybe you can leverage your expertise in genetics to figure out his message!</p>\n<h2 id=\"abitoftheory\">A Bit of Theory</h2>\n<p>As I mentioned at the beginning, a genetic algorithm is a procedure that searches for a solution using operations that emulate processes that drive evolution. Over many iterations, the algorithm selects the best candidates (guesses) from a set of possible solutions, recombines them, and checks which combinations moved it closer to a solution. Less beneficial candidates are discarded.</p>\n<p>In the scenario above, any character in the secret message can be A–Z, a space, or a basic punctuation mark. Let’s say that gives us the following 32-character “alphabet” to work with: <code>ABCDEFGHIJKLMNOPQRSTUVWXYZ -.,!?</code> This means there are 32<sup>12</sup> (roughly 1.15Ã—10<sup>18</sup>) possible messages, but only one of those possibilities is the correct one. It would take too long to check each possibility. Instead, a genetic algorithm will randomly select 12 characters and ask the tailor/spy to score how close the result is to his message. This is more efficient than a brute-force search, in that the score lets us fine-tune future candidates. The feedback gives us the ability to gauge the fitness of each guess and hopefully avoid wasting time on the dead-ends.</p>\n<p>Suppose we make three guesses: <code>HOMLK?WSRZDJ</code>, <code>BGK KA!QTPXC</code>, and <code>XELPOCV.XLF!</code>. The first candidate receives a score of 248.2, the second receives 632.5, and the third receives 219.5. How the score is calculated depends on the situation, which we’ll discuss later, but for now let’s assume it’s based on deviation between the candidate and target message: a perfect score is 0 (that is, there are no deviations; the candidate and the target are the same), and a larger score means there’s a greater deviation. The guesses that scored 248.2 and 219.5 are closer to what the secret message might be than the guess that scored 635.5.</p>\n<p>Future guesses are made by combining the best attempts. There are many ways to combine candidates, but for now we’ll consider a simple crossover method: each character in the new guess has a 50–50 chance of being copied from the first or second parent candidate. If we take the two guesses <code>HOMLK?WSRZDJ</code> and <code>XELPOCV.XLF!</code>, the first character of our offspring candidate has a 50% chance of being <code>H</code> and 50% chance of being <code>X</code>, the second character will be either <code>O</code> or <code>E</code>, and so on. The offspring could be <code>HELLO?W.RLD!</code>.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1614902162ga-01.png\" alt=\"Generating new candidates through crossover\" width=\"677\" height=\"250\" class=\"alignnone size-full wp-image-181529\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614902162ga-01.png 677w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614902162ga-01-300x111.png 300w\" sizes=\"(max-width: 677px) 100vw, 677px\" /></p>\n<p>However, a problem can arise over multiple iterations if we only use values from the parent candidates: a lack of diversity. If we have one candidate consisting of all <code>A</code>’s and another of all <code>B</code>’s, then any offspring generated with them solely by crossover would consist only of <code>A</code>’s and <code>B</code>’s. We’re out of luck if the solution contains a <code>C</code>.</p>\n<p>To mitigate this risk and maintain diversity while still narrowing in on a solution, we can introduce minor changes. Rather than a straight 50–50 split, we afford a small chance that an arbitrary value from the alphabet is picked instead. With this mutation the offspring might become <code>HELLO WORLD!</code>.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1614902194ga-02.png\" alt=\"Mutation keeps things fresh!\" width=\"677\" height=\"340\" class=\"alignnone size-full wp-image-181530\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614902194ga-02.png 677w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1614902194ga-02-300x151.png 300w\" sizes=\"(max-width: 677px) 100vw, 677px\" /></p>\n<p>Unsurprisingly, genetic algorithms borrow a lot of vocabulary from genetic science. So before we go much further, let’s refine some of our terminology:</p>\n<ul>\n<li>\n<p><strong>Allele</strong>: a member of the genetic alphabet. How alleles are defined depends on the algorithm. For example, <code>0</code> and <code>1</code> might be alleles for a genetic algorithm working with binary data, an algorithm working with code might use function pointers, etc. In our secret message scenario, the alleles were the letters of the alphabet, space, and various punctuation.</p>\n</li>\n<li>\n<p><strong>Chromosome</strong>: a given sequence of alleles; a candidate solution; a “guess”. In our scenario, <code>HOMLK?WSRZDJ</code>, <code>XELPOCV.XLF!</code>, and <code>HELLO WORLD!</code> are all chromosomes.</p>\n</li>\n<li>\n<p><strong>Gene</strong>: the allele at a specific location in the chromosome. For the chromosome <code>HOMLK?WSRZDJ</code>, the first gene is <code>H</code>, the second gene is <code>O</code>, the third is <code>M</code>, and so on.</p>\n</li>\n<li>\n<p><strong>Population</strong>: a collection of one or more candidate chromosomes proposed as a solution to the problem.</p>\n</li>\n<li>\n<p><strong>Generation</strong>: the population during a specific iteration of the algorithm. The candidates in one generation provide genes to produce the next generation’s population.</p>\n</li>\n<li>\n<p><strong>Fitness</strong>: a measure that evaluates a candidate’s closeness to the desired solution. Fitter chromosomes are more likely to pass their genes to future candidates while less fit chromosomes are more likely to be discarded.</p>\n</li>\n<li>\n<p><strong>Selection</strong>: the process of choosing some candidates to reproduce (used to create new candidate chromosomes) and discarding others. Multiple selection strategies exist, which vary in their tolerance for selecting weaker candidates.</p>\n</li>\n<li>\n<p><strong>Reproduction</strong>: the process of combining genes from one or more candidates to produce new candidates. The donor chromosomes are called <strong>parents</strong>, and the resulting chromosomes are called as <strong>offspring</strong>.</p>\n</li>\n<li>\n<p><strong>Mutation</strong>: the random introduction of aberrant genes in offspring to prevent the loss of genetic diversity over many generations. </p>\n</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/genetic-algorithms-introduction/?utm_source=rss\">An Introduction to Genetic Algorithms</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/genetic-algorithms-introduction/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181527",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Programming"
        ],
        "dc:creator": [
            "Timothy Boronczyk"
        ],
        "pubDate": [
            "Thu, 04 Mar 2021 23:25:17 GMT"
        ],
        "metaDesc": [
            "Learn how to write a genetic algorithm, a procedure that solves problems using operations that emulate the natural processes involved in evolution."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Moving Backgrounds: When, Why, and How to Use Them"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/moving-backgrounds-when-why-how/?utm_source=rss\"\n              title=\"Moving Backgrounds: When, Why, and How to Use Them\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623901012moving-backgrounds.png\"\n        alt=\"Moving Backgrounds: When, Why, and How to Use Them\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623901012moving-backgrounds-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623901012moving-backgrounds.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll take a close look at the whats and whys of moving backgrounds. We&#8217;ll consider the impact they have on conversions, examine when they should and shouldn&#8217;t be used, and then offer practical tips for doing them the right way.</strong></p>\n<h2 id=\"movingimagesarepowerful\">Moving Images are Powerful</h2>\n<p>There&#8217;s no denying people love video content. TikTok is shooting up the app charts, and short clips are surpassing pictures for shares on Facebook. Things that move are eye-catching, engaging, and more memorable.</p>\n<p>The appeal of video isn&#8217;t limited to social media. Moving elements on your landing pages give users a way to instantly connect with your brand. Here are some more <a href=\"https://www.chromatix.com.au/web-design/2021-crucial-web-design-statistics-you-need-to-know/\">web design statistics</a> worth knowing:</p>\n<ul>\n<li>Various studies show videos can increase landing page conversions by around 80%.</li>\n<li>A shopper who watches a video is nearly <a href=\"https://thegood.com/insights/video-marketing-strategy-statistics/\">two times more likely to convert</a> than a shopper who doesn&#8217;t.</li>\n<li><a href=\"https://web.archive.org/web/20160217120231/https://blogs.adobe.com/creative/files/2015/12/Adobe-State-of-Content-Report.pdf\">Two thirds of people</a> would rather read something beautifully designed than something plain.</li>\n</ul>\n<p>Video can do good things for your site. But that doesn&#8217;t mean you should turn your home page into a mini cinema. As with all things web design, it&#8217;s all about finding that sweet spot between what feels playful and exciting and what works.</p>\n<h2 id=\"whentousemovingbackgrounds\">When to Use Moving Backgrounds</h2>\n<p>Moving backgrounds can be incredibly effective, but they&#8217;re not always appropriate. They slow your site down, they can be distracting, and they&#8217;re creatively bold — three things that aren&#8217;t suitable in certain situations.</p>\n<p>For example, if you&#8217;re offering something complex, a video is more likely to distract that aid comprehension. If you&#8217;re offering something serious — like financial advice, government information, or anything to do with healthcare — a video just feels … wrong. Similarly, if you&#8217;re a practical site — like a grocery store or tool hire site — then speed is probably more important that giving off a certain vibe.</p>\n<p>On the other hand, if your business is all about exuding a certain mood, then moving backgrounds can be perfect.</p>\n<p>We <a href=\"https://www.chromatix.com.au/\">use one at Chromatix</a> because we&#8217;re a creative design agency, and playfulness and beauty are hugely attractive to our customers. </p>\n[video width=\"1400\" height=\"762\" mp4=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623831609chromatix.mp4\"][/video]\n<p>Luxury lifestyle brands often use moving backgrounds to good effect, because people buy into an experience rather than a product. The same goes for conferences and events, spas, retreats, vacation rentals, and so on.</p>\n<p>Here are three reasons to use moving backgrounds:</p>\n<ul>\n<li>to set a tone</li>\n<li>to exude a lifestyle</li>\n<li>to elicit an emotional reaction</li>\n</ul>\n<p>Here are three reasons not to use a moving background:</p>\n<ul>\n<li>because everyone else is doing it</li>\n<li>because <a href=\"https://www.conversioncow.com/web-conversion-statistics-facts/\">conversion statistics</a> tell me it&#8217;ll get good results</li>\n<li>because it looks pretty</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/moving-backgrounds-when-why-how/?utm_source=rss\">Moving Backgrounds: When, Why, and How to Use Them</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/moving-backgrounds-when-why-how/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191821",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Animation",
            "Design & UX",
            "Web"
        ],
        "dc:creator": [
            "Irwin Hau"
        ],
        "pubDate": [
            "Wed, 16 Jun 2021 18:00:39 GMT"
        ],
        "metaDesc": [
            "Moving backgrounds look cool, but they're not always a good idea. Learn their pros and cons, and when might be a good time to use one."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Shalabh Vyas"
        ],
        "title": [
            "Building A Rich Text Editor (WYSIWYG)"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/"
        ],
        "pubDate": [
            "Fri, 21 May 2021 11:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/"
        ],
        "description": [
            "In recent years, the field of Content Creation and Representation on Digital platforms has seen a massive disruption. The widespread success of products like Quip, Google Docs and Dropbox Paper has shown how companies are racing to build the best experience for content creators in the enterprise domain and trying to find innovative ways of breaking the traditional moulds of how content is shared and consumed. Taking advantage of the massive outreach of social media platforms, there is a new wave of independent content creators using platforms like Medium to create content and share it with their audience."
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/05/building-wysiwyg-editor-javascript-slatejs/\" />\n              <title>Building A Rich Text Editor (WYSIWYG)</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>Building A Rich Text Editor (WYSIWYG)</h1>\n                  \n                    \n                    <address>Shalabh Vyas</address>\n                  \n                  <time datetime=\"2021-05-21T11:30:00&#43;00:00\" class=\"op-published\">2021-05-21T11:30:00+00:00</time>\n                  <time datetime=\"2021-05-21T11:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p>In recent years, the field of Content Creation and Representation on Digital platforms has seen a massive disruption. The widespread success of products like Quip, Google Docs and Dropbox Paper has shown how companies are racing to build the best experience for content creators in the enterprise domain and trying to find innovative ways of breaking the traditional moulds of how content is shared and consumed. Taking advantage of the massive outreach of social media platforms, there is a new wave of independent content creators using platforms like Medium to create content and share it with their audience.</p>\n\n<p>As so many people from different professions and backgrounds try to create content on these products, it’s important that these products provide a performant and seamless experience of content creation and have teams of designers and engineers who develop some level of domain expertise over time in this space. With this article, we try to not only lay the foundation of building an editor but also give the readers a glimpse into how little nuggets of functionalities when brought together can create a great user experience for a content creator.</p>\n\n<h3 id=\"understanding-the-document-structure\">Understanding The Document Structure</h3>\n\n<p>Before we dive into building the editor, let’s look at how a document is structured for a Rich Text Editor and what are the different types of data structures involved.</p>\n\n<h4 id=\"document-nodes\">Document Nodes</h4>\n\n<p>Document nodes are used to represent the contents of the document. The common types of nodes that a rich-text document could contain are paragraphs, headings, images, videos, code-blocks and pull-quotes. Some of these may contain other nodes as children inside them (e.g. Paragraph nodes contain text nodes inside them). Nodes also hold any properties specific to the object they represent that are needed to render those nodes inside the editor. (e.g. Image nodes contain an image <code>src</code> property, Code-blocks may contain a <code>language</code> property and so on).</p>\n\n<p>There are largely two types of nodes that represent how they should be rendered -</p>\n\n<ul>\n<li><strong>Block Nodes</strong> (analogous to HTML concept of Block-level elements) that are each rendered on a new line and occupy the available width. Block nodes could contain other block nodes or inline nodes inside them. An observation here is that the top-level nodes of a document would always be block nodes.</li>\n<li><strong>Inline Nodes</strong> (analogous to HTML concept of Inline elements) that start rendering on the same line as the previous node. There are some differences in how inline elements are represented in different editing libraries. SlateJS allows for inline elements to be nodes themselves. DraftJS, another popular Rich Text Editing library, lets you use the concept of Entities to render inline elements. Links and Inline Images are examples of Inline nodes.</li>\n<li>Void Nodes &mdash; SlateJS also allows this third category of nodes that we will use later in this article to render media.</li>\n</ul>\n\n<p>If you want to learn more about these categories, SlateJS’s documentation on <a href=\"https://docs.slatejs.org/concepts/02-nodes\">Nodes</a> is a good place to start.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p>Meet <strong><a data-instant href=\"/printed-books/image-optimization/\">Image Optimization</a></strong>, Addy Osmani’s brand new practical guide to optimizing and delivering <strong>high-quality images</strong> on the web. From formats and compression to delivery and maintenance: everything in one single <strong>528-pages</strong> book.</p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<a data-instant href=\"https://www.smashingmagazine.com/printed-books/image-optimization/\" class=\"btn btn--green btn--large\">Jump to table of contents&nbsp;↬</a>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"https://www.smashingmagazine.com/printed-books/image-optimization/\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t<picture><source type=\"image/avif\" srcSet=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2c669cf1-c6ef-4c87-9901-018b04f7871f/image-optimization-shop-cover-opt.avif\" />\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/87fd0cfa-692e-459c-b2f3-15209a1f6aa7/image-optimization-shop-cover-opt.png\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"480\"\n\t\t\t\t\t\t\t\t\t\theight=\"697\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</picture>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h4 id=\"attributes\">Attributes</h4>\n\n<p>Similar to HTML’s concept of attributes, attributes in a Rich Text Document are used to represent non-content properties of a node or it’s children. For instance, a text node can have character-style attributes that tell us whether the text is bold/italic/underlined and so on. Although this article represents headings as nodes themselves, another way to represent them could be that nodes have paragraph-styles (<code>paragraph</code> &amp; <code>h1-h6</code>) as attributes on them.</p>\n\n<p>Below image gives an example of how a document’s structure (in JSON) is described at a more granular level using nodes and attributes highlighting some of the elements in the structure to the left.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Image showing an example document inside the editor with its structure representation on the left\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Example Document and its structural representation. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bde879ad-0e29-4631-92b0-198cf8730af0/document-structure.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Some of the things worth calling out here with the structure are:</p>\n\n<ul>\n<li>Text nodes are represented as <code>{text: 'text content'}</code></li>\n<li>Properties of the nodes are stored directly on the node (e.g. <code>url</code> for links and <code>caption</code> for images)</li>\n<li>SlateJS-specific representation of text attributes breaks the text nodes to be their own nodes if the character style changes. Hence, the text ‘<strong>Duis aute irure dolor</strong>’ is a text node of it’s own with <code>bold: true</code> set on it. Same is the case with the italic, underline and code style text in this document.</li>\n</ul>\n\n<h4 id=\"locations-and-selection\">Locations And Selection</h4>\n\n<p>When building a rich text editor, it is crucial to have an understanding of how the most granular part of a document (say a character) can be represented with some sort of coordinates. This helps us navigate the document structure at runtime to understand where in the document hierarchy we are. Most importantly, location objects give us a way to represent user selection which is quite extensively used to tailor the user experience of the editor in real time. We will use selection to build our toolbar later in this article. Examples of these could be:</p>\n\n<ul>\n<li>Is the user’s cursor currently inside a link, maybe we should show them a menu to edit/remove the link?</li>\n<li>Has the user selected an image? Maybe we give them a menu to resize the image.</li>\n<li>If the user selects certain text and hits the DELETE button, we determine what user’s selected text was and remove that from the document.</li>\n</ul>\n\n<p>SlateJS’s document on <a href=\"https://docs.slatejs.org/concepts/03-locations\">Location</a> explains these data structures extensively but we go through them here quickly as we use these terms at different instances in the article and show an example in the diagram that follows.</p>\n\n<ul>\n<li><strong>Path</strong><br />\nRepresented by an array of numbers, a path is the way to get to a node in the document. For instance, a path <code>[2,3]</code> represents the 3rd child node of the 2nd node in the document.</li>\n<li><strong>Point</strong><br />\nMore granular location of content represented by path + offset. For instance, a point of <code>{path: [2,3], offset: 14}</code> represents the 14th character of the 3rd child node inside the 2nd node of the document.</li>\n<li><strong>Range</strong><br />\nA pair of points (called <code>anchor</code> and <code>focus</code>) that represent a range of text inside the document. This concept comes from Web’s <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\">Selection API</a> where <code>anchor</code> is where user’s selection began and <code>focus</code> is where it ended. A collapsed range/selection denotes where anchor and focus points are the same (think of a blinking cursor in a text input for instance).</li>\n</ul>\n\n<p>As an example let’s say that the user’s selection in our above document example is <code>ipsum</code>:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\" Image with the text ` ipsum` selected in the editor\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      User selects the word <code> ipsum</code>. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3ccf8c84-b447-4b34-a3b4-8ef4959e2125/locations.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>The user’s selection can be represented as:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">{\n  anchor: {path: [2,0], offset: 5}, /*0th text node inside the paragraph node which itself is index 2 in the document*/\n  focus: {path: [2,0], offset: 11}, // space + 'ipsum'\n}`\n</code></pre>\n</div>\n\n<h3 id=\"setting-up-the-editor\">Setting Up The Editor</h3>\n\n<p>In this section, we are going to set up the application and get a basic rich-text editor going with SlateJS. The boilerplate application would be <code><a href=\"https://reactjs.org/docs/create-a-new-react-app.html\"><code>create-react-app</code></a></code> with SlateJS dependencies added to it. We are building the UI of the application using components from  <code><a href=\"https://react-bootstrap.github.io/\"><code>react-bootstrap</code></a></code>. Let’s get started!</p>\n\n<p>Create a folder called <code>wysiwyg-editor</code> and run the below command from inside the directory to set up the react app. We then run a <code>yarn start</code> command that should spin up the local web server (port defaulting to 3000) and show you a React welcome screen.</p>\n\n<pre><code class=\"language-bash\">npx create-react-app .\nyarn start\n</code></pre>\n\n<p>We then move on to add the SlateJS dependencies to the application.</p>\n\n<pre><code class=\"language-bash\">yarn add slate slate-react\n</code></pre>\n\n<p><code>slate</code> is SlateJS&rsquo;s core package and <code>slate-react</code> includes the set of React components we will use to render Slate editors. SlateJS exposes some more <a href=\"https://github.com/ianstormtaylor/slate#packages\">packages</a> organized by functionality one might consider adding to their editor.</p>\n\n<p>We first create a <code>utils</code> folder that holds any utility modules we create in this application. We start with creating an <code>ExampleDocument.js</code> that returns a basic document structure that contains a paragraph with some text. This module looks like below:</p>\n\n<pre><code class=\"language-javascript\">const ExampleDocument = [\n  {\n    type: \"paragraph\",\n    children: [\n      { text: \"Hello World! This is my paragraph inside a sample document.\" },\n    ],\n  },\n];\n\nexport default ExampleDocument;\n</code></pre>\n\n<p>We now add a folder called <code>components</code> that will hold all our React components and do the following:</p>\n\n<ul>\n<li>Add our first React component <code>Editor.js</code> to it. It only returns a <code>div</code> for now.</li>\n<li>Update the <code>App.js</code> component to hold the document in its state which is initialized to our <code>ExampleDocument</code> above.</li>\n<li>Render the Editor inside the app and pass the document state and an <code>onChange</code> handler down to the Editor so our document state is updated as the user updates it.</li>\n<li>We use React bootstrap’s Nav components to add a navigation bar to the application as well.</li>\n</ul>\n\n<p><code>App.js</code> component now looks like below:</p>\n\n<pre><code class=\"language-javascript\">import Editor from './components/Editor';\n\nfunction App() {\n  const [document, updateDocument] = useState(ExampleDocument);\n\n  return (\n    &lt;&gt;\n      &lt;Navbar bg=\"dark\" variant=\"dark\"&gt;\n        &lt;Navbar.Brand href=\"#\"&gt;\n          &lt;img\n            alt=\"\"\n            src=\"/app-icon.png\"\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n          /&gt;{\" \"}\n          WYSIWYG Editor\n        &lt;/Navbar.Brand&gt;\n      &lt;/Navbar&gt;\n      &lt;div className=\"App\"&gt;\n        &lt;Editor document={document} onChange={updateDocument} /&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n</code></pre>\n\n<p>Inside the Editor component, we then instantiate the SlateJS editor and hold it inside a <code>useMemo</code> so that the object doesn’t change in between re-renders.</p>\n\n<pre><code class=\"language-javascript\">// dependencies imported as below.\nimport { withReact } from \"slate-react\";\nimport { createEditor } from \"slate\";\n\nconst editor = useMemo(() => withReact(createEditor()), []);\n</code></pre>\n\n<p><code>createEditor</code> gives us the SlateJS <code>editor</code> instance which we use extensively through the application to access selections, run data transformations and so on. <a href=\"https://github.com/ianstormtaylor/slate/blob/master/packages/slate-react/src/plugin/with-react.ts\">withReact</a> is a SlateJS plugin that adds React and DOM behaviors to the editor object. <a href=\"https://docs.slatejs.org/concepts/07-plugins\">SlateJS Plugins</a> are Javascript functions that receive the <code>editor</code> object and attach some configuration to it. This allows web developers to add configurations to their SlateJS editor instance in a composable way.</p>\n\n<p>We now import and render <code>&lt;Slate /&gt;</code> and <code>&lt;Editable /&gt;</code> components from SlateJS with the document prop we get from App.js. <code><a href=\"https://github.com/ianstormtaylor/slate/blob/master/packages/slate-react/src/components/slate.tsx\">Slate</a></code> exposes a bunch of React contexts we use to access in the application code. <code><a href=\"https://github.com/ianstormtaylor/slate/blob/master/packages/slate-react/src/components/editable.tsx\">Editable</a></code> is the component that renders the document hierarchy for editing. Overall, the <code><code>Editor.js</code></code> module at this stage looks like below:</p>\n\n<pre><code class=\"language-javascript\">import { Editable, Slate, withReact } from \"slate-react\";\n\nimport { createEditor } from \"slate\";\nimport { useMemo } from \"react\";\n\nexport default function Editor({ document, onChange }) {\n  const editor = useMemo(() =&gt; withReact(createEditor()), []);\n  return (\n    &lt;Slate editor={editor} value={document} onChange={onChange}&gt;\n      &lt;Editable /&gt;\n    &lt;/Slate&gt;\n  );\n}\n</code></pre>\n\n<p>At this point, we have necessary React components added and the editor populated with an example document. Our Editor should be now set up allowing us to type in and change the content in real time &mdash; as in the screencast below.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534643188\"\n\t\t\tvideotitle=\"Basic Editor Setup in action\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Basic Editor Setup in action</figcaption>\n\t\n</figure>\n\n<p>Now, let’s move on to the next section where we configure the editor to render character styles and paragraph nodes.</p>\n\n<h3 id=\"custom-text-rendering-and-a-toolbar\">CUSTOM TEXT RENDERING AND A TOOLBAR</h3>\n\n<h4 id=\"paragraph-style-nodes\">Paragraph Style Nodes</h4>\n\n<p>Currently, our editor uses SlateJS’s default rendering for any new node types we may add to the document. In this section, we want to be able to render the heading nodes. To be able to do that, we provide a <code>renderElement</code> function prop to Slate’s components. This function gets called by Slate at runtime when it is trying to traverse the document tree and render each node. The renderElement function gets three parameters &mdash;</p>\n\n<ul>\n<li><code>attributes</code><br />\nSlateJS specific that must need to be applied to the top-level DOM element being returned from this function.</li>\n<li><code>element</code><br />\nThe node object itself as it exists in the document structure</li>\n<li><code>children</code><br />\nThe children of this node as defined in the document structure.</li>\n</ul>\n\n<p>We add our <code>renderElement</code> implementation to a hook called <code>useEditorConfig</code> where we will add more editor configurations as we go. We then use the hook on the editor instance inside <code>Editor.js</code>.</p>\n\n<pre><code class=\"language-javascript\">import { DefaultElement } from \"slate-react\";\n\nexport default function useEditorConfig(editor) {\n  return { renderElement };\n}\n\nfunction renderElement(props) {\n  const { element, children, attributes } = props;\n  switch (element.type) {\n    case \"paragraph\":\n      return &lt;p {...attributes}&gt;{children}&lt;/p&gt;;\n    case \"h1\":\n      return &lt;h1 {...attributes}&gt;{children}&lt;/h1&gt;;\n    case \"h2\":\n      return &lt;h2 {...attributes}&gt;{children}&lt;/h2&gt;;\n    case \"h3\":\n      return &lt;h3 {...attributes}&gt;{children}&lt;/h3&gt;;\n    case \"h4\":\n      return &lt;h4 {...attributes}&gt;{children}&lt;/h4&gt;;\n    default:\n      // For the default case, we delegate to Slate's default rendering. \n      return &lt;DefaultElement {...props} /&gt;;\n  }\n}\n</code></pre>\n\n<p>Since this function gives us access to the <code>element</code> (which is the node itself), we can customize <code>renderElement</code> to implement a more customized rendering that does more than just checking <code>element.type</code>. For instance, you could have an image node that has a <code>isInline</code> property that we could use to return a different DOM structure that helps us render inline images as against block images.</p>\n\n<p>We now update the Editor component to use this hook as below:</p>\n\n<pre><code class=\"language-javascript\">const { renderElement } = useEditorConfig(editor);\n\nreturn (\n    ...\n    &lt;Editable renderElement={renderElement} /&gt;\n);\n</code></pre>\n\n<p>With the custom rendering in place, we update the ExampleDocument to include our new node types and verify that they render correctly inside the editor.</p>\n\n<pre><code class=\"language-javascript\">const ExampleDocument = [\n  {\n    type: \"h1\",\n    children: [{ text: \"Heading 1\" }],\n  },\n  {\n    type: \"h2\",\n    children: [{ text: \"Heading 2\" }],\n  },\n // ...more heading nodes\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Image showing different headings and paragraph nodes rendered in the editor\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Headings and Paragraph nodes in the Editor. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/444bb608-7f60-40fb-8ed3-d583e9a535b2/paragraph-nodes.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<h4 id=\"character-styles\">Character Styles</h4>\n\n<p>Similar to <code>renderElement</code>, SlateJS gives out a function prop called renderLeaf that can be used to customize rendering of the text nodes (<code>Leaf</code> referring to text nodes which are the leaves/lowest level nodes of the document tree). Following the example of <code>renderElement</code>, we write an implementation for <code>renderLeaf</code>.</p>\n\n<pre><code class=\"language-javascript\">export default function useEditorConfig(editor) {\n  return { renderElement, renderLeaf };\n}\n\n// ...\nfunction renderLeaf({ attributes, children, leaf }) {\n  let el = &lt;&gt;{children}&lt;/&gt;;\n\n  if (leaf.bold) {\n    el = &lt;strong&gt;{el}&lt;/strong&gt;;\n  }\n\n  if (leaf.code) {\n    el = &lt;code&gt;{el}&lt;/code&gt;;\n  }\n\n  if (leaf.italic) {\n    el = &lt;em&gt;{el}&lt;/em&gt;;\n  }\n\n  if (leaf.underline) {\n    el = &lt;u&gt;{el}&lt;/u&gt;;\n  }\n\n  return &lt;span {...attributes}&gt;{el}&lt;/span&gt;;\n}\n</code></pre>\n\n<p>An important observation of the above implementation is that it allows us to respect HTML semantics for character styles. Since renderLeaf gives us access to the text node <code>leaf</code> itself, we can customize the function to implement a more customized rendering. For instance, you might have a way to let users choose a <code>highlightColor</code> for text and check that leaf property here to attach the respective styles.</p>\n\n<p>We now update the Editor component to use the above, the <code>ExampleDocument</code> to have a few text nodes in the paragraph with combinations of these styles and verify that they are rendered as expected in the Editor with the semantic tags we used.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\nconst { renderElement, renderLeaf } = useEditorConfig(editor);\n\nreturn (\n    ...\n    &lt;Editable renderElement={renderElement} renderLeaf={renderLeaf} /&gt;\n);\n</code></pre>\n\n<pre><code class=\"language-javascript\"># src/utils/ExampleDocument.js\n\n{\n    type: \"paragraph\",\n    children: [\n      { text: \"Hello World! This is my paragraph inside a sample document.\" },\n      { text: \"Bold text.\", bold: true, code: true },\n      { text: \"Italic text.\", italic: true },\n      { text: \"Bold and underlined text.\", bold: true, underline: true },\n      { text: \"variableFoo\", code: true },\n    ],\n  },\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Character styles in UI and how they are rendered in DOM tree\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Character styles in UI and how they are rendered in DOM tree. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/617fbdb7-4365-4501-8761-3f6aa1c485bd/character-styles.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<h3 id=\"adding-a-toolbar\">Adding A Toolbar</h3>\n\n<p>Let’s begin by adding a new component <code>Toolbar.js</code> to which we add a few buttons for character styles and a dropdown for paragraph styles and we wire these up later in the section.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">const PARAGRAPH_STYLES = [\"h1\", \"h2\", \"h3\", \"h4\", \"paragraph\", \"multiple\"];\nconst CHARACTER_STYLES = [\"bold\", \"italic\", \"underline\", \"code\"];\n\nexport default function Toolbar({ selection, previousSelection }) {\n  return (\n    &lt;div className=\"toolbar\"&gt;\n      {/&#42; Dropdown for paragraph styles &#42;/}\n      &lt;DropdownButton\n        className={\"block-style-dropdown\"}\n        disabled={false}\n        id=\"block-style\"\n        title={getLabelForBlockStyle(\"paragraph\")}\n      &gt;\n        {PARAGRAPH_STYLES.map((blockType) =&gt; (\n          &lt;Dropdown.Item eventKey={blockType} key={blockType}&gt;\n            {getLabelForBlockStyle(blockType)}\n          &lt;/Dropdown.Item&gt;\n        ))}\n      &lt;/DropdownButton&gt;\n      {/&#42; Buttons for character styles &#42;/}\n      {CHARACTER_STYLES.map((style) =&gt; (\n        &lt;ToolBarButton\n          key={style}\n          icon={&lt;i className={&#96;bi ${getIconForButton(style)}&#96;} /&gt;}\n          isActive={false}\n        /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nfunction ToolBarButton(props) {\n  const { icon, isActive, ...otherProps } = props;\n  return (\n    &lt;Button\n      variant=\"outline-primary\"\n      className=\"toolbar-btn\"\n      active={isActive}\n      {...otherProps}\n    &gt;\n      {icon}\n    &lt;/Button&gt;\n  );\n}\n</code></pre>\n</div>\n\n<p>We abstract away the buttons to the <code>ToolbarButton</code> component that is a wrapper around the React Bootstrap Button component. We then render the toolbar above the <code>Editable</code> inside <code>Editor</code> component and verify that the toolbar shows up in the application.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Image showing toolbar with buttons rendered above the editor\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Toolbar with buttons (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5bd671be-6551-4f13-976e-6ea3ab97c0f6/setup-toolbar.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Here are the three key functionalities we need the toolbar to support:</p>\n\n<ol>\n<li>When the user’s cursor is in a certain spot in the document and they click one of the character style buttons, we need to toggle the style for the text they may type next.</li>\n<li>When the user selects a range of text and click one of the character style buttons, we need to toggle the style for that specific section.</li>\n<li>When the user selects a range of text, we want to update the paragraph-style dropdown to reflect the paragraph-type of the selection. If they do select a different value from the selection, we want to update the paragraph style of the entire selection to be what they selected.</li>\n</ol>\n\n<p>Let’s look at how these functionalities work on the Editor before we start implementing them.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534645555\"\n\t\t\tvideotitle=\"Character Styles toggling behavior\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Character Styles toggling behavior</figcaption>\n\t\n</figure>\n\n<h4 id=\"listening-to-selection\">Listening To Selection</h4>\n\n<p>The most important thing the Toolbar needs to be able to perform the above functions is the Selection state of the document. As of writing this article, SlateJS does not expose a <code>onSelectionChange</code> method that could give us the latest selection state of the document. However, as selection changes in the editor, SlateJS does call the <code>onChange</code> method, even if the document contents haven’t changed. We use this as a way to be notified of selection change and store it in the <code>Editor</code> component’s state. We abstract this to a hook <code>useSelection</code> where we could do a more optimal update of the selection state. This is important as selection is a property that changes quite often for a WYSIWYG Editor instance.</p>\n\n<pre><code class=\"language-javascript\">import areEqual from \"deep-equal\";\n\nexport default function useSelection(editor) {\n  const [selection, setSelection] = useState(editor.selection);\n  const setSelectionOptimized = useCallback(\n    (newSelection) => {\n      // don't update the component state if selection hasn't changed.\n      if (areEqual(selection, newSelection)) {\n        return;\n      }\n      setSelection(newSelection);\n    },\n    [setSelection, selection]\n  );\n\n  return [selection, setSelectionOptimized];\n}\n</code></pre>\n\n<p>We use this hook inside the <code>Editor</code> component as below and pass the selection to the Toolbar component.</p>\n\n<pre><code class=\"language-javascript\">const [selection, setSelection] = useSelection(editor);\n\n  const onChangeHandler = useCallback(\n    (document) =&gt; {\n      onChange(document);\n      setSelection(editor.selection);\n    },\n    [editor.selection, onChange, setSelection]\n  );\n\n  return (\n    &lt;Slate editor={editor} value={document} onChange={onChangeHandler}&gt;\n        &lt;Toolbar selection={selection} /&gt;\n        ...\n</code></pre>\n\n<h5 id=\"performance-consideration\">Performance Consideration</h5>\n\n<p>In an application where we have a much bigger Editor codebase with a lot more functionalities, it is important to store and listen to selection changes in a performant way (like using some state management library) as components listening to selection changes are likely to render too often. One way to do this is to have optimized selectors on top of the Selection state that hold specific selection information. For instance, an editor might want to render an image resizing menu when an Image is selected. In such a case, it might be helpful to have a selector <code>isImageSelected</code> computed from the editor’s selection state and the Image menu would re-render only when this selector’s value changes. Redux’s <a href=\"https://github.com/reduxjs/reselect\">Reselect</a> is one such library that enables building selectors.</p>\n\n<p>We don’t use <code>selection</code> inside the toolbar until later but passing it down as a prop makes the toolbar re-render each time the selection changes on the Editor. We do this because we cannot rely solely on the document content change to trigger a re-render on the hierarchy (<code>App -&gt; Editor -&gt; Toolbar</code>) as users might just keep clicking around the document thereby changing selection but never actually changing the document content itself.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4 id=\"toggling-character-styles\">Toggling Character Styles</h4>\n\n<p>We now move to getting what the active character styles are from SlateJS and using those inside the Editor. Let’s add a new JS module <code>EditorUtils</code> that will host all the util functions we build going forward to get/do stuff with SlateJS. Our first function in the module is <code>getActiveStyles</code> that gives a <code>Set</code> of active styles in the editor. We also add a function to toggle a style on the editor function &mdash; <code>toggleStyle</code>:</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorUtils.js\n\nimport { Editor } from \"slate\";\n\nexport function getActiveStyles(editor) {\n  return new Set(Object.keys(Editor.marks(editor) ?? {}));\n}\n\nexport function toggleStyle(editor, style) {\n  const activeStyles = getActiveStyles(editor);\n  if (activeStyles.has(style)) {\n    Editor.removeMark(editor, style);\n  } else {\n    Editor.addMark(editor, style, true);\n  }\n}\n</code></pre>\n\n<p>Both the functions take the <code>editor</code> object which is the Slate instance as a parameter as will a lot of util functions we add later in the article.In Slate terminology, formatting styles are called Marks and we use helper methods on <a href=\"https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/interfaces/editor.ts#L41\">Editor</a> interface to get, add and remove these marks.We import these util functions inside the Toolbar and wire them to the buttons we added earlier.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n\nimport { getActiveStyles, toggleStyle } from \"../utils/EditorUtils\";\nimport { useEditor } from \"slate-react\";\n\nexport default function Toolbar({ selection }) {\n  const editor = useEditor();\n\nreturn &lt;div\n...\n    {CHARACTER_STYLES.map((style) =&gt; (\n        &lt;ToolBarButton\n          key={style}\n          characterStyle={style}\n          icon={&lt;i className={`bi ${getIconForButton(style)}`} /&gt;}\n          isActive={getActiveStyles(editor).has(style)}\n          onMouseDown={(event) =&gt; {\n            event.preventDefault();\n            toggleStyle(editor, style);\n          }}\n        /&gt;\n      ))}\n&lt;/div&gt;\n</code></pre>\n\n<p><code>useEditor</code> is a Slate hook that gives us access to the Slate instance from the context where it was attached by the <code>&amp;lt;Slate&gt;</code> component higher up in the render hierarchy.</p>\n\n<p>One might wonder why we use <code>onMouseDown</code> here instead of <code>onClick</code>? There is an open <a href=\"https://github.com/ianstormtaylor/slate/issues/3412\">Github Issue</a> about how Slate turns the <code>selection</code> to <code>null</code> when the editor loses focus in any way. So, if we attach <code>onClick</code> handlers to our toolbar buttons, the <code>selection</code> becomes <code>null</code> and users lose their cursor position trying to toggle a style which is not a great experience. We instead toggle the style by attaching a <code>onMouseDown</code> event which prevents the selection from getting reset. Another way to do this is to keep track of the selection ourselves so we know what the last selection was and use that to toggle the styles. We do introduce the concept of <code>previousSelection</code> later in the article but to solve a different problem.</p>\n\n<p>SlateJS allows us to configure event handlers on the Editor. We use that to wire up keyboard shortcuts to toggle the character styles. To do that, we add a <code>KeyBindings</code> object inside <code>useEditorConfig</code> where we expose a <code>onKeyDown</code> event handler attached to the <code>Editable</code> component. We use the <a href=\"https://www.npmjs.com/package/is-hotkey\"><code>is-hotkey</code></a> util to determine the key combination and toggle the corresponding style.</p>\n\n<pre><code class=\"language-javascript\"># src/hooks/useEditorConfig.js\n\nexport default function useEditorConfig(editor) {\n  const onKeyDown = useCallback(\n    (event) => KeyBindings.onKeyDown(editor, event),\n    [editor]\n  );\n  return { renderElement, renderLeaf, onKeyDown };\n}\n\nconst KeyBindings = {\n  onKeyDown: (editor, event) => {\n    if (isHotkey(\"mod+b\", event)) {\n      toggleStyle(editor, \"bold\");\n      return;\n    }\n    if (isHotkey(\"mod+i\", event)) {\n      toggleStyle(editor, \"italic\");\n      return;\n    }\n    if (isHotkey(\"mod+c\", event)) {\n      toggleStyle(editor, \"code\");\n      return;\n    }\n    if (isHotkey(\"mod+u\", event)) {\n      toggleStyle(editor, \"underline\");\n      return;\n    }\n  },\n};\n\n# src/components/Editor.js\n...\n &lt;Editable\n   renderElement={renderElement}\n   renderLeaf={renderLeaf}\n   onKeyDown={onKeyDown}\n /&gt;\n</code></pre>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534647334\"\n\t\t\tvideotitle=\"Character styles toggled using keyboard shortcuts.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Character styles toggled using keyboard shortcuts.</figcaption>\n\t\n</figure>\n\n<h4 id=\"making-paragraph-style-dropdown-work\">Making Paragraph Style Dropdown Work</h4>\n\n<p>Let’s move on to making the Paragraph Styles dropdown work. Similar to how paragraph-style dropdowns work in popular Word Processing applications like MS Word or Google Docs, we want styles of the top level blocks in user’s selection to be reflected in the dropdown. If there is a single consistent style across the selection, we update the dropdown value to be that. If there are multiple of those, we set the dropdown value to be ‘Multiple’. This behavior must work for both &mdash; collapsed and expanded selections.</p>\n\n<p>To implement this behavior, we need to be able to find the top-level blocks spanning the user’s selection. To do so, we use Slate’s <a href=\"https://github.com/ianstormtaylor/slate/blob/41cd18b5683fbbdadb570da37a919e24a28e3de1/packages/slate/src/interfaces/editor.ts#L167\"><code>Editor.nodes</code></a> &mdash; A helper function commonly used to search for nodes in a tree filtered by different options.</p>\n\n<pre><code class=\"language-javascript\">nodes(\n    editor: Editor,\n    options?: {\n      at?: Location | Span\n      match?: NodeMatch&lt;T&gt;\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    }\n  ) => Generator&lt;NodeEntry&lt;T&gt;, void, undefined&gt;\n</code></pre>\n\n<p>The helper function takes an Editor instance and an <code>options</code> object that is a way to filter nodes in the tree as it traverses it. The function returns a generator of <code>NodeEntry</code>. A <code>NodeEntry</code> in Slate terminology is a tuple of  a node and the path to it &mdash; <code>[node, pathToNode]</code>. The options found here are available on most of the Slate helper functions. Let’s go through what each of those means:</p>\n\n<ul>\n<li><code>at</code><br />\nThis can be a Path/Point/Range that the helper function would use to scope down the tree traversal to. This defaults to <code>editor.selection</code> if not provided. We also use the default for our use case below as we’re interested in nodes within user’s selection.</li>\n<li><code>match</code><br />\nThis is a matching function one can provide that is called on each node and included if it is a match. We use this parameter in our implementation below to filter to block elements only.</li>\n<li><code>mode</code><br />\nLet’s the helper functions know if we’re interested in all, highest-level or lowest level nodes <code>at</code> the given location matching <code>match</code> function. This parameter (set to <code>highest</code>) helps us escape trying to traverse the tree <strong>up</strong> ourselves to find the top-level nodes.</li>\n<li><code>universal</code><br />\nFlag to choose between full or partial matches of the nodes. (<a href=\"https://github.com/ianstormtaylor/slate/issues/3248\">GitHub Issue</a> with the proposal for this flag has some examples explaining it)</li>\n<li><code>reverse</code><br />\nIf the node search should be in the reverse direction of the start and end points of the location passed in.</li>\n<li><code>voids</code><br />\nIf the search should filter to void elements only.</li>\n</ul>\n\n<p>SlateJS exposes a lot of helper functions that let you query for nodes in different ways, traverse the tree, update the nodes or selections in complex ways. Worth digging into some of these interfaces (listed towards the end of this article) when building complex editing functionalities on top of Slate.</p>\n\n<p>With that background on the helper function, below is an implementation of  <code>getTextBlockStyle</code>.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorUtils.js \n\nexport function getTextBlockStyle(editor) {\n  const selection = editor.selection;\n  if (selection == null) {\n    return null;\n  }\n\n  const topLevelBlockNodesInSelection = Editor.nodes(editor, {\n    at: editor.selection,\n    mode: \"highest\",\n    match: (n) => Editor.isBlock(editor, n),\n  });\n\n  let blockType = null;\n  let nodeEntry = topLevelBlockNodesInSelection.next();\n  while (!nodeEntry.done) {\n    const [node, _] = nodeEntry.value;\n    if (blockType == null) {\n      blockType = node.type;\n    } else if (blockType !== node.type) {\n      return \"multiple\";\n    }\n\n    nodeEntry = topLevelBlockNodesInSelection.next();\n  }\n\n  return blockType;\n}\n</code></pre>\n\n<h5 id=\"performance-consideration-1\">Performance Consideration</h5>\n\n<p>The current implementation of <code>Editor.nodes</code> finds all the nodes throughout the tree across all levels that are within the range of the <code>at</code> param and then runs match filters on it (check <code>nodeEntries</code> and the filtering later &mdash; <a href=\"https://github.com/ianstormtaylor/slate/blob/41cd18b5683fbbdadb570da37a919e24a28e3de1/packages/slate/src/interfaces/editor.ts#L878\">source</a>). This is okay for smaller documents. However, for our use case, if the user selected, say 3 headings and 2 paragraphs  (each paragraph containing say 10 text nodes), it will cycle through at least 25 nodes (3 + 2 + 2&#42;10) and try to run filters on them. Since we already know we’re interested in top-level nodes only, we could find start and end indexes of the top level blocks from the selection and iterate ourselves. Such a logic would loop through only 3 node entries (2 headings and 1 paragraph). Code for that would look something like below:</p>\n\n<pre><code class=\"language-javascript\">export function getTextBlockStyle(editor) {\n  const selection = editor.selection;\n  if (selection == null) {\n    return null;\n  }\n  // gives the forward-direction points in case the selection was\n  // was backwards.\n  const [start, end] = Range.edges(selection);\n\n  //path[0] gives us the index of the top-level block.\n  let startTopLevelBlockIndex = start.path[0];\n  const endTopLevelBlockIndex = end.path[0];\n\n  let blockType = null;\n  while (startTopLevelBlockIndex <= endTopLevelBlockIndex) {\n    const [node, _] = Editor.node(editor, [startTopLevelBlockIndex]);\n    if (blockType == null) {\n      blockType = node.type;\n    } else if (blockType !== node.type) {\n      return \"multiple\";\n    }\n    startTopLevelBlockIndex++;\n  }\n\n  return blockType;\n}\n</code></pre>\n\n<p>As we add more functionalities to a WYSIWYG Editor and need to traverse the document tree often, it is important to think about the most performant ways to do so for the use case at hand as the available API or helper methods might not always be the most efficient way to do so.</p>\n\n<p>Once we have <code>getTextBlockStyle</code> implemented, toggling of the block style is relatively straightforward. If the current style is not what user selected in the dropdown, we toggle the style to that. If it is already what user selected, we toggle it to be a paragraph. Because we are representing paragraph styles as nodes in our document structure, toggle a paragraph style essentially means changing the <code>type</code> property on the node. We use <a href=\"https://github.com/ianstormtaylor/slate/blob/e4936c3f32711a646ecdb51d4a75462975861660/packages/slate/src/transforms/node.ts#L68\"><code>Transforms.setNodes</code></a> provided by Slate to update properties on nodes.</p>\n\n<p>Our <code>toggleBlockType</code>’s implementation is as below:</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorUtils.js\n\nexport function toggleBlockType(editor, blockType) {\n  const currentBlockType = getTextBlockStyle(editor);\n  const changeTo = currentBlockType === blockType ? \"paragraph\" : blockType;\n  Transforms.setNodes(\n    editor,\n    { type: changeTo },\n     // Node filtering options supported here too. We use the same\n     // we used with Editor.nodes above.\n    { at: editor.selection, match: (n) => Editor.isBlock(editor, n) }\n  );\n}\n</code></pre>\n\n<p>Finally, we update our Paragraph-Style dropdown to use these utility functions.</p>\n\n<pre><code class=\"language-javascript\">#src/components/Toolbar.js\n\nconst onBlockTypeChange = useCallback(\n    (targetType) =&gt; {\n      if (targetType === \"multiple\") {\n        return;\n      }\n      toggleBlockType(editor, targetType);\n    },\n    [editor]\n  );\n\n  const blockType = getTextBlockStyle(editor);\n\nreturn (\n    &lt;div className=\"toolbar\"&gt;\n      &lt;DropdownButton\n        .....\n        disabled={blockType == null}  \n        title={getLabelForBlockStyle(blockType ?? \"paragraph\")}\n        onSelect={onBlockTypeChange}\n      &gt;\n        {PARAGRAPH_STYLES.map((blockType) =&gt; (\n          &lt;Dropdown.Item eventKey={blockType} key={blockType}&gt;\n            {getLabelForBlockStyle(blockType)}\n          &lt;/Dropdown.Item&gt;\n        ))}\n      &lt;/DropdownButton&gt;\n....\n);\n</code></pre>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534646808\"\n\t\t\tvideotitle=\"Selecting multiple block types and changing the type with the dropdown.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Selecting multiple block types and changing the type with the dropdown.</figcaption>\n\t\n</figure>\n\n<h3 id=\"links\">LINKS</h3>\n\n<p>In this section, we are going to add support to show, add, remove and change links. We will also add a Link-Detector functionality &mdash; quite similar to how Google Docs or MS Word that scan the text typed by the user and checks if there are links in there. If there are, they are converted into link objects so that the user doesn’t have to use toolbar buttons to do that themselves.</p>\n\n<h4 id=\"rendering-links\">Rendering Links</h4>\n\n<p>In our editor, we are going to implement links as inline nodes with SlateJS. We update our editor config to flag links as inline nodes for SlateJS and also provide a component to render so Slate knows how to render the link nodes.</p>\n\n<pre><code class=\"language-javascript\"># src/hooks/useEditorConfig.js\nexport default function useEditorConfig(editor) {\n  ...\n  editor.isInline = (element) =&gt; [\"link\"].includes(element.type);\n  return {....}\n}\n\nfunction renderElement(props) {\n  const { element, children, attributes } = props;\n  switch (element.type) {\n     ...\n    case \"link\":\n      return &lt;Link {...props} url={element.url} /&gt;;\n      ...\n  }\n}\n</code></pre>\n\n<pre><code class=\"language-javascript\"># src/components/Link.js\nexport default function Link({ element, attributes, children }) {\n  return (\n    &lt;a href={element.url} {...attributes} className={\"link\"}&gt;\n      {children}\n    &lt;/a&gt;\n  );\n}\n</code></pre>\n\n<p>We then add a link node to our <code>ExampleDocument</code> and verify that it renders correctly (including a case for character styles inside a link) in the Editor.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/ExampleDocument.js\n{\n    type: \"paragraph\",\n    children: [\n      ...\n      { text: \"Some text before a link.\" },\n      {\n        type: \"link\",\n        url: \"https://www.google.com\",\n        children: [\n          { text: \"Link text\" },\n          { text: \"Bold text inside link\", bold: true },\n        ],\n      },\n     ...\n}\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Image showing Links rendered in the Editor and DOM tree of the editor\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Links rendered in the Editor (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/17e8910c-1b2f-4ff7-82fe-9d1886e6ad79/render-links.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<h4 id=\"adding-a-link-button-to-the-toolbar\">Adding A Link Button To The Toolbar</h4>\n\n<p>Let’s add a Link Button to the toolbar that enables the user to do the following:</p>\n\n<ul>\n<li>Selecting some text and clicking on the button converts that text into a link</li>\n<li>Having a blinking cursor (collapsed selection) and clicking the button inserts a new link there</li>\n<li>If the user’s selection is inside a link, clicking on the button should toggle the link &mdash; meaning convert the link back to text.</li>\n</ul>\n\n<p>To build these functionalities, we need a way in the toolbar to know if the user’s selection is inside a link node. We add a util function that traverses the levels in upward direction from the user’s selection to find a link node if there is one, using <a href=\"https://github.com/ianstormtaylor/slate/blob/master/packages/slate/src/interfaces/editor.ts#L70\"><code>Editor.above</code></a> helper function from SlateJS.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorUtils.js\n\nexport function isLinkNodeAtSelection(editor, selection) {\n  if (selection == null) {\n    return false;\n  }\n\n  return (\n    Editor.above(editor, {\n      at: selection,\n      match: (n) => n.type === \"link\",\n    }) != null\n  );\n}\n</code></pre>\n\n<p>Now, let’s add a button to the toolbar that is in active state if the user&rsquo;s selection is inside a link node.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n\nreturn (\n    &lt;div className=\"toolbar\"&gt;\n      ...\n      {/* Link Button &#42;/}\n      &lt;ToolBarButton\n        isActive={isLinkNodeAtSelection(editor, editor.selection)}\n        label={&lt;i className={&#96;bi ${getIconForButton(\"link\")}&#96;} /&gt;}\n      /&gt;\n    &lt;/div&gt;\n  );\n</code></pre>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534648831\"\n\t\t\tvideotitle=\"Link button in Toolbar becomes active if selection is inside a link.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Link button in Toolbar becomes active if selection is inside a link.</figcaption>\n\t\n</figure>\n\n<p>To toggle links in the editor, we add a util function <code>toggleLinkAtSelection</code>. Let’s first look at how the toggle works when you have some text selected. When the user selects some text and clicks on the button, we want only the selected text to become a link. What this inherently means is that we need to break the text node that contains selected text and extract the selected text into a new link node. The before and after states of these would look something like below:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Before and After node structures after a link is inserted\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Before and After node structures after a link is inserted. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8698a35c-74a3-46d5-994d-b590e622d06b/link-wrap-nodes.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>If we had to do this by ourselves, we’d have to figure out the range of selection and create three new nodes (text, link, text) that replace the original text node. SlateJS has a helper function called <a href=\"https://github.com/ianstormtaylor/slate/blob/e4936c3f32711a646ecdb51d4a75462975861660/packages/slate/src/transforms/node.ts#L858\"><code>Transforms.wrapNodes</code></a> that does exactly this &mdash; wrap nodes at a location into a new container node. We also have a helper available for the reverse of this process &mdash; <code>Transforms.unwrapNodes</code> which we use to remove links from selected text and merge that text back into the text nodes around it. With that, <code>toggleLinkAtSelection</code> has the below implementation to insert a new link at an expanded selection.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/EditorUtils.js\n\nexport function toggleLinkAtSelection(editor) {\n  if (!isLinkNodeAtSelection(editor, editor.selection)) {\n    const isSelectionCollapsed =\n      Range.isCollapsed(editor.selection);\n    if (isSelectionCollapsed) {\n      Transforms.insertNodes(\n        editor,\n        {\n          type: \"link\",\n          url: '#',\n          children: [{ text: 'link' }],\n        },\n        { at: editor.selection }\n      );\n    } else {\n      Transforms.wrapNodes(\n        editor,\n        { type: \"link\", url: '#', children: [{ text: '' }] },\n        { split: true, at: editor.selection }\n      );\n    }\n  } else {\n    Transforms.unwrapNodes(editor, {\n      match: (n) => Element.isElement(n) && n.type === \"link\",\n    });\n  }\n}\n</code></pre>\n\n<p>If the selection is collapsed, we insert a new node there with <code><a href=\"https://github.com/ianstormtaylor/slate/blob/e4936c3f32711a646ecdb51d4a75462975861660/packages/slate/src/transforms/node.ts#L17\"><code>Transform.insertNodes</code></a></code> that inserts the node at the given location in the document. We wire this function up with the toolbar button and should now have a way to add/remove links from the document with the help of the link button.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n      &lt;ToolBarButton\n        ...\n        isActive={isLinkNodeAtSelection(editor, editor.selection)}       \n        onMouseDown={() =&gt; toggleLinkAtSelection(editor)}\n      /&gt;\n</code></pre>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534649627\"\n\t\t\t\n\t\t></lite-vimeo>\n\t</div>\n\t\n</figure>\n\n<h4 id=\"link-editor-menu\">Link Editor Menu</h4>\n\n<p>So far, our editor has a way to add and remove links but we don’t have a way to update the URLs associated with these links. How about we extend the user experience to allow users to edit it easily with a contextual menu? To enable link editing, we will build a link-editing popover that shows up whenever the user selection is inside a link and lets them edit and apply the URL to that link node. Let’s start with building an empty <code>LinkEditor</code> component and rendering it whenever the user selection is inside a link.</p>\n\n<pre><code class=\"language-javascript\"># src/components/LinkEditor.js\nexport default function LinkEditor() {\n  return (\n    &lt;Card className={\"link-editor\"}&gt;\n      &lt;Card.Body&gt;&lt;/Card.Body&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>\n\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\n&lt;div className=\"editor\"&gt;\n    {isLinkNodeAtSelection(editor, selection) ? &lt;LinkEditor /&gt; : null}\n    &lt;Editable\n       renderElement={renderElement}\n       renderLeaf={renderLeaf}\n       onKeyDown={onKeyDown}\n    /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Since we are rendering the <code>LinkEditor</code> outside the editor, we need a way to tell <code>LinkEditor</code> where the link is located in the DOM tree so it could render itself near the editor. The way we do this is use Slate’s React API to find the DOM node corresponding to the link node in selection. And we then use <code>getBoundingClientRect()</code> to find the link’s DOM element’s bounds and the editor component’s bounds and compute the <code>top</code> and <code>left</code> for the link editor. The code updates to <code>Editor</code> and <code>LinkEditor</code> are as below &mdash;</p>\n\n<pre><code class=\"language-javascript\"># src/components/Editor.js \n\nconst editorRef = useRef(null)\n&lt;div className=\"editor\" ref={editorRef}&gt;\n              {isLinkNodeAtSelection(editor, selection) ? (\n                &lt;LinkEditor\n                  editorOffsets={\n                    editorRef.current != null\n                      ? {\n                          x: editorRef.current.getBoundingClientRect().x,\n                          y: editorRef.current.getBoundingClientRect().y,\n                        }\n                      : null\n                  }\n                /&gt;\n              ) : null}\n              &lt;Editable\n                renderElement={renderElement}\n                ...\n</code></pre>\n\n<pre><code class=\"language-javascript\"># src/components/LinkEditor.js\n\nimport { ReactEditor } from \"slate-react\";\n\nexport default function LinkEditor({ editorOffsets }) {\n  const linkEditorRef = useRef(null);\n\n  const [linkNode, path] = Editor.above(editor, {\n    match: (n) => n.type === \"link\",\n  });\n\n  useEffect(() => {\n    const linkEditorEl = linkEditorRef.current;\n    if (linkEditorEl == null) {\n      return;\n    }\n\n    const linkDOMNode = ReactEditor.toDOMNode(editor, linkNode);\n    const {\n      x: nodeX,\n      height: nodeHeight,\n      y: nodeY,\n    } = linkDOMNode.getBoundingClientRect();\n\n    linkEditorEl.style.display = \"block\";\n    linkEditorEl.style.top = `${nodeY + nodeHeight &mdash; editorOffsets.y}px`;\n    linkEditorEl.style.left = `${nodeX &mdash; editorOffsets.x}px`;\n  }, [editor, editorOffsets.x, editorOffsets.y, node]);\n\n  if (editorOffsets == null) {\n    return null;\n  }\n\n  return &lt;Card ref={linkEditorRef} className={\"link-editor\"}&gt;&lt;/Card&gt;;\n}\n</code></pre>\n\n<p>SlateJS internally maintains maps of nodes to their respective DOM elements. We access that map and find the link’s DOM element using <a href=\"https://github.com/ianstormtaylor/slate/blob/41cd18b5683fbbdadb570da37a919e24a28e3de1/packages/slate-react/src/plugin/react-editor.ts#L220\"><code>ReactEditor.toDOMNode</code></a>.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534650043\"\n\t\t\tvideotitle=\"Selection inside a link shows the link editor popover.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Selection inside a link shows the link editor popover.</figcaption>\n\t\n</figure>\n\n<p>As seen in the video above, when a link is inserted and doesn’t have a URL, because the selection is inside the link, it opens the link editor thereby giving the user a way to type in a URL for the newly inserted link and hence closes the loop on the user experience there.</p>\n\n<p>We now add an input element and a button to the <code>LinkEditor</code> that let the user type in a URL and apply it to the link node. We use the <a href=\"https://www.npmjs.com/package/is-url\"><code>isUrl</code></a> package for URL validation.</p>\n\n<pre><code class=\"language-javascript\"># src/components/LinkEditor.js\n\nimport isUrl from \"is-url\";\n\nexport default function LinkEditor({ editorOffsets }) {\n\nconst [linkURL, setLinkURL] = useState(linkNode.url);\n\n  // update state if `linkNode` changes \n  useEffect(() =&gt; {\n    setLinkURL(linkNode.url);\n  }, [linkNode]);\n\n  const onLinkURLChange = useCallback(\n    (event) =&gt; setLinkURL(event.target.value),\n    [setLinkURL]\n  );\n\n  const onApply = useCallback(\n    (event) =&gt; {\n      Transforms.setNodes(editor, { url: linkURL }, { at: path });\n    },\n    [editor, linkURL, path]\n  );\n\nreturn (\n ...\n        &lt;Form.Control\n          size=\"sm\"\n          type=\"text\"\n          value={linkURL}\n          onChange={onLinkURLChange}\n        /&gt;\n        &lt;Button\n          className={\"link-editor-btn\"}\n          size=\"sm\"\n          variant=\"primary\"\n          disabled={!isUrl(linkURL)}\n          onClick={onApply}\n        &gt;\n          Apply\n        &lt;/Button&gt;\n   ...\n );\n</code></pre>\n\n<p>With the form elements wired up, let’s see if the link editor works as expected.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534650772\"\n\t\t\tvideotitle=\"Editor losing selection on clicking inside link editor\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Editor losing selection on clicking inside link editor</figcaption>\n\t\n</figure>\n\n<p>As we see here in the video, when the user tries to click into the input, the link editor disappears. This is because as we render the link editor outside the <code>Editable</code> component, when the user clicks on the input element, SlateJS thinks the editor has lost focus and resets the <code>selection</code> to be <code>null</code> which removes the <code>LinkEditor</code> since <code>isLinkActiveAtSelection</code> is not <code>true</code> anymore.  There is an open <a href=\"https://github.com/ianstormtaylor/slate/issues/3412\">GitHub Issue</a> that talks about this Slate behavior. One way to solve this is to track the previous selection of a user as it changes and when the editor does lose focus, we could look at the previous selection and still show a link editor menu if previous selection had a link in it. Let’s update the <code>useSelection</code> hook to remember the previous selection and return that to the Editor component.</p>\n\n<pre><code class=\"language-javascript\">\n# src/hooks/useSelection.js\nexport default function useSelection(editor) {\n  const [selection, setSelection] = useState(editor.selection);\n  const previousSelection = useRef(null);\n  const setSelectionOptimized = useCallback(\n    (newSelection) => {\n      if (areEqual(selection, newSelection)) {\n        return;\n      }\n      previousSelection.current = selection;\n      setSelection(newSelection);\n    },\n    [setSelection, selection]\n  );\n\n  return [previousSelection.current, selection, setSelectionOptimized];\n}\n</code></pre>\n\n<p>We then update the logic in the <code>Editor</code> component to show the link menu even if the previous selection had a link in it.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\"># src/components/Editor.js\n\n\n  const [previousSelection, selection, setSelection] = useSelection(editor);\n\n  let selectionForLink = null;\n  if (isLinkNodeAtSelection(editor, selection)) {\n    selectionForLink = selection;\n  } else if (selection == null && isLinkNodeAtSelection(editor, previousSelection)) {\n    selectionForLink = previousSelection;\n  }\n\n  return (\n    ...\n            &lt;div className=\"editor\" ref={editorRef}&gt;\n              {selectionForLink != null ? (\n                &lt;LinkEditor\n                  selectionForLink={selectionForLink}\n                  editorOffsets={..}\n  ...\n);\n</code></pre>\n</div>\n\n<p>We then update <code>LinkEditor</code> to use <code>selectionForLink</code> to look up the link node, render below it and update it’s URL.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Link.js\nexport default function LinkEditor({ editorOffsets, selectionForLink }) {\n  ...\n  const [node, path] = Editor.above(editor, {\n    at: selectionForLink,\n    match: (n) => n.type === \"link\",\n  });\n  ...\n</code></pre>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534651383\"\n\t\t\tvideotitle=\"Editing link using the LinkEditor component.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Editing link using the LinkEditor component.</figcaption>\n\t\n</figure>\n\n<h4 id=\"detecting-links-in-text\">Detecting Links In Text</h4>\n\n<p>Most of the word processing applications identify and convert links inside text to link objects. Let’s see how that would work in the editor before we start building it.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534651788\"\n\t\t\tvideotitle=\"Links being detected as the user types them in.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Links being detected as the user types them in.</figcaption>\n\t\n</figure>\n\n<p>The steps of the logic to enable this behavior would be:</p>\n\n<ol>\n<li>As the document changes with the user typing, find the last character inserted by the user. If that character is a space, we know there must be a word that might have come before it.</li>\n<li>If the last character was space, we mark that as the end boundary of the word that came before it. We then traverse back character by character inside the text node to find  where that word began. During this traversal, we have to be careful to not go past the edge of the start of the node into the previous node.</li>\n<li>Once we have found the start and end boundaries of the word before, we check the string of the word and see if that was a URL. If it was, we convert it into a link node.</li>\n</ol>\n\n<p>Our logic lives in a util function <code>identifyLinksInTextIfAny</code> that lives in <code>EditorUtils</code> and is called inside the <code>onChange</code> in <code>Editor</code> component.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Editor.js\n\n  const onChangeHandler = useCallback(\n    (document) => {\n      ...\n      identifyLinksInTextIfAny(editor);\n    },\n    [editor, onChange, setSelection]\n  );\n</code></pre>\n\n<p>Here is <code>identifyLinksInTextIfAny</code> with the logic for Step 1 implemented:</p>\n\n<pre><code class=\"language-javascript\">export function identifyLinksInTextIfAny(editor) {\n  // if selection is not collapsed, we do not proceed with the link  \n  // detection\n  if (editor.selection == null || !Range.isCollapsed(editor.selection)) {\n    return;\n  }\n\n  const [node, _] = Editor.parent(editor, editor.selection);\n\n  // if we are already inside a link, exit early.\n  if (node.type === \"link\") {\n    return;\n  }\n\n  const [currentNode, currentNodePath] = Editor.node(editor, editor.selection);\n\n  // if we are not inside a text node, exit early.\n  if (!Text.isText(currentNode)) {\n    return;\n  }\n\n  let [start] = Range.edges(editor.selection);\n  const cursorPoint = start;\n\n  const startPointOfLastCharacter = Editor.before(editor, editor.selection, {\n    unit: \"character\",\n  });\n\n  const lastCharacter = Editor.string(\n    editor,\n    Editor.range(editor, startPointOfLastCharacter, cursorPoint)\n  );\n\n  if(lastCharacter !== ' ') {\n    return;\n  }\n</code></pre>\n\n<p>There are two SlateJS helper functions which make things easy here.</p>\n\n<ul>\n<li><a href=\"https://github.com/ianstormtaylor/slate/blob/41cd18b5683fbbdadb570da37a919e24a28e3de1/packages/slate/src/interfaces/editor.ts#L369\"><code>Editor.before</code></a> &mdash; Gives us the point before a certain location. It takes <code>unit</code> as a parameter so we could ask for the character/word/block etc before the <code>location</code> passed in.</li>\n<li><a href=\"https://github.com/ianstormtaylor/slate/blob/41cd18b5683fbbdadb570da37a919e24a28e3de1/packages/slate/src/interfaces/editor.ts#L1462\"><code>Editor.string</code></a> &mdash; Gets the string inside a range.</li>\n</ul>\n\n<p>As an example, the diagram below explains what values of these variables are when the user inserts a character ‘E’ and their cursor is sitting after it.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Diagram explaining where cursorPoint and startPointOfLastCharacter point to after step 1 with an example\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      <code>cursorPoint</code> and <code>startPointOfLastCharacter</code> after Step 1 with an example text. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8c2f588a-71d9-43a2-8236-5fa99f375a48/link-detection-step-1.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>If the text ’ABCDE’ was the first text node of the first paragraph in the document, our point values would be &mdash;</p>\n\n<pre><code class=\"language-javascript\">cursorPoint = { path: [0,0], offset: 5}\nstartPointOfLastCharacter = { path: [0,0], offset: 4}\n</code></pre>\n\n<p>If the last character was a space, we know where it started &mdash; <code>startPointOfLastCharacter.</code>Let’s move to step-2 where we move backwards character-by-character until either we find another space or the start of the text node itself.</p>\n\n<pre><code class=\"language-javascript\">...\n \n  if (lastCharacter !== \" \") {\n    return;\n  }\n\n  let end = startPointOfLastCharacter;\n  start = Editor.before(editor, end, {\n    unit: \"character\",\n  });\n\n  const startOfTextNode = Editor.point(editor, currentNodePath, {\n    edge: \"start\",\n  });\n\n  while (\n    Editor.string(editor, Editor.range(editor, start, end)) !== \" \" &&\n    !Point.isBefore(start, startOfTextNode)\n  ) {\n    end = start;\n    start = Editor.before(editor, end, { unit: \"character\" });\n  }\n\n  const lastWordRange = Editor.range(editor, end, startPointOfLastCharacter);\n  const lastWord = Editor.string(editor, lastWordRange);\n</code></pre>\n\n<p>Here is a diagram that shows where these different points point to once we find the last word entered to be <code>ABCDE</code>.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Diagram explaining where different points are after step 2 of link detection with an example\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Where different points are after step 2 of link detection with an example. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e7729144-0b85-46b4-9018-46a20325881e/link-detection-step-2.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Note that <code>start</code> and <code>end</code> are the points before and after the space there. Similarly, <code>startPointOfLastCharacter</code> and <code>cursorPoint</code> are the points before and after the space user just inserted. Hence <code>[end,startPointOfLastCharacter]</code> gives us the last word inserted.</p>\n\n<p>We log the value of <code>lastWord</code> to the console and verify the values as we type.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534652977\"\n\t\t\tvideotitle=\"Console logs verifying last word as entered by the user after the logic in Step 2.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Console logs verifying last word as entered by the user after the logic in Step 2.</figcaption>\n\t\n</figure>\n\n<p>Now that we have deduced what the last word was that the user typed, we verify that it was a URL indeed and convert that range into a link object.  This conversion looks similar to how the toolbar link button converted a user&rsquo;s selected text into a link.</p>\n\n<pre><code class=\"language-javascript\">if (isUrl(lastWord)) {\n    Promise.resolve().then(() => {\n      Transforms.wrapNodes(\n        editor,\n        { type: \"link\", url: lastWord, children: [{ text: lastWord }] },\n        { split: true, at: lastWordRange }\n      );\n    });\n  }\n</code></pre>\n\n<p><code>identifyLinksInTextIfAny</code> is called inside Slate’s <code>onChange</code> so we wouldn’t want to update the document structure inside the <code>onChange</code>. Hence, we put this update on our task queue with a <code>Promise.resolve().then(..)</code> call.</p>\n\n<p>Let’s see the logic come together in action! We verify if we insert links at the end, in the middle or the start of a text node.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534653441\"\n\t\t\tvideotitle=\"Links being detected as user is typing them.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Links being detected as user is typing them.</figcaption>\n\t\n</figure>\n\n<p>With that, we have wrapped up functionalities for links on the editor and move on to Images.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"handling-images\">Handling Images</h3>\n\n<p>In this section, we focus on adding support to render image nodes, add new images and update image captions. Images, in our document structure, would be represented as Void nodes. Void nodes in SlateJS (analogous to <a href=\"https://www.w3.org/TR/2011/WD-html-markup-20110405/syntax.html#void-element\">Void elements</a> in HTML spec) are such that their contents are not editable text. That allows us to render images as voids. Because of Slate’s flexibility with rendering, we can still render our own editable elements inside Void elements &mdash; which we will for image caption-editing. SlateJS has an <a href=\"https://www.slatejs.org/examples/editable-voids\">example</a> which demonstrates how you can embed an entire Rich Text Editor inside a Void element.</p>\n\n<p>To render images, we configure the editor to treat images as Void elements and provide a render implementation of how images should be rendered. We add an image to our ExampleDocument and verify that it renders correctly with the caption.</p>\n\n<pre><code class=\"language-javascript\"># src/hooks/useEditorConfig.js\n\nexport default function useEditorConfig(editor) {\n  const { isVoid } = editor;\n  editor.isVoid = (element) =&gt; {\n    return [\"image\"].includes(element.type) || isVoid(element);\n  };\n  ...\n}\n\nfunction renderElement(props) {\n  const { element, children, attributes } = props;\n  switch (element.type) {\n    case \"image\":\n      return &lt;Image {...props} /&gt;;\n...\n``\n\n\n\n``\n# src/components/Image.js\nfunction Image({ attributes, children, element }) {\n  return (\n    &lt;div contentEditable={false} {...attributes}&gt;\n      &lt;div\n        className={classNames({\n          \"image-container\": true,\n        })}\n      &gt;\n        &lt;img\n          src={String(element.url)}\n          alt={element.caption}\n          className={\"image\"}\n        /&gt;\n        &lt;div className={\"image-caption-read-mode\"}&gt;{element.caption}&lt;/div&gt;\n      &lt;/div&gt;     \n      {children}\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<p>Two things to remember when trying to render void nodes with SlateJS:</p>\n\n<ul>\n<li>The root DOM element should have <code>contentEditable={false}</code> set on it so that SlateJS treats its contents so. Without this, as you interact with the void element, SlateJS may try to compute selections etc. and break as a result.</li>\n<li>Even if Void nodes don’t have any child nodes (like our image node as an example), we still need to render <code>children</code> and provide an empty text node as child (see <code>ExampleDocument</code> below) which is treated as a selection point of the Void element by SlateJS</li>\n</ul>\n\n<p>We now update the <code>ExampleDocument</code> to add an image and verify that it shows up with the caption in the editor.</p>\n\n<pre><code class=\"language-javascript\"># src/utils/ExampleDocument.js\n\nconst ExampleDocument = [\n   ...\n   {\n    type: \"image\",\n    url: \"/photos/puppy.jpg\",\n    caption: \"Puppy\",\n    // empty text node as child for the Void element.\n    children: [{ text: \"\" }],\n  },\n];\n</code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\t\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Image rendered in the Editor\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Image rendered in the Editor. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/eafd088d-0fb2-4a28-a063-84f0fa186b71/image-rendering.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Now let’s focus on caption-editing. The way we want this to be a seamless experience for the user is that when they click on the caption, we show a text input where they can edit the caption. If they click outside the input or hit the RETURN key, we treat that as a confirmation to apply the caption. We then update the caption on the image node and switch the caption back to read mode. Let’s see it in action so we have an idea of what we’re building.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534654272\"\n\t\t\tvideotitle=\"Image Caption Editing in action.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Image Caption Editing in action.</figcaption>\n\t\n</figure>\n\n<p>Let’s update our Image component to have a state for caption’s read-edit modes. We update the local caption state as the user updates it and when they click out (<code>onBlur</code>) or hit RETURN (<code>onKeyDown</code>), we apply the caption to the node and switch to read mode again.</p>\n\n<pre><code class=\"language-javascript\">const Image = ({ attributes, children, element }) =&gt; {\n  const [isEditingCaption, setEditingCaption] = useState(false);\n  const [caption, setCaption] = useState(element.caption);\n  ...\n\n  const applyCaptionChange = useCallback(\n    (captionInput) =&gt; {\n      const imageNodeEntry = Editor.above(editor, {\n        match: (n) =&gt; n.type === \"image\",\n      });\n      if (imageNodeEntry == null) {\n        return;\n      }\n\n      if (captionInput != null) {\n        setCaption(captionInput);\n      }\n\n      Transforms.setNodes(\n        editor,\n        { caption: captionInput },\n        { at: imageNodeEntry[1] }\n      );\n    },\n    [editor, setCaption]\n  );\n\n  const onCaptionChange = useCallback(\n    (event) =&gt; {\n      setCaption(event.target.value);\n    },\n    [editor.selection, setCaption]\n  );\n\n  const onKeyDown = useCallback(\n    (event) =&gt; {\n      if (!isHotkey(\"enter\", event)) {\n        return;\n      }\n\n      applyCaptionChange(event.target.value);\n      setEditingCaption(false);\n    },\n    [applyCaptionChange, setEditingCaption]\n  );\n\n  const onToggleCaptionEditMode = useCallback(\n    (event) =&gt; {\n      const wasEditing = isEditingCaption;\n      setEditingCaption(!isEditingCaption);\n      wasEditing && applyCaptionChange(caption);\n    },\n    [editor.selection, isEditingCaption, applyCaptionChange, caption]\n  );\n\n  return (\n        ...\n        {isEditingCaption ? (\n          &lt;Form.Control\n            autoFocus={true}\n            className={\"image-caption-input\"}\n            size=\"sm\"\n            type=\"text\"\n            defaultValue={element.caption}\n            onKeyDown={onKeyDown}\n            onChange={onCaptionChange}\n            onBlur={onToggleCaptionEditMode}\n          /&gt;\n        ) : (\n          &lt;div\n            className={\"image-caption-read-mode\"}\n            onClick={onToggleCaptionEditMode}\n          &gt;\n            {caption}\n          &lt;/div&gt;\n        )}\n      &lt;/div&gt;\n      ...\n</code></pre>\n\n<p>With that, the caption editing functionality is complete. We now move to adding a way for users to upload images to the editor. Let’s add a toolbar button that lets users select and upload an image.</p>\n\n<pre><code class=\"language-javascript\"># src/components/Toolbar.js\n\nconst onImageSelected = useImageUploadHandler(editor, previousSelection);\n\nreturn (\n    &lt;div className=\"toolbar\"&gt;\n    ....\n   &lt;ToolBarButton\n        isActive={false}\n        as={\"label\"}\n        htmlFor=\"image-upload\"\n        label={\n          &lt;&gt;\n            &lt;i className={`bi ${getIconForButton(\"image\")}`} /&gt;\n            &lt;input\n              type=\"file\"\n              id=\"image-upload\"\n              className=\"image-upload-input\"\n              accept=\"image/png, image/jpeg\"\n              onChange={onImageSelected}\n            /&gt;\n          &lt;/&gt;\n        }\n      /&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>As we work with image uploads, the code could grow quite a bit so we move the image-upload handling to a hook <code>useImageUploadHandler</code> that gives out a callback attached to the file-input element. We’ll discuss shortly about why it needs the <code>previousSelection</code> state.</p>\n\n<p>Before we implement <code>useImageUploadHandler</code>, we’ll set up the server to be able to upload an image to. We setup an Express server and install two other packages &mdash; <a href=\"https://www.npmjs.com/package/cors\"><code>cors</code></a> and <a href=\"https://www.npmjs.com/package/multer\"><code>multer</code></a> that handle file uploads for us.</p>\n\n<pre><code class=\"language-bash\">yarn add express cors multer\n</code></pre>\n\n<p>We then add a <code>src/server.js</code> script that configures the Express server with cors and multer and exposes an endpoint <code>/upload</code> which we will upload the image to.</p>\n\n<pre><code class=\"language-javascript\"># src/server.js\n\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, \"./public/photos/\");\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.originalname);\n  },\n});\n\nvar upload = multer({ storage: storage }).single(\"photo\");\n\napp.post(\"/upload\", function (req, res) {\n  upload(req, res, function (err) {\n    if (err instanceof multer.MulterError) {\n      return res.status(500).json(err);\n    } else if (err) {\n      return res.status(500).json(err);\n    }\n    return res.status(200).send(req.file);\n  });\n});\n\napp.use(cors());\napp.listen(port, () =&gt; console.log(`Listening on port ${port}`));\n</code></pre>\n\n<p>Now that we have the server setup, we can focus on handling the image upload. When the user uploads an image, it could be a few seconds before the image gets uploaded and we have a URL for it. However, we do what to give the user immediate feedback that the image upload is in progress so that they know the image is being inserted in the editor. Here are the steps we implement to make this behavior work -</p>\n\n<ol>\n<li>Once the user selects an image, we insert an image node at the user’s cursor position with a flag <code>isUploading</code> set on it so we can show the user a loading state.</li>\n<li>We send the request to the server to upload the image.</li>\n<li>Once the request is complete and we have an image URL, we set that on the image and remove the loading state.</li>\n</ol>\n\n<p>Let’s begin with the first step where we insert the image node. Now, the tricky part here is we run into the same issue with selection as with the link button in the toolbar. As soon as the user clicks on the Image button in the toolbar, the editor loses focus and the selection becomes <code>null</code>. If we try to insert an image, we don’t know where the user&rsquo;s cursor was. Tracking <code>previousSelection</code> gives us that location and we use that to insert the node.</p>\n\n<pre><code class=\"language-javascript\"># src/hooks/useImageUploadHandler.js\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function useImageUploadHandler(editor, previousSelection) {\n  return useCallback(\n    (event) => {\n      event.preventDefault();\n      const files = event.target.files;\n      if (files.length === 0) {\n        return;\n      }\n      const file = files[0];\n      const fileName = file.name;\n      const formData = new FormData();\n      formData.append(\"photo\", file);\n\n      const id = uuidv4();\n\n      Transforms.insertNodes(\n        editor,\n        {\n          id,\n          type: \"image\",\n          caption: fileName,\n          url: null,\n          isUploading: true,\n          children: [{ text: \"\" }],\n        },\n        { at: previousSelection, select: true }\n      );\n    },\n    [editor, previousSelection]\n  );\n}\n</code></pre>\n\n<p>As we insert the new image node, we also assign it an identifier <code>id</code> using the <a href=\"https://www.npmjs.com/package/uuid\">uuid</a> package. We’ll discuss in Step (3)’s implementation why we need that. We now update the image component to use the <code>isUploading</code> flag to show a loading state.</p>\n\n<pre><code class=\"language-javascript\">{!element.isUploading && element.url != null ? (\n   &lt;img src={element.url} alt={caption} className={\"image\"} /&gt;\n) : (\n   &lt;div className={\"image-upload-placeholder\"}&gt;\n        &lt;Spinner animation=\"border\" variant=\"dark\" /&gt;\n   &lt;/div&gt;\n)}\n</code></pre>\n\n<p>That completes the implementation of step 1. Let’s verify that we are able to select an image to upload, see the image node getting inserted with a loading indicator where it was inserted in the document.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534655011\"\n\t\t\tvideotitle=\"Image upload creating an image node with loading state.\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Image upload creating an image node with loading state.</figcaption>\n\t\n</figure>\n\n<p>Moving to Step (2), we will use <a href=\"https://www.npmjs.com/package/axios\">axois</a> library to send a request to the server.</p>\n\n<pre><code class=\"language-javascript\">export default function useImageUploadHandler(editor, previousSelection) {\n  return useCallback((event) => {\n    ....\n    Transforms.insertNodes(\n     …\n     {at: previousSelection, select: true}\n    );\n\n    axios\n      .post(\"/upload\", formData, {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n        },\n      })\n      .then((response) => {\n           // update the image node.\n       })\n      .catch((error) => {\n        // Fire another Transform.setNodes to set an upload failed state on the image\n      });\n  }, [...]);\n}\n</code></pre>\n\n<p>We verify that the image upload works and the image does show up in the <code>public/photos</code> folder of the app. Now that the image upload is complete, we move to Step (3) where we want to set the URL on the image in the <code>resolve()</code> function of the axios promise. We could update the image with <code>Transforms.setNodes</code> but we have a problem &mdash; we do not have the path to the newly inserted image node. Let’s see what our options are to get to that image &mdash;</p>\n\n<ul>\n<li>Can’t we use <code>editor.selection</code> as the selection must be on the newly inserted image node? We cannot guarantee this since while the image was uploading, the user might have clicked somewhere else and the selection might have changed.</li>\n<li>How about using <code>previousSelection</code>  which we used to insert the image node in the first place? For the same reason we can’t use <code>editor.selection</code>, we can’t use <code>previousSelection</code> since it may have changed too.</li>\n<li>SlateJS has a <a href=\"https://docs.slatejs.org/libraries/slate-history\">History</a> module that tracks all the changes happening to the document. We could use this module to search the history and find the last inserted image node. This also isn’t completely reliable if it took longer for the image to upload and the user inserted more images in different parts of the document before the first upload completed.</li>\n<li>Currently, <code>Transform.insertNodes</code>’s API doesn’t return any information about the inserted nodes. If it could return the paths to the inserted nodes, we could use that to find the precise image node we should update.</li>\n</ul>\n\n<p>Since none of the above approaches work, we apply an <code>id</code> to the inserted image node (in Step (1)) and use the same <code>id</code> again to locate it when the image upload is complete. With that, our code for Step (3) looks like below &mdash;</p>\n\n<pre><code class=\"language-javascript\">axios\n        .post(\"/upload\", formData, {\n          headers: {\n            \"content-type\": \"multipart/form-data\",\n          },\n        })\n        .then((response) => {\n          const newImageEntry = Editor.nodes(editor, {\n            match: (n) => n.id === id,\n          });\n\n          if (newImageEntry == null) {\n            return;\n          }\n\n          Transforms.setNodes(\n            editor,\n            { isUploading: false, url: `/photos/${fileName}` },\n            { at: newImageEntry[1] }\n          );\n        })\n        .catch((error) => {\n          // Fire another Transform.setNodes to set an upload failure state\n          // on the image.        \n        });\n</code></pre>\n\n<p>With the implementation of all three steps complete, we are ready to test the image upload end to end.</p>\n\n\n<figure class=\"video-embed-container break-out\">\n  <div class=\"video-embed-container--wrapper\"\n\t\n  >\n\t\t<lite-vimeo\n\t\t\tvideoid=\"534655724\"\n\t\t\tvideotitle=\"Image upload working end-to-end\"\n\t\t></lite-vimeo>\n\t</div>\n\t\n\t\t<figcaption>Image upload working end-to-end</figcaption>\n\t\n</figure>\n\n<p>With that, we’ve wrapped up Images for our editor. Currently, we show a loading state of the same size irrespective of the image. This could be a jarring experience for the user if the loading state is replaced by a drastically smaller or bigger image when the upload completes. A good follow up to the upload experience is getting the image dimensions before the upload and showing a placeholder of that size so that transition is seamless. The hook we add above could be extended to support other media types like video or documents and render those types of nodes as well.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>In this article, we have built a WYSIWYG Editor that has a basic set of functionalities and some micro user-experiences like link detection, in-place link editing and image caption editing that helped us go deeper with SlateJS and concepts of Rich Text Editing in general. If this problem space surrounding Rich Text Editing or Word Processing interests you, some of the cool problems to go after could be:</p>\n\n<ul>\n<li>Collaboration</li>\n<li>A richer text editing experience that supports text alignments, inline images, copy-paste, changing font and text colors etc.</li>\n<li>Importing from popular formats like Word documents and Markdown.</li>\n</ul>\n\n<p>If you want to learn more SlateJS, here are some links that might be helpful.</p>\n\n<ul>\n<li><a href=\"https://www.slatejs.org/examples/richtext\">SlateJS Examples</a><br />\nA lot of examples that go beyond the basics and build functionalities that are usually found in Editors like Search &amp; Highlight, Markdown Preview and Mentions.</li>\n<li><a href=\"https://docs.slatejs.org/api/transforms\">API Docs</a><br />\nReference to a lot of helper functions exposed by SlateJS that one might want to keep handy when trying to perform complex queries/transformations on SlateJS objects.</li>\n</ul>\n\n<p>Lastly, SlateJS’s <a href=\"https://slate-slack.herokuapp.com/\">Slack Channel</a> is a very active community of web developers building Rich Text Editing applications using SlateJS and a great place to learn more about the library and get help if needed.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "Trigonometry in CSS and JavaScript: Beyond Triangles"
        ],
        "link": [
            "https://tympanus.net/codrops/2021/06/04/trigonometry-in-css-and-javascript-beyond-triangles/"
        ],
        "dc:creator": [
            "Michelle Barker"
        ],
        "pubDate": [
            "Fri, 04 Jun 2021 10:11:11 +0000"
        ],
        "category": [
            "Tutorials",
            "canvas",
            "circle",
            "clip-path",
            "geometry",
            "trigonometry"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?p=54742",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>In part three of our series we’ll look at how to create more interesting shapes with trigonometry, and how to draw them with the Canvas API.</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/04/trigonometry-in-css-and-javascript-beyond-triangles/\">Trigonometry in CSS and JavaScript: Beyond Triangles</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "\n<p>In the <a href=\"https://tympanus.net/codrops/2021/06/02/trigonometry-in-css-and-javascript-getting-creative-with-trigonometric-functions/\">previous article</a> we looked at how to clip an equilateral triangle with trigonometry, but what about some even more interesting geometric shapes?</p>\n\n\n\n<p>This article is the 3rd part in a series on Trigonometry in CSS and JavaScript:</p>\n\n\n\n<ol><li><a href=\"https://tympanus.net/codrops/?p=54631\">Introduction to Trigonometry</a></li><li><a href=\"https://tympanus.net/codrops/?p=54673\">Getting Creative with Trigonometric Functions</a></li><li><strong>Beyond Triangles</strong> (this article)</li></ol>\n\n\n\n<h2>Plotting regular polygons</h2>\n\n\n\n<p>A regular polygon is a polygon with all equal sides and all equal angles. An equilateral triangle is one, so too is a pentagon, hexagon, decagon, and any number of others that meet the criteria. We can use trigonometry to plot the points of a regular polygon by visualizing each set of coordinates as points of a triangle.</p>\n\n\n\n<h3>Polar coordinates</h3>\n\n\n\n<p>If we visualize a circle on an <em>x/y</em> axis, draw a line from the center to any point on the outer edge, then connect that point to the horizontal axis, we get a triangle.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-01-1.png\" alt=\"A circle centrally positioned on an axis, with a line drawn along the radius to form a triangle\" class=\"wp-image-54757\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-01-1.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-01-1-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-01-1-768x432.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>If we repeatedly rotated the line at equal intervals six times around the circle, we could plot the points of a hexagon.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-02.png\" alt=\"A hexagon, made by drawing lines along the radius of the circle\" class=\"wp-image-54744\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-02.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-02-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-02-768x432.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>But how do we get the <em>x</em> and <em>y</em> coordinates for each point? These are known as <a href=\"https://en.wikipedia.org/wiki/Cartesian_coordinate_system\">cartesian coordinates</a>, whereas <a href=\"https://en.wikipedia.org/wiki/Polar_coordinate_system\">polar coordinates</a> tell us the distance and angle from a particular point. Essentially, the radius of the circle and the angle of the line. Drawing a line from the center to the edge gives us a triangle where <em>hypotenuse</em> is equal to the circle’s radius.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-03.png\" alt=\"Showing the triangle made by drawing a line from one of the vertices, with the hypotenuse equal to the radius, and the angle as 2pi divided by 6\" class=\"wp-image-54745\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-03.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-03-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-03-768x432.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>We can get the angle in degrees by diving 360 by the number of vertices our polygon has, or in radians by diving 2pi radians. For a hexagon with a radius of 100, the polar coordinates of the uppermost point of the triangle in the diagram would be written (100, 1.0472rad) <em>(r, θ)</em>. </p>\n\n\n\n<p>An infinite number of points would enable us to plot a circle.</p>\n\n\n\n<h3>Polar to cartesian coordinates</h3>\n\n\n\n<p>We need to plot the points of our polygon as cartesian coordinates – their position on the <em>x</em> and <em>y</em> axis.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-04-1.png\" alt=\"\" class=\"wp-image-54758\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-04-1.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-04-1-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-04-1-768x432.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>As we know the radius and the angle, we need to calculate the <em>adjacent</em> side length for the <em>x</em> position, and the <em>opposite</em> side length for the <em>y</em> position.</p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-05.png\" alt=\"Showing the triangle superimposed on the hexagon, and the equations needed to calculate the opposite and adjacent sides.\" class=\"wp-image-54749\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-05.png 800w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-05-400x225.png 400w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/05/trigonometry_Article-3-05-768x432.png 768w\" sizes=\"(max-width: 800px) 100vw, 800px\" /></figure>\n\n\n\n<p>Therefore we need <em>Cosine</em> for the former and <em>Sine</em> for the latter:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>adjacent = cos(angle) * hypotenuse\nopposite = sin(angle) * hypotenuse</code></pre>\n\n\n\n<p>We can write a JS function that returns an array of coordinates:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const plotPoints = (radius, numberOfPoints) => {\n\n\t/* step used to place each point at equal distances */\n\tconst angleStep = (Math.PI * 2) / numberOfPoints\n\n\tconst points = []\n\n\tfor (let i = 1; i <= numberOfPoints; i++) {\n\t\t/* x &#038; y coordinates of the current point */\n\t\tconst x = Math.cos(i * angleStep) * radius\n\t\tconst y = Math.sin(i * angleStep) * radius\n\n\t\t/* push the point to the points array */\n\t\tpoints.push({ x, y })\n\t}\n\t\n\treturn points\n}</code></pre>\n\n\n\n<p>We could then convert each array item into a string with the <em>x</em> and <em>y</em> coordinates in pixels, then use the <code>join()</code> method to join them into a string for use in a clip path:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const polygonCoordinates = plotPoints(100, 6).map(({ x, y }) => {\n\t\treturn `${x}px ${y}px`\n\t}).join(',')\n\nshape.style.clipPath = `polygon(${polygonCoordinates})`</code></pre>\n\n\n<p class='codepen'  data-height='405' data-theme-id='dark' data-slug-hash='b0dd9cdddfdc43bf146dccd48d915b2c' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/b0dd9cdddfdc43bf146dccd48d915b2c\">Clip-path polygon</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>This clips a polygon, but you’ll notice we can only see one quarter of it. The clip path is positioned in the top left corner, with the center of the polygon in the corner. This is because at some points, calculating the cartesian coordinates from the polar coordinates is going to result in negative values. The area we’re clipping is outside of the element’s bounding box.</p>\n\n\n\n<p>To position the clip path centrally, we need to add half of the width and height respectively to our calculations:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const xPosition = shape.clientWidth / 2\nconst yPosition = shape.clientHeight / 2\n\nconst x = xPosition + Math.cos(i * angleStep) * radius\nconst y = yPosition + Math.sin(i * angleStep) * radius</code></pre>\n\n\n\n<p>Let’s modify our function:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const plotPoints = (radius, numberOfPoints) => {\n\tconst xPosition = shape.clientWidth / 2\n\tconst yPosition = shape.clientHeight / 2\n\tconst angleStep = (Math.PI * 2) / numberOfPoints\n\tconst points = []\n\n\tfor (let i = 1; i <= numberOfPoints; i++) {\n\t\tconst x = xPosition + Math.cos(i * angleStep) * radius\n\t\tconst y = yPosition + Math.sin(i * angleStep) * radius\n\n\t\tpoints.push({ x, y })\n\t}\n\t\n\treturn points\n}</code></pre>\n\n\n\n<p>Our clip path is now positioned in the center.</p>\n\n\n<p class='codepen'  data-height='425' data-theme-id='dark' data-slug-hash='fccf2a1d05919d2b3ba1b965f43ee93e' data-default-tab='js,result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/fccf2a1d05919d2b3ba1b965f43ee93e\">Clip-path polygon</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Star polygons</h2>\n\n\n\n<p>The types of polygons we’ve plotted so far are known as <em>convex</em> polygons. We can also plot <em>star</em> polygons by modifying our code in the <code>plotPoints()</code> function ever so slightly. For every other point, we could change the radius value to be 50% of the original value:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">/* Set every other point’s radius to be 50% */\nconst radiusAtPoint = i % 2 === 0 ? radius * 0.5 : radius\n\t\t\n/* x & y coordinates of the current point */\nconst x = xPosition + Math.cos(i * angleStep) * radiusAtPoint\nconst y = yPosition + Math.sin(i * angleStep) * radiusAtPoint</code></pre>\n\n\n<p class='codepen'  data-height='403' data-theme-id='dark' data-slug-hash='45a86bd83bb3ac5046b4ef0aa80fe74f' data-default-tab='js,result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/45a86bd83bb3ac5046b4ef0aa80fe74f\">Clip-path star polygon</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>Here’s an interactive example. Try adjusting the values for the number of points and the inner radius to see the different shapes that can be made.</p>\n\n\n<p class='codepen'  data-height='506' data-theme-id='dark' data-slug-hash='0a5c0eeb056077413e08af06370a8bed' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/0a5c0eeb056077413e08af06370a8bed\">Clip-path adjustable polygon</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Drawing with the Canvas API</h2>\n\n\n\n<p>So far we’ve plotted values to use in CSS, but trigonometry has plenty of applications beyond that. For instance, we can plot points in exactly the same way to draw on a <code>&lt;canvas&gt;</code> with Javascript. In this function, we’re using the same function as before (<code>plotPoints()</code>) to create an array of polygon points, then we draw a line from one point to the next:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\n\nconst draw = () => {\n\t/* Create the array of points */\n\tconst points = plotPoints()\n\t\n\t/* Move to starting position and plot the path */\n\tctx.beginPath()\n\tctx.moveTo(points[0].x, points[0].y)\n\t\n\tpoints.forEach(({ x, y }) => {\n\t\tctx.lineTo(x, y)\n\t})\n\t\n\tctx.closePath()\n\t\n\t/* Draw the line */\n\tctx.stroke()\n}</code></pre>\n\n\n<p class='codepen'  data-height='324' data-theme-id='dark' data-slug-hash='WNpjawY' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/WNpjawY\">Canvas polygon (simple)</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Spirals</h2>\n\n\n\n<p>We don’t even have to stick with polygons. With some small tweaks to our code, we can even create spiral patterns. We need to change two things here: First of all, a spiral requires multiple rotations around the point, not just one. To get the angle for each step, we can multiply <em>pi</em> by 10 (for example), instead of two, and divide that by the number of points. That will result in five rotations of the spiral (as 10<em>pi</em> divided by two is five).</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const angleStep = (Math.PI * 10) / numberOfPoints</code></pre>\n\n\n\n<p>Secondly, instead of an equal radius for every point, we’ll need to increase this with every step. We can multiply it by a number of our choosing to determine how far apart the lines of our spiral are rendered:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const multiplier = 2\nconst radius = i * multiplier\nconst x = xPosition + Math.cos(i * angleStep) * radius\nconst y = yPosition + Math.sin(i * angleStep) * radius</code></pre>\n\n\n\n<p>Putting it all together, our adjusted function to plot the points is as follows:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const plotPoints = (numberOfPoints) => {\n\tconst angleStep = (Math.PI * 10) / numberOfPoints\n\tconst xPosition = canvas.width / 2\n\tconst yPosition = canvas.height / 2\n\n\tconst points = []\n\n\tfor (let i = 1; i <= numberOfPoints; i++) {\n\t\tconst radius = i * 2 // multiply the radius to get the spiral\n\t\tconst x = xPosition + Math.cos(i * angleStep) * radius\n\t\tconst y = yPosition + Math.sin(i * angleStep) * radius\n\n\t\tpoints.push({ x, y })\n\t}\n\t\n\treturn points\n}</code></pre>\n\n\n<p class='codepen'  data-height='398' data-theme-id='dark' data-slug-hash='5643f7469da1ee8a8a96710114c0c888' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/5643f7469da1ee8a8a96710114c0c888\">Canvas spiral – simple</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>At the moment the lines of our spiral are at equal distance from each other, but we could increase the radius exponentially to get a more pleasing spiral. By using the <code>Math.pow()</code> function, we can increase the radius by a larger number for each iteration. By the <a href=\"https://www.mathsisfun.com/numbers/golden-ratio.html\">golden ratio</a>, for example:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const radius = Math.pow(i, 1.618)\nconst x = xPosition + Math.cos(i * angleStep) * radius\nconst y = yPosition + Math.sin(i * angleStep) * radius</code></pre>\n\n\n<p class='codepen'  data-height='424' data-theme-id='dark' data-slug-hash='984147ccd2a9b156b0978b985e8d554b' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/984147ccd2a9b156b0978b985e8d554b\">Canvas spiral</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h3>Animation</h3>\n\n\n\n<p>We could also rotate the spiral, using (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">requestAnimationFrame</a>). We’ll set a <code>rotation</code> variable to <em>0</em>, then on every frame increment or decrement it by a small amount. In this case I’m decrementing the rotation, to rotate the spiral anti-clockwise</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">let rotation = 0\n\nconst draw = () => {\n\tconst { width, height } = canvas\n\t\n\t/* Create points */\n\tconst points = plotPoints(400, rotation)\n\t\n\t/* Clear canvas and redraw */\n\tctx.clearRect(0, 0, width, height)\n\tctx.fillStyle = '#ffffff'\n\tctx.fillRect(0, 0, width, height)\n\t\n\t/* Move to beginning position */\n\tctx.beginPath()\n\tctx.moveTo(points[0].x, points[0].y)\n\t\n\t/* Plot lines */\n\tpoints.forEach((point, i) => {\n\t\tctx.lineTo(point.x, point.y)\n\t})\n\t\n\t/* Draw the stroke */\n\tctx.strokeStyle = '#000000'\n\tctx.stroke()\n\t\n\t/* Decrement the rotation */\n\trotation -= 0.01\n\t\n\twindow.requestAnimationFrame(draw)\n}\n\ndraw()</code></pre>\n\n\n\n<p>We’ll also need to modify our <code>plotPoints()</code> function to take the <code>rotation</code> value as an argument. We’ll use this to increment the <em>x</em> and <em>y</em> position of each point on every frame:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const x = xPosition + Math.cos(i * angleStep + rotation) * radius\nconst y = yPosition + Math.sin(i * angleStep + rotation) * radius</code></pre>\n\n\n\n<p>This is how our <code>plotPoints()</code> function looks now:</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const plotPoints = (numberOfPoints, rotation) => {\n\t/* 6 rotations of the spiral divided by number of points */\n\tconst angleStep = (Math.PI * 12) / numberOfPoints \n\t\n\t/* Center the spiral */\n\tconst xPosition = canvas.width / 2\n\tconst yPosition = canvas.height / 2\n\n\tconst points = []\n\n\tfor (let i = 1; i <= numberOfPoints; i++) {\n\t\tconst r = Math.pow(i, 1.3)\n\t\tconst x = xPosition + Math.cos(i * angleStep + rotation) * r\n\t\tconst y = yPosition + Math.sin(i * angleStep + rotation) * r\n\n\t\tpoints.push({ x, y, r })\n\t}\n\t\n\treturn points\n}</code></pre>\n\n\n<p class='codepen'  data-height='352' data-theme-id='dark' data-slug-hash='2b5d57a84573bb3371939f2e3ef9cb94' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/2b5d57a84573bb3371939f2e3ef9cb94\">Canvas spiral</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<h2>Wrapping up</h2>\n\n\n\n<p>I hope this series of articles has given you a few ideas for how to get creative with trigonometry and code. I’ll leave you with one more creative example to delve into, using the spiral method detailed above. Instead of plotting points from an array, I’m drawing circles at a new position on each iteration (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">requestAnimationFrame</a>).</p>\n\n\n<p class='codepen'  data-height='414' data-theme-id='dark' data-slug-hash='04e155fd3261f304ff9191ed965df253' data-default-tab='result' data-animations='run' data-editable='' data-embed-version='2'>\nSee the Pen <a href=\"https://codepen.io/michellebarker/pen/04e155fd3261f304ff9191ed965df253\">Canvas spiral IIII</a> by Michelle Barker (<a href=\"https://codepen.io/michellebarker\">@michellebarker</a>) on <a href=\"https://codepen.io\">CodePen</a>.dark</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n<p>Special thanks to <a href=\"https://twitter.com/georgedoescode\">George Francis</a> and <a href=\"https://twitter.com/liamegan\">Liam Egan</a>, whose wonderful creative work inspired me to delve deeper into this topic!</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/2021/06/04/trigonometry-in-css-and-javascript-beyond-triangles/\">Trigonometry in CSS and JavaScript: Beyond Triangles</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "How to Fetch Data from a Third-party API with Deno"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/deno-fetch-data-third-party-api/?utm_source=rss\"\n              title=\"How to Fetch Data from a Third-party API with Deno\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614573356denodata-1250-lossy.jpg\"\n        alt=\"How to Fetch Data from a Third-party API with Deno\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614573356denodata-1250-lossy-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614573356denodata-1250-lossy-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614573356denodata-1250-lossy-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1614573356denodata-1250-lossy.jpg 1250w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>In this article, we&#8217;ll explore <a href=\"https://deno.land/\">Deno</a>, a relatively new tool built as a competitor/replacement for Node.js that offers a more secure environment and comes with TypeScript support out the box.</strong></p>\n<p>We&#8217;ll use Deno to build a command-line tool to make requests to a third-party API — the <a href=\"https://swapi.dev/\">Star Wars API</a> — and see what features Deno provides, how it differs from Node, and what it&#8217;s like to work with.</p>\n<p>Deno is a more opinionated runtime that’s written in TypeScript, includes its own code formatter (<code>deno fmt</code>), and uses ES Modules — with no CommonJS <code>require</code> statements in sight. It’s also extremely secure by default: you have to explicitly give your code permission to make network requests, or read files from disks, which is something Node allows programs to do by default. In this article, we&#8217;ll cover installing Deno, setting up our environment, and building a simple command-line application to make API requests.</p>\n<p>As ever, you can find the code to accompany this article on <a href=\"https://github.com/sitepoint-editors/deno-star-wars-api\">GitHub</a>.</p>\n<h2 id=\"installingdeno\">Installing Deno</h2>\n<p>You can check the <a href=\"https://deno.land/#installation\">Deno website</a> for the full instructions. If you&#8217;re on macOS or Linux, you can copy this command into your terminal:</p>\n<pre><code class=\"bash language-bash\">curl -fsSL https://deno.land/x/install/install.sh | sh\r\n</code></pre>\n<p>You&#8217;ll also need to add the install directory to your <code>$PATH</code>.</p>\n<p>Don&#8217;t worry if you&#8217;re on Windows, as you can install Deno via package managers such as Chocolatey:</p>\n<pre><code class=\"bash language-bash\">choco install deno\r\n</code></pre>\n<p>If Chocolately isn&#8217;t for you, <a href=\"https://github.com/denoland/deno_install\">deno_install</a> lists a variety of installation methods, so pick the one that suits you best.</p>\n<p>You can check Deno is installed by running the following command:</p>\n<pre><code class=\"bash language-bash\">deno -V\r\n</code></pre>\n<p>This should output the Deno version. At the time of writing, the latest version is 1.7.5, which is what I&#8217;m using.</p>\n<p>If you&#8217;re using VS Code, I highly recommend installing the <a href=\"https://github.com/denoland/vscode_deno\">Deno VS Code plugin</a>. If you use another editor, check the <a href=\"https://deno.land/manual@v1.7.4/getting_started/setup_your_environment#editors-and-ides\">Deno documentation</a> to find the right plugin.</p>\n<p>Note that, if you&#8217;re using VS Code, by default the Deno plugin isn&#8217;t enabled when you load up a project. You should create a <code>.vscode/settings.json</code> file in your repository and add the following to enable the plugin:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"deno.enable\": true\r\n}\r\n</code></pre>\n<p>Again, if you&#8217;re not a VS Code user, check the manual above to find the right setup for your editor of choice.</p>\n<h2 id=\"writingourfirstscript\">Writing Our First Script</h2>\n<p>Let&#8217;s make sure we have Deno up and running. Create <code>index.ts</code> and put the following inside:</p>\n<pre><code class=\"ts language-ts\">console.log(\"hello world!\");\r\n</code></pre>\n<p>We can run this with <code>deno run index.ts</code>:</p>\n<pre><code class=\"bash language-bash\">$ deno run index.ts\r\nCheck file:///home/jack/git/deno-star-wars-api/index.ts\r\nhello world\r\n</code></pre>\n<p>Note that we might see a TypeScript error in our editor:</p>\n<pre><code class=\"text language-text\">'index.ts' cannot be compiled under '--isolatedModules' \r\nbecause it is considered a global script file. Add an import, \r\nexport, or an empty 'export {}' statement \r\nto make it a module.ts(1208)\r\n</code></pre>\n<p>This error happens because TypeScript doesn&#8217;t know that this file is going to use ES Module imports. It will soon, because we&#8217;re going to add imports, but in the mean time if we want to remove the error, we can add an empty <code>export</code> statement to the bottom of the script:</p>\n<pre><code class=\"ts language-ts\">export {}\r\n</code></pre>\n<p>This will convince the TypeScript compiler that we&#8217;re using ES Modules and get rid of the error. I won&#8217;t include this in any code samples in the blog post, but it won&#8217;t change anything if we add it other than to remove the TypeScript noise.</p>\n<h2 id=\"fetchingindeno\">Fetching in Deno</h2>\n<p>Deno implements support for the same Fetch API that we&#8217;re used to using in the browser. It comes built into Deno — which means there&#8217;s no package to install or configure. Let&#8217;s see how it works by making our first request to the API we&#8217;re going to use here, the <a href=\"https://swapi.dev/\">Star Wars API (or SWAPI)</a>.</p>\n<p>Making a request to <code>https://swapi.dev/api/people/1/</code> will give us back all the data we need for Luke Skywalker. Let&#8217;s update our <code>index.ts</code> file to make that request. Update <code>index.ts</code> to look like so:</p>\n<pre><code class=\"ts language-ts\">const json = fetch(\"https://swapi.dev/api/people/1\");\r\n\r\njson.then((response) =&gt; {\r\n  return response.json();\r\n}).then((data) =&gt; {\r\n  console.log(data);\r\n});\r\n</code></pre>\n<p>Try and run this in your terminal with <code>deno run</code>:</p>\n<pre><code class=\"bash language-bash\">$ deno run index.ts\r\nCheck file:///home/jack/git/deno-star-wars-api/index.ts\r\nerror: Uncaught (in promise) PermissionDenied: network access to \"swapi.dev\", run again with the --allow-net flag\r\n    throw new ErrorClass(res.err.message);\r\n</code></pre>\n<p>Deno is secure by default, which means scripts need permission to do anything that could be considered dangerous — such as reading/writing to the filesystem and making network requests. We have to give Deno scripts <a href=\"https://deno.land/manual@v1.7.4/getting_started/permissions\">permissions when they run</a> to allow them to perform such actions. We can enable ours with the <code>--allow-net</code> flag:</p>\n<pre><code class=\"bash language-bash\">$ deno run --allow-net index.ts\r\nCheck file:///home/jack/git/deno-star-wars-api/index.ts\r\n{\r\n  name: \"Luke Skywalker\",\r\n  ...(data snipped to save space)...\r\n}\r\n</code></pre>\n<p>But this flag has given the script permission to access any URL. We can be a bit more explicit and allow our script only to access URLs that we add to an allowlist:</p>\n<pre><code class=\"bash language-bash\">$ deno run --allow-net=swapi.dev index.ts\r\n</code></pre>\n<p>If we&#8217;re running scripts that we&#8217;re authoring ourselves, we can trust that they won&#8217;t do anything they shouldn&#8217;t. But it&#8217;s good to know that, by default, any Deno script we execute can&#8217;t do anything too damaging without us first allowing it permission. From now on, whenever I talk about running our script in this article, this is the command I&#8217;m running:</p>\n<pre><code class=\"bash language-bash\">$ deno run --allow-net=swapi.dev index.ts\r\n</code></pre>\n<p>We can also write this script slightly differently using <a href=\"https://v8.dev/features/top-level-await\">top level await</a>, which lets us use the <code>await</code> keyword rather than deal with promises:</p>\n<pre><code class=\"ts language-ts\">const response = await fetch(\"https://swapi.dev/api/people/1/\");\r\nconst data = await response.json();\r\nconsole.log(data);\r\n</code></pre>\n<p>This is the style I prefer and will use for this article, but if you&#8217;d rather stick to promises, feel free.</p>\n<h2 id=\"installingthirdpartydependencies\">Installing Third-party Dependencies</h2>\n<p>Now that we can make requests to the Star Wars API, let&#8217;s start thinking about how we want to allow our users to use this API. We&#8217;ll provide command-line flags to let them specify what resource to query (such as people, films, or planets) and a query to filter them by. So a call to our command-line tool might look like so:</p>\n<pre><code class=\"bash language-bash\">$ deno run --allow-net=swapi.dev index.ts --resource=people --query=luke\r\n</code></pre>\n<p>We could parse those extra command-line arguments manually, or we could use a third-party library. In Node.js, the best solution for this is <a href=\"https://github.com/yargs/yargs\">Yargs</a>, and Yargs also supports Deno, so we can use Yargs to parse and deal with the command-line flags we want to support.</p>\n<p>However, there&#8217;s no package manager for Deno. We don&#8217;t create a <code>package.json</code> and install a dependency. Instead, we import from URLs. The best source of Deno packages is the <a href=\"https://deno.land/x\">Deno package repository</a>, where you can search for a package you&#8217;re after. Most popular npm packages now also support Deno, so there&#8217;s usually a good amount of choice on there and a high likelihood that you&#8217;ll find what you&#8217;re after.</p>\n<p>At the time of writing, searching for <code>yargs</code> on the Deno repository gives me <a href=\"https://deno.land/x/yargs@v16.2.0-deno\">yargs 16.2.0</a>. To use it locally, we have to import it from its URL:</p>\n<pre><code class=\"ts language-ts\">import yargs from \"https://deno.land/x/yargs/deno.ts\";\r\n</code></pre>\n<p>When we now run our script, we&#8217;ll first see a lot of output:</p>\n<pre><code class=\"bash language-bash\">$ deno run --allow-net=swapi.dev index.ts\r\nDownload https://deno.land/x/yargs/deno.ts\r\nWarning Implicitly using latest version (v16.2.0-deno) for https://deno.land/x/yargs/deno.ts\r\nDownload https://deno.land/x/yargs@v16.2.0-deno/deno.ts\r\nDownload https://deno.land/x/yargs@v16.2.0-deno/build/lib/yargs-factory.js\r\nDownload https://deno.land/x/yargs@v16.2.0-deno/lib/platform-shims/deno.ts\r\nDownload https://deno.land/std/path/mod.ts\r\nDownload https://deno.land/x/yargs_parser@v20.2.4-deno/deno.ts\r\n...(more output removed to save space)\r\n</code></pre>\n<p>The first time Deno sees that we&#8217;re using a new module, it will download and cache it locally so that we don&#8217;t have to download it every time we use that module and run our script.</p>\n<p>Notice this line from the above output:</p>\n<pre><code class=\"text language-text\">Warning Implicitly using latest version (v16.2.0-deno) \r\nfor https://deno.land/x/yargs/deno.ts\r\n</code></pre>\n<p>This is Deno telling us that we didn&#8217;t specify a particular version when we imported Yargs, so it just downloaded the latest one. That&#8217;s probably fine for quick side projects, but generally it&#8217;s good practice to pin our import to the version we&#8217;d like to use. We can do this by updating the URL:</p>\n<pre><code class=\"ts language-ts\">import yargs from \"https://deno.land/x/yargs@v16.2.0-deno/deno.ts\";\r\n</code></pre>\n<p>It took me a moment to figure out that URL. I found it by recognizing that the URL I&#8217;m taken to when I search for &#8220;yargs&#8221; on the Deno repository is <code>https://deno.land/x/yargs@v16.2.0-deno</code>. I then looked back at the console output and realized that Deno had actually given me the exact path:</p>\n<pre><code class=\"text language-text\">Warning Implicitly using latest version (v16.2.0-deno) \r\nfor https://deno.land/x/yargs/deno.ts\r\nDownload https://deno.land/x/yargs@v16.2.0-deno/deno.ts\r\n</code></pre>\n<p>I highly recommend pinning your version numbers like this. It will avoid one day a surprising issue because you happen to run after a new release of a dependency.</p>\n<h2 id=\"denofmt\">deno fmt</h2>\n<p>A quick aside before we continue building our command-line tool. Deno comes with a built in formatter, <a href=\"https://deno.land/manual/tools/formatter\"><code>deno fmt</code></a>, which automatically formats code to a consistent style. Think of it like Prettier, but specifically for Deno, and built in. This is another reason I&#8217;m drawn to Deno; I love tools that provide all this out of the box for you without needing to configure anything.</p>\n<p>We can run the formatter locally with this:</p>\n<pre><code class=\"bash language-bash\">$ deno fmt\r\n</code></pre>\n<p>This will format all JS and TS files in the current directory, or we can give it a filename to format:</p>\n<pre><code class=\"bash language-bash\">$ deno fmt index.ts\r\n</code></pre>\n<p>Or, if we&#8217;ve got the VS Code extension, we can instead go into <code>.vscode/settings.json</code>, where we enabled the Deno plugin earlier, and add these two lines:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"deno.enable\": true,\r\n  \"editor.formatOnSave\": true,\r\n  \"editor.defaultFormatter\": \"denoland.vscode-deno\"\r\n}\r\n</code></pre>\n<p>This configures VS Code to run <code>deno fmt</code> automatically when we save a file. Perfect!</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/deno-fetch-data-third-party-api/?utm_source=rss\">How to Fetch Data from a Third-party API with Deno</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/deno-fetch-data-third-party-api/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181486",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Deno",
            "JavaScript",
            "Node.js",
            "npm",
            "Tools & Libraries"
        ],
        "dc:creator": [
            "Jack Franklin"
        ],
        "pubDate": [
            "Sun, 28 Feb 2021 15:00:50 GMT"
        ],
        "metaDesc": [
            "Ever wished Node was more secure and came with TypeScript support out the box? Deno offers this and more. Learn why many are switching from Node to Deno."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Issue #456"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/tkAZ5z1wqU8/"
        ],
        "pubDate": [
            "Tue, 20 Apr 2021 21:58:26 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-456/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how to make an element stick to the bottom corner, how to visualize grids in Safari, how to measure Core Web Vitals, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/float-an-element-to-the-bottom-corner/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Float an Element to the Bottom Corner</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://css-tricks.com/float-an-element-to-the-bottom-corner/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/float-an-element-to-the-bottom-corner1.jpg\" alt=\"Float an Element to the Bottom Corner\" /></a>\n\t\t\t\t\t\t<p>Temani Afif shares a CSS-only solution that will make an element stick to the bottom corner, regardless of the size and content.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/float-an-element-to-the-bottom-corner/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Introducing CSS Grid Inspector</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/introducing-css-grid-inspector.jpg\" alt=\"Introducing CSS Grid Inspector\" /></a>\n\t\t\t\t\t\t<p>Razvan Caliman introduces CSS Grid Inspector, a new tool in Web Inspector coming to Safari, which will help you visualize grids.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://synd.co/3wXuhEc\">Managing Apple devices at your business is easier than ever with Jamf Now.</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://synd.co/3wXuhEc\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/jamf-managing-apple-devices.png\" alt=\"Managing Apple devices at your business is easier than ever with Jamf Now.\" /></a>\n\t\t\t\t\t\t<p>No office? No problem! Jamf Now allows you to update, configure and secure all of your company&#8217;s Apple devices from one central interface, totally remotely &#8211; all within moments, and all of it securely. And because we can&#8217;t all be computer geniuses, you don&#8217;t even need IT training to make it happen.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://synd.co/3wXuhEc\">Get Started</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-irl.info/quick-tip-style-pseudo-elements-with-javascript-using-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Quick Tip: Style Pseudo-elements with Javascript Using Custom Properties</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Michelle Barker demonstrates how to style pseudo-elements with JavaScript using Custom Properties.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-irl.info/quick-tip-style-pseudo-elements-with-javascript-using-custom-properties/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.joshwcomeau.com/blog/how-i-built-my-blog/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">How I Built My Blog</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Josh W. Comeau gives an in-depth look at the technical stack behind his blog.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.joshwcomeau.com/blog/how-i-built-my-blog/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">An In-Depth Guide To Measuring Core Web Vitals</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Barry Pollard gives a detailed introduction to Core Web Vitals and explains some of the nuances and misunderstandings of these tools.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.sarasoueidan.com/blog/safari-fluid-typography-bug-fix/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Working Around the Viewport-Based Fluid Typography Bug in Safari</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Sara Soueidan shares a write-up on a CSS bug in Safari and outlines the current possible workarounds.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.sarasoueidan.com/blog/safari-fluid-typography-bug-fix/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://craftcms.com/accessibility/designing-custom-focus-indicators?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Designing Custom Focus Indicators</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Matsuko Friedland offers some advice on designing focus indicators.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://craftcms.com/accessibility/designing-custom-focus-indicators?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/bergamot\">Find the perfect remote tech job (AI-powered job board)</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/bergamot\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/remote-job-board-bergamot-for-css.png\" alt=\"Find the perfect remote tech job (AI-powered job board)\" /></a>\n\t\t\t\t\t\t<p>Are you tired of looking for remote roles on multiple websites?</p>\n<p>Try <a href=\"https://cssw.io/bergamot\" target=\"_blank\" rel=\"noopener\">Bergamot.io</a>, a brand new website that aggregates vacancies from over 150,000 companies&#8217; career pages. Select your stack or just paste URL to Linkedin profile, and you&#8217;ll get relevant and <nobr>up-to-date</nobr> job selection.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/bergamot\">Find the perfect remote job for free 🔎</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://svgcrop.com/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">SVG Crop</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>SVG Crop is an online tool that removes blank space from around any SVG instantly.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://svgcrop.com/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://headlessui.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Headless UI</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Completely unstyled, fully accessible UI components, designed to integrate beautifully with Tailwind CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://headlessui.dev/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/kassandrasanch/pen/gOgjLoM?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Art Camera</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/kassandrasanch/pen/gOgjLoM?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/css-art-camera.jpg\" alt=\"CSS Art Camera\" /></a>\n\t\t\t\t\t\t<p>Kass created an impressive illustration using only CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/kassandrasanch/pen/gOgjLoM?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Get inspired</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/tkAZ5z1wqU8\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-456/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "Creating Directionally Lit 3D Buttons with CSS"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/creating-directionally-lit-3d-buttons-with-css/?utm_source=rss\"\n              title=\"Creating Directionally Lit 3D Buttons with CSS\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613778057lighting.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613778057lighting-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613778057lighting-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613778057lighting-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613778057lighting.jpg 1235w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>I&#8217;m not too sure how I stumbled into this one. But something led me to <a style=\"font-weight:bold\" href=\"https://twitter.com/JedBridges/status/1278384065087893505\">this tweet</a>:</strong></p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Has anyone done this directional lighting cursor interaction with CSS? <a href=\"https://t.co/zLL7Sk6kW5\">pic.twitter.com/zLL7Sk6kW5</a></p>\n<p>&mdash; Jed Bridges (@JedBridges) <a href=\"https://twitter.com/JedBridges/status/1278384065087893505?ref_src=twsrc%5Etfw\">July 1, 2020</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>And, to me, that&#8217;s a challenge.</p>\n<p>The button design is neat. But I didn&#8217;t want to do a direct copy. Instead, we decided to make a &#8220;Twitter&#8221; button. The idea is that we create an almost transparent button with a social icon on it. And then that social icon casts a shadow below. Moving our mouse across the button shines a light over it. Pressing the button pushes it onto the surface. Here&#8217;s the <a href=\"https://twitter.com/jh3yy/status/1355305224416669701\">final result</a>:</p>\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Directional Lighting 3D CSS Twitter Button 🐦</p>\n<p>👉 <a href=\"https://t.co/qpfzEwUMey\">https://t.co/qpfzEwUMey</a> via <a href=\"https://twitter.com/CodePen?ref_src=twsrc%5Etfw\">@CodePen</a> <a href=\"https://t.co/zWfwtPaixo\">pic.twitter.com/zWfwtPaixo</a></p>\n<p>&mdash; Jhey 🐻🛠 (@jh3yy) <a href=\"https://twitter.com/jh3yy/status/1355305224416669701?ref_src=twsrc%5Etfw\">January 30, 2021</a></p></blockquote>\n<p><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script></p>\n<p>In this article, we&#8217;re going to look at how you can make it too. The cool thing is, you can swap the icon out to whatever you want.</p>\n<h2 id=\"themarkup\">The Markup</h2>\n<p>My first-take approach for creating something like this is to scaffold the markup. Upon first inspection, we&#8217;ll need to duplicate the social icon used. And a neat way to do this is to use Pug and leverage mixins:</p>\n<pre><code class=\"pug language-pug\">mixin icon()\r\n  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')\r\n    title Twitter icon\r\n    path(d='M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z')\r\n</code></pre>\n<p>Here, we’ve created a mixin for rendering an SVG of the Twitter icon. This would render the Twitter icon if we invoke it like so:</p>\n<pre><code class=\"pug language-pug\">+icon()\r\n</code></pre>\n<p>Doing that will give us a big Twitter icon.</p>\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"6441\" data-default-tab=\"html,result\" data-user=\"SitePoint\" data-slug-hash=\"ExNWpBa\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\" data-pen-title=\"1. Render An Icon\">\n  <span>See the Pen <a href=\"https://codepen.io/SitePoint/pen/ExNWpBa\"><br />\n  1. Render An Icon</a> by SitePoint (<a href=\"https://codepen.io/SitePoint\">@SitePoint</a>)<br />\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script></p>\n<p>Because social icon sets tend to use the same &#8220;0 0 24 24&#8221; <code>viewBox</code>, we could make the title and path arguments:</p>\n<pre><code class=\"pug language-pug\">mixin icon(title, path)\r\n  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')\r\n    title= title\r\n    path(d=path)\r\n</code></pre>\n<p>Then our Twitter icon becomes</p>\n<pre><code class=\"pug language-pug\">+icon('Twitter Icon', 'M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z')\r\n</code></pre>\n<p>But, we could pass it a key — and then have the paths stored in an object if we have many icons we wanted to use or repeat:</p>\n<pre><code class=\"pug language-pug\">mixin icon(key)\r\n  -\r\n    const PATH_MAP = {\r\n      Twitter: \"M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z\"\r\n    }\r\n  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')\r\n    title= `${key} Icon`\r\n    path(d=PATH_MAP[key])\r\n\r\n+icon('Twitter')\r\n</code></pre>\n<p>This can be a neat way to create an icon mixin to reuse. It&#8217;s a little overkill for our example, but worth noting.</p>\n<p>Now, we need some markup for our button.</p>\n<pre><code class=\"pug language-pug\">.scene\r\n  button.button\r\n    span.button__shadow\r\n      +icon('Twitter')\r\n    span.button__content\r\n      +icon('Twitter')\r\n      span.button__shine\r\n</code></pre>\n<p>It&#8217;s always good to be mindful of accessibility. We can check what our button gives off by checking the <em>Accessibility</em> panel in your browser&#8217;s developer tools. </p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/02/1613444375a11y-panel.png\" alt=\"The accessibility panel in Chrome\" width=\"567\" height=\"408\" class=\"alignnone size-full wp-image-181109\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613444375a11y-panel.png 567w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613444375a11y-panel-300x216.png 300w\" sizes=\"(max-width: 567px) 100vw, 567px\" /></p>\n<p>It might be a good idea to put a <code>span</code> in for our button text and hide the icons with <code>aria-hidden</code>. We can hide the <code>span</code> text too whilst making it available to screen readers:</p>\n<pre><code class=\"pug language-pug\">.scene\r\n  button.button\r\n    span.button__shadow\r\n      +icon('Twitter')\r\n    span.button__content\r\n      span.button__text Twitter\r\n      +icon('Twitter')\r\n      span.button__shine\r\n</code></pre>\n<p>We&#8217;ve got different options for applying those <code>aria-hidden</code> attributes. The one we’ll use is changing the mixin code to apply <code>aria-hidden</code>:</p>\n<pre><code class=\"pug language-pug\">mixin icon(key)\r\n  -\r\n    const PATH_MAP = {\r\n      Twitter: \"...path code\"\r\n    }\r\n  svg.button__icon(role='img' aria-hidden=\"true\" xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')\r\n    title= `${key} Icon`\r\n    path(d=PATH_MAP[key])\r\n</code></pre>\n<p>Another neat way with Pug is to pass through all attributes to a mixin. This is useful in scenarios where we only want to pass some attributes through:</p>\n<pre><code class=\"pug language-pug\">mixin icon(key)\r\n  -\r\n    const PATH_MAP = {\r\n      Twitter: \"...path code\"\r\n    }\r\n  svg.button__icon(role='img' xmlns='http://www.w3.org/2000/svg' viewbox='0 0 24 24')&amp;attributes(attributes)\r\n    title= `${key} Icon`\r\n    path(d=PATH_MAP[key])\r\n</code></pre>\n<p>If we check the <em>Accessibility</em> panel again, our button only reads “Twitter”. And that’s what we want!</p>\n<h2 id=\"thestyles\">The Styles</h2>\n<p>Here&#8217;s the part you came for — how we style the thing. To start, we&#8217;ve dropped this in:</p>\n<pre><code class=\"css language-css\">* {\r\n  transform-style: preserve-3d;\r\n}\r\n</code></pre>\n<p>That allows us to create the 3D transforms we need for our button. Try switching that off in the final demo and you&#8217;ll see that everything breaks.</p>\n<p>Let&#8217;s hide the span text from our eyes. We can do this in many ways. One recommended way to hide an element from our eyes, but not those of the screenreader, is to use these styles:</p>\n<pre><code class=\"css language-css\">.button__text {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  white-space: nowrap;\r\n  border-width: 0;\r\n}\r\n</code></pre>\n<p>Before we start working on our button, we&#8217;re going to tilt the scene. We can do this using a <code>transform</code>. Here we chain the <code>transform</code> to get it into the position we want. I spent a bit of time tinkering with values here on live stream to get it close to the original:</p>\n<pre><code class=\"css language-css\">.scene {\r\n  height: var(--size);\r\n  position: relative;\r\n  width: var(--size);\r\n  transform: rotateX(-40deg) rotateY(18deg) rotateX(90deg);\r\n}\r\n</code></pre>\n<p>You’ll notice a <code>size</code> variable there too. We&#8217;re going to drive certain things for our button with CSS variables. This will make it handy for tinkering with values and the effect. Usually, we’d put these under the scope they&#8217;re required in. But, for demos like this, putting them under the <code>:root</code> at the top of our file makes it easier for us to play with.</p>\n<pre><code class=\"css language-css\">:root {\r\n  --blur: 8px;\r\n  --shine-blur: calc(var(--blur) * 4);\r\n  --size: 25vmin;\r\n  --transition: 0.1s;\r\n  --depth: 3vmin;\r\n  --icon-size: 75%;\r\n  --radius: 24%;\r\n  --shine: rgba(255,255,255,0.85);\r\n  --button-bg: rgba(0,0,0,0.025);\r\n  --shadow-bg: rgba(0,0,0,0.115);\r\n  --shadow-icon: rgba(0,0,0,0.35);\r\n  --bg: #e8f4fd;\r\n}\r\n</code></pre>\n<p>These are the variables we’re working with, and they’ll make sense as we build up our button.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/creating-directionally-lit-3d-buttons-with-css/?utm_source=rss\">Creating Directionally Lit 3D Buttons with CSS</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/creating-directionally-lit-3d-buttons-with-css/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181107",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Animation",
            "CSS3",
            "HTML & CSS",
            "Sass"
        ],
        "dc:creator": [
            "Jhey Tompkins"
        ],
        "pubDate": [
            "Mon, 15 Feb 2021 15:00:18 GMT"
        ],
        "metaDesc": [
            "Ever thought of adding lighting effects to your UI buttons? You can! Learn how to create directionally lit 3D buttons with CSS and just a little bit of JS."
        ],
        "provider": "Sitepoint"
    },
    {
        "author": [
            "Barry Pollard"
        ],
        "title": [
            "How To Fix Cumulative Layout Shift (CLS) Issues"
        ],
        "link": [
            "https://www.smashingmagazine.com/2021/06/how-to-fix-cumulative-layout-shift-issues/"
        ],
        "pubDate": [
            "Wed, 02 Jun 2021 12:30:00 +0000"
        ],
        "guid": [
            "https://www.smashingmagazine.com/2021/06/how-to-fix-cumulative-layout-shift-issues/"
        ],
        "description": [
            "Cumulative Layout Shift (CLS) attempts to measure those jarring movements of the page as new content &mdash; be it images, advertisements, or whatever &mdash; comes into play later than the rest of the page. It calculates a score based on how much of the page is unexpectedly moving about, and how often. These shifts of content are very annoying, making you lose your place in an article you’ve started reading or, worse still, making you click on the wrong button!"
        ],
        "content:encoded": [
            "\n          <html>\n            <head>\n              <meta charset=\"utf-8\">\n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2021/06/how-to-fix-cumulative-layout-shift-issues/\" />\n              <title>How To Fix Cumulative Layout Shift (CLS) Issues</title>\n            </head>\n            <body>\n              <article>\n                <header>\n                  <h1>How To Fix Cumulative Layout Shift (CLS) Issues</h1>\n                  \n                    \n                    <address>Barry Pollard</address>\n                  \n                  <time datetime=\"2021-06-02T12:30:00&#43;00:00\" class=\"op-published\">2021-06-02T12:30:00+00:00</time>\n                  <time datetime=\"2021-06-02T12:30:00&#43;00:00\" class=\"op-modified\">2021-07-01T10:33:53+00:00</time>\n                </header>\n                \n\n<p><a href=\"https://web.dev/cls/\">Cumulative Layout Shift (CLS)</a> attempts to measure those jarring movements of the page as new content &mdash; be it images, advertisements, or whatever &mdash; comes into play later than the rest of the page. It calculates a score based on how much of the page is unexpectedly moving about, and how often. These <strong>shifts of content</strong> are very annoying, making you lose your place in an article you’ve started reading or, worse still, making you click on the wrong button!</p>\n\n<p>In this article, I’m going to discuss some <strong>front-end patterns to reduce CLS</strong>. I’m not going to talk too much about measuring CLS as I’ve covered that already <a href=\"https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/\">in a previous article</a>. Nor will I talk too much about the mechanics of how CLS is calculated: Google has some <a href=\"https://web.dev/cls/\">good documentation on that</a>, and <a href=\"https://twitter.com/jessthebp\">Jess Peck</a>’s <a href=\"https://jessbpeck.com/posts/completecls/\">The Almost-Complete Guide to Cumulative Layout Shift</a> is an awesome deep dive into that too. However, I will give a little background needed to understand some of the techniques.</p>\n\n<h3 id=\"why-cls-is-different\">Why CLS Is Different</h3>\n\n<p>CLS is, in my opinion, the most interesting of the Core Web Vitals, in part because it’s something we’ve never really measured or optimized for before. So, it often requires new techniques and ways of thinking to attempt to optimize it. It’s a very different beast to the other two Core Web Vitals.</p>\n\n<p>Looking briefly at the other two Core Web Vitals, <a href=\"https://web.dev/lcp/\">Largest Contentful Paint (LCP)</a> does exactly as its name suggests and is more of a twist on previous loading metrics that measures how quickly the page loads. Yes, we’ve changed how we defined the user experience of the page load to look at the loading speed of the <strong>most relevant content</strong>, but it’s basically reusing the old techniques of ensuring that the content loads as quickly as possible. How to optimize your LCP should be a relatively well-understood problem for most web pages.</p>\n\n<p><a href=\"https://web.dev/fid/\">First Input Delay (FID)</a> measures any delays in interactions and <a href=\"https://twitter.com/ChromeUXReport/status/1392240076583849987?s=20\">seems not to be a problem for most sites</a>. Optimizing that is usually a matter of cleaning up (or reducing!) your JavaScript and is usually site-specific. That’s not to say solving issues with these two metrics are easy, but they are reasonably well-understood problems.</p>\n\n<p>One reason that CLS is different is that it is measured through the <strong>lifetime of the page</strong> &mdash; that’s the “cumulative” part of the name! The other two Core Web Vitals stop after the main component is found on the page after load (for LCP), or for the first interaction (for FID). This means that our traditional lab-based tools, like Lighthouse, often don’t fully reflect the CLS as they calculate only the initial load CLS. In real life, a user will scroll down the page and may get more content dropping in causing more shifts.</p>\n\n<p>CLS is also a bit of an artificial number that is calculated based on how much of the page is moving about and how often. While LCP and FID are measured in milliseconds, <strong>CLS is a unitless number</strong> output by a <a href=\"https://web.dev/cls/#layout-shift-score\">complex calculation</a>. We want the page to be 0.1 or under to pass this Core Web Vital. Anything above 0.25 is seen as “poor”.</p>\n\n<p>Shifts caused by user interaction are <strong>not counted</strong>. This is defined as within <strong>500ms</strong> of a specific set of user interactions though <a href=\"https://github.com/WICG/layout-instability#recent-input-exclusion\">pointer events and scroll are excluded</a>. It is presumed that a user clicking on a button might expect content to appear, for example by expanding a collapsed section.</p>\n\n<p>CLS is about <strong>measuring unexpected shifts</strong>. Scrolling should not cause content to move around if a page is built optimally, and similarly hovering over a product image to get a zoomed-in version for example should also not cause the other content to jump about. But there are of course exceptions and those sites need to consider how to react to this.</p>\n\n<p>CLS is also <a href=\"https://chromium.googlesource.com/chromium/src/+/main/docs/speed/metrics_changelog/cls.md\">continually evolving</a> with tweaks and bug fixes. It has <a href=\"https://web.dev/cls-web-tooling/\">just had a bigger change announced</a> that should give some <a href=\"https://web.dev/evolving-cls/\">respite to long-lived pages</a>, like Single Page Apps (SPA) and infinite scrolling pages, which many felt were unfairly penalized in CLS. Rather than accumulating shifts over the whole page time to calculate the CLS score like has been done up until now, the score will be calculated based on the largest set of shifts within a specific timeboxed window.</p>\n\n<p>This means that if you have three chunks of CLS of 0.05, 0.06, and 0.04 then previously this would have been recorded as 0.15 (i.e. over the “good” limit of 0.1), whereas now will be scored as 0.06. It’s still <em>cumulative</em> in the sense that the score may be made up of separate shifts within that time frame (i.e. if that 0.06 CLS score was caused by three separate shifts of 0.02), but it’s just not cumulative over the total lifetime of the page anymore.</p>\n\n<p>Saying that, if you solve the causes of that 0.06 shift, then your CLS will then be reported as the <strong>next largest one</strong> (0.05) so it still is looking at all the shifts over the lifetime of the page &mdash; it’s just choosing to report only the largest one as the CLS score.</p>\n\n<p>With that brief introduction to some of the methodology about CLS, let’s move on to some of the <strong>solutions</strong>! All of these techniques basically involve setting aside the correct amount of space before additional content is loaded &mdash; whether that is media or JavaScript-injected content, but there’s a few different options available to web developers to do this.</p>\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\n  \n\n\t\n\t\t\n\t\t\t<div data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container\">\n\t\t\t\t<aside class=\"feature-panel\">\n\t\t\t\t\t<div class=\"feature-panel-left-col\">\n\t\t\t\t\t\t<div class=\"feature-panel-description\"><p>Meet <strong><a data-instant href=\"https://www.smashingconf.com/online-workshops/\">Smashing Online Workshops</a></strong> on <strong>front-end &amp; UX</strong>, with practical takeaways, live sessions, <strong>video recordings</strong> and a friendly Q&amp;A. On design systems, CSS/JS and UX. With Brad Frost, Stephanie Eckles, Carie Fisher and <a href=\"https://smashingconf.com/online-workshops/workshops\">so many others</a>.</p>\n</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<a data-instant href=\"smashing-workshops\" class=\"btn btn--green btn--large\">Jump to online workshops&nbsp;↬</a>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"feature-panel-right-col\">\n\t\t\t\t\t\t<a data-instant href=\"smashing-workshops\" class=\"feature-panel-image-link\">\n\t\t\t\t\t\t\t<div class=\"feature-panel-image\">\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t\t\t\tclass=\"feature-panel-image-img\"\n\t\t\t\t\t\t\t\t\t\tsrc=\"/images/smashing-cat/cat-in-a-chair--tall.svg\"\n\t\t\t\t\t\t\t\t\t\talt=\"Feature Panel\"\n\t\t\t\t\t\t\t\t\t\twidth=\"257\"\n\t\t\t\t\t\t\t\t\t\theight=\"355\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</aside>\n\t\t\t</div>\n\t\t\n\t\n\n\n<h3 id=\"marker\" style=\"text-transform: none;\">Set Width And Heights On Images And iFrames</h3>\n\n<p>I’ve <a href=\"https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/\">written about this before</a>, but one of the easiest things you can do to reduce CLS is to ensure you have <strong><code>width</code> and <code>height</code> attributes set on your images</strong>. Without them, an image will cause the subsequent content to shift to make way for it after it downloads:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"405\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"An example layout with a title and two paragraphs, where the second paragraph has to shift down to make space for an image.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Layout shift after image loads. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/f6597707-d4a0-4144-b9ec-30e19f51c1a4/2-layout-shift-issues.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>This is simply a matter of changing your image markup from:</p>\n\n<pre><code class=\"language-markup\">&lt;img src=\"hero_image.jpg\" alt=\"...\"&gt;\n</code></pre>\n\n<p>To:</p>\n\n<pre><code class=\"language-markup\">&lt;img src=\"hero_image.jpg\" alt=\"...\"\n   width=\"400\" height=\"400\"&gt;\n</code></pre>\n\n<p>You can find the dimensions of the image by opening DevTools and hovering over (or tapping through) the element.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"453\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Chrome Dev Tools screenshot showing the image, rendered size, rendered aspect ratio, intrinsic size, intrinsic aspect ratio, file size and current source.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Chrome DevTools shows the image dimensions and aspect ratios when hovering over an element. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c0aeb512-8796-40da-a05f-ddee5d0cd499/6-layout-shift-issues.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>I advise using the <em>Intrinsic Size</em> (which is the actual size of the image source) and the browser will then scale these down to the rendered size when you use CSS to change these.</p>\n\n<p><strong>Quick Tip</strong>: <em>If, like me, you can’t remember whether it’s width and height or height and width, think of it as <a href=\"https://twitter.com/martynhoyer/status/1385495391043469313?s=20\">X and Y coordinates</a> so, like X, width is always given first.</em></p>\n\n<p>If you have <strong>responsive images</strong> and use CSS to change the image dimensions (e.g. to constrain it to a <code>max-width</code> of 100% of the screen size), then these attributes can be used to calculate the <code>height</code> &mdash; providing you remember to override this to <code>auto</code> in your CSS:</p>\n\n<pre><code class=\"language-css\">img {\n  max-width: 100%;\n  height: auto;\n}\n</code></pre>\n\n<p>All <a href=\"https://caniuse.com/mdn-html_elements_img_aspect_ratio_computed_from_attributes\">modern browsers support this</a> now, though didn’t until recently <a href=\"https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/\">as covered in my article</a>. This also works for <code>&lt;picture&gt;</code> elements and <code>srcset</code> images (set the <code>width</code> and <code>height</code> on the fallback <code>img</code> element), though not yet for images of different aspect-ratios &mdash; it’s <a href=\"https://github.com/whatwg/html/issues/4968\">being worked on</a>, and until then you should still set <code>width</code> and <code>height</code> as any values will be better than the <code>0</code> by <code>0</code> defaults!</p>\n\n<p>This also works on <strong>native lazy-loaded images</strong> (though Safari doesn’t support native lazy loading by default yet).</p>\n\n<h3 id=\"the-new-aspect-ratio-css-property\">The New <code>aspect-ratio</code> CSS Property</h3>\n\n<p>The <code>width</code> and <code>height</code> technique above, to calculate the height for responsive images, can be generalized to other elements using the new CSS <code>aspect-ratio</code> property, which is now <a href=\"https://caniuse.com/mdn-css_properties_aspect-ratio\">supported by Chromium-based browsers and Firefox</a>, but is also in Safari Technology Preview so hopefully that means it will be coming to the stable version soon.</p>\n\n<p>So you could use it on an embedded video for example in 16:9 ratio:</p>\n\n<pre><code class=\"language-css\">video {\n  max-width: 100%;\n  height: auto;\n  aspect-ratio: 16 / 9;\n}\n</code></pre>\n\n<pre><code class=\"language-html\">&lt;video controls width=\"1600\" height=\"900\" poster=\"...\"&gt;\n    &lt;source src=\"/media/video.webm\"\n            type=\"video/webm\"&gt;\n    &lt;source src=\"/media/video.mp4\"\n            type=\"video/mp4\"&gt;\n    Sorry, your browser doesn't support embedded videos.\n&lt;/video&gt;\n</code></pre>\n\n<p>Interestingly, without defining the <code>aspect-ratio</code> property, browsers <a href=\"https://github.com/whatwg/html/issues/3090\">will ignore the height for responsive video elements and use a default aspect-ratio of 2:1</a>, so the above is needed to avoid a layout shift here.</p>\n\n<p>In the future, it should even be possible to set the <code>aspect-ratio</code> <strong>dynamically</strong> based on the element attributes by using <code>aspect-ratio: attr(width) / attr(height);</code> but sadly this is not supported yet.</p>\n\n<p>Or you can even use <code>aspect-ratio</code> on a <code>&lt;div&gt;</code> element for some sort of custom control you are creating to make it responsive:</p>\n\n<pre><code class=\"language-css\">#my-square-custom-control {\n  max-width: 100%;\n  height: auto;\n  width: 500px;\n  aspect-ratio: 1;\n}</code></pre>\n\n<pre><code class=\"language-html\">&lt;div id=\"my-square-custom-control\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>For those browsers that don’t support <code>aspect-ratio</code> you can use the older <a href=\"https://www.smashingmagazine.com/2013/09/responsive-images-performance-problem-case-study/#the-padding-bottom-hack\">padding-bottom hack</a> but, with the simplicity of the newer <code>aspect-ratio</code> and wide support (especially once this moves from Safari Technical Preview to regular Safari), it is hard to justify that older method.</p>\n\n<p>Chrome is the only browser that <strong>feeds back CLS to Google</strong> and it supports <code>aspect-ratio</code> meaning that will solve your CLS issues in terms of Core Web Vitals. I don’t like prioritizing the metrics over the users, but the fact that the other Chromium and Firefox browsers have this and Safari will hopefully soon, and that this is a progressive enhancement means that I would say we’re at the point where we can leave the padding-bottom hack behind and write cleaner code.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"make-liberal-use-of-min-height\">Make Liberal Use Of <code>min-height</code></h3>\n\n<p>For those elements that don’t need a responsive size but a fixed height instead, consider using <code>min-height</code>. This could be for a <strong>fixed height header</strong>, for example and we can have different headings for the different break-points using media queries as usual:</p>\n\n<pre><code class=\"language-css\">header {\n  min-height: 50px;\n}\n@media (min-width: 600px) {\n  header {\n    min-height: 200px;\n  }\n}</code></pre>\n\n<pre><code class=\"language-html\">&lt;header&gt;\n ...\n&lt;/header&gt;</code></pre>\n\n<p>Of course the same applies to <code>min-width</code> for horizontally placed elements, but it’s normally the height that causes the CLS issues.</p>\n\n<p>A more advanced technique for injected content and advanced CSS selectors is to target when expected content has not been inserted yet. For example, if you had the following content:</p>\n\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"main-content\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And an extra <code>div</code> is inserted via JavaScript:</p>\n\n<pre><code class=\"language-html\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"additional-content\"&gt;.../div&gt;\n  &lt;div class=\"main-content\"&gt;...&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then you could use the following snippet to <strong>leave the space for additional content</strong> when the <code>main-content</code> div is rendered initially.</p>\n\n<pre><code class=\"language-css\">.main-content:first-child {\n   margin-top: 20px; \n }</code></pre>\n\n<p>This code will actually <strong>create a shift</strong> to the <code>main-content</code> element as the margin counts as part of that element so it will appear to shift when that is removed (even though it doesn’t actually move on screen). However, at least the content beneath it will not be shifted so should reduce CLS.</p>\n\n<p>Alternatively, you can use the <code>::before</code> pseudo-element to add the space to <strong>avoid the shift</strong> on the <code>main-content</code> element as well:</p>\n\n<pre><code class=\"language-css\">.main-content:first-child::before {\n   content: '';\n   min-height: 20px;\n   display: block;\n }\n</code></pre>\n\n<p>But in all honesty, the better solution is to have the <code>div</code> in the HTML and make use of <code>min-height</code> on that.</p>\n\n<h3 id=\"check-fallback-elements\">Check Fallback Elements</h3>\n\n<p>I like to use progressive enhancement to provide a basic website, even without JavaScript where possible. Unfortunately, this caught me out recently on one site I maintain when the fallback non-JavaScript version was different than when the JavaScript kicked in.</p>\n\n<p>The issue was due to the &ldquo;Table of Contents&rdquo; menu button in the header. Before the JavaScript kicks in this is a simple link, styled to look like the button that takes you to the Table of Contents page. Once JavaScript kicks in, it becomes a <strong>dynamic menu</strong> to allow you to navigate directly to whatever page you want to go to from that page.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"605\"\n\t\t\theight=\"512\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Screenshots of two Table of Contents navigation components styled like a button. With JavaScript this opens a dynamic menu as shown in the second image.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      A Table of Contents header component which is initially rendered as a simple link (top), and then enhanced with JavaScript to be a dynamic menu (bottom). (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/399118f1-cc91-4b31-ab2b-21e2b2e9c892/1-layout-shift-issues.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>I used semantic elements and so used an anchor element  (<code>&lt;a href=&quot;#table-of-contents&quot;&gt;</code>)  for the fallback link but replaced that with a <code>&lt;button&gt;</code> for the JavaScript-driven dynamic menu. These were styled to look the same, but the fallback link was a couple of pixels smaller than the button!</p>\n\n<p>This was so small, and the JavaScript usually kicked in so quickly, that I had not noticed it was off. However, Chrome noticed it when calculating the CLS and, as this was in the header, it <strong>shifted the entire page down</strong> a couple of pixels. So this had quite an impact on the CLS score &mdash; enough to knock all our pages into the “Needs Improvement” category.</p>\n\n<p>This was an error on my part, and the fix was simply to <strong>bring the two elements into sync</strong> (it could also have been remediated by setting a <code>min-height</code> on the header as discussed above), but it confused me for a bit. I’m sure I’m not the only one to have made this error so be aware of how the page renders without JavaScript. Don’t think your users disable JavaScript? <a href=\"https://twitter.com/jaffathecake/status/207096228339658752\">All your users are non-JS while they&rsquo;re downloading your JS</a>.</p>\n\n<h3 id=\"web-fonts-cause-layout-shifts\">Web Fonts Cause Layout Shifts</h3>\n\n<p>Web fonts are another common cause of CLS due to the browser initially calculating the space needed based on the fallback font, and then <strong>recalculating</strong> it when the web font is downloaded. Usually, the CLS is small, providing a similarly sized fallback font is used, so often they don’t cause enough of a problem to fail Core Web Vitals, but they can be jarring for users nonetheless.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"391\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Two screenshots of a Smashing Magazine article with different fonts. The text is noticeably different sized and an extra sentence can fit in when the web fonts are used.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Smashing Magazine article with fallback font and with full web fonts. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b0008e4a-3d9c-4a32-8cee-07a06528b2dd/4-layout-shift-issues.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>Unfortunately even <a href=\"https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/\">preloading</a> the webfonts won’t help here as, while that reduces the time the fallback fonts are used for (so is good for loading performance &mdash; LCP), it <strong>still takes time to fetch them</strong>, and so the fallbacks will still be used by the browser in most cases so doesn’t avoid CLS. Saying that, if you know a web font is needed on the next page (say you’re on a login page and know the next page uses a special font) then you can <a href=\"https://www.smashingmagazine.com/2019/04/optimization-performance-resource-hints/#prefetching-the-next-page\">prefetch</a> them.</p>\n\n<p>To avoid <strong>font-induced layout shifts</strong> altogether, we could of course not use web fonts at all &mdash; including using system fonts instead, or using <code>font-display: optional</code> to not use them if not downloaded in time for the initial render. But neither of those are very satisfactory, to be honest.</p>\n\n<p>Another option is to ensure the sections are <strong>appropriately sized</strong> (e.g. with <code>min-height</code>) so while the text in them may shift a bit, the content below it won’t be pushed down even when this happens. For example, setting a <code>min-height</code> on the <code>&lt;h1&gt;</code> element could prevent the whole article from shifting down if slightly taller fonts load in &mdash; providing the different fonts don’t cause a different number of lines. This will reduce the impact of the shifts, however, for many use-cases (e.g. generic paragraphs) it will be difficult to generalize a minimum height.</p>\n\n<p>What I’m most excited about to solve this issue, are the <a href=\"https://drafts.csswg.org/css-fonts-5/\">new CSS Font Descriptors</a> which allow you to more easily adjust fallback fonts in CSS:</p>\n\n<pre><code class=\"language-css\">@font-face {\n  font-family: 'Lato';\n  src: url('/static/fonts/Lato.woff2') format('woff2');\n  font-weight: 400;\n}\n\n@font-face {\n    font-family: \"Lato-fallback\";\n    size-adjust: 97.38%;\n    ascent-override: 99%;\n    src: local(\"Arial\");\n}\n\nh1 {\n    font-family: Lato, Lato-fallback, sans-serif;\n}\n</code></pre>\n\n<p>Prior to these, adjusting the fallback font required using the Font Loading API in JavaScript which was more complicated, but this option due out very soon may finally give us an easier solution that is more likely to gain traction. See my <a href=\"https://www.smashingmagazine.com/2021/05/reduce-font-loading-impact-css-descriptors/\">previous article on this subject for</a> more details on this upcoming innovation and more resources on that.</p>\n\n<h3 id=\"initial-templates-for-client-side-rendered-pages\">Initial Templates For Client-side Rendered Pages</h3>\n\n<p>Many client-side rendered pages, or Single Page Apps, render an initial basic page using just HTML and CSS, and then “hydrate” the template after the JavaScript downloads and executes.</p>\n\n<p>It’s easy for these initial templates to get out of sync with the JavaScript version as new components and features are added to the app in the JavaScript but not added to the initial HTML template which is rendered first. This then causes CLS when these components are injected by JavaScript.</p>\n\n<p>So <strong>review all your initial templates</strong> to ensure they are still good initial placeholders. And if the initial template consists of empty <code>&lt;div&gt;</code>s, then use the techniques above to ensure they are sized appropriately to try to avoid any shifts.</p>\n\n<p>Additionally, the initial <code>div</code> which is injected with the app should have a <code>min-height</code> to avoid it being rendered with 0 height initially before the initial template is even inserted.</p>\n\n<pre><code class=\"language-html\">&lt;div id=\"app\" style=\"min-height:900px;\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>As long as the <code>min-height</code> is <strong>larger than most viewports</strong>, this should avoid any CLS for the website footer, for example. CLS is only measured when it’s in the viewport and so impacts the user. By default, an empty <code>div</code> has a height of 0px, so give it a <code>min-height</code> that is closer to what the actual height will be when the app loads.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3 id=\"ensure-user-interactions-complete-within-500ms\">Ensure User Interactions Complete Within 500ms</h3>\n\n<p>User interactions that cause content to shift are excluded from CLS scores. These are restricted to 500 ms after the interaction. So if you click on a button, and do some complex processing that takes over 500 ms and then render some new content, then your CLS score is going to suffer.</p>\n\n<p>You can see if the <strong>shift was excluded in Chrome DevTools</strong> by using the <em>Performance tab</em> to record the page and then finding the shifts as shown in the next screenshot. Open DevTools go to the very intimidating (but very useful once you get a hang of it!) <em>Performance</em> tab and then click on the record button in the top left (circled on the image below) and interact with your page, and stop recording once complete.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"868\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"Screenshot of Chrome Dev Tools with a shift selected and the Summary of this shows that it had recent input and so the shift is not included in the Cumulative Score.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Using the Performance tab in Chrome Dev Tools to see if shifts are excluded due to recent input. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c83715ac-5c8f-48e0-aa99-e3a77069323a/3-layout-shift-issues.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>You will see a filmstrip of the page in which I loaded some of the comments on another Smashing Magazine article so in the part I’ve circled, you can just about make out the comments loading and the red footer being shifted down offscreen. Further down the <em>Performance</em> tab, under the <em>Experience</em> line, Chrome will put a reddish-pinkish box for each shift and when you click on that you will get more detail in the <em>Summary</em> tab below.</p>\n\n<p>Here you can see that we got a <strong>massive 0.3359 score</strong> &mdash; well past the 0.1 threshold we’re aiming to be under, but the <em>Cumulative score</em> has not included this, because <em>Had recent input</em> is set to Uses.</p>\n\n<p>Ensuring interactions only shift content within 500 ms borders on what First Input Delay attempts to measure, but there are cases when the user may see that the input had an effect (e.g. a loading spinner is shown) so FID is good, but the content may not be added to the page until after the 500 ms limit, so CLS is bad.</p>\n\n<p>Ideally, the whole interaction will be finished within 500ms, but you can do some things to <strong>set aside the necessary space</strong> using the techniques above while that processing is going on so that if it does take more than the magic 500 ms, then you’ve already handled the shift and so will not be penalized for it. This is especially useful when fetching content from the network which could be variable and outside your control.</p>\n\n<p>Other items to watch out for are <strong>animations</strong> that take longer than 500ms and so can impact CLS. While this might seem a bit restrictive, the aim of CLS isn’t to limit the “fun”, but to set reasonable expectations of user experience and I don’t think it’s unrealistic to expect these to take 500ms or under. But if you disagree, or have a use case they might not have considered, then the Chrome team is <a href=\"https://groups.google.com/g/web-vitals-feedback\">open to feedback on this</a>.</p>\n\n<h3 id=\"synchronous-javascript\">Synchronous JavaScript</h3>\n\n<p>The final technique I’m going to discuss is a little controversial as it goes against well-known web performance advice, but it can be the only method in certain situations. Basically, if you have content that you know is going to cause shifts, then one solution to avoid the shifts is to not render it until it’s settled down!</p>\n\n<p>The below HTML will hide the <code>div</code> initially, then load some render-blocking JavaScript to populate the <code>div</code>, then unhide it. As the JavaScript is render-blocking nothing below this will be rendered (including the second <code>style</code> block to unhide it) and so no shifts will be incurred.</p>\n\n<pre><code class=\"language-html\">&lt;style&gt;\n.cls-inducing-div {\n    display: none;\n}\n&lt;/style&gt;\n\n&lt;div class=\"cls-inducing-div\"&gt;&lt;/div&gt;\n&lt;script&gt;\n...\n&lt;/script&gt;\n\n&lt;style&gt;\n.cls-inducing-div {\n    display: block;\n}\n&lt;/style&gt;\n</code></pre>\n\n<p>It is important to <strong>inline the CSS in the HTML</strong> with this technique, so it is applied in order. The alternative is to unhide the content with JavaScript itself, but what I like about the above technique is that it still unhides the content even if the JavaScript fails or is turned off by the browser.</p>\n\n<p>This technique can also even be applied with external JavaScript, but this will cause more delay than an inline <code>script</code> as the external JavaScript is requested and downloaded. That delay can be minimized by preloading the JavaScript resource so it’s available quicker once the parser reaches that section of code:</p>\n\n<pre><code class=\"language-html\">&lt;head&gt;\n...\n&lt;link rel=\"preload\" href=\"cls-inducing-javascript.js\" as=\"script\"&gt;\n...\n&lt;/head&gt;\n&lt;body&gt;\n...\n&lt;style&gt;\n.cls-inducing-div {\n    display: none;\n}\n&lt;/style&gt;\n&lt;div class=\"cls-inducing-div\"&gt;&lt;/div&gt;\n&lt;script src=\"cls-inducing-javascript.js\"&gt;&lt;/script&gt;\n&lt;style&gt;\n.cls-inducing-div {\n    display: block;\n}\n&lt;/style&gt;\n...\n&lt;/body&gt;\n</code></pre>\n\n<p>Now, as I say, this I’m sure will make some web performance people cringe, as advice is to use <code>async, defer</code> or the newer <code>type=&quot;module&quot;</code> (which are <code>defer</code>-ed by default) on JavaScript specifically to <em>avoid blocking render</em>, whereas we are doing the opposite here! However, if content cannot be predetermined and it is going to cause jarring shifts, then there is little point in rendering it early.</p>\n\n<p>I used this technique for a <strong>cookie banner</strong> that loaded at the top of the page and shifted content downwards:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \">\n  \n    <a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png\">\n    \n    <img\n      loading=\"lazy\"\n      decoding=\"async\"\n      importance=\"low\"\n\t\t\twidth=\"800\"\n\t\t\theight=\"405\"\n\t\t\t\n\t\t\tsrcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png 2000w\"\n\t\t\tsrc=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png\"\n\t\t\t\n\t\t\tsizes=\"100vw\"\n\t\t\talt=\"A screenshot of a web page, where the content is shifted down when a cookie banner is added to the top of the page.\"\n\t\t/>\n    \n    </a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      A top of page cookie notice or other banner can shift content down. (<a href='https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c37b4adc-764b-4f9c-bfc6-ed98e28e83ed/5-layout-shift-issues.png'>Large preview</a>)\n    </figcaption>\n  \n</figure>\n\n<p>This required reading a cookie to see whether to display the cookie banner or not and, while that could be completed server-side, this was a static site with no ability to dynamically alter the returned HTML.</p>\n\n<p>Cookie banners can be implemented in different ways to avoid CLS. For example by having them at the bottom of the page, or overlaying them on top of the content, rather than shifting the content down. We preferred to keep the content at the top of the page, so had to use this technique to avoid the shifts. There are various other alerts and banners that site owners may prefer to be at the top of the page for various reasons.</p>\n\n<p>I also used this technique on another page where <strong>JavaScript moves content around</strong> into “main” and “aside” columns (for reasons I won’t go into, it was not possible to construct this properly in HTML server-side). Again hiding the content, until the JavaScript had rearranged the content, and only then showing it, avoided the CLS issues that were dragging these pages&rsquo; CLS score down. And again the content is automatically unhidden even if the JavaScript doesn’t run for some reason and the unshifted content is shown.</p>\n\n<p>Using this technique can impact other metrics (particularly LCP and also First Contentful Paint) as you are delaying rendering, and also potentially blocking browsers&rsquo; look ahead preloader, but it is another tool to consider for those cases where no other option exists.</p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>Cumulative Layout Shift is caused by content changing dimensions, or new content being injected into the page by late running JavaScript. In this post, we’ve discussed various tips and tricks to avoid this. I’m glad the spotlight the Core Web Vitals have shone on this irritating issue &mdash; for too long we web developers (and I definitely include myself in this) have ignored this problem.</p>\n\n<p>Cleaning up my own websites has led to a better experience for all visitors. I encourage you to <strong>look at your CLS issues too</strong>, and hopefully some of these tips will be useful when you do. Who knows, you may even manage to get down to the elusive <a href=\"https://twitter.com/TimVereecke/status/1382456055519703043?s=20\">0 CLS score</a> for all your pages!</p>\n\n<h4 id=\"more-resources\">More Resources</h4>\n\n<ul>\n<li><a href=\"https://www.smashingmagazine.com/category/core-web-vitals\">Core Web Vitals articles</a> here on Smashing Magazine, including my own on <a href=\"https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/\">Setting Width and Heights on Images</a>, <a href=\"https://www.smashingmagazine.com/2021/04/complete-guide-measure-core-web-vitals/\">Measuring Core Web Vitals</a>, and <a href=\"https://www.smashingmagazine.com/2021/05/reduce-font-loading-impact-css-descriptors/\">CSS Font Descriptors</a>.</li>\n<li>Google’s <a href=\"https://web.dev/vitals/\">Core Web Vitals documentation</a> including their page on <a href=\"https://web.dev/cls/\">CLS</a>.</li>\n<li>More <a href=\"https://web.dev/evolving-cls/\">details on the recent change to CLS</a> and then this change <a href=\"https://web.dev/cls-web-tooling/\">started updating in various Google’s tools</a>.</li>\n<li>The <a href=\"https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/speed/metrics_changelog/cls.md\">CLS Changelog</a> detailing changes in each version of Chrome.</li>\n<li><a href=\"https://jessbpeck.com/posts/completecls/\">The Almost-Complete Guide to Cumulative Layout Shift</a> by <a href=\"https://twitter.com/jessthebp\">Jess Peck</a>.</li>\n<li><a href=\"https://calibreapp.com/blog/cumulative-layout-shift\">Cumulative Layout Shift: Measure and Avoid Visual Instability</a> by <a href=\"https://twitter.com/fox\">Karolina Szczur</a>.</li>\n<li><a href=\"https://defaced.dev/tools/layout-shift-gif-generator/\">A Layout Shift GIF Generator</a> to help generate shareable demonstrations of CLS.</li>\n</ul>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\" width=\"35\" height=\"46\" loading=\"lazy\" decoding=\"async\" />\n  <span>(vf, il)</span>\n</div>\n\n\n              </article>\n            </body>\n          </html>\n        "
        ],
        "provider": "Smashing Magazine"
    },
    {
        "title": [
            "TablesNG — Improvements to table rendering in Chromium"
        ],
        "link": [
            "https://www.bram.us/2021/06/21/tablesng-improvements-to-table-rendering-in-chromium/"
        ],
        "comments": [
            "https://css-tricks.com/tablesng-improvements-to-rendering-in-chromium/#comments"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Wed, 23 Jun 2021 21:37:14 +0000"
        ],
        "category": [
            "Link",
            "tables"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343076",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>When I blogged <a href=\"https://css-tricks.com/making-tables-with-sticky-header-and-footers-got-a-bit-easier/\">&#8220;Making Tables With Sticky Header and Footers Got a Bit&#160;Easier&#8221;</a> recently, I mentioned that the &#8220;stickiness&#8221; improvement was just one of the features that got better for <code>&#60;table&#62;</code>s in Chrome as part of the <a href=\"https://docs.google.com/document/d/16PFD1GtMI9Zgwu0jtPaKZJ75Q2wyZ9EZnVbBacOfiNA/edit\">TablesNG upgrade</a>&#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/tablesng-improvements-to-rendering-in-chromium/\">TablesNG — Improvements to table rendering in Chromium</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>When I blogged <a href=\"https://css-tricks.com/making-tables-with-sticky-header-and-footers-got-a-bit-easier/\">&#8220;Making Tables With Sticky Header and Footers Got a Bit&nbsp;Easier&#8221;</a> recently, I mentioned that the &#8220;stickiness&#8221; improvement was just one of the features that got better for <code>&lt;table&gt;</code>s in Chrome as part of the <a href=\"https://docs.google.com/document/d/16PFD1GtMI9Zgwu0jtPaKZJ75Q2wyZ9EZnVbBacOfiNA/edit\">TablesNG upgrade</a>. I ain&#8217;t the <a href=\"https://twitter.com/scottjehl/status/1407356545080434697\">only one</a> who&#8217;s stoked about it.</p>\n\n\n\n<p>But Bramus <a href=\"https://www.bram.us/2021/06/21/tablesng-improvements-to-table-rendering-in-chromium/\">took it the rest of the nine yards</a> and looked at all of the table enhancements. Every one of these is great. The kind of thing that makes CSS ever-so-slightly less frustrating.</p>\n\n\n\n<span id=\"more-343076\"></span>\n\n\n\n<p>Just the <code>writing-mode</code> stuff is fantastic.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_wvJbzWe\" src=\"//codepen.io/anon/embed/wvJbzWe?height=450&amp;theme-id=1&amp;slug-hash=wvJbzWe&amp;default-tab=result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed wvJbzWe\" title=\"CodePen Embed wvJbzWe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n<p><a href=\"https://www.bram.us/2021/06/21/tablesng-improvements-to-table-rendering-in-chromium/\" title=\"Direct link to featured article\">Direct Link to Article</a> &#8212; <a href=\"https://css-tricks.com/tablesng-improvements-to-rendering-in-chromium/\">Permalink</a></p><hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/tablesng-improvements-to-rendering-in-chromium/\">TablesNG — Improvements to table rendering in Chromium</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/tablesng-improvements-to-rendering-in-chromium/feed/"
        ],
        "slash:comments": [
            "2"
        ],
        "post-id": [
            {
                "_": "343076",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "How best to serve images to high-density screens"
        ],
        "link": [
            "https://frontendfoc.us/issues/495"
        ],
        "description": [
            "\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align=\"center\" border=\"0\">\n  <tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <div>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n      <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0>\n        <tr>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <a href=\"https://frontendfoc.us/link/109726/rss\" style=\" color: #D94306; font-weight: 600;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1602675575/hhmdxfk96fnbq3effjk1.png\" width=\"60\" style=\"margin-top: 7px;     line-height: 100%; \"></a>\n          </td>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <div style=\"margin-left: 25px; color: #fff;\">\n<p>Frontend Focus</p>\n<p>#​495 — June 16, 2021 | <a href=\"https://frontendfoc.us/link/109727/rss\" style=\"color: #fff;  font-weight: 600;\">Read on the web</a></p>\n</div>\n          </td>\n        </tr>\n      </table>\n     </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/109728/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1623850825/resl4t1qrjm7ngtyfxks.png\" width=\"640\" style=\"      line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109728/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306; font-size: 1.15em; line-height: 1.25em; font-weight: 400;\">When CSS Isn’t Enough: JavaScript Requirements For Accessible Components</a></span> — Stephanie Eckles looks at how components such as tooltips, modals, tabs, carousels, and dropdown menus often require more than just CSS (even when 'pure CSS' solutions are technically possible), especially to ensure accessibility.</p>\n  <p>Smashing Magazine </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109748/rss\" title=\"jakearchibald.com\" style=\" color: #D94306;\">Serving Sharp Images to High Density Screens</a></span> — A majority of displays now have device to pixel ratios (DPR) higher than 1 (e.g. 'Retina' screens) — so what’s the best way to handle images in such high-density situations? Here’s a solid look at how to do just that (covering compression, delivery, etc.)</p>\n  <p>Jake Archibald </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/109729/rss\" style=\" color: #D94306;\"><img src=\"https://copm.s3.amazonaws.com/5527b4f2.jpg\" width=\"110\" height=\"110\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109729/rss\" title=\"frontendmasters.com\" style=\" color: #D94306;\">New &amp; Updated Course: Complete Intro to React v6 with Brian Holt</a></span> — Learn to build real-world applications using modern React. Much more than an intro, you’ll start from the ground up, getting to using the latest features in React, including hooks, effects, context, and portals, plus piecing together tools from the entire React ecosystem.</p>\n  <p>Frontend Masters <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\">▶  <a href=\"https://frontendfoc.us/link/109730/rss\" title=\"developer.apple.com\" style=\" color: #D94306;\">Design for Safari 15</a></span> — Apple has shared a half hour video, along with related resources, where Jen Simmons and Myles Maxfield covered all the upcoming Safari changes we saw in last week's WWDC keynote in more detail. Worth a watch.</p>\n  <p>Apple </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109731/rss\" title=\"web.dev\" style=\" color: #D94306;\">Introducing Aurora: A Collaboration Between Chrome and Open-Source Web Frameworks &amp; Tools</a></span> — A new initiative that aims to “deliver the best user experience possible for production apps regardless of the browser you’re rendering in”. Early days, but this post outlines the overall goals.</p>\n  <p>Panicker, Osmani, Djirdeh (Google) </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n<p><strong>⚡️ Quick bits:</strong></p>\n                  <ul>\n                  \n                  <li>What if you could set whether you're ok with cookies or not at a browser level? <a href=\"https://frontendfoc.us/link/109732/rss\" style=\" color: #D94306; font-weight: 600;\">This draft spec is proposing just that</a> — could this make cookie banners obsolete?</li>\n                  \n                  <li>Hmmm, the creator of the world wide web, Sir Tim Berners-Lee, is <a href=\"https://frontendfoc.us/link/109733/rss\" style=\" color: #D94306; font-weight: 600;\">selling off the original code used to create the modern internet as an NFT</a>. The <a href=\"https://frontendfoc.us/link/109734/rss\" style=\" color: #D94306; font-weight: 600;\">auction</a> takes place later this month.</li> \n                  \n                  <li>Got Edge on your Mac? Well, <a href=\"https://frontendfoc.us/link/109735/rss\" style=\" color: #D94306; font-weight: 600;\">you won't have to use Microsoft AutoUpdate to get new versions any more</a>. Edge will update itself going forward.</li>\n                  \n                  <li>Amazon is <a href=\"https://frontendfoc.us/link/109736/rss\" style=\" color: #D94306; font-weight: 600;\">the latest to block Google's FLoC</a>.</li>\n                  \n                  <li>Here's a look at <a href=\"https://frontendfoc.us/link/109737/rss\" style=\" color: #D94306; font-weight: 600;\">how the BBC approach development to ensure accessibility</a> (and meet the corporation's a11y guidelines).</li>\n                  \n                  <li>The performance.now() event is returning later this year for an actual in-person conference in Amsterdam. <a href=\"https://frontendfoc.us/link/109738/rss\" style=\" color: #D94306; font-weight: 600;\">Details here</a>.</li>\n                  \n                  <li>WebExpo is also <a href=\"https://frontendfoc.us/link/109739/rss\" style=\" color: #D94306; font-weight: 600;\">returning for an IRL event</a>, this September in Prague.</li>\n\n                  </ul>\n                                \n  </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>📙 <strong>Tutorials, Articles &amp; Opinion</strong></p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/109740/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1623844009/uglhzcmtstpqnoyaktnv.png\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109740/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306;\">Web Design Done Well: Making Use Of Audio</a></span> — Audio on the web can often be a tricky thing to get right. Here’s a showcase of sites that get it right, nailing the user experience.</p>\n  <p>Frederick O'Brien </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109741/rss\" title=\"arstechnica.com\" style=\" color: #D94306;\">Google Chrome Ends Its War On Address Bar URLs—for Now, At Least</a></span> — Yep, it appears as though Google is <a href=\"https://frontendfoc.us/link/109742/rss\" style=\" color: #D94306;\">abandoning plans</a> to display a ‘simplified’ domain in the Omnibox.</p>\n  <p>Ron Amadeo </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109743/rss\" title=\"blog.jim-nielsen.com\" style=\" color: #D94306;\">CSS System Colors</a></span> — It’s not got universal support, but did you know you can use <a href=\"https://frontendfoc.us/link/109744/rss\" style=\" color: #D94306;\">a range of keywords</a> in CSS to set color values that are dependent on your system preferences. Jim digs in.</p>\n  <p>Jim Nielsen </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109745/rss\" title=\"www.telerik.com\" style=\" color: #D94306;\">An Angular Data Grid That Makes Life Easy Does Exist! Give It a Try</a></span> — Get the performance, features, and UI users demand in a super customizable grid component -- and enjoy the experience.</p>\n  <p>Progress Kendo UI for Angular <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109746/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306;\">Three Frontend Auditing Tools I Discovered Recently</a></span> — Some lesser-known tools to help you achieve a faster website.</p>\n  <p>Stefan Judis </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109747/rss\" title=\"tympanus.net\" style=\" color: #D94306;\">Thumbnail Hover Effect with SVG Filters</a></span> — A simple thumbnail hover effect with a caption slide out animation and an SVG filter distortion on the image.</p>\n  <p>Mary Lou </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109794/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Improving Contrast in Microsoft Edge DevTools: A Bugfix Case Study</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Microsoft Edge Team</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109749/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Making Tables With Sticky Header and Footers Got a Bit Easier</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Chris Coyier</span> \n  </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109750/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Frontend Developer at MIT (Remote, Contract to Full-Time)</a></span> — Are you a frontend developer with React and UX skills? Join our team at MIT building a new platform for the energy industry.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">MIT Energy Initiative</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/109751/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Frontend Developer at X-Team (Remote)</a></span> — Join the most energizing community for developers and work on long-term projects for Riot Games, FOX, Sony, Coinbase, and more.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">X-Team</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>🧑‍💻 Got a job listing to share? <em><a href=\"https://frontendfoc.us/link/109752/rss\" style=\" color: #D94306; font-weight: 600;\">Here's how</a></em>.</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>🔧 <strong> Code, Tools and Resources</strong></p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109753/rss\" title=\"http3check.net\" style=\" color: #D94306;\">HTTP/3 Check: See If A Server Supports HTTP/3</a></span> — Online tool to check if a server supports HTTP/3, based on the QUIC protocol, which you can <a href=\"https://frontendfoc.us/link/109754/rss\" style=\" color: #D94306;\">read about here</a>.</p>\n  <p>LiteSpeed </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/109755/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1623843671/auptdypmgejvxnzisy2y.png\" width=\"190\" height=\"\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109755/rss\" title=\"vivirenremoto.github.io\" style=\" color: #D94306;\">DOOM Captcha: Captchas Don't Have to Be Boring</a></span> — Just a bit of fun - <em>even John Carmack himself liked it</em>. Take out a few classic DOOM enemies to complete the Captcha.</p>\n  <p>Miquel Camps Orteza </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109756/rss\" title=\"uniformcss.com\" style=\" color: #D94306;\">Uniform CSS</a></span> — A fully customizable utility-first CSS framework built in Sass.</p>\n  <p>Jin Su Park </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109757/rss\" title=\"market.pmnd.rs\" style=\" color: #D94306;\">Market: A Collection of Nearly 400 'CC0' 3D Assets</a></span> — …for React Three Fiber or Three.js.</p>\n  <p>Poimandres </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109758/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">Easy, Fast and Seamless UAT and User Feedback with Bugherd</a></span></p>\n  <p>BugHerd <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109759/rss\" title=\"www.loopple.com\" style=\" color: #D94306;\">Loopple: A Drag-and-Drop Tool to Create Bootstrap-Based Dashboards</a></span></p>\n  <p>Loopple </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109760/rss\" title=\"awssat.com\" style=\" color: #D94306;\">Tailwindo: Convert Your Bootstrap CSS to Tailwind CSS</a></span></p>\n  <p>Awssat </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/109761/rss\" title=\"codepen.io\" style=\" color: #D94306;\">Directionally Aware CSS Buttons with React</a></span></p>\n  <p>Jhey Tompkins <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;  padding: 1px 4px; \">codepen</span></p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n\n            \n    </div>\n  </td></tr>\n</table>\n\n\n\n\n<img src=\"https://frontendfoc.us/open/495/rss\" width=\"1\" height=\"1\" />"
        ],
        "pubDate": [
            "Wed, 16 Jun 2021 00:00:00 +0000"
        ],
        "guid": [
            "https://frontendfoc.us/issues/495"
        ],
        "provider": "Frontend Focus"
    },
    {
        "title": [
            "Static Site Generators: A Beginner’s Guide"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/static-site-generators/?utm_source=rss\"\n              title=\"Static Site Generators: A Beginner’s Guide\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775777ssg-sm.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775777ssg-sm-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775777ssg-sm-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775777ssg-sm-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/02/1613775777ssg-sm.jpg 1235w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>The <a style=\"font-weight:bold\" href=\"https://www.sitepoint.com/learn-jamstack/\">Jamstack</a> (JavaScript, APIs, and Markup) is increasingly becoming the development stack of choice on the Web. The title on the <a style=\"font-weight:bold\" href=\"https://jamstack.org/\">Jamstack website</a> suggests that the Jamstack is “the modern way to build websites and apps” and that it “delivers better performance”.</strong> </p>\n<p>Performance is certainly one of the benefits the Jamstack brings to the table, together with better security, scalability, and developer experience. Sites built on this type of architecture make use of pre-rendered static pages served over CDNs, can get data from multiple sources, and replace traditional servers and their databases with micro service APIs. </p>\n<p>What makes possible the creation of static sites quickly and relatively painlessly are static-site generators (SSGs).</p>\n<p>There are tons of static-site generators in a range of programming languages, such as JavaScript, Ruby, Go, and more. You&#8217;ll find an exhaustive, unfiltered list on <a href=\"https://staticsitegenerators.net/\">staticsitegenerators.net</a>, but if you&#8217;d like something more manageable, check out the <a href=\"https://jamstack.org/generators/\">Jamstack website”s list</a>, where you can filter static-site generators by name or by the number of GitHub stars.</p>\n<p>In this article, I’m going to list seven popular static-site generators and their main features, so that you can form a better idea of which one among them would be a good fit for your project.</p>\n<h2 id=\"whatarestaticsitegenerators\">What Are Static-site Generators?</h2>\n<p>A common CMS (content management system) — like WordPress for instance — builds the web page dynamically as it&#8217;s being requested by the client: it assembles all the data from the database, and processes the content through a template engine.</p>\n<p>On the other hand, static-site generators —  </p>\n<blockquote>\n<p>apply data and content to templates, and generate a view of a page which can be served to the visitors of a site.</p>\n<p style=\"margin-top:1em;\">The greatest difference between a static-site generator and a traditional web application stack is that, instead of waiting until a page is requested and then generating its view on demand each time, a static-site generator does this in advance so that the view is ready to serve ahead of time. And it does so for every possible view of a site at build time. — “<a href=\"https://www.netlify.com/blog/2020/04/14/what-is-a-static-site-generator-and-3-ways-to-find-the-best-one/\">What is a Static Site Generator? And 3 Ways to Find the Best One</a>”</p>\n</blockquote>\n<p>If you’re curious and would like to learn more, this great <a href=\"https://css-tricks.com/really-makes-static-site-generator/\">article by Brian Rinaldi</a> looks closely at the inner workings of static-site generators.</p>\n<p>But, what about all the good things that come with CMSs, like content creation and update by non developers, team collaboration around content, and so on?  Enter the headless CMS. </p>\n<p>A headless CMS — </p>\n<blockquote>\n<p>is a content management system that provides a way to author content, but instead of having your content coupled to a particular output (like web page rendering), it provides your content as data over an API. — “<a href=\"https://www.sanity.io/blog/headless-cms-explained\">Headless CMS explained in 2 Minutes</a>”</p>\n</blockquote>\n<p>This way, the editorial team, for example, can continue working from their familiar, user-friendly admin interface and the content they produce or update is just one data source among others that static-site generators can access via the exposed API. Popular headless CMS software include <a href=\"https://strapi.io/\">Strapi</a>, <a href=\"https://www.sanity.io/\">Sanity</a>, and <a href=\"https://www.contentful.com/\">Contentful</a>. Also, <a href=\"https://css-tricks.com/creating-a-gatsby-site-with-wordpress-data/\">WordPress has a REST API that allows devs to use it</a> as a headless CMS. </p>\n<p>So, the modern Jamstack tooling makes it possible to build a statically-served website and still get the benefits of a content management system. </p>\n<p>Now, let’s go through some static-site generator options.</p>\n<h2 id=\"1gatsby\">1. Gatsby</h2>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612363964gatsby.png\" alt=\"Gatsby\" /></p>\n<p><a href=\"https://www.gatsbyjs.com/\">Gatsby</a> is a full-blown framework for building static websites and apps. It’s built in React and leverages <a href=\"https://graphql.org/\">GraphQL</a> for manipulating data. If you’re curious and want to delve deeper, check out “<a href=\"https://www.sitepoint.com/gatsby-guide/\">Getting Started with Gatsby: Build Your First Static Site</a>” on SitePoint and the <a href=\"https://www.gatsbyjs.org/docs/\">docs</a> on the Gatsby website.</p>\n<p>Here are some of Gatsby’s strong points:</p>\n<ul>\n<li>With Gatsby you get to work with the latest web technologies — with React, webpack, modern JS, CSS and so on all ready for you to just start coding your site.</li>\n<li>Gatsby’s rich plugin ecosystem allows you to use any kind of data you prefer from one or more sources.</li>\n<li>Easy deployment and scalability, which is mainly due to the fact that Gatsby builds static pages that don’t require complicated setups.</li>\n<li>Gatsby is a progressive web apps (PWA) generator:<br />\n<blockquote>\n<p>You get code and data splitting out-of-the-box. Gatsby loads only the critical HTML, CSS, data, and JavaScript so your site loads as fast as possible. Once loaded, Gatsby prefetches resources for other pages so clicking around the site feels incredibly fast. — <a href=\"https://www.gatsbyjs.org/\">Gatsby website</a></p>\n</blockquote>\n</li>\n<li><a href=\"https://www.gatsbyjs.com/plugins/gatsby-image/\">gatsby-image</a> combines Gatsby’s native image processing capabilities with advanced image loading techniques to easily and completely optimize image loading for your sites.</li>\n<li>Plenty of starter sites are available for you to grab freely and customize.</li>\n</ul>\n<h2 id=\"2nextjs\">2. Next.js</h2>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/02/1612363974next.png\" alt=\"Next.js\" /></p>\n<p><a href=\"https://nextjs.org/\">Next</a> is a versatile framework for the creation of server-rendered or statically exported JavaScript apps. It’s built on top of React and is created by <a href=\"https://vercel.com/\">Vercel</a>.</p>\n<p>To create a Next app, run the following command in your terminal:</p>\n<pre><code class=\"bash language-bash\">npx create-next-app nextjs-blog --use-npm --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\r\n</code></pre>\n<p><code>cd</code> into  <code>nextjs-blog</code>, your newly created directory, and type the command to open your Next JS app&#8217;s development server on port 3000: </p>\n<pre><code class=\"bash language-bash\">npm run dev\r\n</code></pre>\n<p>To check that everything works as expected, open <a href=\"http://localhost:3000\">http://localhost:3000</a> in your browser.</p>\n<p>Next.js has great docs, where you can learn more about building and customizing your Next-based apps.</p>\n<p>Here are a number of Next&#8217;s best features:</p>\n<ul>\n<li>Next renders on the server by default, which is great for performance. For a discussion of the pros and cons of server-side rendering, check out <a href=\"https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8\">this article</a> by Alex Grigoryan on Medium.</li>\n<li>No setup necessary: automatic code-splitting, routing and hot reload out of the box.</li>\n<li>Image optimization, internationalization, and analytics.</li>\n<li>Great <a href=\"https://nextjs.org/docs/getting-started\">docs</a>, <a href=\"https://nextjs.org/learn/basics/create-nextjs-app\">tutorials, quizzes and examples</a> to get you up and running from beginner to advanced user.</li>\n<li>Built-in CSS support.</li>\n<li>Tons of <a href=\"https://github.com/zeit/next.js/tree/canary/examples\">example apps</a> to get you started.</li>\n</ul>\n<h2 id=\"3hugo\">3. Hugo</h2>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2019/02/1551249138hugo.png\" alt=\"Hugo - static-site generators\" /></p>\n<p><a href=\"https://gohugo.io/\">Hugo</a> is a very popular static-site generator with over 49k stars on GitHub right now. It&#8217;s written in Go, and advertises itself as being the fastest framework for building websites. In fact, Hugo comes with a fast build process, which makes building static websites a breeze and works great for blogs with lots of posts.</p>\n<p>The docs are great and on the platform&#8217;s website you&#8217;ll find a fantastic <a href=\"https://gohugo.io/getting-started/quick-start/\">quickstart guide</a> that gets you up and running with the software in no time.</p>\n<p>Here are some of Hugo’s most loved features:</p>\n<ul>\n<li>Designed and optimized for speed: as a rule of thumb, each piece of content renders in about one millisecond.</li>\n<li>No need to install extra plugins for things like pagination, redirection, multiple content types, and more.</li>\n<li>Rich theming system.</li>\n<li>Shortcodes available as an alternative to using Markdown.</li>\n<li>Since December 2020, Hugo offers <a href=\"https://gohugo.io/hugo-pipes/scss-sass/#options\">Dart Sass</a> support, and a new filter to overlay an image on top of another — <a href=\"https://gohugo.io/news/0.80.0-relnotes/\">Hugo 0.80: Last Release of 2020!</a></li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/static-site-generators/?utm_source=rss\">Static Site Generators: A Beginner’s Guide</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/static-site-generators/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=171204",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "Web"
        ],
        "dc:creator": [
            "Maria Antonietta Perna"
        ],
        "pubDate": [
            "Tue, 16 Feb 2021 15:00:51 GMT"
        ],
        "metaDesc": [
            "Static site generators are a key element of the modern Jamstack architecture. We explore the standout features of seven leading static site generators."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "System *Things"
        ],
        "link": [
            "https://css-tricks.com/system-things/"
        ],
        "comments": [
            "https://css-tricks.com/system-things/#comments"
        ],
        "dc:creator": [
            "Chris Coyier"
        ],
        "pubDate": [
            "Mon, 28 Jun 2021 22:14:22 +0000"
        ],
        "category": [
            "Article",
            "cross-browser",
            "system fonts"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343040",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>I think we&#8217;re all largely aware of colors like this:</p>\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">color: OldLace;\nbackground: rebeccapurple;</code></pre>\n<p>I guess you&#8217;d just call those <a href=\"https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/\">&#8220;named colors&#8221; in CSS</a>. </p>\n<p>Those aren&#8217;t the only kind of named colors there are though. Some of them are &#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/system-things/\">System *Things</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>I think we&#8217;re all largely aware of colors like this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">color: OldLace;\nbackground: rebeccapurple;</code></pre>\n\n\n\n<p>I guess you&#8217;d just call those <a href=\"https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/\">&#8220;named colors&#8221; in CSS</a>. </p>\n\n\n\n<p>Those aren&#8217;t the only kind of named colors there are though. Some of them are a bit more fluid. Jim Nielsen was blowin&#8217; minds the other day when he <a href=\"https://blog.jim-nielsen.com/2021/css-system-colors/\">blogged about System Colors</a>.</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"><p>What I need is a way to say “hey browser, for my dropdown, use the same black (or white if in light mode) that you’re using for the background color of the document”. I need access to a variable of sorts that references the exact “black” the browser is using.</p></blockquote>\n\n\n\n<p>Then, <a href=\"https://web.dev/color-scheme/\">via Jim referencing Thomas Steiner</a>, I discovered there are literally <a href=\"https://drafts.csswg.org/css-color/#css-system-colors\">CSS system colors</a>. These aren&#8217;t colors that are (or at least attempt to be) the same across all browsers, but they are allowed to be set by &#8220;choices made by the user, the browser, or the OS.&#8221; So for example, <code>Canvas</code> is the &#8220;background of application content or documents.&#8221; Case in point: the <code>background-color</code> for dark mode is <code>#1e1e1e</code> in Safari and <code>#121212</code> in Chrome. If you like that, meaning you&#8217;re leaning into what the browser thinks is a good color for things, then you can now access it through that <code>Canvas</code> keyword.</p>\n\n\n\n<span id=\"more-343040\"></span>\n\n\n\n<p>System colors! There are <a href=\"https://drafts.csswg.org/css-color/#css-system-colors\">a bunch of them</a>. </p>\n\n\n\n<ul><li><code>Canvas</code></li><li><code>CanvasText</code></li><li><code>LinkText</code></li><li><code>VisitedText</code></li><li><code>ActiveText</code></li><li><code>ButtonFace</code></li><li><code>ButtonText</code></li><li><code>ButtonBorder</code></li><li><code>Field</code></li><li><code>FieldText</code></li><li><code>Highlight</code></li><li><code>HighlightText</code></li><li><code>Mark</code></li><li><code>MarkText</code></li><li><code>GrayText</code></li></ul>\n\n\n\n<p>Not only do they change across browsers, they change when toggling between dark and light mode as long as you have CSS in place to support them&#8230;</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">html {\n  color-scheme: light dark;\n}</code></pre>\n\n\n\n<p>You&#8217;ll see them change when modes change. And you don&#8217;t <em>have</em> to use them for what they were designed for, I suppose:</p>\n\n\n\n<figure class=\"wp-block-video\"><video controls src=\"https://css-tricks.com/wp-content/uploads/2021/06/CleanShot-2021-06-24-at-16.24.10.mp4\"></video></figure>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_OJpKgBe\" src=\"//codepen.io/anon/embed/OJpKgBe?height=450&amp;theme-id=1&amp;slug-hash=OJpKgBe&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed OJpKgBe\" title=\"CodePen Embed OJpKgBe\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>So those are the system <em>colors</em>, but you can see right in that Pen that I&#8217;ve also used a system <em>font</em>: <code>system-ui</code>. Same vibe! It&#8217;s purposely fluid. It&#8217;s not going to be the same typeface across browsers and operating systems. Jim <a href=\"https://blog.jim-nielsen.com/2020/system-fonts-on-the-web/\">also covered this</a> a while back. We used to replicate the idea with <a href=\"https://css-tricks.com/snippets/css/system-font-stack/\">a big long stack of named fonts</a>, but now CSS helps with it (in supporting browsers). </p>\n\n\n\n<p>There are a bunch of them <a href=\"https://blog.jim-nielsen.com/2020/system-fonts-on-the-web/\">specced</a>:</p>\n\n\n\n<ul><li><code>serif</code></li><li><code>sans-serif</code></li><li><code>monospace</code></li><li><code>system-ui</code></li><li><code>cursive</code></li><li><code>fantasy</code></li><li><code>emoji</code></li><li><code>math</code></li><li><code>fangsong</code></li><li><code>ui-serif</code></li><li><code>ui-sans-serif</code></li><li><code>ui-monospace</code></li><li><code>ui-rounded</code></li></ul>\n\n\n\n<p>Support seems scattered. For example, I could set this:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">p {\n  font-family: ui-monospace, system-ui, fantasy;\n}</code></pre>\n\n\n\n<p>On my Mac, in Safari, I&#8217;d get SF Mono (<code>ui-monospace</code>). But in Chrome, <code>ui-monospace</code> doesn&#8217;t work so it would fall back to SF Pro (<code>system-ui</code>). In Firefox neither <code>ui-monospace</code> or <code>system-ui</code> work and I&#8217;d get Papyrus (<code>fantasy</code>). So font stacks are still important. It&#8217;s just funny to think about because these new system font keywords are almost like font stacks in and of themselves.</p>\n\n\n\n<p>So there are system colors and system fonts — doesn&#8217;t that beg the question of what other system things there are? </p>\n\n\n\n<p>Well, there are named font weights — like how <code>font-weight: bold;</code> is the same as <code>700</code>, and <code>bolder</code> is just <em>a bit more bold</em> than the parent. But that doesn&#8217;t feel like a system-level thing where the system would want to take hold of that and do different things. But hey, maybe.</p>\n\n\n\n<p>There are also named font sizes, like <code>font-size: xx-small;</code>. I could see systems wanting to get their hands on those values and adjust them to sizes that make sense contextually, but in a quick glance (comparing Chrome and iOS Safari), they compute to the same sizes. </p>\n\n\n\n<p>Those named font size values don&#8217;t travel, either. I can&#8217;t do <code>margin: large;</code>. Well, I can, but it doesn&#8217;t do anything. So no real universal system sizes. </p>\n\n\n\n<p>What about system icons? We do kinda have those in the form of emoji! We use the emoji knowing that different systems will render it differently and are generally fine with that as we know it will look consistent with that user&#8217;s platform. </p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img loading=\"lazy\" width=\"1100\" height=\"1210\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-24-at-4.49.30-PM.png?resize=1100%2C1210&#038;ssl=1\" alt=\"\" class=\"wp-image-343196\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-24-at-4.49.30-PM.png?w=1100&amp;ssl=1 1100w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-24-at-4.49.30-PM.png?resize=273%2C300&amp;ssl=1 273w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-24-at-4.49.30-PM.png?resize=931%2C1024&amp;ssl=1 931w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-24-at-4.49.30-PM.png?resize=768%2C845&amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/Screen-Shot-2021-06-24-at-4.49.30-PM.png?resize=1000%2C1100&amp;ssl=1 1000w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>The &#8220;Blue Book&#8221; emoji (via <a href=\"https://emojipedia.org/blue-book/\">Emojipedia</a>)</figcaption></figure>\n\n\n\n<p>We could sort of think of inputs as &#8220;system inputs.&#8221; We know different browsers and platforms render input controls in very different ways, and that is how the spec intends it. To each their own. </p>\n\n\n\n<p> </p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/system-things/\">System *Things</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/system-things/feed/"
        ],
        "slash:comments": [
            "4"
        ],
        "post-id": [
            {
                "_": "343040",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "When a Click is Not Just a Click"
        ],
        "link": [
            "https://css-tricks.com/when-a-click-is-not-just-a-click/"
        ],
        "comments": [
            "https://css-tricks.com/when-a-click-is-not-just-a-click/#respond"
        ],
        "dc:creator": [
            "Travis Almand"
        ],
        "pubDate": [
            "Wed, 30 Jun 2021 14:45:42 +0000"
        ],
        "category": [
            "Article",
            "buttons",
            "JavaScript"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=343064",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>The <code>click</code> event is quite simple and easy to use; you listen for the event and run code when the event is fired. It works on just about every HTML element there is, a core feature of the DOM API.&#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/when-a-click-is-not-just-a-click/\">When a Click is Not Just a Click</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>The <code>click</code> event is quite simple and easy to use; you listen for the event and run code when the event is fired. It works on just about every HTML element there is, a core feature of the DOM API.</p>\n\n\n\n<p>As often the case with the DOM and JavaScript, there are nuances to consider. Some nuances with the click event are typically not much a concern. They are minor and probably most people would never even notice them in the majority of use cases.</p>\n\n\n\n<span id=\"more-343064\"></span>\n\n\n\n<p>Take, for example, the <code>click</code> event listening to the grandfather of interactive elements, the <code>&lt;button&gt;</code> element. There are nuances associated with button clicks and these nuances, like the difference between a “click” from a mouse pointer and “click” from the keyboard. Seen this way, a click is not always a “click” the way it’s typically defined. I actually have run into situations (though not many) where distinguishing between those two types of clicks comes in handy.</p>\n\n\n\n<p>How do we distinguish between different types of clicks? That’s what we’re diving into!</p>\n\n\n\n<h3 id=\"h-first-things-first\">First things first</h3>\n\n\n\n<p>The <code>&lt;button&gt;</code> element, as described by <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\">MDN</a>, is simply:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-large\"><p>The <strong>HTML </strong><strong>element</strong> represents a clickable button, used to submit forms or anywhere in a document for accessible, standard button functionality. By default, HTML buttons are presented in a style resembling the platform the user agent runs on, but you can change buttons’ appearance with CSS.</p></blockquote>\n\n\n\n<p>The part we’ll cover is obviously the “anywhere in a document for accessible, standard button functionality” part of that description. As you may know, a button element can have native functionality within a form, for example it can submit a form in some situations. We are only really concerning ourselves over the basic clicking function of the element. So consider just a simple button placed on the page for specific functionality when someone interacts with it.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_895c214b0842404a5fe0c3ad35dd32c4\" src=\"//codepen.io/anon/embed/895c214b0842404a5fe0c3ad35dd32c4?height=250&amp;theme-id=1&amp;slug-hash=895c214b0842404a5fe0c3ad35dd32c4&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 895c214b0842404a5fe0c3ad35dd32c4\" title=\"CodePen Embed 895c214b0842404a5fe0c3ad35dd32c4\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Consider that I said “interacts with it” instead of just clicking it. For historical and usability reasons, one can “click” the button by putting focus on it with tabbing and then using the <kbd>Space</kbd> or <kbd>Enter</kbd> key on the keyboard. This is a bit of overlap with keyboard navigation and accessibility; this native feature existed way before accessibility was a concern. Yet the legacy feature does help a great deal with accessibility for obvious reasons.</p>\n\n\n\n<p>In the example above, you can click the button and its text label will change. After a moment the original text will reset. You can also click somewhere else within the pen, tab to put focus on the button, and then use <kbd>Space</kbd> or <kbd>Enter</kbd> to “click” it. The same text appears and resets as well. There is no JavaScript to handle the keyboard functionality; it’s a native feature of the browser. Fundamentally, in this example the button is only aware of the click event, but not how it happened.</p>\n\n\n\n<p>One interesting difference to consider is the behavior of a button across different browsers, especially the way it is styled. The buttons in these examples are set to shift colors on its active state; so you click it and it turns purple. Consider this image that shows the states when interacting with the keyboard.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img loading=\"lazy\" width=\"579\" height=\"72\" src=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/keyboard-interaction-1.png?resize=579%2C72&#038;ssl=1\" alt=\"\" class=\"wp-image-343127\" srcset=\"https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/keyboard-interaction-1.png?w=579&amp;ssl=1 579w, https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/06/keyboard-interaction-1.png?resize=300%2C37&amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\" data-recalc-dims=\"1\" /><figcaption>Keyboard Interaction States</figcaption></figure></div>\n\n\n\n<p>The first is the static state, the second is when the button has focus from a keyboard tabbing onto it, the third is the keyboard interaction, and the fourth is the result of the interaction. With Firefox you will only see the first two and last states; when interacting with either <kbd>Enter</kbd> or <kbd>Space</kbd> keys to &#8220;click&#8221; it you do not see the third state. It stays with the second, or &#8220;focused&#8221;, state during the interaction and then shifts to the last one. The text changes as expected but the colors do not. Chrome gives us a bit more as you&#8217;ll see the first two states the same as Firefox. If you use the <kbd>Space </kbd>key to &#8220;click&#8221; the button you&#8217;ll see the third state with the color change and then the last. Interestingly enough, with Chrome if you use <kbd>Enter</kbd> to interact with the button you won&#8217;t see the third state with the color change, much like Firefox. In case you are curious, Safari behaves the same as Chrome.</p>\n\n\n\n<p>The code for the event listener is quite simple:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const button = document.querySelector('#button');\n\nbutton.addEventListener('click', () => {\n  button.innerText = 'Button Clicked!';\n  \n  window.setTimeout(() => {\n    button.innerText = '\"click\" me';\n  }, 2000);\n});</code></pre>\n\n\n\n<p>Now, let’s consider something here with this code. What if you found yourself in a situation where you wanted to know what caused the “click” to happen? The click event is usually tied to a pointer device, typically the mouse, and yet here the <kbd>Space</kbd> or <kbd>Enter</kbd> key are triggering the same event. Other form elements have similar functionality depending on context, but any elements that are not interactive by default would require an additional keyboard event to work. The button element doesn’t require this additional event listener.</p>\n\n\n\n<p>I won’t go too far into reasons for wanting to know what triggered the click event. I can say that I have occasionally ran into situations where it was helpful to know. Sometimes for styling reasons, sometimes accessibility, and sometimes for specific functionality. Often different context or situations provide for different reasons.</p>\n\n\n\n<p>Consider the following not as The Way&#x2122; but more of an exploration of these nuances we’re talking about. We’ll explore handling the various ways to interact with a button element, the events generated, and leveraging specific features of these events. Hopefully the following examples can provide some helpful information from the events; or possibly spread out to other HTML elements, as needed.</p>\n\n\n\n<h3 id=\"h-which-is-which\">Which is which?</h3>\n\n\n\n<p>One simple way to know a keyboard versus mouse click event is leveraging the <code>keyup</code> and <code>mouseup</code> events, taking the click event out of the equation.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_d5d28185aac4bc6d735a81b47ca4d4a3\" src=\"//codepen.io/anon/embed/d5d28185aac4bc6d735a81b47ca4d4a3?height=250&amp;theme-id=1&amp;slug-hash=d5d28185aac4bc6d735a81b47ca4d4a3&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed d5d28185aac4bc6d735a81b47ca4d4a3\" title=\"CodePen Embed d5d28185aac4bc6d735a81b47ca4d4a3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Now, when you use the mouse or the keyboard, the changed text reflects which event is which. The keyboard version will even inform you of a <kbd>Space</kbd> versus <kbd>Enter</kbd> key being used.</p>\n\n\n\n<p>Here’s the new code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const button = document.querySelector('#button');\n\nfunction reset () {\n  window.setTimeout(() => {\n    button.innerText = '\"click\" me';\n  }, 2000);\n}\n\nbutton.addEventListener('mouseup', (e) => {\n  if (e.button === 0) {\n    button.innerText = 'MouseUp Event!';\n    reset();\n  }\n});\n\nbutton.addEventListener('keyup', (e) => {\n  if (e.code === 'Space' || e.code === 'Enter') {\n    button.innerText = `KeyUp Event: ${e.code}`;\n    reset();\n  }\n});</code></pre>\n\n\n\n<p>A bit verbose, true, but we’ll get to a slight refactor in a bit. This example gets the point across about a nuance that needs to be handled. The <code>mouseup</code> and <code>keyup</code> events have their own features to account for in this situation.</p>\n\n\n\n<p>With the <code>mouseup</code> event, about every button on the mouse could trigger this event. We usually wouldn’t want the right mouse button triggering a “click” event on the button, for instance. So we look for the <code>e.button</code> with the value of 0 to identify the primary mouse button. That way it works the same as with the click event yet we know for a fact it was the mouse.</p>\n\n\n\n<p>With the <code>keyup</code> event, the same thing happens where about every key on the keyboard will trigger this event. So we look at the event’s <code>code</code> property to wait for the <kbd>Space</kbd> or <kbd>Enter</kbd> key to be pressed. So now it works the same as the click event but we know the keyboard was used. We even know which of the two keys we’re expecting to work on the button.</p>\n\n\n\n<h3 id=\"h-another-take-to-determine-which-is-which\">Another take to determine which is which</h3>\n\n\n\n<p>While the previous example works, it seems like a bit too much code for such a simple concept. We really just want to know if the “click” came from a mouse or a keyboard. In most cases we probably wouldn’t care if the source of the click was either the <kbd>Space</kbd> or <kbd>Enter</kbd> keys. But, if we do care, we can take advantage of the <code>keyup</code> event properties to note which is which.</p>\n\n\n\n<p>Buried in the various specifications about the <code>click</code> event (which leads us to the <a href=\"https://www.w3.org/TR/uievents/\">UI Events</a> specification) there are certain properties assigned to the event concerning the mouse location, including properties such as <code>screenX</code>/<code>screenY</code> and <code>clientX</code>/<code>clientY</code>. Some browsers have more, but I want to focus on the <code>screenX</code>/<code>screenY</code> properties for the moment. These two properties essentially give you the <code>X</code> and <code>Y</code> coordinates of the mouse click in relation to the upper-left of the screen. The <code>clientX</code>/<code>clientY</code> properties do the same, but the origin is the upper-left of the browser’s viewport.</p>\n\n\n\n<p>This trick relies on the fact that the <code>click</code> event provides these coordinates even though the event was triggered by the keyboard. When a button with the <code>click</code> event is “clicked” by the <kbd>Space</kbd> or <kbd>Enter</kbd> key it still needs to assign a value to those properties. Since there’s no mouse location to report, if it falls back to zero as the default.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_5948602bc22b929a94d8b4d8729cda2c\" src=\"//codepen.io/anon/embed/5948602bc22b929a94d8b4d8729cda2c?height=250&amp;theme-id=1&amp;slug-hash=5948602bc22b929a94d8b4d8729cda2c&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 5948602bc22b929a94d8b4d8729cda2c\" title=\"CodePen Embed 5948602bc22b929a94d8b4d8729cda2c\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Here’s our new code:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const button = document.querySelector('#button');\n\nbutton.addEventListener('click', (e) => {\n  button.innerText = e.screenX + e.screenY === 0 || e.offsetX + e.offsetY === 0 ?\n    'Keyboard Click Event!' : 'Mouse Click Event!';\n  \n  window.setTimeout(() => {\n    button.innerText = '\"click\" me';\n  }, 2000);\n});</code></pre>\n\n\n\n<p>Back to just the <code>click</code> event, but this time we look for those properties to determine whether this is a keyboard or mouse “click.” We take both <code>screenX</code> and <code>screenY</code> properties, add them together, and see if they equal zero; which makes for an easy test. The possibilities of the button being in the immediate upper-left of the screen to be clicked has to be quite low. It could be possible if one attempted to make such an effort of a pixel-perfect click in such an odd location, but I would think it’s a safe assumption that it won’t happen under normal circumstances.</p>\n\n\n\n<p class=\"is-style-default\">Now, one might notice the added e.offsetX + e.offsetY === 0 part. I have to explain that bit&#8230;</p>\n\n\n\n<h3 id=\"h-enter-the-dreaded-browser-inconsistencies\">Enter the dreaded browser inconsistencies</h3>\n\n\n\n<p>While creating and testing this code, the all-too-often problem of cross-browser support reared its ugly head. It turns out that even though most browsers set the <kbd>screenX</kbd> and <kbd>screenY</kbd> values on a keyboard-caused <kbd>click</kbd> event to zero, Safari decides to be different. It applies a proper value to <kbd>screenX</kbd> and <kbd>screenY</kbd> as if the button was clicked by a mouse. This throws a wrench into my code which is one of the fun aspects of dealing with different browsers — they&#8217;re made by different groups of different people creating different outcomes to the same use cases.</p>\n\n\n\n<p>But, alas, I needed a solution because I didn&#8217;t necessarily want to rely only on the <kbd>keyup</kbd> event for this version of the code. I mean, we <em>could</em> if we wanted to, so that&#8217;s still an option. It&#8217;s just that I liked the idea of treating this as a potential learning exercise to determine what&#8217;s happening and how to make adjustments for differences in browsers like we&#8217;re seeing here.</p>\n\n\n\n<p>Testing what Safari is doing in this case, it appears to be using the <kbd>offsetX</kbd> and <kbd>offsetY</kbd> properties in the event to determine the location of the &#8220;click&#8221; and then applying math to determine the <kbd>screenX</kbd> and <kbd>screenY</kbd> values. That&#8217;s a huge over-simplification, but it sort of checks out. The offset properties will be the location of the click based on the upper-left of the button. In this context, Safari applies zero to <kbd>offsetX</kbd> and <kbd>offsetY</kbd>, which would obviously be seen as the upper-left of the button. From there it treats that location of the button as the determination for the screen properties based on the distance from the upper-left of the button to the upper-left of the screen.</p>\n\n\n\n<p>The other usual browsers technically also apply zero to <kbd>offestX </kbd>and <kbd>offsetY</kbd>, and could be used in place of <kbd>screenX</kbd> and <kbd>screenY</kbd>. I chose not to go that route. It&#8217;s certainly possible to click a button that happens to be at the absolute top-left of the screen is rather difficult while clicking the top-left of a button. Yet, Safari is different so the tests against the screen and offsets is the result. The code, as written, hopes for zeroes on the screen properties and, if they are there, it moves forward assuming a keyboard-caused <kbd>click</kbd>. If the screen properties together are larger then zero, it checks the offset properties just in case. We can consider this the Safari check.</p>\n\n\n\n<p>This is not ideal, but it wouldn&#8217;t be the first time I had to create branching logic due to browser inconsistencies.</p>\n\n\n\n<p>In the hope that the behavior of these properties will not change in the future, we have a decent way to determine if a button’s <code>click</code> event happened by mouse or keyboard. Yet technology marches on providing us new features, new requirements, and new challenges to consider. The various devices available to us has started the concept of the “pointer” as a means to interact with elements on the screen. Currently, such a pointer could be a mouse, a pen, or a touch. This creates yet another nuance that we might want to be consider; determining the kind of pointer involved in the click.</p>\n\n\n\n<h3 id=\"h-which-one-out-of-many\">Which one out of many?</h3>\n\n\n\n<p>Now is a good time to talk about <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\">Pointer Events</a>. As described by MDN:</p>\n\n\n\n<blockquote class=\"wp-block-quote is-style-large\"><p>Much of today‘s web content assumes the user’s pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#term_pointer_event\">Pointer events</a> address that need.</p></blockquote>\n\n\n\n<p>So now let’s consider having a need for knowing what type of pointer was involved in clicking that button. Relying on just the click event doesn’t really provide this information. Chrome does have an interesting property in the click event, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/sourceCapabilities\"><code>sourceCapabilities</code></a>. This property in turn has a property named <code>firesTouchEvents</code> that is a boolean. This information isn’t always available since Firefox and Safari do not support this yet. Yet the pointer event is available much everywhere, even IE11 of all browsers.</p>\n\n\n\n<p>This event can provide interesting data about touch or pen events. Things like pressure, contact size, tilt, and more. For our example here we’re just going to focus on <code>pointerType</code>, which tells us the device type that caused the event.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_cbc40c0ea5edc35013d9c8a59e17cd58\" src=\"//codepen.io/anon/embed/cbc40c0ea5edc35013d9c8a59e17cd58?height=250&amp;theme-id=1&amp;slug-hash=cbc40c0ea5edc35013d9c8a59e17cd58&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed cbc40c0ea5edc35013d9c8a59e17cd58\" title=\"CodePen Embed cbc40c0ea5edc35013d9c8a59e17cd58\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Clicking on the button will now tell you the pointer that was used. The code for this is quite simple:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const button = document.querySelector('#button');\n\nbutton.addEventListener('pointerup', (e) => {\n  button.innerText = `Pointer Event: ${e.pointerType}`;\n  \n  window.setTimeout(() => {\n    button.innerText = '\"click\" me';\n  }, 2000);\n});</code></pre>\n\n\n\n<p>Really, not that much different than the previous examples. We listen for the <code>pointerup</code> event on the button and output the event’s <code>pointerType</code>. The difference now is there is no event listener for a click event. So tabbing onto the button and using space or enter key does nothing. The click event still fires, but we’re not listening for it. At this point we only have code tied to the button that only responds to the pointer event.</p>\n\n\n\n<p>That obviously leaves a gap in functionality, the keyboard interactivity, so we still need to include a click event. Since we’re already using the pointer event for the more traditional mouse click (and other pointer events) we have to lock down the click event. We need to only allow the keyboard itself to trigger the click event.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_3b11c7b129c488f50c3af59720a69a3d\" src=\"//codepen.io/anon/embed/3b11c7b129c488f50c3af59720a69a3d?height=250&amp;theme-id=1&amp;slug-hash=3b11c7b129c488f50c3af59720a69a3d&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed 3b11c7b129c488f50c3af59720a69a3d\" title=\"CodePen Embed 3b11c7b129c488f50c3af59720a69a3d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>The code for this is similar to the “Which Is Which” example up above. The difference being we use <code>pointerup</code> instead of <code>mouseup</code>:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const button = document.querySelector('#button');\n\nfunction reset () {\n  window.setTimeout(() => {\n    button.innerText = '\"click\" me';\n  }, 2000);\n}\n\nbutton.addEventListener('pointerup', (e) => {\n  button.innerText = `Pointer Event: ${e.pointerType}`;\n  reset();\n});\n\nbutton.addEventListener('click', (e) => {\n  if (e.screenX + e.screenY === 0 || e.offsetX + e.offsetY === 0) {\n    button.innerText = 'Keyboard  ||Click Event!';\n    reset();\n  }\n});</code></pre>\n\n\n\n<p>Here we’re using the <kbd>screenX </kbd>+ <kbd>screenY </kbd>(with the additional offset check) method to determine if the click was caused by the keyboard. This way a mouse click would be handled by the pointer event. If one wanted to know if the key used was space or enter, then the keyup example above could be used. Even then, the <kbd>keyup </kbd>event could be used instead of the <kbd>click </kbd>event depending on how you wanted to approach it.</p>\n\n\n\n<h3 id=\"h-anoher-take-to-determine-which-one-out-of-many\">Anoher take to determine which one out of many</h3>\n\n\n\n<p>In the ever-present need to refactor for cleaner code, we can try a different way to code this.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_d9dc400ed3041bb39ece0cf5eaaa9e5d\" src=\"//codepen.io/anon/embed/d9dc400ed3041bb39ece0cf5eaaa9e5d?height=250&amp;theme-id=1&amp;slug-hash=d9dc400ed3041bb39ece0cf5eaaa9e5d&amp;default-tab=result\" height=\"250\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed d9dc400ed3041bb39ece0cf5eaaa9e5d\" title=\"CodePen Embed d9dc400ed3041bb39ece0cf5eaaa9e5d\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Yep, works the same as before. Now the code is:</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const button = document.querySelector('#button');\n\nfunction btn_handler (e) {\n  if (e.type === 'click' &amp;&amp; e.screenX + e.screenY > 0 &amp;&amp; e.offsetX + e.offsetY > 0) {\n    return false;\n  } else if (e.pointerType) {\n    button.innerText = `Pointer Event: ${e.pointerType}`;\n  } else if (e.screenX + e.screenY === 0) {\n    button.innerText = 'Keyboard Click Event!';\n  } else {\n    button.innerText = 'Something clicked this?';\n  }\n  \n  window.setTimeout(() => {\n    button.innerText = '\"click\" me';\n  }, 2000);\n}\n\nbutton.addEventListener('pointerup', btn_handler);\nbutton.addEventListener('click', btn_handler);</code></pre>\n\n\n\n<p>Another scaled down version to consider: this time we’ve reduced our code down to a single handler method that both <code>pointerup</code> and <code>click</code> events call. First we detect if the mouse “click” caused the event; if it does, we wish to ignore it in favor of the pointer event. This is checked with a test opposite of the keyboard test; is the sum of <code>screenX</code> and <code>screenY</code> larger than zero? This time there&#8217;s an alteration to the offset check by doing the same as the screen test, is the sum of those properties larger than zero as well?</p>\n\n\n\n<p>Then the method checks for the pointer event, and upon finding that, it reports which pointer type occurred. Otherwise, the method checks for keyboard interactions and reports accordingly. If neither of those are the culprit, it just reports that something caused this code to run.</p>\n\n\n\n<p>So here we have a decent number of examples on how to handle button interactions while reporting the source of those interactions. Yet, this is just one of the handful of form elements that we are so accustomed to using in projects. How does similar code work with other elements?</p>\n\n\n\n<h3 id=\"h-checking-checkboxes\">Checking checkboxes</h3>\n\n\n\n<p>Indeed, similar code does work very much the same way with checkboxes.</p>\n\n\n\n<p>There are a few more nuances, as you might expect by now. The normal usage of <code>&lt;input</code> <code>type=\"checkbox\"&gt;</code> is a <a href=\"https://css-tricks.com/html-inputs-and-labels-a-love-story/\">related label element that is tied to the input via the <code>for</code> attribute</a>. One major feature of this combination is that clicking on the label element will check the related checkbox.</p>\n\n\n\n<p>Now, if we were to attach event listeners for the <code>click</code> event on both elements, we get back what should be obvious results, even if they are a bit strange. For example, we get one <code>click</code> event fired when clicking the checkbox. If we click the label, we get two <code>click</code> events fired instead. If we were to <code>console.log</code> the target of those events, we’ll see on the double event that one is for the label (which makes sense as we clicked it), but there’s a second event from the checkbox. Even though I know these should be the expected results, it is a bit strange because we’re expecting results from <em>user</em> interactions. Yet the results include interactions caused by the <em>browser</em>.</p>\n\n\n\n<p>So, the next step is to look at what happens if we were to listen for <code>pointerup</code>, just like some of the previous examples, in the same scenarios. In that case, we don’t get two events when clicking on the label element. This also makes sense as we’re no longer listening for the <code>click</code> event that is being fired from the checkbox when the label is clicked.</p>\n\n\n\n<p>There’s yet another scenario to consider. Remember that we have the option to <a href=\"https://www.a11ymatters.com/pattern/checkbox/#associating-the-label-with-the-input\">put the checkbox inside the label element</a>, which is common with custom-built checkboxes for styling purposes.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;label for=\"newsletter\">\n  &lt;input type=\"checkbox\" />\n  Subscribe to my newsletter\n&lt;/label></code></pre>\n\n\n\n<p>In this case, we really only need to put an event listener on the label and not the checkbox itself. This reduces the number of event listeners involved, and yet we get the same results. Clicks events are fired as a single event for clicking on the label and two events if you click on the checkbox. The <code>pointerup</code> events do the same as before as well, single events if clicking on either element.</p>\n\n\n\n<p>These are all things to consider when trying to mimic the behavior of the previous examples with the button element. Thankfully, there’s not too much to it. Here’s an example of seeing what type of interaction was done with a checkbox form element:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_fff7c049c62e932cc5838a096fd94fe3\" src=\"//codepen.io/anon/embed/fff7c049c62e932cc5838a096fd94fe3?height=300&amp;theme-id=1&amp;slug-hash=fff7c049c62e932cc5838a096fd94fe3&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed fff7c049c62e932cc5838a096fd94fe3\" title=\"CodePen Embed fff7c049c62e932cc5838a096fd94fe3\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>This example includes both types of checkbox scenarios mentioned above; the top line is a checkbox/label combination with the <code>for</code> attribute, and the bottom one is a checkbox inside the label. Clicking either one will output a message below them stating which type of interaction happened. So click on one with a mouse or use the keyboard to navigate to them and then interact with <kbd>Space</kbd> or <kbd>Enter</kbd>; just like the button examples, it should tell you which interaction type causes it.</p>\n\n\n\n<p>To make things easier in terms of how many event listeners I needed, I wrapped the checkboxes with a container div that actually responds to the checkbox interactions. You wouldn’t necessarily have to do it this way, but it was a convenient way to do this for my needs. To me, the fun part is that the code from the last button example above just copied over to this example.</p>\n\n\n\n<pre rel=\"JavaScript\" class=\"wp-block-csstricks-code-block language-javascript\" data-line=\"\"><code markup=\"tt\">const checkbox_container = document.querySelector('#checkbox_container');\nconst checkbox_msg = document.querySelector('#checkbox_msg');\n\nfunction chk_handler (e) {\n  if (e.type === 'click' &amp;&amp; e.screenX + e.screenY > 0 &amp;&amp; e.offsetX + e.offsetY > 0) {\n    return false;\n  } else if (e.pointerType) {\n    checkbox_msg.innerText = `Pointer Event: ${e.pointerType}`;\n  } else if (e.screenX + e.screenY === 0) {\n    checkbox_msg.innerText = 'Keyboard Click Event!';\n  } else {\n    checkbox_msg.innerText = 'Something clicked this?';\n  }\n  \n  window.setTimeout(() => {\n    checkbox_msg.innerText = 'waiting...';\n  }, 2000);\n}\n\ncheckbox_container.addEventListener('pointerup', chk_handler);\ncheckbox_container.addEventListener('click', chk_handler);</code></pre>\n\n\n\n<p>That means we could possibly have the same method being called from the the various elements that need the same detecting the pointer type functionality. Technically, we could put a button inside the checkbox container and it should still work the same. In the end it’s up to you how to implement such things based on the needs of the project.</p>\n\n\n\n<h3 id=\"h-radioing-your-radio-buttons\">Radioing your radio buttons</h3>\n\n\n\n<p>Thankfully, for radio button inputs, we can still use the same code with similar HTML structures. This mostly works the same because checkboxes and radio buttons are essentially created the same way—it’s just that radio buttons tend to come in groups tied together while checkboxes are individuals even in a group. As you’ll see in the following example, it works the same:</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ebfac094fd6edb937b62f9a79ebac367\" src=\"//codepen.io/anon/embed/ebfac094fd6edb937b62f9a79ebac367?height=300&amp;theme-id=1&amp;slug-hash=ebfac094fd6edb937b62f9a79ebac367&amp;default-tab=result\" height=\"300\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ebfac094fd6edb937b62f9a79ebac367\" title=\"CodePen Embed ebfac094fd6edb937b62f9a79ebac367\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Again, same code attached to a similar container div to prevent having to do a number of event listeners for every related element.</p>\n\n\n\n<h3 id=\"h-when-a-nuance-can-be-an-opportunity\">When a nuance can be an opportunity</h3>\n\n\n\n<p>I felt that “nuance” was a good word choice because the things we covered here are not really “issues” with the typical negative connotation that word tends to have in programming circles. I always try to see such things as learning experiences or opportunities. How can I leverage things I know today to push a little further ahead, or maybe it’s time to explore outward into new things to solve problems I face. Hopefully, the examples above provide a somewhat different way to look at things depending on the needs of the project at hand.</p>\n\n\n\n<p>We even found an opportunity to explore a browser inconsistency and find a workaround to that situation. Thankfully we don&#8217;t run into such things that much with today&#8217;s browsers, but I could tell you stories about what we went through when I first started web development.</p>\n\n\n\n<p>Despite this article focusing more on form elements because of the click nuance they tend to have with keyboard interactions, some or all of this can be expanded into other elements. It all depends on the context of the situation. For example, I recall having to do multiple events on the same elements depending on the context many times; often for accessibility and keyboard navigation reasons. Have you built a custom <code>&lt;select&gt;</code> element to have a nicer design than the standard one, that also responds to keyboard navigation? You’ll see what I mean when you get there.</p>\n\n\n\n<p>Just remember: a “click” today doesn’t always have to be what we think a click has always been.</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/when-a-click-is-not-just-a-click/\">When a Click is Not Just a Click</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/when-a-click-is-not-just-a-click/feed/"
        ],
        "slash:comments": [
            "0"
        ],
        "post-id": [
            {
                "_": "343064",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Hetchr Beta : a developer's homepage"
        ],
        "author": [
            "Hetchr."
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 09:37:37 +0000"
        ],
        "link": [
            "https://dev.to/hetc_hr/hetchr-beta-a-developer-s-homepage-31fh"
        ],
        "guid": [
            "https://dev.to/hetc_hr/hetchr-beta-a-developer-s-homepage-31fh"
        ],
        "description": [
            "<p>Hi folks!</p>\n\n<p>We centralize the main features of your everyday tools (PRs, CI, Kanban tasks) and build a live feed of everything happening within your development teams. Essentially, we aggregate a \"quick view\" of your team's development status and give you a way to manage tasks directly from our platform.</p>\n\n<p>We just opened up beta testing and anyone can create an account here: <a href=\"https://preview.hetchr.com/signup\">https://preview.hetchr.com/signup</a></p>\n\n<p>Currently, we have integrated Github Issues, Github Pull Requests, Jira, and two native Hetchr ATOMs.  Next on the list are CircleCI / Github Actions / Jenkins.</p>\n\n<p>Some additional notes:</p>\n\n<ul>\n<li><p>The only data we permanently store is your name, email, and authentication credential.  While using Hetchr, we only collect and store locally the data necessary to display your workspace.  For Jira, we access/store your project's configurations and the issues.  For Github, we access/store your Issues and Pull Requests' comments (not the code).  You can delete your account and any associated data in the setting section.</p></li>\n<li><p>In order to install our Jira ATOM, you must be the Jira administrator and in order to install our Github ATOMs, you must be the repo owner.</p></li>\n</ul>\n\n<p>Thanks for taking a look!  I’d love to hear your thoughts and happy to answer questions 🙂 </p>\n\n"
        ],
        "category": [
            "productivity",
            "showdev",
            "news"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Getting Started with the React Native Navigation Library"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/react-native-navigation-library/?utm_source=rss\"\n              title=\"Getting Started with the React Native Navigation Library\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2019/11/1612241964react-native-navigation.png\"\n        alt=\"Getting Started with the React Native Navigation Library\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2019/11/1612241964react-native-navigation-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2019/11/1612241964react-native-navigation.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>One of the most important aspects of React Native app development is the navigation. It’s what allows users to get to the pages they’re looking for. That’s why it’s important to choose the best navigation library to suit your needs.</strong></p>\n<p>If your app has a lot of screens with relatively complex UI, it might be worth exploring <a href=\"https://github.com/wix/react-native-navigation\">React Native Navigation</a> instead of <a href=\"https://reactnavigation.org/\">React Navigation</a>. This is because there will always be performance bottlenecks with React Navigation, since it works off the same JavaScript thread as the rest of the app. The more complex your UI, the more data has to be passed to that bridge, which can potentially slow it down.</p>\n<p>In this tutorial, we’ll be looking at the React Native Navigation library by Wix, an alternative navigation library for those who are looking for a smoother navigation performance for their React Native apps.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Knowledge of React and React Native is required to follow this tutorial. Prior experience with a navigation library such as React Navigation is optional.</p>\n<p>Readers are also expected to have <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">Node</a> and <a href=\"https://classic.yarnpkg.com/en/docs/install\">Yarn</a> installed locally, as well as a React Native development environment. You can find help getting set up <a href=\"https://reactnative.dev/docs/environment-setup\">here</a>. Be sure to choose <em>React Native CLI Quickstart</em>.</p>\n<h2 id=\"appoverview\">App Overview</h2>\n<p>In order to demonstrate how to use the library, we’ll be creating a simple app that uses it. The app will have five screens in total:</p>\n<ul>\n<li><strong>Initialization</strong>: this serves as the initial screen for the app. If the user is logged in, it will automatically navigate to the home screen. If not, the user is navigated to the login screen.</li>\n<li><strong>Login</strong>: this allows the user to log in so they can view the home, gallery, and feed. To simplify things, the login will just be mocked; no actual authentication code will be involved. From this screen, the user can also go to the forgot-password screen.</li>\n<li><strong>ForgotPassword</strong>: a filler screen, which asks for the user’s email address. This will simply be used to demonstrate stack navigation.</li>\n<li><strong>Home</strong>: the initial screen that the user will see when they log in. From here, they can also navigate to either the gallery or feed screens via a bottom tab navigation.</li>\n<li><strong>Gallery</strong>: a filler screen which shows a photo gallery UI.</li>\n<li><strong>Feed</strong>: a filler screen which shows a news feed UI.</li>\n</ul>\n<p>Here’s what the app will look like:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2019/11/1572919105react-native-navigation-demo.gif\" alt=\"React Native Navigation demo gif\" /></p>\n<p>You can find the source code of the sample app on this <a href=\"https://github.com/sitepoint-editors/RNNavigation\">GitHub repo</a>.</p>\n<h2 id=\"bootstrappingtheapp\">Bootstrapping the App</h2>\n<p>Let’s start by generating a new React Native project:</p>\n<pre><code class=\"bash language-bash\">npx react-native init RNNavigation\r\n</code></pre>\n<p>Next, install the dependencies of the app:</p>\n<ul>\n<li><code>react-native-navigation</code>: the navigation library that we’re going to use. Since its name is very long, I&#8217;ll be referring to it as RNN from now on.</li>\n<li><code>@react-native-async-storage/async-storage</code>: for saving data to the app’s local storage.</li>\n<li><code>react-native-vector-icons</code>: for showing icons for the bottom tab navigation.</li>\n</ul>\n<pre><code class=\"bash language-bash\">yarn add react-native-navigation @react-native-async-storage/async-storage react-native-vector-icons\r\n</code></pre>\n<p>Once those are installed, we need to link the corresponding native module to the app. Note that I&#8217;m only going to cover module linking for React Native 0.60 and above. If you&#8217;re using an older version of React Native, you&#8217;ll have to do that via the old way which is to use the <code>react-native link</code> command. This should link the native modules for all the packages we&#8217;ve just installed. But sometimes errors can occur, so you&#8217;ll have to check the documentation for the package and check their manual install instructions.</p>\n<p>If you&#8217;re using React Native 0.60 and above, we&#8217;ll have to link RNN, AsyncStorage, and Vector Icons in different ways.</p>\n<p>For RNN, you can do that by executing the following command at the root of the project directory:</p>\n<pre><code class=\"bash language-bash\">npx rnn-link\r\n</code></pre>\n<p>For AsyncStorage, you can do that by executing the following command (still at the root directory of the project):</p>\n<pre><code class=\"bash language-bash\">npx pod-install\r\n</code></pre>\n<p>Lastly, for Vector Icons you&#8217;ll have to navigate to the <code>android</code> directory for Android apps and <code>ios</code> directory for iOS apps. For Android, edit the <code>android/app/build.gradle</code> file and add the following after the last <code>apply from</code> call:</p>\n<pre><code class=\"bash language-bash\">apply from: \"../../node_modules/react-native-vector-icons/fonts.gradle\"\r\n</code></pre>\n<p>For iOS, execute the following command while inside the <code>ios</code> directory:</p>\n<pre><code class=\"bash language-bash\">pod install\r\n</code></pre>\n<p>Finally, update <code>index.js</code> like so:</p>\n<pre><code class=\"javascript language-javascript\">import { Navigation } from \"react-native-navigation\";\r\nimport App from \"./App\";\r\n\r\nNavigation.registerComponent('com.myApp.WelcomeScreen', () =&gt; App);\r\nNavigation.events().registerAppLaunchedListener(() =&gt; {\r\n   Navigation.setRoot({\r\n     root: {\r\n       stack: {\r\n         children: [\r\n           {\r\n             component: {\r\n               name: 'com.myApp.WelcomeScreen'\r\n             }\r\n           }\r\n         ]\r\n       }\r\n     }\r\n  });\r\n});\r\n</code></pre>\n<h2 id=\"tryingouttheproject\">Trying Out the Project</h2>\n<p>Before we proceed to actually building the app, let&#8217;s first try out the project to see if the modules were successfully installed. First, run Metro Bundler:</p>\n<pre><code class=\"bash language-bash\">npx react-native start\r\n</code></pre>\n<p>Then run the app on either platforms:</p>\n<pre><code class=\"bash language-bash\">npx react-native run-android\r\nnpx react-native run-ios\r\n</code></pre>\n<p>If there were no issues with the packages, you should be able to see the default React Native project welcome screen. If you see this screen, you can now proceed with building the app. Otherwise, check out the <strong>Common Issues</strong> section below to troubleshoot the problem.</p>\n<h3 id=\"commonissues\">Common Issues</h3>\n<ol>\n<li>The first issue that commonly occurs is when the linking of the native modules fails. This usually occurs with RNN as they have a custom script for linking the native modules. That might fail based on the React Native version you&#8217;re using. If that&#8217;s the case, then follow the manual install instructions in the documentation:</li>\n</ol>\n<ul>\n<li><a href=\"https://wix.github.io/react-native-navigation/docs/installing#ios\">Android</a></li>\n<li><a href=\"https://wix.github.io/react-native-navigation/docs/installing#ios\">iOS</a></li>\n</ul>\n<ol>\n<li>The second common issue is this: &#8220;React Native multidex error: The number of method references in a .dex file cannot exceed 64K&#8221;. This occurs when the app (and the libraries you&#8217;re using) exceeds a certain number of methods. In this case, it&#8217;s around 64,000 (it&#8217;s 65,536 to be exact). This is the <a href=\"https://developer.android.com/studio/build/multidex\">limit of the Android build architecture</a>. To solve this issue, you can enable multidex support. To do that, open your <code>android/app/build.gradle</code> file and add the following under <code>defaultConfig</code> and <code>dependencies</code>:</li>\n</ol>\n<pre><code class=\"bash language-bash\">defaultConfig {\r\n  // ...\r\n  multiDexEnabled true\r\n}\r\n// ...\r\ndependencies {\r\n  // ...\r\n  implementation 'com.android.support:multidex:1.0.3'\r\n}\r\n</code></pre>\n<p>Those are the two most common issues you may encounter while trying to follow this tutorial. If you encounter any other issues, let me know or search for the issue. Usually, someone has already encountered it before and you&#8217;ll find the issue on the project&#8217;s issues on GitHub.</p>\n<h2 id=\"buildingtheapp\">Building the App</h2>\n<p>Now we’re ready to finally start building the app.</p>\n<h3 id=\"indexjs\">index.js</h3>\n<p>First, open the existing <code>index.js</code> on the root of the project directory and replace its contents with the code below. This serves as the entry point of the app. If you noticed, we no longer have to register the main app component using React Native’s <a href=\"https://reactnative.dev/docs/appregistry\">AppRegistry</a>. Instead, we’re now using RNN’s <code>registerComponent()</code> method. This has to do with the updates we did earlier to the <code>MainActivity.java</code> and <code>AppDelegate.m</code> file.</p>\n<p>The <code>registerComponent()</code> method accepts the screen’s unique name and the component to use to render the screen. Once it’s registered, we call the <code>registerAppLaunchedListener()</code> method to set the root screen for the app to <code>LoadingScreen</code>. This is similar to what the <code>AppRegistry.registerComponent()</code> does:</p>\n<pre><code class=\"javascript language-javascript\">// index.js\r\nimport { Navigation } from \"react-native-navigation\";\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\nIcon.loadFont();\r\n\r\nimport Loading from \"./src/screens/Loading\"; // the loading screen\r\n\r\nimport \"./loadIcons\"; // file for loading the icons to be used in the bottom tab navigation\r\n\r\nNavigation.registerComponent(\"LoadingScreen\", () =&gt; Loading);\r\n\r\nNavigation.events().registerAppLaunchedListener(() =&gt; {\r\n  // set the root component\r\n  Navigation.setRoot({\r\n    root: {\r\n      component: {\r\n        name: \"LoadingScreen\",\r\n      },\r\n    },\r\n  });\r\n});\r\n</code></pre>\n<h3 id=\"loadingscreen\">Loading Screen</h3>\n<p>The loading screen serves as the entry point of the app. But you may be asking why a loading screen? Why not a login screen instead? This is because our sample app has a mock login system, meaning that we first have to determine if a user is already logged in or not. Using a loading screen works better than having to initially load a login screen only to find out that a user is already logged in, so we then have to navigate them to the home screen.</p>\n<p>Start by creating a <code>src/screens/Loading.js</code> file and add the following:</p>\n<pre><code class=\"javascript language-javascript\">// src/screens/Loading.js\r\nimport React, { Component } from \"react\";\r\nimport { View, Text, ActivityIndicator, StyleSheet } from \"react-native\";\r\n\r\nimport { goToLogin, goToTabs } from \"../../navigation\"; // import the functions for loading either the login screen or the tabs screen (shows home screen by default)\r\n\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n</code></pre>\n<p>Next, create the component itself. When the component is mounted, we try to get the <code>username</code> of the logged-in user from local storage. If it exists, we navigate the user to the tabs, otherwise to the login screen:</p>\n<pre><code class=\"javascript language-javascript\">export default class Loading extends Component {\r\n  async componentDidMount() {\r\n    const username = await AsyncStorage.getItem(\"username\");\r\n    if (username) {\r\n      goToTabs(global.icons, username);\r\n    } else {\r\n      goToLogin();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // show loading indicator\r\n    return (\r\n      &lt;View style={styles.container}&gt;\r\n        &lt;ActivityIndicator size=\"large\" color=\"#0000ff\" /&gt;\r\n      &lt;/View&gt;\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n</code></pre>\n<p>In the above code, notice we’re passing <code>global.icons</code> as an argument to the <code>goToTabs()</code> function. That value is being set in the <code>loadIcons.js</code> that we imported from the <code>index.js</code> file earlier. Its job is to load the icons to be used for the bottom tabs, as you’ll see later.</p>\n<h3 id=\"navigationjs\">navigation.js</h3>\n<p>This is where we register all the screens of the app and declare our navigation functions for navigating between the login screen and the tabbed screens:</p>\n<pre><code class=\"javascript language-javascript\">// navigation.js\r\nimport { Navigation } from \"react-native-navigation\";\r\n\r\nimport Login from \"./src/screens/Login\";\r\nimport ForgotPassword from \"./src/screens/ForgotPassword\";\r\nimport Home from \"./src/screens/Home\";\r\nimport Feed from \"./src/screens/Feed\";\r\nimport Gallery from \"./src/screens/Gallery\";\r\n\r\nNavigation.registerComponent(\"LoginScreen\", () =&gt; Login);\r\nNavigation.registerComponent(\"ForgotPasswordScreen\", () =&gt; ForgotPassword);\r\nNavigation.registerComponent(\"HomeScreen\", () =&gt; Home);\r\nNavigation.registerComponent(\"FeedScreen\", () =&gt; Feed);\r\nNavigation.registerComponent(\"GalleryScreen\", () =&gt; Gallery);\r\n</code></pre>\n<p>The <code>goToLogin()</code> function creates a stack navigation. In RNN, these navigation types are called “Layouts”. Currently, there are only three: stacks, tabs, and drawers. We’ll only use stack and tabs in this tutorial, but here’s a brief overview of each one:</p>\n<ul>\n<li><strong><a href=\"https://wix.github.io/react-native-navigation/docs/stack\">Stack</a></strong>: each new screen you navigate to is laid out on top of the current one. So when you go back to the previous screen, the idea is to simply “pop” the current screen out of the stack. We’ll be using the stack navigation to navigate between the Login screen and ForgotPassword screen.</li>\n<li><strong><a href=\"https://wix.github.io/react-native-navigation/docs/bottomTabs\">Tab</a></strong>: each screen can be accessed via a bottom tab navigation. Each tab has both icon and text on it to describe the screen it navigates the user to. This type of navigation is commonly used if there are two or more main screens within the app. Having a bottom tab navigation allows for easy access between those screens. We’ll be using the tab navigation to navigate between the Home, Gallery, and Feed screens.</li>\n<li><strong><a href=\"https://wix.github.io/react-native-navigation/docs/sideMenu\">Drawer</a></strong>: also called the side menu. This is called drawer because it’s commonly hidden within a hamburger icon and it only shows the menu under it when clicked on.</li>\n</ul>\n<p>Going back to the code, we’ve only added the Login screen as a child of stack navigation, even though the ForgotPassword screen is part of it as well. As mentioned earlier, we’ll be using stack navigation to navigate between the Login screen and the ForgotPassword screen. Yet we’ve only added the Login screen here as a child. Adding it will simply make it as the default screen for the stack. In a stack navigation, you should only add the initial screen for that specific stack as the child, as you’ll see later.</p>\n<p>The minimum requirement for a child is to add the <code>name</code> property for each screen. This is the name of the screen to be used for rendering. This should be the same name you used when you registered the component:</p>\n<pre><code class=\"javascript language-javascript\">export const goToLogin = () =&gt;\r\n  Navigation.setRoot({\r\n    root: {\r\n      stack: {\r\n        // create a stack navigation\r\n        id: \"stackMain\",\r\n        children: [\r\n          {\r\n            component: {\r\n              name: \"LoginScreen\",\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n</code></pre>\n<p><em>Note: supplying an ID for the navigation isn’t required, but it’s good practice — especially if you know that you’ll start using the same layout type multiple times in your app.</em></p>\n<p>Next, add the <code>goToTabs()</code> function. Unlike the previous function, this accepts two arguments: <code>icons</code> and <code>username</code>. <code>icons</code> is the array of icons to be used for the individual tabs, while <code>username</code> is the username of the user who logged in. This time, we’re using the <code>bottomTabs</code> navigation. As the name suggests, this allows the user to navigate between screens using bottom tabs. You can create bottom tabs using the <a href=\"https://wix.github.io/react-native-navigation/docs/bottomTabs\">following format</a>:</p>\n<pre><code class=\"javascript language-javascript\">const iconColor = \"#444\";\r\nconst selectedIconColor = \"#0089da\";\r\n\r\nexport const goToTabs = (icons, username) =&gt; {\r\n  Navigation.setRoot({\r\n    root: {\r\n      bottomTabs: {\r\n        // create a bottom tabs navigation\r\n\r\n        id: \"bottomTabsMain\",\r\n        children: [\r\n          {\r\n            component: {\r\n              name: \"HomeScreen\",\r\n              options: {\r\n                bottomTab: {\r\n                  fontSize: 11,\r\n                  text: \"Home\",\r\n                  icon: icons[0],\r\n                  iconColor,\r\n                  selectedIconColor,\r\n                },\r\n              },\r\n\r\n              // pass the username as a navigation prop to the Home screen\r\n              passProps: {\r\n                username,\r\n              },\r\n            },\r\n          },\r\n\r\n          {\r\n            component: {\r\n              name: \"GalleryScreen\",\r\n              options: {\r\n                bottomTab: {\r\n                  fontSize: 11,\r\n                  text: \"Gallery\",\r\n                  icon: icons[1],\r\n                  iconColor,\r\n                  selectedIconColor,\r\n                },\r\n              },\r\n            },\r\n          },\r\n\r\n          {\r\n            component: {\r\n              name: \"FeedScreen\",\r\n              options: {\r\n                bottomTab: {\r\n                  fontSize: 11,\r\n                  text: \"Feed\",\r\n                  icon: icons[2],\r\n                  iconColor,\r\n                  selectedIconColor,\r\n                },\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  });\r\n};\r\n</code></pre>\n<p>As you’ve seen from the code above, this pretty much uses the same format as the stack navigation. The only difference is that, this time, we’re also specifying an <code>options</code> property for the individual <code>bottomTab</code>. These options are mostly used for configuring the styles of the individual tab. They’re self-explanatory, so I won’t go into detail, but I just want to explain the <code>icon</code> property. By default, this accepts a local image that’s required by a <code>require('./path/to/image.png')</code> call. But since we’ve already installed Vector Icons, we might as well use it as the icon source instead. The only problem is that we can’t really supply a React component as the value for the <code>icon</code> because it expects a resource. The <code>icons</code> parameter accepts an array of icon resource and that’s what we’re using instead. You’ll learn how we’re loading those in the next section.</p>\n<p><em>Note: you can find more styling options for bottom tabs in the <a href=\"https://wix.github.io/react-native-navigation/docs/style-options\">official documentation for Styling</a>. Just look for <code>bottomTabs</code> or <code>bottomTab</code>.</em></p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/react-native-navigation-library/?utm_source=rss\">Getting Started with the React Native Navigation Library</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/react-native-navigation-library/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=174111",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript",
            "React"
        ],
        "dc:creator": [
            "Wern Ancheta"
        ],
        "pubDate": [
            "Mon, 01 Feb 2021 14:00:55 GMT"
        ],
        "metaDesc": [
            "Navigation is crucial to React Native app development. Learn why React Native Navigation might be the best option for your next React Native project."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "A Beginner’s Guide to SvelteKit"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/a-beginners-guide-to-sveltekit/?utm_source=rss\"\n              title=\"A Beginner’s Guide to SvelteKit\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619323199sveltekit-introduction.png\"\n        alt=\"A Beginner's Guide to SvelteKit\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619323199sveltekit-introduction-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1619323199sveltekit-introduction.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>SvelteKit is an officially supported framework, built around Svelte. It adds key features to a Svelte app — such as routing, layouts and server-side rendering — and makes front-end development outrageously simple.</strong></p>\n<p>In this tutorial, we&#8217;ll take a beginner-friendly look at both Svelte and SvelteKit and build out a simple web app showing profile pages of imaginary users. Along the way, we&#8217;ll look at all the main features that SvelteKit has to offer.</p>\n<p>Let&#8217;s start by looking at what Svelte brings to the table.</p>\n<h2 id=\"thebenefitsofworkingwithsvelte\">The Benefits of Working with Svelte</h2>\n<p><a href=\"https://svelte.dev/\">Svelte</a> is growing in popularity, and that&#8217;s for a good reason. Developing apps with Svelte is based on writing reusable and self-contained components — similar to other popular JavaScript frameworks such as React.</p>\n<p>The big difference comes with its <em>build-time</em> compilation — as opposed to a <em>run-time</em> interpretation of the code. In other words, Svelte already compiles your code during the <em>build</em> process and the final bundle only contains JavaScript that your application actually needs. This results in fast web apps with small bundle sizes.</p>\n<p>Other frameworks only parse and bundle up the code you&#8217;ve written, essentially taking the component tree as is and shipping it to the client. In order for the browser to be able to interpret it and update the UI, a lot more code needs to be delivered and additional work is done on the <em>client side</em>. (You can read <a href=\"https://www.freecodecamp.org/news/react-under-the-hood/\">here</a> how React handles this process under the hood.)</p>\n<p>Other than that, Svelte is an ideal framework for beginners. Everyone who knows how to write HTML and how to include <code>&lt;style&gt;</code> and <code>&lt;script&gt;</code> tags with basic JavaScript and CSS can already start writing Svelte components. </p>\n<h2 id=\"sowhydoineedsveltekit\">So, Why Do I Need SvelteKit?</h2>\n<p>While Svelte alone gives you a very good development experience, you still have to decide on how you want to ship your application to the user. The classical approach would be to take your favorite module bundler like <a href=\"https://webpack.js.org/\">webpack</a> or <a href=\"https://rollupjs.org/guide/en/\">Rollup</a> and bundle your code into one big, fat JavaScript file. Then, you&#8217;d call it from a very basic HTML document, like so:</p>\n<pre><code class=\"markup language-markup\">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\" /&gt;\r\n    ...\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n    &lt;!-- the entry point of your application --&gt;\r\n    &lt;div id=\"app\" /&gt;\r\n    &lt;!-- load the JavaScript that takes care of the rest --&gt;\r\n    &lt;script src=\"dist/bundle.js\"&gt;&lt;/script&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre>\n<p>While this is absolutely legit, the user&#8217;s experience might not be ideal. There are many touchpoints for improvement and this is where SvelteKit comes into play.</p>\n<p>First of all, instead of serving an almost empty HTML file to the client, SvelteKit already comes with all the HTML elements you need for the first page view. The benefits are faster page loads and SEO boosts. There are two ways SvelteKit does this: <strong>prerendering</strong> and <strong>server-side rendering</strong>. I&#8217;ll explain both in more detail below. What stays the same is that once the JavaScript has been loaded, it takes over and enables typical features of a <em>single page application</em>, like <em>client-side routing</em>.</p>\n<p>The second obvious difference between SvelteKit and a classical single JavaScript bundle is <strong>code-splitting</strong>. Instead of serving the entire app in one single Javascript file, SvelteKit splits the code into separate smaller chunks. Each chunk represents a route of your application. For example, everything that needs to be fetched for the <code>/home</code> and for the <code>/about</code> routes will be loaded once the user actually needs it — or a little bit earlier if you make use of SvelteKit&#8217;s <em>prefetching</em> functionality (like we&#8217;ll do below).</p>\n<p>Another outstanding benefit of SvelteKit is that you can decide in which deployment environment your app is going to run. Nowadays, front-end developers have a variety of different platforms where applications can run. There are hosting providers for simple static files, more advanced serverless options such as <a href=\"https://www.netlify.com/\">Netlify</a>, or server environments where <em>Node servers</em> can be executed, and so on. With tiny plugins called <a href=\"https://kit.svelte.dev/docs#adapters\">adapters</a>, you tell SvelteKit to optimize your output for a specific platform. This greatly facilitates app deployment.</p>\n<p>However, the biggest advantage SvelteKit has to offer is its ease of use. Of course, you can manually set up your <em>build</em> process from scratch with all these features, but this can be tedious and frustrating. SvelteKit makes it as easy as possible for you, and the best way to experience this is by actually using it.</p>\n<p>This is why we&#8217;ll create a simple web app showing profile pages of made-up users. And along the way, we&#8217;ll look at all the features I&#8217;ve mentioned above in more detail.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>No previous knowledge is required, although some experience with Svelte might be helpful. The article “<a href=\"https://www.sitepoint.com/svelte-javascript-framework-introduction/\">Meet Svelte 3, a Powerful, Even Radical JavaScript Framework</a>” provides a good introduction. </p>\n<p>To work with SvelteKit, you&#8217;ll need a working version of Node on your system. You can install it using the Node Version Manager (nvm). (You can find some setup instructions <a href=\"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/\">here</a>.)</p>\n<p>Please be aware that SvelteKit is (at the time of writing) still in beta, and some features might be subject to change. You can find all the code for this tutorial on <a href=\"https://github.com/sitepoint-editors/svelteKit-example-app\">GitHub</a>.</p>\n<h2 id=\"gettingstarted\">Getting Started</h2>\n<p>To begin with, we initiate a new SvelteKit project. Execute the following commands in your terminal:</p>\n<pre><code class=\"bash language-bash\">npm init svelte@next svelteKit-example-app\r\n</code></pre>\n<p>You&#8217;ll be asked a few questions so that you can customize your project. For our purposes, answer the following:</p>\n<ul>\n<li>Which Svelte app template? -&gt; SvelteKit demo app</li>\n<li>Use TypeScript components -&gt; no</li>\n<li>Add ESLint for code linting? -&gt; no</li>\n<li>Add Prettier for code formatting? -&gt; no</li>\n</ul>\n<p>This will load a SvelteKit development environment including a functional example application.</p>\n<p>In your project route there are now some configuration files: your <code>package.json</code>, the <code>static</code> folder, and the <code>src</code> folder. We&#8217;ll be working mainly inside the <code>src</code> folder. It has the following structure.</p>\n<pre><code class=\"txt language-txt\">src\r\n├── app.css\r\n├── app.html\r\n├── global.d.ts\r\n├── hooks.js\r\n├── lib\r\n│   ├── Counter\r\n│   │   └── index.svelte\r\n│   ├── form.js\r\n│   └── Header\r\n│       ├── index.svelte\r\n│       └── svelte-logo.svg\r\n└── routes\r\n    ├── $layout.svelte\r\n    ├── about.svelte\r\n    ├── index.svelte\r\n    └── todos\r\n        ├── _api.js\r\n        ├── index.json.js\r\n        ├── index.svelte\r\n        └── [uid].json.js\r\n</code></pre>\n<p>The <code>/src/app.html</code> file is your <strong>app-shell</strong>, a minimal HTML page where your rendered HTML will be inserted and your bundle files linked from. Usually you don&#8217;t have to touch this file. You can insert some app-wide <em>meta</em> tags if you want to, but this isn&#8217;t necessary — as you will see in a moment.</p>\n<p>The <code>/src/routes</code> folder is the heart of your application. The files inside this folder define the routes of your app. There are two types of routes: <code>pages</code> and <code>endpoints</code>. <code>pages</code> are Svelte components and are indicated by the <code>.svelte</code> extension. For example, a component named <code>/src/routes/test.svelte</code> would be served under the route <code>/test</code>. <code>endpoints</code> are normal JavaScript (or TypeScript) files and enable you to generate HTTP endpoints to fetch data.</p>\n<p>Svelte components can have child components. For example, the route component <code>/src/routes/test.svelte</code> might import a component named <code>Button.svelte</code>. The place where you would store all your child components is the <code>/src/lib</code> folder.</p>\n<p>Let&#8217;s see how all this works in action. Change into the newly created directory, then install the dependencies and start the app in development mode:</p>\n<pre><code class=\"bash language-bash\">cd svelteKit-example-app\r\nnpm install\r\nnpm run dev -- --open\r\n</code></pre>\n<p>This will open the preexisting example app in a new browser tab. Click through the app and assure yourself it&#8217;s working. </p>\n<h3 id=\"somepreparation\">Some preparation</h3>\n<p>As polished as the demo app is, it contains a bunch of files that we won&#8217;t need. Let&#8217;s get rid of those.</p>\n<p>Delete the contents of the <code>lib</code> folder: </p>\n<pre><code class=\"bash language-bash\">rm src/lib/*\r\n</code></pre>\n<p>Delete the <code>routes/todos</code> folder:</p>\n<pre><code class=\"bash language-bash\">rm -rf src/routes/todos\r\n</code></pre>\n<p>We can do without the demo app&#8217;s styling. In the root of the project, open <code>app.css</code> and replace the contents with the following:</p>\n<pre><code class=\"css language-css\">:root {  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;}\r\nbody {  margin: 0;}\r\n</code></pre>\n<p>Finally, open <code>src/index.svelte</code> and replace the contents with the following:</p>\n<pre><code class=\"markup language-markup\">&lt;main&gt;\r\n  &lt;h1&gt;HOME&lt;/h1&gt;\r\n&lt;/main&gt;\r\n</code></pre>\n<p>With that done, let&#8217;s get to building out our demo.</p>\n<h2 id=\"layoutsandclientsiderouting\">Layouts and Client-side Routing</h2>\n<p>As I wrote above, every Svelte component in the routes folder defines one route. However, there&#8217;s one exception: the <em>layout</em> component, named <code>$layout.svelte</code>. This component contains code that applies to every single page of your app.</p>\n<p>Let&#8217;s open the existing <code>/src/routes/$layout.svelte</code> file. All it does for now is import some app-wide CSS code. The <code>&lt;slot&gt;</code> element wraps the rest of the application. Let&#8217;s replace the content with the following:</p>\n<pre><code class=\"markup language-markup\">&lt;script&gt;\r\n  import \"../app.css\";\r\n&lt;/script&gt;\r\n\r\n&lt;svelte:head&gt;\r\n  &lt;meta name=\"robots\" content=\"noindex\" /&gt;\r\n&lt;/svelte:head&gt;\r\n\r\n&lt;nav&gt;\r\n  &lt;a href=\".\"&gt;HOME&lt;/a&gt;\r\n  &lt;a href=\"/about\"&gt;ABOUT&lt;/a&gt;\r\n&lt;/nav&gt;\r\n\r\n&lt;slot /&gt;\r\n\r\n&lt;style&gt;\r\n  nav {\r\n    padding: 1rem;\r\n    box-shadow: -1px 1px 11px 4px #898989;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: gray;\r\n    margin-right: 1rem;\r\n  }\r\n&lt;/style&gt;\r\n</code></pre>\n<p><em>Note: if you want to have syntax highlighting for Svelte files, there are extensions you can install. <a href=\"https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode\">This one</a> is good for VS Code.</em></p>\n<p>In this example, we used the <code>&lt;svelte:head&gt;</code> element to define meta tags that will be inserted in the <code>&lt;head&gt;</code> of our document. Since we did this in the <em>layout</em> component, it will be applied to the entire app. The <em>robot</em> tag is just an example.</p>\n<p>Furthermore, we created a navbar. This is a typical use case for the <em>layout</em> component, as it&#8217;s usually intended to be shown on every page of your application.</p>\n<p>The navbar has two links: one to the root of the application — which already has content served by the <code>/src/routes/index.svelte</code> component — and one to the <em>about</em> page. The <em>about</em> page was also created by the demo app. Open it and replace its content with the following:</p>\n<pre><code class=\"markup language-markup\">&lt;main&gt;\r\n  &lt;h1&gt;ABOUT&lt;/h1&gt;\r\n  &lt;hr /&gt;\r\n  &lt;div&gt;A website to find user profiles&lt;/div&gt;\r\n&lt;/main&gt;\r\n\r\n&lt;style&gt;\r\n  main {\r\n    font-size: 1.5rem;\r\n    margin: 4rem;\r\n    padding: 2rem;\r\n    color: gray;\r\n    justify-content: center;\r\n    box-shadow: 4px 5px 11px 10px lightgray;\r\n  }\r\n&lt;/style&gt;\r\n</code></pre>\n<p>This page is pretty basic. We included some HTML and applied some styling.</p>\n<p>Let&#8217;s go back to the browser and navigate to the new page. Our modifications should already be visible and you should see something like this:</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617693885SvelteKit_example_about.png\" alt=\"About Page\" /></p>\n<p>Let&#8217;s navigate between the <em>landing</em> page and the <em>about</em> page. You might realize that changing the page doesn&#8217;t refresh the entire application. The navigation feels smooth and instant. This is because SvelteKit applies <strong>Client-Side Routing</strong> out of the box. Although we used normal <code>&lt;a&gt;</code> tags in our navbar, SvelteKit identifies those as internal links and intercepts them using its built-in client router.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/a-beginners-guide-to-sveltekit/?utm_source=rss\">A Beginner’s Guide to SvelteKit</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/a-beginners-guide-to-sveltekit/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=182439",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Erik Kückelheim"
        ],
        "pubDate": [
            "Sun, 25 Apr 2021 16:00:55 GMT"
        ],
        "metaDesc": [
            "Front-end development can be easier! Learn how Svelte and SvelteKit combine to make it easy and intuitive to build a blazing-fast, SEO-optimized web app."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Issue #455"
        ],
        "link": [
            "http://feedproxy.google.com/~r/CSS-Weekly/~3/eg7ieyQFexo/"
        ],
        "pubDate": [
            "Wed, 14 Apr 2021 21:55:39 +0000"
        ],
        "dc:creator": [
            "Zoran Jambor"
        ],
        "category": [
            "Issue"
        ],
        "guid": [
            {
                "_": "https://css-weekly.com/issue-455/",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "Learn how container queries work and why we need them, how to create more accessible layouts, why CSS is a strongly typed language, and more."
        ],
        "content:encoded": [
            "\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://ishadeed.com/article/say-hello-to-css-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Say Hello To CSS Container Queries</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://ishadeed.com/article/say-hello-to-css-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/say-hello-to-css-container-queries.png\" alt=\"Say Hello To CSS Container Queries\" /></a>\n\t\t\t\t\t\t<p>Ahmad Shadeed explains why we need container queries and how they will help you create more powerful components and layouts.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://ishadeed.com/article/say-hello-to-css-container-queries/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://moderncss.dev/modern-css-upgrades-to-improve-accessibility/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Modern CSS Upgrades To Improve Accessibility</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://moderncss.dev/modern-css-upgrades-to-improve-accessibility/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/modern-css-upgrades-to-improve-accessibility.jpg\" alt=\"Modern CSS Upgrades To Improve Accessibility\" /></a>\n\t\t\t\t\t\t<p>Stephanie Eckles outlines some of the capabilities modern CSS provides that we can leverage to make layouts more accessibly inclusive for users of all abilities across any device.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://moderncss.dev/modern-css-upgrades-to-improve-accessibility/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise\" target=\"_blank\">From Our Sponsor</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/spring-summit-next-week\">The future of web design arrives next week!</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/spring-summit-next-week\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/spring-summit.jpg\" alt=\"The future of web design arrives next week!\" /></a>\n\t\t\t\t\t\t<p><a href=\"https://cssw.io/spring-summit-next-week\" rel=\"noopener\" target=\"_blank\">An Event Apart Online Together: Spring Summit</a> kicks off this coming <strong>Monday, April 19</strong>. Join us for three days of expert sessions and community networking, plus a full year to re-watch the entire conference on-demand. Featuring <nobr>15+ in-depth</nobr> sessions from <nobr>world-class</nobr> speakers, you’ll get deep insights into where we are now and where things are going next.</p>\n<p>Save $100 on any multi-day pass with promo code <strong>AEACSSW21</strong>.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/spring-summit-next-week\">Don’t miss out. See the detailed three-day agenda and register now.</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Articles & Tutorials</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/css-is-a-strongly-typed-language/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS is a Strongly Typed Language</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Eric Bailey outlines why CSS is a strongly typed programming language.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/css-is-a-strongly-typed-language/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-irl.info/paper-snowflakes-combining-clipping-and-masking-in-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Paper Snowflakes: Combining Clipping and Masking in CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Michelle Barker shares the process of creating realistic-looking paper snowflakes in CSS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-irl.info/paper-snowflakes-combining-clipping-and-masking-in-css/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.smashingmagazine.com/2021/04/css-overflow-issues/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Overflow Issues In CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Ahmad Shadeed explores the causes of different overflow issues and shares some advice on how to solve them.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.smashingmagazine.com/2021/04/css-overflow-issues/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://css-tricks.com/gaps-gasp/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Gaps? Gasp!</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Eric Meyer gives an introduction to gap property, a property that can be used on grids, flexboxes, and even on multiple columns.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://css-tricks.com/gaps-gasp/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://www.callumhart.com/blog/css-variables-that-mimic-chameleons/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">CSS Variables That Mimic Chameleons</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Callum Hart on the importance of choosing CSS variable names that adapt to different contexts.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://www.callumhart.com/blog/css-variables-that-mimic-chameleons/?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Read more</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\"><a href=\"http://css-weekly.com/advertise/#job-ad\">Promoted Link</a></h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://cssw.io/hover-affordable-online-css-conference\">Hover, a brand new, affordable online conference all about CSS</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://cssw.io/hover-affordable-online-css-conference\"><img width=\"130\" height=\"130\" src=\"https://css-weekly.com/wp-content/uploads/2021/03/hover-affordable-online-conference-all-about-css.png\" alt=\"Hover, a brand new, affordable online conference all about CSS\" /></a>\n\t\t\t\t\t\t<p>CSS is the often unsung hero of Web development. Hover from Web Directions is the conference CSS deserves, covering the language and its uses in a way like no other.</p>\n<p>Hover features leading experts like Rachel Andrew, Ahmad Shadeed, Elad Shechter, Miriam Suzanne, and Adam Argyle covering everything you need to know to get the most from CSS, April 23 &#038; 30.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://cssw.io/hover-affordable-online-css-conference\">Learn more, and use the code '<strong>cssweekly</strong>' to save 30%</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Tools</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://webvitals.dev/cls?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Cumulative Layout Shift Debugger</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Cumulative Layout Shift Debugger is a tool to visualize the cumulative layout shifts of any webpage, so it becomes easier to identify what needs improving in the initial load of a website.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://webvitals.dev/cls?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article floated\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://github.com/withfig/autocomplete?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Fig</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<p>Fig is VSCode-style autocomplete for the terminal. It shows subcommands, options, and contextually relevant arguments in your existing terminal on macOS.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://github.com/withfig/autocomplete?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Inspiration</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<article class=\"newsletter-article\">\n\t\t\t\t\t\t<header class=\"newsletter-header\">\n\t\t\t\t\t\t\t<h2 class=\"article-title\"><a href=\"https://codepen.io/jh3y/pen/NWdNMBJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">3D CSS Plane</a></h2>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t<a href=\"https://codepen.io/jh3y/pen/NWdNMBJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\"><img width=\"400\" height=\"178\" src=\"https://css-weekly.com/wp-content/uploads/2021/04/3d-css-plane.png\" alt=\"3D CSS Plane\" /></a>\n\t\t\t\t\t\t<p>Jhey Tompkins created an impressive, interactive 3d airplane using CSS and a bit of JavaScript.</p>\n\t\t\t\t\t\t<p><a class=\"article-call-to-action\" href=\"https://codepen.io/jh3y/pen/NWdNMBJ?utm_source=CSS-Weekly&amp;utm_campaign=Issue-464&amp;utm_medium=RSS\">Check it out</a></p>\n\t\t\t\t\t</article>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t</section>\n\n\t\t\t\t\t<section class=\"newsletter-section\">\n\n\t\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t<br />\n\t\t\t\t\t<h1 class=\"section-title\">Until Next Week</h1>\n\t\t\t\t\t<br />\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div class=\"newsletter-section-intro\">\n\t\t\t\t\t<p>Thanks for reading! If you find the content valuable, please consider <a href=\"http://bit.ly/cssweekly-patreon\" target=\"_blank\" rel=\"noopener noreferrer\">supporting the newsletter on Patreon</a>.</p>\n<p>Happy coding,<br />\n<a href=\"http://twitter.com/ZoranJambor\" target=\"_blank\" rel=\"noopener noreferrer\">Zoran Jambor</a></p>\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</section>\n\n\t\t<img src=\"http://feeds.feedburner.com/~r/CSS-Weekly/~4/eg7ieyQFexo\" height=\"1\" width=\"1\" alt=\"\"/>"
        ],
        "feedburner:origLink": [
            "https://css-weekly.com/issue-455/"
        ],
        "provider": "CSS Weekly"
    },
    {
        "title": [
            "Complete Introduction to Redux 🚀"
        ],
        "author": [
            "KUMAR HARSH"
        ],
        "pubDate": [
            "Thu, 01 Jul 2021 08:59:47 +0000"
        ],
        "link": [
            "https://dev.to/cenacr007_harsh/complete-introduction-to-redux-2281"
        ],
        "guid": [
            "https://dev.to/cenacr007_harsh/complete-introduction-to-redux-2281"
        ],
        "description": [
            "<p><strong>Does <a href=\"https://redux.js.org/\">Redux</a> have you confused?</strong> 😕</p>\n\n<p>In this blog, you'll learn the fundamentals of Redux stores, actions, reducers, and middleware to manage data throughout your application.</p>\n\n<p><strong>What is Redux?</strong></p>\n\n<p>Redux is an open-source JavaScript library for managing the application state. It is most commonly used with libraries such as React or Angular for building user interfaces.</p>\n\n<p><strong>Why Redux?</strong></p>\n\n<p>As applications grow in size and scope, managing shared data becomes much more difficult. Redux is defined as a <strong>\"predictable state container for JavaScript apps\"</strong> that helps ensure your apps work predictably and are easier to test.</p>\n\n<p>Now let's hop into the basics that make Redux go 🚀</p>\n\n<h2>\n  <a href=\"#create-a-redux-store\">\n  </a>\n  1️⃣ Create a Redux Store\n</h2>\n\n<p>In Redux, there is a <strong>Single State Object</strong> that's responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its local state, the entire state of your app would be defined by a single state object housed in the Redux <code>store</code>. This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mWFc2g7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3a46pk6ks9ae9i10n6s.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--mWFc2g7b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3a46pk6ks9ae9i10n6s.png\" alt=\"store\"></a></p>\n\n<p>This also means that any time any piece of your app wants to update its state, it must do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app.</p>\n\n<p>The Redux store is an object which holds and manages the application state. There is a method called <code>createStore()</code> on the Redux object, which you use to create the Redux store. This method takes a <code>reducer</code> function as a required argument. We'll soon see what a <code>reducer</code> is in Point 7.</p>\n\n<blockquote>\n<p>Keep in mind that the <code>createStore()</code> method is available from the Redux object. For example: <code>Redux.createStore()</code><br>\n</p>\n</blockquote>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span><span class=\"o\">=</span><span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#get-state-from-the-redux-store\">\n  </a>\n  2️⃣ Get State from the Redux Store\n</h2>\n\n<p>The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current state held in the Redux store object with the <code>getState()</code> method.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">currentState</span> <span class=\"o\">=</span> <span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">();</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#define-a-redux-action\">\n  </a>\n  3️⃣ Define a Redux Action\n</h2>\n\n<p>Since Redux is a state management framework, updating the state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly.</p>\n\n<p>Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a type property that specifies the 'type' of action that occurred.</p>\n\n<p>Think of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating the state based on the action that occurred.</p>\n\n<p>Writing a Redux action is as simple as declaring an object with a type property.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">let</span> <span class=\"nx\">action</span><span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">LOGIN</span><span class=\"dl\">'</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#define-an-action-creator\">\n  </a>\n  4️⃣ Define an Action Creator\n</h2>\n\n<p>After creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">actionCreator</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">action</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#dispatch-an-action-event\">\n  </a>\n  5️⃣ Dispatch an Action Event\n</h2>\n\n<p>The <code>dispatch</code> method is what you use to dispatch actions to the Redux store. Calling <code>store.dispatch()</code> and passing the value returned from an action creator sends an action back to the store.</p>\n\n<p>Recall that action creators return an object with a type property that specifies the action that has occurred. Then the method dispatches an action object to the Redux store.</p>\n\n<p>The following lines are equivalent, and both dispatch the action of type <code>LOGIN</code>:</p>\n\n<p><code>store.dispatch(actionCreator());</code><br>\n<code>store.dispatch({ type: 'LOGIN' });</code><br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">login</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">state</span>\n<span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">loginAction</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">LOGIN</span><span class=\"dl\">'</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">loginAction</span><span class=\"p\">());</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#handle-an-action-in-the-store\">\n  </a>\n  6️⃣ Handle an Action in the Store\n</h2>\n\n<p>After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a <code>reducer</code> function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A reducer takes <code>state</code> and <code>action</code> as arguments, and it always returns a <strong>NEW STATE</strong>. It is important to see that this is the only role of the reducer. It has no side effects — it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a <strong>PURE FUNCTION</strong> that takes state and action, then returns the new state.</p>\n\n<p>Another key principle in Redux is that <code>state</code> is <code>read-only</code>. In other words, the reducer function must always return a new copy of the state and never modify the state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">defaultState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">LOGIN</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">login</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#use-a-switch-statement-to-handle-multiple-actions\">\n  </a>\n  7️⃣ Use a Switch Statement to Handle Multiple Actions\n</h2>\n\n<p>You can tell the Redux store how to handle multiple action types.</p>\n\n<p>Say you are managing user authentication in your Redux store. You want to have a state representative for when users are logged in and when they are logged out. You represent this with a single state object with the property <code>authenticated</code>. You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.</p>\n\n<blockquote>\n<p>Don't forget to write a default case in your switch statement that returns the current state. This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn't related to that reducer. In such a case, you want to make sure that you return the current state.<br>\n</p>\n</blockquote>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">defaultState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">authReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">defaultState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">LOGIN</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">};</span>\n\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">LOGOUT</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n      <span class=\"p\">};</span>\n\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">defaultState</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">authReducer</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">loginUser</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">LOGIN</span><span class=\"dl\">\"</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">logoutUser</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">LOGOUT</span><span class=\"dl\">\"</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#use-raw-const-endraw-for-action-types\">\n  </a>\n  8️⃣ Use <code>const</code> for Action Types\n</h2>\n\n<p>A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used.</p>\n\n<blockquote>\n<p>It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well. We must always try to follow the conventions as it makes our code more readable for others.<br>\n</p>\n</blockquote>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">LOGIN</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">LOGIN</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">LOGOUT</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">LOGOUT</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">defaultState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">authReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">defaultState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">case</span> <span class=\"na\">LOGIN</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">}</span>\n\n    <span class=\"k\">case</span> <span class=\"na\">LOGOUT</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n      <span class=\"p\">}</span>\n\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n\n  <span class=\"p\">}</span>\n\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">authReducer</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">loginUser</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOGIN</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">logoutUser</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">LOGOUT</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#register-a-store-listener\">\n  </a>\n  9️⃣ Register a Store Listener\n</h2>\n\n<p>Another method you have access to on the Redux store object is <code>store.subscribe()</code>. This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. </p>\n\n<p>Write a callback function that increments the global variable count every time the store receives an action, and pass this function into the <code>store.subscribe()</code> method 👇<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ADD</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">ADD</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"na\">ADD</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Global count variable:</span>\n<span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Callback Function</span>\n<span class=\"kd\">const</span> <span class=\"nx\">addOne</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Passing Callback to store.subscribe()</span>\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">(</span><span class=\"nx\">addOne</span><span class=\"p\">);</span>\n\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">ADD</span><span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">);</span> <span class=\"c1\">//1</span>\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">ADD</span><span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">);</span> <span class=\"c1\">//2</span>\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">ADD</span><span class=\"p\">});</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">count</span><span class=\"p\">);</span> <span class=\"c1\">//3</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#combine-multiple-reducers\">\n  </a>\n  🔟 Combine Multiple Reducers\n</h2>\n\n<p>When the state of your app begins to grow more complex, it may be tempting to divide the state into multiple pieces.</p>\n\n<p>Instead, remember the first principle of Redux:<br>\n<strong>all app state is held in a single state object in the store</strong>.</p>\n\n<p>Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux <code>createStore()</code> method.</p>\n\n<p>To let us combine multiple reducers, Redux provides the <code>combineReducers()</code> method. This method accepts an object as an argument in which you define properties that associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state.</p>\n\n<p>Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way.</p>\n\n<p>For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting. For such an application, we might write the <code>combineReducers()</code> method like this:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">rootReducer</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">combineReducers</span><span class=\"p\">({</span>\n  <span class=\"na\">auth</span><span class=\"p\">:</span> <span class=\"nx\">authenticationReducer</span><span class=\"p\">,</span>\n  <span class=\"na\">notes</span><span class=\"p\">:</span> <span class=\"nx\">notesReducer</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n<p>Now, the key <code>notes</code> will contain all of the states associated with our notes and handled by our <code>notesReducer</code>. This is how multiple reducers can be composed to manage a more complex application state. In this example, the state held in the Redux store would then be a single object containing <code>auth</code> and <code>notes</code> properties.</p>\n\n<blockquote>\n<p>In short we divide our state into different parts and convert it into one single object, whose each property represents one part of our state, this way we still have one single state object but our state is logically divided into different blocks, and similarly we define different <code>reducers</code> to deal with different parts of the state, and then combine it into one root <code>reducer</code> which is passed to the store.<br>\n</p>\n</blockquote>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"na\">state_part1</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"c1\">//contains all code related to part 1</span>\n <span class=\"p\">}</span>\n\n<span class=\"nl\">state_part2</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"c1\">//contains all code related to part2</span>\n <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n<p>Here is a more detailed example:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">INCREMENT</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">INCREMENT</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">DECREMENT</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">DECREMENT</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">counterReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"na\">INCREMENT</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"na\">DECREMENT</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">LOGIN</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">LOGIN</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">LOGOUT</span> <span class=\"o\">=</span> <span class=\"dl\">'</span><span class=\"s1\">LOGOUT</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">authReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"na\">LOGIN</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">true</span>\n      <span class=\"p\">}</span>\n    <span class=\"k\">case</span> <span class=\"na\">LOGOUT</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">authenticated</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n      <span class=\"p\">}</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// define the root reducer here</span>\n<span class=\"kd\">const</span> <span class=\"nx\">rootReducer</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">combineReducers</span><span class=\"p\">({</span>\n  <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">counterReducer</span><span class=\"p\">,</span>\n  <span class=\"na\">auth</span><span class=\"p\">:</span> <span class=\"nx\">authReducer</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">rootReducer</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#send-action-data-to-the-store\">\n  </a>\n  1️⃣1️⃣ Send Action Data to the Store\n</h2>\n\n<p>We've seen how to dispatch actions to the Redux store, but so far these actions have not contain any information other than a type. You can also send specific data along with your actions. This is very common because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about this data.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ADD_NOTE</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">ADD_NOTE</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">notesReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">Initial State</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n<span class=\"c1\">// Returning the text property on the incoming action as the new state.</span>\n    <span class=\"k\">case</span> <span class=\"na\">ADD_NOTE</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">text</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">addNoteText</span> <span class=\"o\">=</span> <span class=\"nx\">note</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"c1\">// Returning an Action Object with a type property, and a text property set to the note data that's passed into the action creator. </span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">ADD_NOTE</span><span class=\"p\">,</span>\n    <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"nx\">note</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">notesReducer</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">());</span>\n<span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">addNoteText</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello!</span><span class=\"dl\">\"</span><span class=\"p\">));</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">.</span><span class=\"nx\">getState</span><span class=\"p\">());</span>\n</code></pre>\n\n</div>\n\n\n<p>Output in the console:<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>Initial State\nHello!\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#use-middleware-to-handle-asynchronous-actions\">\n  </a>\n  1️⃣2️⃣ Use Middleware to Handle Asynchronous Actions\n</h2>\n\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\">Asynchronous Actions</a></strong> are an unavoidable part of web development.</p>\n\n<p>At some point you'll need to call asynchronous endpoints in your Redux app, so how do we handle these types of requests? </p>\n\n<p>Redux provides middleware designed specifically for this purpose, called <code>Redux Thunk</code> middleware.</p>\n\n<p>To include <code>Redux Thunk</code> middleware, you pass it as an argument to <code>Redux.applyMiddleware()</code>. This statement is then provided as a second optional parameter to the createStore() function.<br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span>\n  <span class=\"nx\">asyncDataReducer</span><span class=\"p\">,</span>\n  <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">applyMiddleware</span><span class=\"p\">(</span><span class=\"nx\">ReduxThunk</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n<p>Then, to create an asynchronous action, you return a function in the action creator that takes <code>dispatch</code> as an argument. Within this function, you can dispatch actions and perform asynchronous requests.</p>\n\n<p>In this example 👇, an asynchronous request is simulated with a <code>setTimeout()</code> call. It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action that carries the data as a payload along with information that the action is completed.</p>\n\n<blockquote>\n<p>Remember that you're passing dispatch as a parameter to this special action creator. This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest.<br>\n</p>\n</blockquote>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">REQUESTING_DATA</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">REQUESTING_DATA</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">RECEIVED_DATA</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">RECEIVED_DATA</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">requestingData</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">REQUESTING_DATA</span> <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n<span class=\"kd\">const</span> <span class=\"nx\">receivedData</span> <span class=\"o\">=</span> <span class=\"nx\">data</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">RECEIVED_DATA</span><span class=\"p\">,</span> <span class=\"na\">users</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">users</span> <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">handleAsync</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">dispatch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// dispatch request action here</span>\n\n    <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">requestingData</span><span class=\"p\">());</span>\n\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"na\">users</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Jeff</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">William</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Alice</span><span class=\"dl\">\"</span><span class=\"p\">]</span>\n      <span class=\"p\">};</span>\n      <span class=\"c1\">// dispatch received data action here</span>\n\n      <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">receivedData</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">));</span>\n    <span class=\"p\">},</span> <span class=\"mi\">2500</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">defaultState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">fetching</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"na\">users</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">asyncDataReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">defaultState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"na\">REQUESTING_DATA</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">fetching</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"na\">users</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n      <span class=\"p\">};</span>\n    <span class=\"k\">case</span> <span class=\"na\">RECEIVED_DATA</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">fetching</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n        <span class=\"na\">users</span><span class=\"p\">:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">users</span>\n      <span class=\"p\">};</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span>\n  <span class=\"nx\">asyncDataReducer</span><span class=\"p\">,</span>\n  <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">applyMiddleware</span><span class=\"p\">(</span><span class=\"nx\">ReduxThunk</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n<p>Let's revise for a bit:</p>\n<h2>\n  <a href=\"#write-a-counter-with-redux\">\n  </a>\n  Write a Counter with Redux 🕓\n</h2>\n\n<p>Now we've learned all the core principles of Redux!</p>\n\n<p><strong>Let's implement a simple counter with Redux from scratch.</strong><br>\n</p>\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"c1\">// define a constant for increment action types</span>\n<span class=\"kd\">const</span> <span class=\"nx\">INCREMENT</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">INCREMENT</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// define a constant for decrement action types</span>\n<span class=\"kd\">const</span> <span class=\"nx\">DECREMENT</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">DECREMENT</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// define the counter reducer which will increment or decrement the state based on the action it receives</span>\n<span class=\"kd\">const</span> <span class=\"nx\">counterReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"na\">INCREMENT</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">case</span> <span class=\"na\">DECREMENT</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// define an action creator for incrementing</span>\n<span class=\"kd\">const</span> <span class=\"nx\">incAction</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">INCREMENT</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// define an action creator for decrementing</span>\n<span class=\"kd\">const</span> <span class=\"nx\">decAction</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">DECREMENT</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// define the Redux store here, passing in your reducers</span>\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">counterReducer</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n<h2>\n  <a href=\"#never-mutate-state\">\n  </a>\n  1️⃣3️⃣ Never Mutate State\n</h2>\n\n<p>These final few points describe several methods of enforcing the key principle of state immutability in Redux. Immutable state means that you never modify the state directly, instead, you return a new copy of the state.</p>\n\n<p>I repeat:</p>\n<h3>\n  <a href=\"#never-mutate-state\">\n  </a>\n  Never Mutate State\n</h3>\n\n<p>If you took a snapshot of the state of a Redux app over time, you would see something like state 1, state 2, state 3, state 4, ... and so on where each state may be similar to the last, but each is a distinct piece of data.</p>\n\n<p>Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a <code>string</code>, <code>number</code>, <code>array</code>, or <code>object</code>.</p>\n\n<p>Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An array or object, however, is mutable. In practice, your state will probably consist of an array or object, as these are useful data structures for representing many types of information.</p>\n\n<p><strong>Read more about Immutability:</strong></p>\n\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">MDN</a></strong> or</p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/cenacr007_harsh\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gHAd0jjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nO18I-lK--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/641726/d1caf43e-4478-42c3-8ac3-f3b2980d031b.png\" alt=\"cenacr007_harsh\">\n    </div>\n  </a>\n  <a href=\"/cenacr007_harsh/javascript-30-day-14-3p0i\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>JavaScript-30-Day-14</h2>\n      <h3>KUMAR HARSH ・ Jun 14 ・ 5 min read</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#javascript</span>\n        <span class=\"ltag__link__tag\">#webdev</span>\n        <span class=\"ltag__link__tag\">#github</span>\n        <span class=\"ltag__link__tag\">#programming</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n<p>Here is a detailed example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">ADD_TO_DO</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">ADD_TO_DO</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// A list of strings representing tasks to do:</span>\n<span class=\"kd\">const</span> <span class=\"nx\">todos</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Go to the store</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Clean the house</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Cook dinner</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">Learn to code</span><span class=\"dl\">\"</span>\n<span class=\"p\">];</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">immutableReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">todos</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"na\">ADD_TO_DO</span><span class=\"p\">:</span>\n      <span class=\"c1\">// don't mutate state here</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">todo</span><span class=\"p\">);</span>\n    <span class=\"c1\">// or return [...state, action.todo]</span>\n\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">addToDo</span> <span class=\"o\">=</span> <span class=\"nx\">todo</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">ADD_TO_DO</span><span class=\"p\">,</span>\n    <span class=\"nx\">todo</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">immutableReducer</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<h3>\n  <a href=\"#helpful-pointers\">\n  </a>\n  Helpful Pointers:\n</h3>\n\n<blockquote>\n<p><code>const</code> means: it cannot change through re-assignment, and it cannot be re-declared.<br>\nSince objects and arrays are mutable, you can add to it by index (array[3] = 3), by property (object.name=“sam”), by extending (with various array methods)</p>\n\n<p><code>.push()</code> and <code>.splice()</code> directly modify the array</p>\n\n<p><code>.concat()</code> doesn’t modify array but just returns a new array</p>\n\n<p><code>.slice()</code> doesn’t modify array but just returns a new array</p>\n\n<p><code>spread operator</code> […array] doesn’t modify array but just returns a new array</p>\n</blockquote>\n\n<p><strong>The easiest and widely used is ES6 <code>spread operator</code></strong></p>\n\n<h4>\n  <a href=\"#use-the-spread-operator-on-arrays\">\n  </a>\n  👉 Use the Spread Operator on Arrays\n</h4>\n\n<p>One solution from ES6 to help enforce state immutability in Redux is the spread operator: <code>...</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"nb\">let </span>newArray <span class=\"o\">=</span> <span class=\"o\">[</span>...myArray]<span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p><code>newArray</code> is now a clone of <code>myArray</code>. Both arrays still exist separately in memory.</p>\n\n<p>If you perform a mutation like <code>newArray.push(5)</code>, <code>myArray</code> doesn't change. The <code>...</code> effectively spreads out the values in <code>myArray</code> into a new array.</p>\n\n<p>To clone an array but add additional values in the new array, you could write <code>[...myArray, 'new value']</code>. This would return a new array composed of the values in <code>myArray</code> and the string <code>new value</code> as the last value. The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a <strong>shallow copy</strong> of the array. That is to say, it only provides immutable array operations for one-dimensional arrays.</p>\n\n<p>Here is a detailed example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">immutableReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Do not mutate state!</span><span class=\"dl\">\"</span><span class=\"p\">],</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">ADD_TO_DO</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"c1\">// don't mutate state here</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">todo</span><span class=\"p\">];</span>\n      <span class=\"k\">return</span> <span class=\"nx\">arr</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">addToDo</span> <span class=\"o\">=</span> <span class=\"nx\">todo</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ADD_TO_DO</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">todo</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">immutableReducer</span><span class=\"p\">);</span>\n\n</code></pre>\n\n</div>\n\n\n\n<h4>\n  <a href=\"#remove-an-item-from-an-array\">\n  </a>\n  👉 Remove an Item from an Array\n</h4>\n\n<p>The <code>spread operator</code> can be used here as well. Other useful JavaScript methods include <code>slice()</code> and <code>concat()</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">immutableReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">REMOVE_ITEM</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"c1\">// don't mutate state here</span>\n      <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">index</span><span class=\"p\">),</span>\n        <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span>\n      <span class=\"p\">];</span>\n\n    <span class=\"c1\">// or return state.slice(0, action.index).concat(state.slice(action.index + 1, state.length));</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">removeItem</span> <span class=\"o\">=</span> <span class=\"nx\">index</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">REMOVE_ITEM</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"nx\">index</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">immutableReducer</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<blockquote>\n<p>Code Explanation</p>\n\n<ul>\n<li>\n<code>array.slice</code>(fromIndex, untilIndex) returns a new array</li>\n<li>1st slice from the first item’s index (0 inclusive) until <code>indexToRemove</code>(action.index exclusive)</li>\n<li>2nd slice from item right after <code>indexToRemove</code> (action.index + 1 inclusive) until length (last item’s index + 1 exclusive)</li>\n<li>since slice returns a new array, combine both parts with […array1, …array2] spread operator</li>\n<li>or combine them with <code>.concat()</code>\n</li>\n</ul>\n</blockquote>\n\n<h4>\n  <a href=\"#copy-an-object-with-raw-objectassign-endraw-\">\n  </a>\n  👉 Copy an Object with <code>Object.assign</code>\n</h4>\n\n<p>There are ways to help enforce state immutability when a state is an object, too. A useful tool for handling objects is the <code>Object.assign()</code> utility. <code>Object.assign()</code> takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy.</p>\n\n<p>For example: <code>const newObject = Object.assign({}, obj1, obj2);</code></p>\n\n<p>This creates <code>newObject</code> as a new object, which contains the properties that currently exist in obj1 and obj2.</p>\n\n<p>Here's a detailed example:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">defaultState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">user</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">CamperBot</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">offline</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">friends</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">732,982</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">community</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">freeCodeCamp</span><span class=\"dl\">\"</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">immutableReducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"nx\">defaultState</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">ONLINE</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"c1\">// to enforce state immutability, return a new state object using Object.assign() method</span>\n      <span class=\"k\">return</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">assign</span><span class=\"p\">({},</span> <span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">online</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">wakeUp</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ONLINE</span><span class=\"dl\">\"</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">store</span> <span class=\"o\">=</span> <span class=\"nx\">Redux</span><span class=\"p\">.</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">immutableReducer</span><span class=\"p\">);</span>\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  <a href=\"#thats-the-basics\">\n  </a>\n  That's the basics!\n</h2>\n\n<p>You've seen how to create action and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers. You've even seen how to manage complex states with reducer composition and handle asynchronous actions. </p>\n\n<p>The examples were simplistic, but these concepts are the core principles of Redux. If you understand them well, you're ready to start building your own Redux app.</p>\n\n<p>💯</p>\n\n<h3>\n  <a href=\"#i-hope-you-found-this-article-valuable-if-yes-do-let-me-know-in-the-comments\">\n  </a>\n  I hope you found this article valuable. If yes do let me know in the comments 😊\n</h3>\n\n<p>This article was inspired by <strong><a href=\"https://www.freecodecamp.org/\">freecodecamp</a></strong> curriculum.</p>\n\n<p>Also if you got any questions feel free to ping me on:</p>\n\n<h3>\n  <a href=\"#twitter-or-linkedin\">\n  </a>\n  <a href=\"https://twitter.com/cenacr007_harsh\">Twitter</a> or <a href=\"https://www.linkedin.com/in/kumarharsh22/\">Linkedin</a>\n</h3>\n\n<h2>\n  <a href=\"#thank-you\">\n  </a>\n  Thank You!\n</h2>\n\n"
        ],
        "category": [
            "redux",
            "webdev",
            "javascript",
            "react"
        ],
        "provider": "Dev.to"
    },
    {
        "title": [
            "Secret Strategies to Win Promotions Other Devs Can’t Get"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/secret-strategies-to-win-promotions-other-devs-cant-get/?utm_source=rss\"\n              title=\"Secret Strategies to Win Promotions Other Devs Can’t Get\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617644488promotion_result_1200.jpg\"\n        alt=\"\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617644488promotion_result_1200-300x158.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617644488promotion_result_1200-768x404.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617644488promotion_result_1200-1024x539.jpg 1024w, https://uploads.sitepoint.com/wp-content/uploads/2021/04/1617644488promotion_result_1200.jpg 1200w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>What&#8217;s the easiest way to get promoted? Work hard, do a great job, add value, right?</strong></p>\n<p>Wrong.</p>\n<p>Ask any experienced employer and they&#8217;ll tell you. The absolute last thing they want to do is promote a hardworking employee who does a great job. It&#8217;s the fast track to failure.</p>\n<p>This sounds brutal and unfair.</p>\n<p>If you do a great job in your role as a developer, don&#8217;t you <em>deserve</em> a promotion as a reward for your hard work?</p>\n<p>Nope.</p>\n<p>Well, who are the people who deserve and receive these coveted promotions, and what makes these developers so special?</p>\n<h2 id=\"whydeveloperswontreceivethepromotionstheydeserve\">Why Developers Won&#8217;t Receive the Promotions They Deserve</h2>\n<p>Many developers have misguided ideas about the job and promotions market. These naive (and incorrect) ideas include:</p>\n<ul>\n<li>Job hopping is the only way to level up in your career.</li>\n<li>Work hard, be indispensable, and you&#8217;ll get promoted.</li>\n<li>You have to know the right people.</li>\n<li>Nepotism or merit drive true promotions these days.</li>\n</ul>\n<p>Please don&#8217;t misunderstand: I&#8217;m not saying these ideas are terrible on their own or that they&#8217;re <em>inherently</em> harmful. I&#8217;m saying these ideas aren&#8217;t inherently and automatically true.</p>\n<p>What if you believe these ideas?</p>\n<p>If you do, you&#8217;re setting yourself up for career stagnation and crushing disappointment. Paul Ingevaldson, in an <a href=\"https://www.computerworld.com/article/2551377/why-can-t-i-get-promoted-.html\">article</a> for Computerworld, shares the hidden reality of the job and promotions market.</p>\n<blockquote>\n<p>Today&#8217;s topic is the question I most often received as an IT manager: &#8220;Why can&#8217;t I get promoted?&#8221;</p>\n<p style=\"margin-top: 1em;\">The person who has done a good or even a great job should be given praise and monetary rewards, but he shouldn&#8217;t be promoted. The business world is littered with great salespeople who failed as sales managers, great engineers who failed as engineering managers, and great IT analysts who failed as IT managers.</p>\n</blockquote>\n<p>Instantly things are crystal clear.</p>\n<p>If you want to be promoted, you&#8217;ll need to be an A player in your current role and an A player in the role you&#8217;d like to move up to.</p>\n<p>I&#8217;m not talking about training or skills.</p>\n<p><!-- https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://scholarworks.gsu.edu/cgi/viewcontent.cgi%3Farticle%3D1038%26context%3Dbus_admin_diss&amp;ved=2ahUKEwjE4IWd9LDvAhXNK80KHXyhDLgQFjAGegQIGBAC&amp;usg=AOvVaw3G3yzrtNasSjpM9ik-kE2H \n\nhttps://scholarworks.gsu.edu/bus_admin_diss/38/\n\nhttps://www.goodreads.com/book/show/915182.Topgrading\n--></p>\n<p>I&#8217;m talking about your core competencies. Dr. Bradford Smart, creator of the < href=\"https://scholarworks.gsu.edu/bus_admin_diss/38/\">proven hiring methodology <strong>Topgrading</strong>, outlines the core competencies needed to excel in any role.</p>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/03/1617074339Competency_Ability_to_Change_Chart.jpg\" alt=\"Competency and behavior ability to change chart\" width=\"1890\" height=\"1374\" class=\"alignnone size-full wp-image-181970\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617074339Competency_Ability_to_Change_Chart.jpg 1890w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617074339Competency_Ability_to_Change_Chart-300x218.jpg 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617074339Competency_Ability_to_Change_Chart-768x558.jpg 768w, https://uploads.sitepoint.com/wp-content/uploads/2021/03/1617074339Competency_Ability_to_Change_Chart-1024x744.jpg 1024w\" sizes=\"(max-width: 1890px) 100vw, 1890px\" /></p>\n<p><small>Image source: <a href=\"https://strategicdiscipline.positioningsystems.com/hs-fs/hubfs/Competency_Ability_to_Change_Chart.jpg\">Positioning systems Blog</a></small></p>\n<p>Here&#8217;s the bad news about core competencies. Many of the ones listed above are difficult to learn or improve. However, difficult isn&#8217;t impossible.</p>\n<p>This is the problem.</p>\n<p>It&#8217;s also why most developers will struggle to receive the promotions they want. They&#8217;re not prepared for the specific positions they want.</p>\n<h2 id=\"whatdevelopersneedtowinpromotions\">What Developers Need to Win Promotions</h2>\n<p>The list isn&#8217;t long, but it does require some upfront work.</p>\n<ol>\n<li>An alliance of people who want you to be promoted (or who are neutral to the idea).</li>\n<li>The abilities, skills, and competencies needed for your desired role.</li>\n<li>The political acumen needed to negotiate with or circumvent competitors and naysayers.</li>\n<li>The ability to track the hidden job market.</li>\n<li>Assurances of success and continued performance.</li>\n</ol>\n<p>Let&#8217;s take a closer look at each of these.</p>\n<p>You need an alliance of people inside and outside your company. Your alliance will vary depending on your specific needs. Here&#8217;s a shortlist of the people and resources you may need in your group:</p>\n<ul>\n<li>an HR decision-maker</li>\n<li>decision-makers in your desired role</li>\n<li>influential references in your current role</li>\n<li>quantifiable value you can use as leverage to demonstrate your worth</li>\n<li>examples of proposed value you can provide in your desired role</li>\n<li>what you&#8217;ll need to provide your team in your current role to ensure your departure and transition is smooth</li>\n</ul>\n<p>Next, you&#8217;ll need a list of the core competencies, abilities, skills, and resources required to perform well in your new role.</p>\n<p><strong>Here&#8217;s where things get difficult.</strong></p>\n<p>You&#8217;ll need to map out the political landscape in your current role and your new role, whether that&#8217;s in the same company or a different one.</p>\n<p>You&#8217;ll need advice.</p>\n<p>You&#8217;re going to need to identify the socially astute people in your organization (who are open to you) who can give you a realistic sense of your organization&#8217;s political layout.</p>\n<p>You&#8217;ll need this for both your current and desired roles. Here are some political questions you may need answers to.</p>\n<ul>\n<li>Who are the kingmakers, the people who have the power to block promotions?</li>\n<li>Who are the shadow leaders, the hidden employees who wield a large amount of tangential power?</li>\n<li>Which groups or teams need to be appeased before a major change or promotion happens?</li>\n<li>Which people have been passed over for promotions and why?</li>\n<li>Which employees are the favorites, groupies, or &#8220;pets&#8221; of those with powers?</li>\n<li>What are these various individuals and groups competing for? Should you, can you help them get what they want?</li>\n<li>What&#8217;s the breakdown of friends and enemies in your current and desired role?</li>\n</ul>\n<p>You can branch out from there, asking the questions that make sense for your situation. Doing these gives you clarity, showing you how to navigate the political climate in your target role.</p>\n<p>What about assurances?</p>\n<p>How can you assure the above people that you&#8217;re a great fit for the role you&#8217;re pursuing? There are three ways you can do this.</p>\n<ol>\n<li>Share your past performance in your previous role as a developer. Offer quantitative and qualitative evidence that you&#8217;re a superstar. If you&#8217;re not one, become one.</li>\n<li>Show decision-makers and influencers that you have an in-depth understanding of your desired role&#8217;s obvious and hidden challenges. (This should be based on research.)</li>\n<li>A 30-, 60- or 90-day plan to begin addressing the issues present in your desired role. Use Ramit Sethi&#8217;s <a href=\"https://www.youtube.com/watch?v=NViqHCrljf8\">briefcase technique</a> to structure your plan in a way that wins hearts and minds.</li>\n</ol>\n<p>Providing assurances isn&#8217;t hard. It just takes some upfront work.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/secret-strategies-to-win-promotions-other-devs-cant-get/?utm_source=rss\">Secret Strategies to Win Promotions Other Devs Can’t Get</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/secret-strategies-to-win-promotions-other-devs-cant-get/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=181966",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Business",
            "Career Advancement",
            "Entrepreneur",
            "Web"
        ],
        "dc:creator": [
            "Andrew McDermott"
        ],
        "pubDate": [
            "Wed, 31 Mar 2021 15:00:06 GMT"
        ],
        "metaDesc": [
            "Getting a job promotion isn't as straightforward as you might think. Learn the secrets to getting that critical edge to ensure your career advancement."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Using Performant Next-Gen Images in CSS with image-set"
        ],
        "link": [
            "https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/"
        ],
        "comments": [
            "https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/#comments"
        ],
        "dc:creator": [
            "Ollie Williams"
        ],
        "pubDate": [
            "Wed, 23 Jun 2021 19:10:54 +0000"
        ],
        "category": [
            "Article",
            "avif",
            "image-set",
            "picture",
            "srcset"
        ],
        "guid": [
            {
                "_": "https://css-tricks.com/?p=342750",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>The CSS <code>image-set()</code> function has been supported in Chromium-based browsers since 2012 and in Safari since version 6. Support recently landed in <a href=\"https://hacks.mozilla.org/2021/04/never-too-late-for-firefox-88/\">Firefox 88</a>. Let’s dive in and see what we can and can’t do today with <code>image-set()</code>.&#8230;</p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/\">Using Performant Next-Gen Images in CSS with image-set</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "content:encoded": [
            "\n<p>The CSS <code>image-set()</code> function has been supported in Chromium-based browsers since 2012 and in Safari since version 6. Support recently landed in <a href=\"https://hacks.mozilla.org/2021/04/never-too-late-for-firefox-88/\">Firefox 88</a>. Let’s dive in and see what we can and can’t do today with <code>image-set()</code>.</p>\n\n\n\n<span id=\"more-342750\"></span>\n\n\n\n<h4 id=\"h-multiple-resolutions-of-the-same-image\">Multiple resolutions of the same image</h4>\n\n\n\n<p>Here’s what the <a href=\"https://drafts.csswg.org/css-images-4/#image-set-notation\">CSS spec</a> has to say about <code>image-set()</code>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Delivering the most appropriate image resolution for a user’s device can be a difficult task. Ideally, images should be in the same resolution as the device they’re being viewed in, which can vary between users. However, other factors can factor into the decision of which image to send; for example, if the user is on a slow mobile connection, they may prefer to receive lower-res images rather than waiting for a large proper-res image to load.</p></blockquote>\n\n\n\n<p>It’s basically a CSS background equivalent to the <a href=\"https://css-tricks.com/a-guide-to-the-responsive-images-syntax-in-html/#using-srcset\">HTML <code>srcset</code> attribute</a> for <code>img</code> tags. By using <code>image-set</code> we can provide multiple resolutions of an image and trust the browser to make the best decision about which one to use. This can be used to specify a value for three different CSS properties: <code>content</code>, <code>cursor</code>, and most useful of all, <code>background-image</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  background-image: image-set(\"platypus.png\" 1x, \"platypus-2x.png\" 2x);\n}</code></pre>\n\n\n\n<p><code>1x</code> is used to identify the low-res image, while <code>2x</code> is used to define the high-res image. <code>x</code> is an alias of <code>dppx</code>, which stands for <strong>dots per pixel unit</strong>.</p>\n\n\n\n<p>Chrome/Edge/Opera/Samsung Internet currently require a <code>-webkit-</code> prefix. If you’re using Autoprefixer, this will be handled automatically. Safari no longer requires the prefix but uses an older syntax that requires a <code>url()</code> function to specify the image path. We could also include a regular old <code>background-image: url()</code> to support any browsers that don’t support <code>image-set</code>.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.hero {\n  /* Fallback */\n  background-image: url(\"platypus.png\");\n\n  /* Chrome/Edge/Opera/Samsung, Safari will fallback to this as well */\n  background-image: -webkit-image-set(url(\"platypus.png\") 1x, url(\"platypus-2x.png\") 2x);\n\n  /* Standard use */\n  background-image: image-set(\"platypus.png\" 1x, \"platypus-2x.png\" 2x);\n}</code></pre>\n\n\n\n<p>Now users on expensive fancy devices will see a super sharp image. Performance will be improved for users on slow connections or with cheaper screens as their browser will automatically request the lower-res image. If you wanted to be sure that the high-res image was used on high-res devices, even on slow connections, you could make use of the <code>min-resolution</code> media query instead of <code>image-set</code>. For more on serving sharp images to high density screens, check out Jake Archibald’s recent post <a href=\"https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/\">over on his blog</a>.</p>\n\n\n\n<p>That’s pretty cool, but what I really want is to be able to adopt the latest image formats in CSS while still catering for older browsers…</p>\n\n\n\n<h3 id=\"h-new-image-formats\">New image formats</h3>\n\n\n\n<p>Safari 14 shipped support for WebP. It was the final modern browser to do so which means the image format is now supported everywhere (except Internet Explorer). WebP is useful in that it can make images that are often smaller than (but of the same quality as) JPG, PNG, or GIF.</p>\n\n\n\n<p>There’s also a whole bunch of even newer image formats cropping up. <a href=\"https://css-tricks.com/avif-has-landed/\">AVIF images</a> are shockingly tiny. Chrome, Opera and Samsung Internet have already shipped support for AVIF. It’s already in Firefox behind a flag. This image format isn’t supported by many design tools yet but you can convert images to AVIF using the <a href=\"https://squoosh.app/\">Squoosh app</a> built by the Chrome team at Google. WebP 2, HEIF and JPEG XL might also make it into browsers eventually. This is all rather exciting, but we want browsers that don’t support these newer formats to get some images. Fortunately <code>image-set()</code> has a syntax for that.</p>\n\n\n\n<h4 id=\"h-using-new-image-formats-by-specifying-a-type\">Using new image formats by specifying a type</h4>\n\n\n\n<p class=\"is-style-explanation\"><strong>Browser support note:</strong> The feature of <code>image-set</code> that I’m about to talk about currently has pretty terrible browser support. Currently it’s only supported in <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/89\">Firefox 89</a>.</p>\n\n\n\n<p>HTML has supported the <code>&lt;picture&gt;</code> element for years now.</p>\n\n\n\n<pre rel=\"HTML\" class=\"wp-block-csstricks-code-block language-markup\" data-line=\"\"><code markup=\"tt\">&lt;picture>\n  &lt;source srcset=\"./kitten.avif\" type=\"image/avif\">\n  &lt;img src=\"./kitten.jpg\" alt=\"a small kitten\"> \n&lt;/picture></code></pre>\n\n\n\n<p><code>image-set</code> provides the CSS equivalent, allowing for the use of next-gen image formats by specifying the image’s MIME type:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.div1 {\n  background-image: image-set(\n    \"kitten.avif\" type(\"image/avif\"),\n    \"kitten.jpg\" type(\"image/jpeg\")\n  );\n}</code></pre>\n\n\n\n<p>The next-gen image goes first while the fallback image for older browsers goes second. Only one image will be downloaded. If the browser doesn’t support AVIF it will ignore it and only download the second image you specify. If AVIF is supported, the fallback image is ignored.</p>\n\n\n\n<p>In the above example we used an AVIF image and provided a JPEG as a fallback, but the fallback could be any widely supported image format. Here’s an example using a PNG.</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.div2 {\n  background-image: image-set(\n    \"puppy.webp\" type(\"image/webp\"),\n    \"puppy.png\" type(\"image/png\")\n  );\n}</code></pre>\n\n\n\n<p>In Chromium and Safari, specifying the <code>type</code> is not supported yet. That means you can use <code>image-set</code> today only to specify different resolutions of widely-supported image formats but not to add backwards-compatibility when using WebP or AVIF in those browsers. It should be possible to provide both multiple resolutions and multiple image formats, if you are so inclined:</p>\n\n\n\n<pre rel=\"CSS\" class=\"wp-block-csstricks-code-block language-css\" data-line=\"\"><code markup=\"tt\">.div2 {\n  background-image: image-set( \n    \"puppy.webp\" type(\"image/webp\") 1x,\n    \"puppy2x.webp\" type(\"image/webp\") 2x,\n    \"puppy.png\" type(\"image/png\") 1x,\n    \"puppy2x.png\" type(\"image/png\") 2x\n  );\n}</code></pre>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_GRWbOWz\" src=\"//codepen.io/anon/embed/GRWbOWz?height=450&amp;theme-id=1&amp;slug-hash=GRWbOWz&amp;default-tab=css,result\" height=\"450\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed GRWbOWz\" title=\"CodePen Embed GRWbOWz\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>Hopefully browser support will improve soon.</p>\n\n\n\n<h4 id=\"h-using-picture-for-backgrounds-instead\">Using <code>&lt;picture&gt;</code> for backgrounds instead</h4>\n\n\n\n<p>Maybe you don’t need <code>background-image</code> at all. If you want to use modern image formats, you might be able to use the <code>&lt;picture&gt;</code> element, which has better browser support. If you set the image to <code>position: absolute</code> it’s easy to display other elements on top of it.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_ExWdLYv\" src=\"//codepen.io/anon/embed/ExWdLYv?height=350&amp;theme-id=1&amp;slug-hash=ExWdLYv&amp;default-tab=css,result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed ExWdLYv\" title=\"CodePen Embed ExWdLYv\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p>As an alternative approach to using <code>position: absolute</code>, CSS grid is another easy way to overlap HTML elements.</p>\n\n\n\n<div class=\"wp-block-cp-codepen-gutenberg-embed-block cp_embed_wrapper\"><iframe id=\"cp_embed_WNpLKOJ\" src=\"//codepen.io/anon/embed/WNpLKOJ?height=350&amp;theme-id=1&amp;slug-hash=WNpLKOJ&amp;default-tab=css,result\" height=\"350\" scrolling=\"no\" frameborder=\"0\" allowfullscreen allowpaymentrequest name=\"CodePen Embed WNpLKOJ\" title=\"CodePen Embed WNpLKOJ\" class=\"cp_embed_iframe\" style=\"width:100%;overflow:hidden\">CodePen Embed Fallback</iframe></div>\n\n\n\n<p></p>\n<hr />\n<p><small>The post <a rel=\"nofollow\" href=\"https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/\">Using Performant Next-Gen Images in CSS with image-set</a> appeared first on <a rel=\"nofollow\" href=\"https://css-tricks.com\">CSS-Tricks</a>. You can support CSS-Tricks by being an <a href=\"https://css-tricks.com/product/mvp-supporter/\">MVP Supporter</a>.</small></p>\n"
        ],
        "wfw:commentRss": [
            "https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/feed/"
        ],
        "slash:comments": [
            "3"
        ],
        "post-id": [
            {
                "_": "342750",
                "$": {
                    "xmlns": "com-wordpress:feed-additions:1"
                }
            }
        ],
        "provider": "CSS Tricks"
    },
    {
        "title": [
            "Create Serverless Microservices with Node.js and AWS Lambda"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/getting-started-node-js-aws-lambda/?utm_source=rss\"\n              title=\"Create Serverless Microservices with Node.js and AWS Lambda\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2016/12/1481046467AWS_B.jpg-01.png\"\n        alt=\"Create Serverless Microservices with Node.js and AWS Lambda\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2016/12/1481046467AWS_B.jpg-01-300x167.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2016/12/1481046467AWS_B.jpg-01-768x427.png 768w, https://uploads.sitepoint.com/wp-content/uploads/2016/12/1481046467AWS_B.jpg-01.png 900w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>If you&#8217;ve ever wanted to write a web app or API without messing around with the server, <a href=\"https://aws.amazon.com/lambda/\"><strong>Amazon&#8217;s Lambda</strong></a> might be what you&#8217;re looking for.</strong> </p>\n<p>Amazon Web Services (AWS) is a collection of developer tools that Amazon develops and publicly offers.This article will get you up and running with Lambda, a tool in the AWS suite. We&#8217;ll be using Lambda to create an HTTP GET endpoint that will make requests using the <a href=\"https://docs.github.com/en/rest/overview\">GitHub API</a> to pull repository info from GitHub and return a JSON response.</p>\n<p>The Lambda tagline is &#8220;Run Code without Thinking about Servers&#8221;. At first glance, this may sound confusing. Where or how does the code run then? Let&#8217;s find out.</p>\n<p><em>To follow along with this article, you&#8217;ll need an AWS account of your own. You can create a free AWS account at <a href=\"https://aws.amazon.com/\">aws.amazon.com</a>.</em></p>\n<p><img src=\"https://www.sitepoint.com/wp-content/uploads/2016/12/1481046467AWS_B.jpg-01.png\" alt=\"Create Serverless Microservices with Node.js and AWS Lambda\" /></p>\n<h2 id=\"serverlessandfunctionsasaservice\">Serverless and Functions as a Service</h2>\n<p>&#8220;Serverless&#8221; is a software infrastructure term you may have heard about. It describes a solution for on-demand code execution. The term &#8220;serverless&#8221; can be misleading because there are still servers in the equation. A better descriptor is FaaS, or &#8220;functions as a service.&#8221;</p>\n<p>Both definitions describe a new development and deployment experience. This experience is considered &#8220;serverless&#8221; because you, as a developer, no longer have to manage, monitor, or scale any servers that are running your code. You upload your code to a FaaS provider (AWS Lambda, in this case), and the FaaS provider executes it and manages any infrastructure for you behind the scenes.</p>\n<h2 id=\"theprosandconsofserverlessarchitecture\">The Pros and Cons of Serverless Architecture</h2>\n<p>Given this expanded definition of the &#8220;Serverless&#8221; architecture, let&#8217;s look at some of the pros and cons when working with Lambda.</p>\n<h3 id=\"pros\">Pros</h3>\n<ul>\n<li>\n<p><strong>On-demand usage pricing.</strong><br />\nTraditional server hosting uses a recurring billing cycle. Your server is always up and running, using resources and waiting for input. You pay a monthly or yearly fee to keep it running for the duration of your billing cycle. With Lambda, you&#8217;re only billed for computational resources that you use, not idle time. Lambda has two usage pricing models: duration and concurrency.</p>\n</li>\n<li>\n<p><strong>Duration pricing</strong><br />\nLambda duration pricing calculates prices based on the time the function begins executing until it terminates. This price calculation is beneficial for projects using short-lived computational resources. You can save a significant amount of money over traditional &#8220;idle&#8221; hosting solutions.</p>\n<p>Lambda duration pricing is as follows:</p>\n<ul>\n<li>$0.20 per 1 million requests</li>\n<li>$0.00001667 for every GB-second duration of computing time, with every execution rounded up to the nearest 100ms</li>\n</ul>\n<p>The duration pricing is dependent on pre-configured memory usage of your deployed function. This duration and memory variability creates a pricing matrix that&#8217;s further detailed on the <a href=\"https://aws.amazon.com/lambda/pricing/\">Lambda pricing page</a>.</p>\n</li>\n<li>\n<p><strong>Concurrency pricing</strong><br />\n&#8220;Provisioned Concurrency&#8221; mode pricing calculates the price from the time it&#8217;s enabled until disabled. Concurrency mode keeps lambda functions ready and removes any startup time from duration mode. </p>\n<p>Lambda concurrency pricing is as follows:</p>\n<ul>\n<li>Provisioned Concurrency is $0.0000041667 for every GB-second</li>\n<li>Requests are $0.20 per 1M requests</li>\n<li>Duration is $0.0000097222 for every GB-second</li>\n</ul>\n<p>The AWS pricing page includes further details and examples of the pricing matrix. Learn more on the <a href=\"https://aws.amazon.com/lambda/pricing/\">Lambda pricing page</a>.</p>\n</li>\n<li>\n<p><strong>Built-in auto scaling</strong><br />\nIn a traditional hosted infrastructure, there comes a time where you may need to worry about performance and scaling. As the traffic and usage of your application increase, you may need to add more hosted servers to your infrastructure to keep up with demand. Self-managed scaling can cause failures and bottlenecks for your users. Lambda takes care of scaling automatically when needed, removing additional cognitive overhead.</p>\n</li>\n</ul>\n<h3 id=\"cons\">Cons</h3>\n<ul>\n<li>\n<p><strong>Inconsistent local development workflow.</strong></p>\n<p>You can write Lambda function code locally and test it in isolation. Still, you won&#8217;t be able to simulate a production environment locally without creating your hacked-together version of Lambda.</p>\n</li>\n</ul>\n<h2 id=\"lambdakeyconceptscodeandtriggers\">Lambda Key Concepts: Code and Triggers</h2>\n<p>Lambda has two main concepts: <strong>code</strong> and <strong>triggers</strong>. Code is self-explanatory. In our case, it&#8217;s the JavaScript code that you write and upload to Lambda to produce your desired behaviors.</p>\n<p>Once uploaded, the code won&#8217;t execute on its own. This is where triggers come in. Triggers are events fired by other AWS services that pass data to the Lambda function for execution.</p>\n<p>Some example triggers are seen when:</p>\n<ul>\n<li>an HTTP request to AWS API Gateway fires Lambda code</li>\n<li>an event is fired on an interval, like a cron job from CloudWatch Events</li>\n<li>a DynamoDB table is updated and triggers Lambda code</li>\n</ul>\n<h3 id=\"lambdacodefunctionsignature\">Lambda code function signature</h3>\n<p>You define a Lambda function by exporting a regular function from JavaScript that matches the expected Lambda signature:</p>\n<pre><code class=\"javascript language-javascript\">exports.myLambdaFunction = (event, context, callback) =&gt; {\r\n   // Use callback() and return\r\n}\r\n</code></pre>\n<p>The function receives three arguments:</p>\n<ul>\n<li>\n<p><code>event</code>: a key-value pair dictionary of &#8220;trigger data&#8221; that Lambda passes to the function.</p>\n</li>\n<li>\n<p><code>context</code>: AWS internal information such as AWS request ID, Lambda expiration timeout, and Log info. For more info, see the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html\">Lambda docs</a>.</p>\n</li>\n<li>\n<p><code>callback</code>: a standard async JavaScript callback handler. For more info see the <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html#nodejs-prog-model-handler-callback\">Lambda docs</a></p>\n</li>\n</ul>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/getting-started-node-js-aws-lambda/?utm_source=rss\">Create Serverless Microservices with Node.js and AWS Lambda</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/getting-started-node-js-aws-lambda/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "https://www.sitepoint.com/?p=143691",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "APIs",
            "JavaScript",
            "Node.js"
        ],
        "dc:creator": [
            "Kev Zettler"
        ],
        "pubDate": [
            "Tue, 01 Jun 2021 15:00:48 GMT"
        ],
        "metaDesc": [
            "Wish you could write a web app or API without messing around with the server? Boom! Learn how to create serverless solutions with AWS Lambda."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "VPNs: What They Are, and Why You Need One"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/vpns-what-they-are-why-you-need-one/?utm_source=rss\"\n              title=\"VPNs: What They Are, and Why You Need One\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623203211vpns.png\"\n        alt=\"VPNs: What They Are, and Why You Need One\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623203211vpns-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/06/1623203211vpns.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>Are you concerned about your online privacy and security? The first thing you should do is use a VPN service. They’re effective, affordable, and easy to use. There are plenty of effective options that cost between $3 and $10 per month.</strong></p>\n<p>If you’ve been thinking about using one, now’s the time. Privacy is an important issue that we become more aware of as it’s taken away. You’re losing more of it day by day, and today you can do something to take it back.</p>\n<p>In this article, I want to let you know how precarious your online privacy has become, outline how a VPN can help, and examine how well popular VPN services are doing with the issue.</p>\n<p>Let’s get started by looking at the fundamental concepts of VPNs.</p>\n<h2 id=\"whatisavpn\">What Is a VPN?</h2>\n<p>When you use the Internet, you are identified by your IP address. It’s assigned to you by your internet service provider (ISP) and used by them to send back the information you request, such as web pages. They can also use it to make a record of every website you visit.</p>\n<p>As you surf the Web, each packet you send contains your IP address. When you realize how much about you can be learned from that simple piece of information, it’s scary!</p>\n<p>An IP address can reveal your location and ISP. It’s logged by most of the websites you visit, and over time, they can associate it with other personal information you supply, such as your name, phone number, and address.</p>\n<p>When you type in the address of a website, a DNS server is queried so that you can be directed to the IP address of that website. By default, that DNS server belongs to your ISP. They create a log of all of your DNS queries to create a complete history of your web activity.</p>\n<p>As you can see, the Internet is not a very private place.</p>\n<p>A virtual private network, or VPN, protects your privacy by routing your traffic through a third-party server. Everything still goes through your ISP, of course, but it’s encrypted.</p>\n<p>That means they can see that you’re connected to a VPN, but that’s all. Even your DNS queries go through the VPN server so they don’t know which sites you visit.</p>\n<p>On the other side of the connection, all traffic is associated with the VPN server’s IP address, not your own, and that address is likely to change on a regular basis. Your web activity is visible, but your identity isn’t. There’s no way to trace that activity back to you.</p>\n<h2 id=\"privacyistheprimaryreasontouseavpn\">Privacy Is the Primary Reason to Use a VPN</h2>\n<p>Maybe you feel like you have nothing to hide, but that doesn’t mean that others should be able to create a complete log of everything you do. You wouldn’t be comfortable if I followed you around recording everything you say and taking photos of everything you do. You’d find that creepy.</p>\n<p>The same goes for our online activity. We shouldn’t feel that Big Brother from George Orwell&#8217;s <em>Nineteen Eighty-Four</em> is looking over our shoulder.</p>\n<blockquote>\n<p>The way most of the Internet works today would be considered intolerable if translated into comprehensible real-world analogs, but it endures because it is invisible. — <a href=\"https://signal.org/blog/the-instagram-ads-you-will-never-see/\">Signal.org</a></p>\n</blockquote>\n<p>But that sort of tracking has become pervasive. In fact, in some parts of the world it’s a legal requirement. Some governments require ISPs to log your entire web history and provide government agencies and other authorities controlled access to it.</p>\n<p>What’s the situation where you live? Let’s look at the mandatory data retention laws in four parts of the world.</p>\n<h3 id=\"theuk\">The UK</h3>\n<p>The <a href=\"https://www.legislation.gov.uk/ukpga/2016/25/contents/enacted\">Investigatory Powers Act</a> was passed by the UK government in 2016 and requires web and phone companies to store the browsing histories of all of their customers for 12 months. They are required by law to share these records with the police, security services, and government agencies.</p>\n<p>Chris Yiu, who leads the Technology &amp; Public Policy program for the Tony Blair Institute, <a href=\"https://yiu.co.uk/blog/who-can-view-my-internet-history/\">compiled a complete list</a> of who can see where British web surfers have been. I counted 48 different agencies. Since this information is stored online, Chris also wonders how many malicious actors have also got their hands on the information.</p>\n<p>Can things get any worse? Unfortunately, yes.</p>\n<p><a href=\"https://www.theregister.com/2020/04/23/uk_snoopers_charter_sequel/\">The Register</a> reports that the list is set to expand considerably. They reference a 2020 government memorandum (<a href=\"https://www.legislation.gov.uk/ukdsi/2020/9780111195499/pdfs/ukdsiod_9780111195499_en.pdf\">PDF here</a>) that recommends adding even more agencies.</p>\n<p>They feel that the environmental agency, department of health, pensions regulator and others deserve to see which websites Brits are accessing. It’s comical and ridiculous that the UK National Authority for Counter Eavesdropping is included on the list.</p>\n<h3 id=\"theeuropeanunion\">The European Union</h3>\n<p>Browser history tracking is less of a concern in the EU. The Data Retention Directive of 2006, which allowed police and security agencies to access users’ IP addresses, email metadata, phone calls, and text messages, has been annulled.</p>\n<p>After a landmark court case in 2014, it was found to violate human rights. “The blanket retention of data of unsuspicious persons generally violates the EU Charter of Fundamental Rights” (a legal opinion quoted by <a href=\"https://en.wikipedia.org/wiki/Data_Retention_Directive\">Wikipedia</a>). The <a href=\"https://europa.eu/youreurope/citizens/consumers/internet-telecoms/data-protection-online-privacy/index_en.htm\">Data protection and online privacy</a> page on Europa.eu outlines new rules that protect your personal data, and you can learn more from the <a href=\"https://www.blueprintforfreespeech.net/en/news/eu-court-rules-users-data-cant-be-collected-by-isps-for-surveillance\">Blueprint for Free Speech’s</a> “EU Court Rules Users’ Data Can’t Be Collected by ISPs for Surveillance”.</p>\n<p><!-- [PDF](EU%20Court%20Rules%20Users%E2%80%99%20Data%20Can't%20Be%20Collected%20by%20ISPs%20for%20Surveillance) --></p>\n<p>While that’s encouraging, it’s not all good news. There are major concerns on another front: censorship.</p>\n<p>The EU is planning to launch a <a href=\"https://en.wikipedia.org/wiki/Directive_on_Copyright_in_the_Digital_Single_Market\">content filter</a> in 2022 with the goal of protecting press publications. We don’t yet know how it will be implemented, but it has the potential to break the Internet. In recent news, an upload filter passed into German law (<a href=\"https://www.spiegel.de/netzwelt/netzpolitik/urheberrecht-bundestag-beschliesst-upload-filter-a-e6d70227-741d-4a14-b7fa-3cb5bf4fee72\">details here in German</a>). Fortunately, VPNs are also an effective way to bypass censorship.</p>\n<h3 id=\"australia\">Australia</h3>\n<p>The Australian <a href=\"https://www.homeaffairs.gov.au/about-us/our-portfolios/national-security/lawful-access-telecommunications/data-retention-obligations\">Department of Home Affairs</a> summarizes the data retention obligations Aussie ISPs are under, and <a href=\"https://www.aussiebroadband.com.au/blog/the-state-of-internet-privacy-in-australia-what-your-isp-can-actually-see/\">Aussie Broadband</a> and <a href=\"https://www.comparitech.com/blog/vpn-privacy/australias-data-retention-law-what-is-it-and-how-to-avoid-it/\">Comparitech</a> spell it out a bit more clearly. Here’s what they need to retain for two years:</p>\n<ul>\n<li>Who you called, texted, and emailed</li>\n<li>When you made those calls, texts, and emails</li>\n<li>Your location</li>\n<li>The volume of data exchanged</li>\n<li>Information about the device you use</li>\n<li>Your email address</li>\n<li>Your IP address</li>\n</ul>\n<p>One thing’s clear: ISPs aren’t required to log our browsing history. That government web page states that “Internet service providers are not required to retain a person&#8217;s web-browsing history or any data that would amount to web-browsing history.”</p>\n<p>But before you breathe a sigh of relief, <a href=\"https://www.theguardian.com/world/2020/feb/07/web-browsing-histories-are-being-given-to-australian-police-under-data-retention-powers\">The Guardian</a> reports that they’re doing it anyway, quoting Michael Manthorpe, the Commonwealth Ombudsman. He warns that some telecommunication companies are logging our web browsing histories and handing it over to law enforcement when their customers are under investigation. <a href=\"https://www.itnews.com.au/news/data-retention-ambiguity-sees-cops-given-web-browsing-histories-537650\">ITNews</a> confirms this.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/vpns-what-they-are-why-you-need-one/?utm_source=rss\">VPNs: What They Are, and Why You Need One</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/vpns-what-they-are-why-you-need-one/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=191590",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Adrian Try"
        ],
        "pubDate": [
            "Tue, 08 Jun 2021 16:00:27 GMT"
        ],
        "metaDesc": [
            "Your online privacy and security are under threat. Learn how a VPN can protect you, and which VPNs are the most reliable ones to try."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "How to Set Up VS Code for React Development"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/vs-code-react-development/?utm_source=rss\"\n              title=\"How to Set Up VS Code for React Development\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611023153vscode-react-extensions.png\"\n        alt=\"How to Set Up VS Code for React Development\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611023153vscode-react-extensions-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611023153vscode-react-extensions.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>React developers need a code editor that enables them to write React code productively. There are thousands of free extensions in VS Code&#8217;s <a style=\"font-weight:bold\" href=\"https://marketplace.visualstudio.com/vscode\">marketplace</a> that can help supercharge your development workflow. In this article, I&#8217;ll highlight a selection of extensions and settings that will drive your React coding productivity to a professional level.</strong></p>\n<p>Some of the extensions I&#8217;ll list here aren’t React specific, but they’ll increase your efficiency and coding speed nevertheless. In reality, you’ll only find a handful extensions that will be truly useful in your daily coding schedule. </p>\n<p>Implementing the tools and techniques listed in this article will probably save you hours of development work — hours that would have been wasted on resolving many small but crucial issues. They&#8217;ll also help you reduce coding mistakes. The key to productivity is to automate as many tasks as you can. The following extensions and settings will help you achieve that goal.</p>\n<h2 id=\"languagesupport\">Language Support</h2>\n<p>When you install VS Code for the first time, it will give you a lot of features out-of-the box without the use of any extensions — such as syntax highlighting for JavaScript and support for TypeScript and JSX code.</p>\n<p>Below is a snapshot of the <strong>Welcome</strong> tab. You can always find it under the <strong>Help</strong> menu.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2020/12/160830534701-fresh-vscode-install.png\" alt=\"fresh vscode install\" /></p>\n<p>This is where you need to perform the initial setup. Since our focus is on React, we&#8217;ll start by setting up JavaScript Language Extension, which will provide us with additional features essential to our coding productivity workflow.</p>\n<h3 id=\"javascriptlanguageextension\">JavaScript Language Extension</h3>\n<p>On the Welcome tab, in the <strong>Tools and languages</strong> section, click the <strong>JavaScript</strong> link to install. A reload prompt will appear, which you should click for the new feature to take effect.</p>\n<p>The JavaScript language extension provides multiple features, including:</p>\n<ul>\n<li>Intellisense</li>\n<li>Snippets</li>\n<li>JSDoc support</li>\n<li>Hover information</li>\n<li>Auto imports</li>\n</ul>\n<p>The full list and documentation for these features can be found in the <a href=\"https://code.visualstudio.com/docs/languages/javascript\">VS Code docs</a>. I highly recommend you read each feature to get acquainted on how to use them in your development workflow.</p>\n<p>Pictured below is an example of Intellisense and Auto import in action.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1609947410intellisense-auto-import-demo.gif\" alt=\"autocomplete demo\" /></p>\n<p>When the tab key is pressed, the <code>Header</code> component is imported at the top. The closing <code>&gt;</code> symbol has to be typed in, which will autocomplete the code as: <code>&lt;Header&gt;&lt;Header/&gt;</code>.</p>\n<p>After installing the JavaScript language feature, VS Code may prompt you to provide a <code>jsconfig.json</code> file at the root of your project. It isn&#8217;t necessary, but setting this up will help IntelliSense provide more accurate prompts. Here&#8217;s a sample config:</p>\n<pre><code class=\"javascript language-javascript\">{\r\n  \"compilerOptions\": {\r\n    \"module\": \"commonjs\",\r\n    \"target\": \"es6\",\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\"./*\"],\r\n      \"@/*\": [\"./src/*\"],\r\n      \"~~/*\": [\"./*\"],\r\n      \"@@/*\": [\"./*\"]\r\n    }\r\n  },\r\n  \"exclude\": [\"node_modules\", \".cache\", \"dist\"]\r\n}\r\n</code></pre>\n<p>The above configuration tells the JavaScript language server which files are part of your source code and which ones aren’t. This ensures the language service only analyzes your source code and therefore performs fast. The full configuration has been documented <a href=\"https://code.visualstudio.com/docs/languages/jsconfig\">here</a>, explaining all the possible values that can be used in <code>jsconfig.js</code>.</p>\n<h3 id=\"typescriptsupport\">TypeScript Support</h3>\n<p>TypeScript is highly recommended if you’re looking into building large-scale, complex React projects. This is because TypeScript provides type safety and thus reduces the chances of delivering buggy code on your front-end applications. VS Code does provide TypeScript language support out of the box by providing a number of features, such as:</p>\n<ul>\n<li>Syntax and Semantic Highlighting</li>\n<li>IntelliSense</li>\n<li>Snippets</li>\n<li>JS Doc support</li>\n<li>Hover information and Signature Help</li>\n<li>Formatting</li>\n<li>JSX and auto closing tags</li>\n</ul>\n<p>The full list is documented <a href=\"https://code.visualstudio.com/docs/languages/typescript\">here</a>. With TypeScript, JSX code is written in <code>.tsx</code> file extensions. When compiled, the output will result in a file with a <code>.jsx</code> extension.</p>\n<p>Do note that VS Code doesn’t provide a compiler for TypeScript. You have to install one in your global Node.js environment like this:</p>\n<pre><code class=\"bash language-bash\">npm install -g typescript\r\n</code></pre>\n<p>Alternatively, you can install the extension <a href=\"https://marketplace.visualstudio.com/items?itemName=Wscats.eno&#038;ssr=false#overview\">Compile Hero Pro</a>, which provides a compiler for TypeScript and many other languages, including:</p>\n<ul>\n<li>Less</li>\n<li>Sass, SCSS</li>\n<li>Stylus</li>\n<li>Jade</li>\n<li>Pug</li>\n</ul>\n<p>The extension provides many more configurable options on when and how to compile your TypeScript and styling code. If you’d like to learn more about setting up React and TypeScript, I’d recommend you check out our other article, “<a href=\"https://www.sitepoint.com/react-with-typescript-best-practices/\">React with TypeScript: Best Practices</a>”, for a more detailed explanation.</p>\n<h3 id=\"flow\">Flow</h3>\n<p><a href=\"https://flow.org/\">Flow</a> is Facebook&#8217;s alternative to TypeScript. It provides the same features but only works with React projects and is less popular. VS Code doesn&#8217;t support it natively, but you can install the extension <a href=\"https://marketplace.visualstudio.com/items?itemName=flowtype.flow-for-vscode\">Flow Language Support</a>, which provides a limited number of features such as IntelliSense and Rename.</p>\n<h2 id=\"keymapsettings\">Keymap Settings</h2>\n<p>If you’re migrating to VS Code from another code editor, you&#8217;ll be happy to learn you can continue using the same keyboard shortcuts that you were already used to. If you’re new to code editors, do skip this section. However, if you’ve used code editors before, you’re probably aware that re-training your muscle memory is unproductive and it takes time to adjust.</p>\n<p>On the <strong>Welcome</strong> tab, under the <strong>Settings and key bindings section</strong>, you’ll see links for installing keyboard shortcuts for Vim, Sublime, Atom and others. If you click  the <strong>others</strong> link, you&#8217;ll get a full list of keymaps you can install.</p>\n<p><img src=\"https://uploads.sitepoint.com/wp-content/uploads/2020/12/160830535002-vscode-keymaps.png\" alt=\"vscode keymaps\" /></p>\n<p>I used to be an <a href=\"https://atom.io/\">Atom</a> user before I switched to VS Code. Setting up Atom&#8217;s keymap in VS Code is as simple as clicking the <a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.atom-keybindings\">Atom link</a>. This will install the Atom Keymap extension for me. The following configuration in <code>settings.json</code> is required to make VS Code more &#8220;Atom like&#8221;:</p>\n<pre><code class=\"javascript language-javascript\">// Controls whether the prompt will show\r\n\"atomKeymap.promptV3Features\": true,\r\n\r\n// Changes the multi cursor mouse binding\r\n\"editor.multiCursorModifier\": \"ctrlCmd\",\r\n\r\n// Open folders(projects) in new window without replacing the current one\r\n\"window.openFoldersInNewWindow\": \"on\",\r\n</code></pre>\n<p>Do read the instructions provided by your keyboard shortcut extension on how to set yours up. The documentation can be found by simply clicking on the keymap extension in the Extension Bar.</p>\n<h2 id=\"emmetjsxsupport\">Emmet JSX Support</h2>\n<p>Emmet is a web development toolkit that allows you write HTML code more efficiently. If you’re new to Emmet, check out the <a href=\"https://emmet.io/\">demo</a> to see how it works.</p>\n<p>VS Code comes with Emmet built in, and it already supports JSX syntax. Unfortunately, most React starter projects use the <code>.js</code> extension. The issue with this is that VS Code doesn’t recognize such files as React code, so JSX features aren’t activated. There are two ways of fixing this:</p>\n<ol>\n<li>\n<p>Rename all your files with JSX code to <code>.jsx</code> extension (<strong>recommended</strong>)</p>\n</li>\n<li>\n<p>Configure VS Code to recognize all <code>.js</code> files as React files. Update your <code>settings.json</code> as follows:</p>\n<pre><code class=\"javascript language-javascript\">\"emmet.includeLanguages\": {\r\n  \"javascript\": \"javascriptreact\"\r\n}\r\n</code></pre>\n</li>\n</ol>\n<p>To access <code>settings.json</code>, simply go to the top menu tab then click <strong>View</strong> &gt; <strong>Command Palette</strong>. Type “settings” and then choose the option <strong>Preferences: Open Settings(JSON)</strong>. Alternatively, you can press <kbd>Ctrl</kbd> + <kbd>P</kbd> then type “settings.json” to open the file quickly. You can also use the shortcut <kbd>Ctrl</kbd> + <kbd>,</kbd> to open the UI version of Settings in a new tab. The first top right-hand corner icon button will open <code>settings.json</code> when you click on it.</p>\n<p>The second option seems to be the easiest route. Unfortunately, this causes issues with other JavaScript development tools such as <em>eslint-config-airbnb</em>, which has a ruleset that enforces the <code>.jsx</code> file extension for React code. Disabling that rule will cause other issues later on.</p>\n<p>The <a href=\"https://github.com/facebook/react/issues/3582\">official React team</a> do recommend using <code>.js</code> extension for React code. From my personal experience, it’s better to rename all files with React code to <code>.jsx</code> , and use a <code>.js</code> extension for files containing plain JavaScript code. This way, you’ll have an easier workflow with all development tools.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/vs-code-react-development/?utm_source=rss\">How to Set Up VS Code for React Development</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/vs-code-react-development/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180711",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "JavaScript"
        ],
        "dc:creator": [
            "Michael Wanyoike"
        ],
        "pubDate": [
            "Mon, 18 Jan 2021 14:00:34 GMT"
        ],
        "metaDesc": [
            "You're a React developer, using the VS Code editor. Here's a selection of VS Code extensions and settings to supercharge your React coding productivity."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Collective #667"
        ],
        "link": [
            "https://tympanus.net/codrops/collective/collective-667/"
        ],
        "dc:creator": [
            "Mary Lou"
        ],
        "pubDate": [
            "Thu, 24 Jun 2021 10:20:57 +0000"
        ],
        "guid": [
            {
                "_": "https://tympanus.net/codrops/?post_type=collective&p=55101",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "description": [
            "<p>Demystifying styled-components * Asynchronous Design Critique * Benchmarking JavaScript Memory Usage</p>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-667/\">Collective #667</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "content:encoded": [
            "<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://sandlandsleep.com/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_WOTW.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55125\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://sandlandsleep.com/\">Inspirational Website of the Week: Sandland Sleep</a></h2>\n<p class=\"ct-coll-p\">A lovely color theme with lots of type playfulness. Our pick this week.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://sandlandsleep.com/\">Get inspired</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item ct-coll-item--sponsor\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n        <a class=\"ct-coll-thumb\" href=\"https://gather.town/for-offices?utm_source=codrops&amp;utm_medium=paid&amp;utm_campaign=newsletter&amp;utm_content=immersive_offices\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_gather.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55113\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_gather.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_gather-300x300.jpg 300w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_gather-105x105.jpg 105w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<div class=\"ct-coll-sponsorship\">This content is <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://synd.co/29LDbvj\">sponsored</a> via <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://synd.co/\">Syndicate Ads</a></div>\n<h2><a href=\"https://gather.town/for-offices?utm_source=codrops&amp;utm_medium=paid&amp;utm_campaign=newsletter&amp;utm_content=immersive_offices\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" rel=\"nofollow sponsored noopener noreferrer\" target=\"_blank\">Immersive virtual offices for remote teams. Free up to 25 users.</a></h2>\n<p class=\"ct-coll-p\">Drop by a coworker&#8217;s desk, chat by the water cooler, and host game nights &#8211; with your arrow keys. Video turns on when you get close to a teammate.</p>\n<p>        <a class=\"ct-coll-link\" target=\"_blank\" href=\"https://gather.town/for-offices?utm_source=codrops&amp;utm_medium=paid&amp;utm_campaign=newsletter&amp;utm_content=immersive_offices\" rel=\"nofollow sponsored noopener noreferrer\">Try it free</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.joshwcomeau.com/react/demystifying-styled-components/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_styled.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55121\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.joshwcomeau.com/react/demystifying-styled-components/\">Demystifying styled-components</a></h2>\n<p class=\"ct-coll-p\">Josh W Comeau explains how styled components work under the hood by building a mini-clone.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.joshwcomeau.com/react/demystifying-styled-components/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/better-responsiveness-metric/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_metrics.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55118\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://web.dev/better-responsiveness-metric/\">Towards a better responsiveness metric</a></h2>\n<p class=\"ct-coll-p\">Learn about our thoughts on measuring responsiveness and give the web.dev team some feedback.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://web.dev/better-responsiveness-metric/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bitsofco.de/setting-up-a-decentralised-website/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_ire.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55115\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://bitsofco.de/setting-up-a-decentralised-website/\">Setting up a Decentralised Website (ENS + IPFS = dWeb)</a></h2>\n<p class=\"ct-coll-p\">Ire Aderinokun&#8217;s introduction to ENS names and the concept of decentralized websites.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bitsofco.de/setting-up-a-decentralised-website/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/perfect-tooltips-with-css-clipping-and-masking/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_tooltip.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55123\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://css-tricks.com/perfect-tooltips-with-css-clipping-and-masking/\">Perfect Tooltips With CSS Clipping and Masking</a></h2>\n<p class=\"ct-coll-p\">Louis Hoebregts shows how to do use CSS Clipping and Masking to create awesome tooltips.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/perfect-tooltips-with-css-clipping-and-masking/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://georgefrancis.dev/writing/generative-grid-layouts-with-quadtrees/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_codetut.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55109\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_codetut.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_codetut-298x300.jpg 298w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_codetut-105x105.jpg 105w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://georgefrancis.dev/writing/generative-grid-layouts-with-quadtrees/\">Building Generative Grid Layouts With Quadtrees</a></h2>\n<p class=\"ct-coll-p\">Learn to create harmonious generative grids based on random numbers, source images, user input, and more. By George Francis.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://georgefrancis.dev/writing/generative-grid-layouts-with-quadtrees/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_sm.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55120\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/\">A Complete Guide To Accessibility Tooling</a></h2>\n<p class=\"ct-coll-p\">Nic Chan looks into different kinds of tools to help you streamline your accessibility testing process.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.smashingmagazine.com/2021/06/complete-guide-accessibility-tooling/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.taniarascia.com/react-architecture-directory-structure/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_react.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55126\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://www.taniarascia.com/react-architecture-directory-structure/\">React Architecture: How to Structure and Organize a React Application</a></h2>\n<p class=\"ct-coll-p\">An opinionated guide to setting up the architecture for a new React application by Tania Rascia.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.taniarascia.com/react-architecture-directory-structure/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.webpagetest.org/posts/benchmarking-javascript-memory-usage/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_memory.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55117\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://blog.webpagetest.org/posts/benchmarking-javascript-memory-usage/\">Benchmarking JavaScript Memory Usage</a></h2>\n<p class=\"ct-coll-p\">Tim Kadlec on the mystery and challenges of memory usage on the web.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://blog.webpagetest.org/posts/benchmarking-javascript-memory-usage/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ishadeed.com/article/custom-scrollbars-css/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_scrollbars.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55119\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://ishadeed.com/article/custom-scrollbars-css/\">Custom Scrollbars In CSS</a></h2>\n<p class=\"ct-coll-p\">An article by Ahmad Shadeed where you&#8217;ll learn about the old and new way to style custom scrollbars in CSS.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ishadeed.com/article/custom-scrollbars-css/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://alistapart.com/article/async-design-critique-giving-feedback/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_feedback.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55112\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://alistapart.com/article/async-design-critique-giving-feedback/\">Asynchronous Design Critique: Giving Feedback</a></h2>\n<p class=\"ct-coll-p\">Erin Casali on the advantages of asynchronous feedback to collaboratively improving designs.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://alistapart.com/article/async-design-critique-giving-feedback/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://codepen.io/ste-vg/full/MWpxKYR\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_burger.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55106\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://codepen.io/ste-vg/full/MWpxKYR\">Beat Burger</a></h2>\n<p class=\"ct-coll-p\">A really cool playable burger demo by Steve Gardner.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://codepen.io/ste-vg/full/MWpxKYR\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://frontend.horse/articles/concentric-circle-spinner/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_circle.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55108\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://frontend.horse/articles/concentric-circle-spinner/\">Concentric Circle Spinner</a></h2>\n<p class=\"ct-coll-p\">A cool spinner made only with divs, some border tricks, and one CSS animation.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://frontend.horse/articles/concentric-circle-spinner/\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/how-to-create-css-charts-with-interesting-shapes-glyphs-and-emoji/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_charts.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55107\" srcset=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_charts.jpg 350w, https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_charts-335x300.jpg 335w\" sizes=\"(max-width: 350px) 100vw, 350px\" /></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://css-tricks.com/how-to-create-css-charts-with-interesting-shapes-glyphs-and-emoji/\">How to Create CSS Charts With Interesting Shapes, Glyphs and Emoji</a></h2>\n<p class=\"ct-coll-p\">Preethi shows how to create CSS charts with interesting shapes.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://css-tricks.com/how-to-create-css-charts-with-interesting-shapes-glyphs-and-emoji/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/features/issues\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_githibissues.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55114\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://github.com/features/issues\">GitHub Issues</a></h2>\n<p class=\"ct-coll-p\">With the new GitHub Issues you can break issues into tasks, track relationships, add custom fields, and have conversations.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/features/issues\">Check it out</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://andysalerno.com/posts/weird-emojis/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_emoji.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55111\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://andysalerno.com/posts/weird-emojis/\">Bear plus snowflake equals polar bear</a></h2>\n<p class=\"ct-coll-p\">A super interesting article on byte size of emojis by Andy Salerno.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://andysalerno.com/posts/weird-emojis/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://pixelambacht.nl/2021/optical-size-hidden-superpower/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_variablefont.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55124\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://pixelambacht.nl/2021/optical-size-hidden-superpower/\">Optical size, the hidden superpower of variable fonts</a></h2>\n<p class=\"ct-coll-p\">Learn about the hidden superpower of variable fonts in this article by Roel Nieskens.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://pixelambacht.nl/2021/optical-size-hidden-superpower/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://letsbuildui.dev/articles/a-3d-hover-effect-using-css-transforms\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_3d.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55105\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://letsbuildui.dev/articles/a-3d-hover-effect-using-css-transforms\">A 3D Hover Effect Using CSS Transforms</a></h2>\n<p class=\"ct-coll-p\">A tutorial on creating a 3D hover interaction with JavaScript and CSS.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://letsbuildui.dev/articles/a-3d-hover-effect-using-css-transforms\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://austingil.com/svg-favicons/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_svgfavicons.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55122\"></a></p>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://austingil.com/svg-favicons/\">OMG, SVG Favicons FTW!</a></h2>\n<p class=\"ct-coll-p\">Austin Gil explores the fun new world of SVG favicons.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://austingil.com/svg-favicons/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_csspaint.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55110\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/\">Drawing Graphics with the CSS Paint API</a></h2>\n<p class=\"ct-coll-p\">A practical introduction to the CSS Paint API with hands-on code examples including particles, noise buttons and curvy dividers.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/18/drawing-graphics-with-the-css-paint-api/\">Read it</a><br />\n</article>\n</div>\n<div class=\"ct-coll-item\">\n<hr class=\"ct-coll-emailsep\" style=\"border: 0; margin: 40px auto;\">\n<article>\n <a class=\"ct-coll-thumb\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/23/inline-to-menu-link-animation/\"><img src=\"https://i7x7p5b7.stackpathcdn.com/codrops/wp-content/uploads/2021/06/C667_linkmenu.jpg\" alt=\"Collective 667 item image\" class=\"wp-image-55116\"></a></p>\n<div class=\"ct-coll-sponsorship\">From Our Blog</div>\n<h2><a target=\"_blank\" rel=\"noopener noreferrer\" style=\"display: block; padding: 1rem 0 0; text-decoration: none;\" href=\"https://tympanus.net/codrops/2021/06/23/inline-to-menu-link-animation/\">Inline to Menu Link Animation</a></h2>\n<p class=\"ct-coll-p\">An experimental inline-to-menu-link animation based on a concept by Matthew Hall.</p>\n<p><a class=\"ct-coll-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://tympanus.net/codrops/2021/06/23/inline-to-menu-link-animation/\">Check it out</a><br />\n</article>\n</div>\n<p>The post <a rel=\"nofollow\" href=\"https://tympanus.net/codrops/collective/collective-667/\">Collective #667</a> appeared first on <a rel=\"nofollow\" href=\"https://tympanus.net/codrops\">Codrops</a>.</p>\n"
        ],
        "provider": "Codrops"
    },
    {
        "title": [
            "How to Design Your Video Player with UX in Mind"
        ],
        "description": [
            "\n            <a\n              href=\"https://www.sitepoint.com/how-to-design-your-video-player-with-ux-in-mind/?utm_source=rss\"\n              title=\"How to Design Your Video Player with UX in Mind\"\n              rel=\"nofollow\"\n            >\n              <img\n        class=\"webfeedsFeaturedVisual\"\n        style=\"display: block; margin: auto; margin-bottom: 5px;max-width: 100%;\"\n        link_thumbnail=\"1\"\n        src=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611197682video-player.png\"\n        alt=\"How to Design Your Video Player with UX in Mind\"\n        srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611197682video-player-300x170.png 300w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611197682video-player.png 600w\"\n        sizes=\"(max-width: 300px) 100vw, 300px\"\n      />\n            </a>\n            <p><strong>This article explores different video player controls, their purpose, and which controls to pick for specific use cases such as learning platforms, social media platforms, power users, or mobile users. Did you know how many cool power-user controls YouTube has? Read on!</strong></p>\n<p>An engaging video player can attract more viewers. Modern video players can offer vastly more controls than the simple play–pause buttons of the early days. </p>\n<p>Take a look at YouTube nowadays. Users can navigate video segments using YouTube’s chapter functionality. This feature helps users quickly search videos for a segment that’s relevant for them.</p>\n<p>How often have you watched a video, hoping to find specific information, only to discover that it doesn&#8217;t answer your particular question? It’s frustrating!</p>\n<p>Savvy YouTubers worked out a temporary solution to this. They found it helpful to list the different segments together with timestamps in the description of the video. This solution still meant that you had to open up the description to scan for your specific question. On top of that, it just wasn’t easy for Google to index videos that handle different questions about a particular topic.</p>\n<p>Video player user experience encompasses so much more than adding chapters. A video player for an online learning platform demands different controls than a YouTube video or a simple teaser video on a product website.</p>\n<h2 id=\"whydoesuxforvideoplayersmatter\">Why Does UX for Video Players Matter?</h2>\n<p>Take a video platform like YouTube. Users consume content in various ways. Let’s explore how three different personas use YouTube:</p>\n<ol>\n<li>Alice uses YouTube to look up educational information quickly. She uses the chapter functionality to scan for relevant sections. She also uses the arrow keys to quickly skip through segments in small incremental steps to find the information she needs.</li>\n<li>Ben loves watching gaming videos. He’s a traditional power user who uses shortcuts such as <kbd>F</kbd> to enter full screen, <kbd>M</kbd> to mute, or the spacebar to pause the video. </li>\n<li>Alex loves studying with background music. He uses the YouTube autoplay functionality, so he doesn’t need to worry about selecting appropriate study music. He often selects some background music and trusts the YouTube algorithm to select similar music when a video finishes.  </li>\n</ol>\n<p>The above scenarios illustrate that a video platform hosts many different users who use it in various ways. Therefore, it’s challenging to pick the right controls and shortcuts to provide the best experience for all users.</p>\n<p>So, which video player controls can we find?</p>\n<h2 id=\"whichvideoplayercontrolsexist\">Which Video Player Controls Exist?</h2>\n<p>Many different video player controls exist. This list summarizes the controls you most often find:</p>\n<ul>\n<li><strong>Play/Pause button</strong>.</li>\n<li><strong>Skip to next video</strong>.</li>\n<li><strong>Adjust volume</strong>.</li>\n<li><strong>Toggle for subtitles</strong>.</li>\n<li><strong>Adjust screen size</strong> (mini player, theater modus, or full-screen modus). Most often, you’ll find a button to enter full-screen mode. YouTube, however, allows you to enter a theater modus that adjusts the video size to the size of your screen. They also offer a mini player so you can navigate YouTube while watching the video using a small video player.</li>\n<li><strong>Change video quality</strong>. Not everyone has an excellent internet connection. Therefore, allow users to adjust the quality. Make sure to provide an option to adjust the video quality automatically. For users with an unstable internet connection, the video player can automatically adjust the video quality depending on the connection speed. Most users prefer reduced quality to continue watching the video without interruptions.</li>\n</ul>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1611195259youtube-video-control.png\" alt=\"Image of video playing in YouTube\" width=\"640\" height=\"366\" class=\"alignnone size-full wp-image-180738\" srcset=\"https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611195259youtube-video-control.png 640w, https://uploads.sitepoint.com/wp-content/uploads/2021/01/1611195259youtube-video-control-300x172.png 300w\" sizes=\"(max-width: 640px) 100vw, 640px\" /></p>\n<p>Less common controls include the following:</p>\n<ul>\n<li><strong>Adjust video player speed</strong>. This control allows you to slow down or speed up the video. You can most commonly adjust the video player speed in steps of 25% between a range of 0.25 and 2.</li>\n<li><strong>Toggle to enable autoplay functionality</strong>. Useful for listening to music or you prefer the content algorithm to decide what you watch next.</li>\n<li><strong>Rewind and fast-forward</strong>. Although useful, this control is mostly hidden. For example, YouTube only allows you to use this control using keyboard shortcuts. Few video players implement this functionality as part of their default video controls.</li>\n<li><strong>Settings</strong>. YouTube implements a gear icon as part of their default set of controls. However, YouTube’s video player is complex. They use the settings control to hide other video controls that are infrequently used. </li>\n</ul>\n<p><img loading=\"lazy\" src=\"https://editor.sitepoint.com/wp-content/uploads/2021/01/1611195318youtube-settings.gif\" alt=\"YouTube settings\" width=\"532\" height=\"400\" class=\"alignnone size-full wp-image-180739\" /></p>\n<p>Lastly, we shouldn’t forget how we display the current timestamp and the video length. The most straightforward solution is first to show the current video timestamp, followed by the total video length. In this example, we’ve paused the video at 40 seconds with a total video length of two minutes and 13 seconds — “0:40 / 2:13”. On the other hand, some video players show the remaining length of the video. <em>Don’t do this</em>, as it’s confusing for the user. </p>\n<p>The next section takes a look at common and more experimental keyboard shortcuts to navigate a video player.</p>\n\n            <p>\n              Continue reading\n              <a rel=\"nofollow\" href=\"https://www.sitepoint.com/how-to-design-your-video-player-with-ux-in-mind/?utm_source=rss\">How to Design Your Video Player with UX in Mind</a>\n              on <a rel=\"nofollow\" href=\"https://www.sitepoint.com\">SitePoint</a>.\n            </p>\n          "
        ],
        "link": [
            "https://www.sitepoint.com/how-to-design-your-video-player-with-ux-in-mind/?utm_source=rss"
        ],
        "guid": [
            {
                "_": "/?p=180734",
                "$": {
                    "isPermaLink": "false"
                }
            }
        ],
        "category": [
            "Web"
        ],
        "dc:creator": [
            "Michiel Mulders"
        ],
        "pubDate": [
            "Wed, 20 Jan 2021 14:00:54 GMT"
        ],
        "metaDesc": [
            "Choosing an online video player? Building one? Wait! It's not just about looks. Learn about cool UX features now available, and why they're so important."
        ],
        "provider": "Sitepoint"
    },
    {
        "title": [
            "Jake and Surma look at ten Web performance pitfalls"
        ],
        "link": [
            "https://frontendfoc.us/issues/496"
        ],
        "description": [
            "\n\n  \n\n    \n    \n    \n    \n    \n  \n\n\n\n\n<table border=0 cellpadding=0 cellspacing=0 align=\"center\" border=\"0\">\n  <tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <div>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n      <table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0>\n        <tr>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <a href=\"https://frontendfoc.us/link/110104/rss\" style=\" color: #D94306; font-weight: 600;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1602675575/hhmdxfk96fnbq3effjk1.png\" width=\"60\" style=\"margin-top: 7px;     line-height: 100%; \"></a>\n          </td>\n          <td align=\"left\" style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n            <div style=\"margin-left: 25px; color: #fff;\">\n<p>Frontend Focus</p>\n<p>#​496 — June 23, 2021 | <a href=\"https://frontendfoc.us/link/110105/rss\" style=\"color: #fff;  font-weight: 600;\">Read on the web</a></p>\n</div>\n          </td>\n        </tr>\n      </table>\n     </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110106/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1624454713/fswjjxykcutoxbpiixzq.jpg\" width=\"640\" style=\"      line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110106/rss\" title=\"www.matthewgerstman.com\" style=\" color: #D94306; font-size: 1.15em; line-height: 1.25em; font-weight: 400;\">A History of the Web</a></span> — Matthew shares a look back at how the web has evolved into what we have today (<em>going from the first HTML spec, right up to modern day React</em>), along with thoughts as to why building web applications is so hard here in 2021.</p>\n  <p>Matthew Gerstman </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\">▶  <a href=\"https://frontendfoc.us/link/110115/rss\" title=\"youtu.be\" style=\" color: #D94306;\">Top 10 Web Performance Pitfalls</a></span> — Jake and Surma run through some of the top web performance issues they’ve seen recently across a bunch of sites.</p>\n  <p>Google Chrome Developers </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/110107/rss\" style=\" color: #D94306;\"><img src=\"https://copm.s3.amazonaws.com/d73052fe.png\" width=\"\" height=\"\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110107/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">Resolve Bugs and Manage Website Feedback Fast with BugHerd</a></span> — Simple, effective QA and user acceptance testing. Pin bugs and feedback to your website. BugHerd captures all the technical information you need to replicate bugs and solve issues like a screenshot, and browser and OS information.</p>\n  <p>BugHerd <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110132/rss\" title=\"brave.com\" style=\" color: #D94306;\">Brave Unveils New 'Brave Search' Search Engine</a></span> — Brave, perhaps better known for its privacy oriented browser, has unveiled <a href=\"https://frontendfoc.us/link/110133/rss\" style=\" color: #D94306;\">Brave Search</a>, a new privacy-oriented search engine of its own. Their biggest claim is it’s built upon “a completely independent index” and there’s no tracking at all.</p>\n  <p>Brave </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110108/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306;\">A Complete Guide To Accessibility Tooling</a></span> — A look into different kinds of tools to help you streamline your accessibility testing process.</p>\n  <p>Nic Chan </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n<p><strong>⚡️ Quick bits:</strong></p>\n                  <ul>\n                  \n                  <li>Microsoft and Google have <a href=\"https://frontendfoc.us/link/110109/rss\" style=\" color: #D94306; font-weight: 600;\">collaborated to bring support for dark mode form controls</a> to Chromium.</li>\n                  \n                  \n                  <li>AMP is <a href=\"https://frontendfoc.us/link/110110/rss\" style=\" color: #D94306; font-weight: 600;\">no longer an eligibility factor</a> when ranking in Google search.</li>\n                  \n                  <li>\n<a href=\"https://frontendfoc.us/link/110111/rss\" style=\" color: #D94306; font-weight: 600;\">This page from Marko Denic</a> has a ton of handy HTML tips that are worth remembering.</li>\n                  \n                                    \n                  <li>Tim Berners-Lee has <a href=\"https://frontendfoc.us/link/110112/rss\" style=\" color: #D94306; font-weight: 600;\">defended his decision to auction an NFT</a> representing the 'source code' to the web.</li>\n\n                  </ul>\n                                \n  </td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>📙 <strong>Tutorials, Articles &amp; Opinion</strong></p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110113/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1624448753/n9zzgixwcicragoh7dtw.jpg\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110113/rss\" title=\"ishadeed.com\" style=\" color: #D94306;\">Custom Scrollbars In CSS</a></span> — You may have spotted these and been curious about how to do it yourself. Ahmad does a great job of running through both the old and new way to style these custom scrollbars here, with plenty of details and visual examples.</p>\n  <p>Ahmad Shadeed </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110114/rss\" title=\"ishadeed.com\" style=\" color: #D94306;\">Let's Learn About Aspect Ratios in CSS</a></span> — Another from Ahmad, this time looking at how to use the native CSS <code>aspect-ratio</code> property.</p>\n  <p>Ahmad Shadeed </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110116/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/v1624448243/ci7vwkw2jvpgpu0hf8yb.gif\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110116/rss\" title=\"pixelambacht.nl\" style=\" color: #D94306;\">Optical Size, The Hidden Superpower of Variable Fonts</a></span> — A font with an optical size axis allows for more detail to be shown when used at larger sizes. Neat.</p>\n  <p>Roel Nieskens </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110131/rss\" title=\"srv.buysellads.com\" style=\" color: #D94306;\">Watch Gavin Strange’s Series of Design Classes on Editor X</a></span></p>\n  <p>Editor X <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110117/rss\" title=\"web.dev\" style=\" color: #D94306;\">Towards a Better Responsiveness Metric</a></span> — The Chrome Speed Metrics team shares some ideas around improving how they measure responsiveness, and ask for your feedback on the matter.</p>\n  <p>Moreno, Sullivan, Song </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110118/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Perfect Tooltips with CSS Clipping and Masking</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Louis Hoebregts</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110119/rss\" style=\" color: #D94306; font-weight: 400 !important;\">A Comprehensive Guide to Front End Testing</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Perfecto</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110120/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Detect Unused Classes in... HTML</a></span>\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Chris Coyier</span> \n  </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px;\">\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>Jobs</p></td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\">\n  <p><span style=\"font-weight: 600; font-size: 1.0em; color: #000;\"><a href=\"https://frontendfoc.us/link/110121/rss\" style=\" color: #D94306; font-weight: 400 !important;\">Senior Front End Engineer at Sakari (San Francisco)</a></span> — Build the Next-Gen Messaging Platform. Join our small agile team to help build chatbots, AI &amp; voice using React, Mongo &amp; Node.js.\n  <br><span style=\"color: #5a5a5a; margin-top: 4px; text-transform: uppercase; font-size: 12px; line-height: 1.2em;\">Sakari</span> \n  </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 15px;\"><p>🧑‍💻 Got a job listing to share? <em><a href=\"https://frontendfoc.us/link/110122/rss\" style=\" color: #D94306; font-weight: 600;\">Here's how</a></em>.</p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0;\"><p>🔧 <strong> Code, Tools and Resources</strong></p></td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \">\n  <a href=\"https://frontendfoc.us/link/110127/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/w_1280,e_sharpen:60/xddu1zahgr6yjgvi9x1k.jpg\" width=\"640\" style=\"    line-height: 100%;  \"></a>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110127/rss\" title=\"toastui.medium.com\" style=\" color: #D94306;\">TOAST UI Editor 3.0 Is Here</a></span> — The latest version of a popular open-source JavaScript library for editing Markdown documents through both text and WYSIWYG. Has things like syntax highlighting, scroll syncing, live preview, chart support, and more.</p>\n  <p>TOAST UI </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110123/rss\" title=\"www.smashingmagazine.com\" style=\" color: #D94306;\">Useful Front-End Boilerplates and Starter Kits</a></span> — We don’t need to write <em>everything</em> from scratch every single time. With boilerplates and starter kits, we can set up our projects faster, and get to work immediately.</p>\n  <p>Cosima Mielke </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110126/rss\" title=\"retool.com\" style=\" color: #D94306;\">What Are the Best React Component Libraries?</a></span> — Our team researched the best React component libraries so you don’t have to.</p>\n  <p>Retool <span style=\"text-transform: uppercase; margin-left: 4px; font-size: 0.9em;   color: #997 !important; padding: 1px 4px; \">sponsor</span></p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110134/rss\" title=\"utopia.app\" style=\" color: #D94306;\">Utopia: A New Browser-Based React IDE</a></span> — Although only in alpha release, Utopia makes a positive first impression. The founding principle of the new browser-based IDE is that design and coding processes should be fully integrated from the outset with easy, two way navigation between the two. Take a test drive with the <em>'Play with Utopia'</em> button on their landing page. There was <a href=\"https://frontendfoc.us/link/110135/rss\" style=\" color: #D94306;\">a lot of discussion</a> about this tool on Hacker News, too.</p>\n  <p>Utopia </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110124/rss\" title=\"javier.xyz\" style=\" color: #D94306;\">Pintr: Generate Single-Line SVG Illustrations from a Photo</a></span> — You can select the level of contrast and definition then download in PNG or SVG format.</p>\n  <p>Javier Bórquez </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  <a href=\"https://frontendfoc.us/link/110125/rss\" style=\" color: #D94306;\"><img src=\"https://res.cloudinary.com/cpress/image/upload/v1624455531/fyng4wssf6jxd4551vfu.gif\" width=\"75\" height=\"\" style=\"padding-top: 12px; padding-left: 12px;     line-height: 100%; \"></a>\n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110125/rss\" title=\"frontend.horse\" style=\" color: #D94306;\">Concentric Circle Spinner</a></span> — A cool spinner made only with divs, some border tricks, and one CSS animation.</p>\n  <p>Alex Trost (via Luke Richardville) </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110128/rss\" title=\"snappify.io\" style=\" color: #D94306;\">snappify: Create Images of Beautiful Code Snippets</a></span> — There are a few of these types of tools available. This one includes a number of different options for customizing the color, syntax, background, etc, of the code blocks.</p>\n  <p>Anki and Dominik </p>\n</td></tr></table>\n\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\"font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;    padding: 0px 18px;\">\n  \n  <p><span style=\"font-weight: 400 !important; font-size: 1.3em !important; color: #000;\"><a href=\"https://frontendfoc.us/link/110129/rss\" title=\"testing-playground.com\" style=\" color: #D94306;\">Testing Playground: A Simple and Complete DOM Testing Playground That Encourages Good Testing Practices</a></span> — Based on <a href=\"https://frontendfoc.us/link/110130/rss\" style=\" color: #D94306;\">Testing Library</a>, which we’ve featured before. Similar to a JS fiddle-type environment, but with a focus on testing.</p>\n  <p>Stephan Meijer </p>\n</td></tr></table>\n<table border=0 cellpadding=0 cellspacing=0 border=0 cellpadding=0 cellspacing=0><tr><td style=\" font-family: -apple-system,BlinkMacSystemFont,Helvetica,sans-serif; font-size: 15px; line-height: 1.55em;   \"></td></tr></table>\n\n            \n    </div>\n  </td></tr>\n</table>\n\n\n\n\n<img src=\"https://frontendfoc.us/open/496/rss\" width=\"1\" height=\"1\" />"
        ],
        "pubDate": [
            "Wed, 23 Jun 2021 00:00:00 +0000"
        ],
        "guid": [
            "https://frontendfoc.us/issues/496"
        ],
        "provider": "Frontend Focus"
    }
]