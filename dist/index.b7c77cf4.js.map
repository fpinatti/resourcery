{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["/* global chrome, google */\ndocument.addEventListener('DOMContentLoaded', () => {\n  let fullData\n  const modalBody = document.querySelector('.modal-body')\n  let city = ''\n\n  const buildPostsList = (postsList) => {\n    const listWrapper = document.querySelector('.posts__list')\n    const rowTemplate = document.querySelector('.post-template')\n    fullData = postsList\n\n    postsList.forEach((item, idx) => {\n      if (!item['content:encoded']) {\n        item['content:encoded'] = item.description\n      }\n      const clonedItem = rowTemplate.content.cloneNode(true)\n      clonedItem.querySelector('.post__title').innerText = item.title\n      clonedItem.querySelector('.post__provider').innerText = item.providerTitle\n      clonedItem.querySelector('.post__provider').setAttribute('href', item.providerURL)\n      clonedItem.querySelector('.posts__list-item').setAttribute('data-provider', item.providerTitle)\n      clonedItem.querySelector('.post__description').innerHTML = `${String(item.description).substring(0, 130)}...`\n      clonedItem.querySelector('.post__link').setAttribute('href', item.link)\n      clonedItem.querySelector('.btn-modal').setAttribute('data-idx', idx)\n      listWrapper.append(clonedItem)\n    })\n  }\n\n  const fetchResources = () => {\n    const rssFetch = new Request('https://resourcery.vercel.app/feed.json')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    fetch(rssFetch, options)\n      .then(response => response.json())\n      .then(data => {\n        buildPostsList(data)\n      })\n      .catch(console.error)\n  }\n\n  const getLocation = () => {\n    const location = new Request('https://geolocation-db.com/json/59e89620-db25-11eb-ad48-73c00c9b92a3')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    return fetch(location, options)\n      .then(response => response.json())\n      .then(data => {\n        city = data.city.toLowerCase()\n      })\n      .catch(console.error)\n  }\n\n  const fetchWeather = () => {\n    const endpointWeather = new Request(`https://resourcery.vercel.app/weather-${city}.json`)\n    const options = {\n      method: 'GET'\n    }\n    fetch(endpointWeather, options)\n      .then(response => response.json())\n      .then(data => {\n        const cityName = document.querySelector('.city-name')\n        const cityTemp = document.querySelector('.city-temp')\n        const citySky = document.querySelector('.city-sky')\n        const weatherIcon = document.querySelector('.icon-weather')\n        const weatherWrapper = document.querySelector('.weather-wrapper')\n        cityName.innerText = city\n        cityTemp.innerText = Math.round(data.main.feels_like)\n        citySky.innerText = data.weather[0].description\n        weatherIcon.setAttribute('src', `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`)\n        weatherWrapper.classList.remove('d-none')\n      })\n      .catch(console.error)\n  }\n\n  const setGreetings = () => {\n    const myDate = new Date()\n    const hourOfDay = myDate.getHours()\n    const greet = document.querySelector('.greet')\n    let greetString = 'Hello'\n    if (hourOfDay > 5 && hourOfDay <= 12) {\n      greetString = 'Good morning'\n    }\n    if (hourOfDay > 12 && hourOfDay <= 18) {\n      greetString = 'Good afternoon'\n    }\n    if (hourOfDay > 18 && hourOfDay <= 23) {\n      greetString = 'Good night'\n    }\n    if (hourOfDay >= 0 && hourOfDay < 5) {\n      greetString = 'It\\'s late'\n    }\n\n    greet.innerText = greetString\n  }\n\n  const initModal = () => {\n    const myModal = document.getElementById('contentModal')\n    myModal.addEventListener('show.bs.modal', function (evt) {\n      const element = fullData[evt.relatedTarget.getAttribute('data-idx')]\n      modalBody.innerHTML = element['content:encoded']\n    })\n  }\n\n  const onNameChange = (evt) => {\n    localStorage.setItem('rscry-un', evt.target.value)\n  }\n\n  const onCalendarChange = (evt) => {\n    localStorage.setItem('rscry-uc', evt.target.value)\n  }\n\n  const addListeners = () => {\n    // calendarField.addEventListener('change', onCalendarChange)\n    document.querySelector('button#oauthButton').addEventListener('click', function () {\n      chrome.runtime.sendMessage({ message: 'get_auth_token' })\n      chrome.runtime.sendMessage({ message: 'get_profile' })\n      chrome.runtime.sendMessage({ message: 'get_user_information' })\n      chrome.runtime.sendMessage({ message: 'get_calendar_list' })\n      chrome.runtime.sendMessage({ message: 'get_calendar_by_id' })\n    })\n    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n      if(request.action === 'chrome-message') {\n        onGetChromeMessage(request.message, request.data)\n      }\n    })\n  }\n\n  const onGetChromeMessage = (message, objData) => {\n    switch (message) {\n      case 'user_profile':\n        break;\n      case 'user_info': {\n        const nameField = document.querySelector('.userName')\n        nameField.innerText = objData.names[0].displayName;\n        //nameField.addEventListener('change', onNameChange)\n        break;\n      }\n    }\n    console.log(message, objData)\n  }\n\n  const getUserPrefs = () => {\n    const userName = localStorage.getItem('rscry-un')\n    const userCalendar = localStorage.getItem('rscry-uc')\n    if (userName) {\n      const nameField = document.querySelector('.userName')\n      nameField.value = localStorage.getItem('rscry-un')\n    }\n    if (userCalendar) {\n      const calendarField = document.querySelector('.userCalendar')\n      calendarField.value = localStorage.getItem('rscry-uc')\n      const calendar = document.querySelector('.calendar-frame')\n      calendar.setAttribute('src', localStorage.getItem('rscry-uc'))\n    }\n  }\n\n  const getCalendar = () => {\n\n    // return calendar list\n    // need scope https://www.googleapis.com/auth/calendar.readonly\n    // GET https://www.googleapis.com/calendar/v3/users/me/calendarList\n\n    // get calendar with id\n    // GET https://www.googleapis.com/calendar/v3/calendars/calendarId\n  }\n\n  // https://developers.google.com/identity/sign-in/web/sign-in\n  const getBasicProfile = (googleUser) => {\n    const profile = googleUser.getBasicProfile()\n    console.log('ID: ' + profile.getId()) // Do not send to your backend! Use an ID token instead.\n    console.log('Name: ' + profile.getName())\n    console.log('Image URL: ' + profile.getImageUrl())\n    console.log('Email: ' + profile.getEmail()) // This is null if the 'email' scope is not present.\n  }\n\n  const handleCredentialResponse = () => {\n    console.log('111')\n  }\n  window.onload = function () {\n    google.accounts.id.initialize({\n      client_id: '85500286524-e912nst858563iib207gbhhmcg240fol.apps.googleusercontent.com',\n      callback: handleCredentialResponse\n    })\n    // google.accounts.id.prompt();\n  }\n\n  // https://developer.chrome.com/docs/apps/app_identity/\n  fetchResources()\n  getLocation()\n    .then(() => {\n      fetchWeather()\n      setGreetings()\n    })\n  initModal()\n  addListeners()\n  getUserPrefs()\n\n  // getCalendar()\n})\n"],"names":["document","addEventListener","fullData","modalBody","querySelector","city","onGetChromeMessage","message","objData","innerText","names","displayName","console","log","handleCredentialResponse","window","onload","google","accounts","id","initialize","client_id","callback","rssFetch","Request","fetch","method","then","response","json","data","postsList","listWrapper","rowTemplate","forEach","item","idx","description","clonedItem","content","cloneNode","title","providerTitle","setAttribute","providerURL","innerHTML","String","substring","link","append","buildPostsList","catch","error","fetchResources","location","toLowerCase","getLocation","endpointWeather","cityName","cityTemp","citySky","weatherIcon","weatherWrapper","Math","round","main","feels_like","weather","icon","classList","remove","fetchWeather","hourOfDay","Date","getHours","greetString","setGreetings","getElementById","evt","element","relatedTarget","getAttribute","chrome","runtime","sendMessage","onMessage","addListener","request","sender","sendResponse","action","userName","localStorage","getItem","userCalendar","value","getUserPrefs"],"version":3,"file":"index.b7c77cf4.js.map","sourceRoot":"../"}