{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["/* global chrome */\ndocument.addEventListener('DOMContentLoaded', () => {\n  let fullData\n  let userEmail\n  const modalBody = document.querySelector('.modal-body')\n  let city = ''\n  const userRole = { id: '', name: '' }\n\n  const buildPostsList = (postsList) => {\n    const listWrapper = document.querySelector('.posts__list')\n    const rowTemplate = document.querySelector('.post-template')\n    fullData = postsList\n\n    postsList.forEach((item, idx) => {\n      if (!item['content:encoded']) {\n        item['content:encoded'] = item.description\n      }\n      const clonedItem = rowTemplate.content.cloneNode(true)\n      clonedItem.querySelector('.post__title').innerText = item.title\n      clonedItem.querySelector('.post__provider').innerText = item.providerTitle\n      clonedItem.querySelector('.post__provider').setAttribute('href', item.providerURL)\n      clonedItem.querySelector('.posts__list-item').setAttribute('data-provider', item.providerTitle)\n      clonedItem.querySelector('.posts__list-item').setAttribute('data-idx', item.providerIdx)\n      clonedItem.querySelector('.post__description').innerHTML = `${String(item.description).substring(0, 130)}...`\n      clonedItem.querySelector('.post__link').setAttribute('href', item.link)\n      clonedItem.querySelector('.btn-modal').setAttribute('data-idx', idx)\n      listWrapper.append(clonedItem)\n    })\n  }\n\n  const fetchResources = (userRole) => {\n    if (!userRole) userRole = 'fe'\n    const rssFetch = new Request(`https://resourcery.vercel.app/feed-${userRole}.json`)\n    const options = {\n      method: 'GET'\n    }\n    fetch(rssFetch, options)\n      .then(response => response.json())\n      .then(data => {\n        buildPostsList(data)\n      })\n      .catch(console.error)\n  }\n\n  const getLocation = () => {\n    const location = new Request('https://geolocation-db.com/json/59e89620-db25-11eb-ad48-73c00c9b92a3')\n    const options = {\n      method: 'GET'\n    }\n    return fetch(location, options)\n      .then(response => response.json())\n      .then(data => {\n        city = data.city.toLowerCase()\n      })\n      .catch(console.error)\n  }\n\n  const fetchWeather = () => {\n    const endpointWeather = new Request(`https://resourcery.vercel.app/weather-${city}.json`)\n    const options = {\n      method: 'GET'\n    }\n    fetch(endpointWeather, options)\n      .then(response => response.json())\n      .then(data => {\n        const cityName = document.querySelector('.city-name')\n        const cityTemp = document.querySelector('.city-temp')\n        const citySky = document.querySelector('.city-sky')\n        const weatherIcon = document.querySelector('.icon-weather')\n        const weatherWrapper = document.querySelector('.weather-wrapper')\n        cityName.innerText = city\n        cityTemp.innerText = Math.round(data.main.feels_like)\n        citySky.innerText = data.weather[0].description\n        weatherIcon.setAttribute('src', `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`)\n        weatherWrapper.classList.remove('d-none')\n      })\n      .catch(console.error)\n  }\n\n  const setGreetings = () => {\n    const myDate = new Date()\n    const hourOfDay = myDate.getHours()\n    const greet = document.querySelector('.greet')\n    let greetString = 'Hello'\n    if (hourOfDay > 5 && hourOfDay <= 12) {\n      greetString = 'Good morning'\n    }\n    if (hourOfDay > 12 && hourOfDay <= 18) {\n      greetString = 'Good afternoon'\n    }\n    if (hourOfDay > 18 && hourOfDay <= 23) {\n      greetString = 'Good night'\n    }\n    if (hourOfDay >= 0 && hourOfDay < 5) {\n      greetString = 'It\\'s late'\n    }\n\n    greet.innerText = greetString\n  }\n\n  const initModal = () => {\n    const myModal = document.getElementById('contentModal')\n    myModal.addEventListener('show.bs.modal', function (evt) {\n      const element = fullData[evt.relatedTarget.getAttribute('data-idx')]\n      modalBody.innerHTML = element['content:encoded']\n    })\n  }\n\n  const addListeners = () => {\n    document.querySelector('#oauthButton').addEventListener('click', function () {\n      chrome.runtime.sendMessage({\n        message: 'get_auth_token'\n      })\n    })\n\n    document.querySelector('#unauthButton').addEventListener('click', function () {\n      chrome.identity.clearAllCachedAuthTokens(() => {\n        isUserAuth()\n      })\n    })\n\n    chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n      if (request.action === 'chrome-message') {\n        onGetChromeMessage(request.message, request.data)\n      }\n    })\n\n    document.querySelector('.btn-options').addEventListener('click', (evt) => {\n      chrome.runtime.openOptionsPage()\n    })\n  }\n\n  const onGetChromeMessage = (message, objData) => {\n    switch (message) {\n      case 'user_token':\n        onUserToken(objData)\n        break\n      case 'user_profile':\n\n        break\n      case 'user_info': {\n        userEmail = objData.emailAddresses[0].value\n        const nameField = document.querySelector('.userName')\n        nameField.innerText = upperCaseNameFirstLetters(objData.names[0].displayName)\n        break\n      }\n      case 'user_calendar_events': {\n        buildCalendarEvents(objData)\n        break\n      }\n      case 'user_calendar_list': {\n        break\n      }\n    }\n  }\n\n  const onUserToken = (token) => {\n    isUserAuth()\n    chrome.runtime.sendMessage({\n      message: 'get_profile'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_user_information'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_list'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_by_id'\n    })\n  }\n\n  const buildCalendarEvents = (objData) => {\n    const calendarList = document.querySelector('.calendar-list')\n    const calendarEvent = document.querySelector('.calendar-event')\n    const eventList = filterEventList(objData)\n    const sortEvents = sortEventsByStartDate(eventList)\n\n    sortEvents.forEach((event) => {\n      const clonedEvent = calendarEvent.content.cloneNode(true)\n      if (event.eventLive) {\n        clonedEvent.querySelector('.calendar-event-item').classList.add('event-live')\n      }\n      clonedEvent.querySelector('.event-summary').innerText = event.summary\n      if (event.hangoutLink) {\n        clonedEvent.querySelector('.event-hangout').setAttribute('href', event.hangoutLink)\n        clonedEvent.querySelector('.event-hangout').classList.remove('d-none')\n      }\n      clonedEvent.querySelector('.event-start-time').innerText = event.eventStartPretty\n      clonedEvent.querySelector('.event-duration').innerText = event.eventDuration\n      if (event.attendees) {\n        const attendeeStatus = getAttendeeResponseStatus(event.attendees)\n        clonedEvent.querySelector('.calendar-event-item').classList.add(attendeeStatus)\n      }\n      calendarList.append(clonedEvent)\n    })\n  }\n\n  const getPrettyHourMinute = (strDate) => {\n    const tmpDate = new Date(strDate)\n    let prettyTime = `${tmpDate.getHours()}h`\n    if (tmpDate.getMinutes()) {\n      prettyTime = `${prettyTime}${tmpDate.getMinutes()}m`\n    }\n    return prettyTime\n  }\n\n  const getDateDiff = (eventStart, eventEnd) => {\n    const startDate = new Date(eventStart)\n    const endDate = new Date(eventEnd)\n    const diffDate = (endDate.getTime() - startDate.getTime()) / 60000\n    return diffDate\n  }\n\n  const isEventLive = (eventStart, eventEnd) => {\n    const startDate = new Date(eventStart)\n    const endDate = new Date(eventEnd)\n    const currentDate = new Date()\n    const isLive = currentDate >= startDate &&\n      currentDate <= endDate\n    return isLive\n  }\n\n  const getAttendeeResponseStatus = (attendees) => {\n    let attendeeStatus\n    attendees.forEach((attendee) => {\n      if (attendee.email === userEmail) {\n        attendeeStatus = attendee.responseStatus\n      }\n    })\n    return attendeeStatus\n  }\n\n  const filterEventList = (objData) => {\n    const filteredData = []\n    objData.items.forEach((event) => {\n      const eventStart = event.originalStartTime?.dateTime || event.start?.dateTime\n      // FIX this indexof is used to avoid event duplication, but I'm not really confident this is the best way\n      if (event.summary && eventStart && event.id.indexOf('_') === -1) {\n        event.eventStartPretty = getPrettyHourMinute(eventStart)\n        const eventEnd = event.end?.dateTime\n        event.eventDuration = `${getDateDiff(eventStart, eventEnd)}min`\n        event.eventLive = isEventLive(eventStart, eventEnd)\n        filteredData.push(event)\n      }\n    })\n\n    filteredData.sort((a, b) => {\n      return new Date(b.originalStartTime?.dateTime || b.start?.dateTime) - new Date(a.originalStartTime?.dateTime || a.start?.dateTime)\n    })\n\n    return filteredData\n  }\n\n  const sortEventsByStartDate = (events) => {\n    const formattedEvents = addMillisecondsPropertyToEvents(events)\n\n    const result = formattedEvents.sort((a, b) => {\n      if (a.startDateInMilliseconds < b.startDateInMilliseconds) return -1\n      if (a.startDateInMilliseconds > b.startDateInMilliseconds) return 1\n\n      return 0\n    })\n\n    return result\n  }\n\n  const addMillisecondsPropertyToEvents = (events) => {\n    events.forEach(event => {\n      // \"2021-12-06T12:00:00-03:00\"\n      const hour = event.start.dateTime.split('T')[1].split('-')[0]\n      // \"12:00:00\"\n      const ms = Number(hour.split(':')[0]) * 60 * 60 * 1000 + Number(hour.split(':')[1]) * 60 * 1000\n\n      event.startDateInMilliseconds = ms\n    })\n\n    return events\n  }\n\n  const upperCaseNameFirstLetters = (name) => {\n    try {\n      const splitStr = name.toLowerCase().split(' ')\n\n      for (let i = 0; i < splitStr.length; i++) {\n        if (splitStr[i].length > 1) {\n          splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n        }\n      }\n\n      return splitStr.join(' ')\n    } catch (error) {\n      console.log(error)\n      return name\n    }\n  }\n\n  const checkUserProfile = () => {\n    chrome.runtime.sendMessage({\n      message: 'get_profile'\n    })\n  }\n\n  const isUserAuth = () => {\n    try {\n      chrome.identity.getAuthToken({\n        interactive: false\n      }, (token) => {\n        const isAuth = token || false\n        resetUIAuthStatus()\n        const statusClass = (isAuth) ? '.userstatus-auth' : '.userstatus-unauth'\n        const statusElements = document.querySelectorAll(statusClass)\n        statusElements.forEach((element) => {\n          element.classList.add('d-block')\n        })\n        if (isAuth) {\n          document.querySelector('body').classList.add('is-auth')\n          getAuthInfo()\n        }\n      })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const resetUIAuthStatus = () => {\n    document.querySelector('.calendar-list').textContent = ''\n    document.querySelector('body').classList.remove('is-auth')\n    const authElements = document.querySelectorAll('.userstatus-auth')\n    const unauthElements = document.querySelectorAll('.userstatus-unauth')\n    authElements.forEach((element) => {\n      element.classList.remove('d-block')\n      element.classList.remove('d-none')\n    })\n    unauthElements.forEach((element) => {\n      element.classList.remove('d-block')\n      element.classList.remove('d-none')\n    })\n  }\n\n  const getAuthInfo = () => {\n    chrome.runtime.sendMessage({\n      message: 'get_user_information'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_list'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_by_id'\n    })\n  }\n\n  const getPrefs = () => {\n    chrome.storage.sync.get({\n      role: ''\n    }, (data) => {\n      const arr = data.role.split('||')\n      userRole.id = arr[0]\n      userRole.name = arr[1]\n      fetchResources(userRole.id)\n      const roleTitle = document.querySelector('.role-title')\n      roleTitle.innerText = `(${userRole.name})`\n    })\n  }\n\n  getPrefs()\n  getLocation()\n    .then(() => {\n      fetchWeather()\n      setGreetings()\n    })\n  isUserAuth()\n  initModal()\n  addListeners()\n  checkUserProfile()\n})\n"],"names":["document","addEventListener","fullData","userEmail","modalBody","querySelector","city","userRole","id","name","fetchResources","rssFetch","Request","fetch","method","then","response","json","data","postsList","listWrapper","rowTemplate","forEach","item","idx","description","clonedItem","content","cloneNode","innerText","title","providerTitle","setAttribute","providerURL","providerIdx","innerHTML","String","substring","link","append","buildPostsList","catch","console","error","onGetChromeMessage","message","objData","onUserToken","emailAddresses","value","upperCaseNameFirstLetters","names","displayName","buildCalendarEvents","token","isUserAuth","chrome","runtime","sendMessage","calendarList","calendarEvent","eventList","filterEventList","sortEventsByStartDate","event","clonedEvent","eventLive","classList","add","summary","hangoutLink","remove","eventStartPretty","eventDuration","attendees","attendeeStatus","getAttendeeResponseStatus","attendee","email","responseStatus","filteredData","items","ref1","eventStart","ref","originalStartTime","dateTime","start","indexOf","strDate","tmpDate","Date","prettyTime","getHours","getMinutes","getPrettyHourMinute","eventEnd","end","startDate","getTime","getDateDiff","endDate","currentDate","isEventLive","push","sort","a","b","ref6","ref7","ref8","events","addMillisecondsPropertyToEvents","startDateInMilliseconds","hour","split","ms","Number","splitStr","toLowerCase","i","length","charAt","toUpperCase","join","log","identity","getAuthToken","interactive","isAuth","resetUIAuthStatus","statusClass","querySelectorAll","element","getAuthInfo","err","textContent","authElements","unauthElements","storage","sync","get","role","arr","location","getLocation","endpointWeather","cityName","cityTemp","citySky","weatherIcon","weatherWrapper","Math","round","main","feels_like","weather","icon","fetchWeather","hourOfDay","greetString","setGreetings","getElementById","evt","relatedTarget","getAttribute","clearAllCachedAuthTokens","onMessage","addListener","request","sender","sendResponse","action","openOptionsPage"],"version":3,"file":"index.b7c77cf4.js.map","sourceRoot":"../"}