{"mappings":"AACAA,SAASC,iBAAiB,oBAAkB,KAC1C,IAAIC,EACAC,EACJ,MAAMC,EAAYJ,SAASK,cAAc,eACzC,IAAIC,EAAO,GAEX,MA6HMC,EAAkB,CAAIC,EAASC,KACnC,OAAQD,GACN,IAAK,aACHE,EAAYD,GACZ,MACF,IAAK,eAEH,MACF,IAAK,YACHN,EAAYM,EAAQE,eAAe,GAAGC,MACpBZ,SAASK,cAAc,aAC/BQ,UAAYC,EAA0BL,EAAQM,MAAM,GAAGC,aACjE,MAEF,IAAK,uBACHC,EAAoBR,GACpB,MAEF,IAAK,qBACHS,QAAQC,IAAI,qBAAsBV,KAOlCC,EAAeU,IACnBF,QAAQC,IAAI,gBAAiBC,GAC7BC,IACAC,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,gBAEXc,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,yBAEXc,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,sBAEXc,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,wBAIPS,EAAuBR,IAC3B,MAAMgB,EAAezB,SAASK,cAAc,kBACtCqB,EAAgB1B,SAASK,cAAc,mBAC3BsB,EAAgBlB,GAExBmB,SAASC,IAEjB,MAAMC,EAAcJ,EAAcK,QAAQC,WAAU,GAQpD,GAPAF,EAAYzB,cAAc,kBAAkBQ,UAAYgB,EAAMI,QAC1DJ,EAAMK,cACRJ,EAAYzB,cAAc,kBAAkB8B,aAAa,OAAQN,EAAMK,aACvEJ,EAAYzB,cAAc,kBAAkB+B,UAAUC,OAAO,WAE/DP,EAAYzB,cAAc,qBAAqBQ,UAAYgB,EAAMS,iBACjER,EAAYzB,cAAc,mBAAmBQ,UAAYgB,EAAMU,cAC3DV,EAAMW,UAAW,CACnB,MAAMC,EAAiBC,EAAyBb,EAAMW,WACtDV,EAAYzB,cAAc,wBAAwB+B,UAAUO,IAAIF,GAElEhB,EAAamB,OAAOd,OAwBlBY,EAA4BF,IAChC,IAAIC,EAMJ,OALAD,EAAUZ,SAASiB,IACbA,EAASC,QAAU3C,IACrBsC,EAAiBI,EAASE,mBAGvBN,GAGHd,EAAmBlB,IACvB,MAAMuC,EAAe,GAgBrB,OAfAvC,EAAQwC,MAAMrB,SAASC,QACmCqB,EAAxD,MAAMC,GAAoC,QAAvBC,EAAAvB,EAAMwB,yBAAN,IAAAD,OAAA,EAAAA,EAAyBE,YAAuB,QAAXJ,EAAArB,EAAM0B,aAAN,IAAAL,OAAA,EAAAA,EAAaI,UAErE,GAAIzB,EAAMI,SAAWkB,IAAwC,IAA1BtB,EAAM2B,GAAGC,QAAQ,KAAa,KAE9CL,EADjBvB,EAAMS,iBAhCa,CAAIoB,IAC3B,MAAMC,EAAU,IAAIC,KAAKF,GACzB,IAAIG,EAAU,GAAMF,EAAQG,cAI5B,OAHIH,EAAQI,eACVF,EAAU,GAAMA,IAAaF,EAAQI,iBAEhCF,GA0BsBG,CAAoBb,GAC7C,MAAMc,EAAoB,QAATb,EAAAvB,EAAMqC,WAAN,IAAAd,OAAA,EAAAA,EAAWE,SAC5BzB,EAAMU,cAAa,GAzBR,EAAIY,EAAYc,KAC/B,MAAME,EAAY,IAAIP,KAAKT,GAG3B,OAFgB,IAAIS,KAAKK,GACCG,UAAYD,EAAUC,WAAa,KAsBhCC,CAAYlB,EAAYc,QACjDjB,EAAasB,KAAKzC,OAItBmB,EAAauB,MAAI,CAAEC,EAAGC,SACJrB,EAAiCsB,EAA8BC,EAAiCC,EAAhH,OAAO,IAAIhB,MAAwB,QAAnBR,EAAAqB,EAAEpB,yBAAF,IAAAD,OAAA,EAAAA,EAAqBE,YAAmB,QAAPoB,EAAAD,EAAElB,aAAF,IAAAmB,OAAA,EAAAA,EAASpB,WAAY,IAAIM,MAAwB,QAAnBe,EAAAH,EAAEnB,yBAAF,IAAAsB,OAAA,EAAAA,EAAqBrB,YAAmB,QAAPsB,EAAAJ,EAAEjB,aAAF,IAAAqB,OAAA,EAAAA,EAAStB,cAGpHN,GAGHlC,EAA6B+D,IACjC,IACE,MAAMC,EAAWD,EAAKE,cAAcC,MAAM,KAE1C,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IAC/BH,EAASG,GAAGC,OAAS,IACvBJ,EAASG,GAAKH,EAASG,GAAGE,OAAO,GAAGC,cAAgBN,EAASG,GAAGI,UAAU,IAI9E,OAAOP,EAASQ,KAAK,KACrB,MAAOC,GAEP,OADArE,QAAQC,IAAIoE,GACLV,IAULxD,EAAU,KAEd,IACEC,OAAOkE,SAASC,aAAa,CAAEC,aAAa,IAAUtE,IAEpD,MAAMuE,EAASvE,IAAS,EACxBwE,IACA,MAAMC,EAAeF,EAAU,mBAAqB,qBAC7B3F,SAAS8F,iBAAiBD,GAClCjE,SAASmE,IACtBA,EAAQ3D,UAAUO,IAAI,cAEpBgD,IACF3F,SAASK,cAAc,QAAQ+B,UAAUO,IAAI,WAC7CqD,QAGJ,MAAOC,GACP/E,QAAQC,IAAI,WAIVyE,EAAiB,KACrB5F,SAASK,cAAc,kBAAkB6F,YAAc,GACvDlG,SAASK,cAAc,QAAQ+B,UAAUC,OAAO,WAChD,MAAM8D,EAAenG,SAAS8F,iBAAiB,oBACzCM,EAAiBpG,SAAS8F,iBAAiB,sBACjDK,EAAavE,SAASmE,IACpBA,EAAQ3D,UAAUC,OAAO,WACzB0D,EAAQ3D,UAAUC,OAAO,aAE3B+D,EAAexE,SAASmE,IACtBA,EAAQ3D,UAAUC,OAAO,WACzB0D,EAAQ3D,UAAUC,OAAO,cAIvB2D,EAAW,KACf1E,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,yBAEXc,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,sBAEXc,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,wBAhSO,MAClB,MAAM6F,EAAW,IAAIC,QAAQ,2CAK7BC,MAAMF,EAHU,CACdG,OAAQ,QAGPC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IA7BU,CAAIC,IACtB,MAAMC,EAAc9G,SAASK,cAAc,gBACrC0G,EAAc/G,SAASK,cAAc,kBAC3CH,EAAW2G,EAEXA,EAAUjF,SAAO,CAAEoF,EAAMC,KAClBD,EAAK,qBACRA,EAAK,mBAAqBA,EAAKE,aAEjC,MAAMC,EAAaJ,EAAYhF,QAAQC,WAAU,GACjDmF,EAAW9G,cAAc,gBAAgBQ,UAAYmG,EAAKI,MAC1DD,EAAW9G,cAAc,mBAAmBQ,UAAYmG,EAAKK,cAC7DF,EAAW9G,cAAc,mBAAmB8B,aAAa,OAAQ6E,EAAKM,aACtEH,EAAW9G,cAAc,qBAAqB8B,aAAa,gBAAiB6E,EAAKK,eACjFF,EAAW9G,cAAc,sBAAsBkH,UAAS,GAAMC,OAAOR,EAAKE,aAAa7B,UAAU,EAAG,UACpG8B,EAAW9G,cAAc,eAAe8B,aAAa,OAAQ6E,EAAKS,MAClEN,EAAW9G,cAAc,cAAc8B,aAAa,WAAY8E,GAChEH,EAAYlE,OAAOuE,OAajBO,CAAed,MAEhBe,MAAMzG,QAAQqE,QAiUnBqC,GA9TiB,MACf,MAAMC,EAAW,IAAIvB,QAAQ,wEAK7B,OAAOC,MAAMsB,EAHG,CACdrB,OAAQ,QAGPC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACJtG,EAAOsG,EAAKtG,KAAKyE,iBAElB4C,MAAMzG,QAAQqE,QAoTnBuC,GACGrB,MAAI,KAlTW,MAChB,MAAMsB,EAAkB,IAAIzB,QAAO,yCAA0ChG,UAI7EiG,MAAMwB,EAHU,CACdvB,OAAQ,QAGPC,MAAKC,GAAYA,EAASC,SAC1BF,MAAKG,IACJ,MAAMoB,EAAWhI,SAASK,cAAc,cAClC4H,EAAWjI,SAASK,cAAc,cAClC6H,EAAUlI,SAASK,cAAc,aACjC8H,EAAcnI,SAASK,cAAc,iBACrC+H,EAAiBpI,SAASK,cAAc,oBAC9C2H,EAASnH,UAAYP,EACrB2H,EAASpH,UAAYwH,KAAKC,MAAM1B,EAAK2B,KAAKC,YAC1CN,EAAQrH,UAAY+F,EAAK6B,QAAQ,GAAGvB,YACpCiB,EAAYhG,aAAa,MAAK,oCAAsCyE,EAAK6B,QAAQ,GAAGC,eACpFN,EAAehG,UAAUC,OAAO,aAEjCsF,MAAMzG,QAAQqE,QAgSfoD,GA7Rc,MAChB,MACMC,GADS,IAAIhF,MACME,WAEzB,IAAI+E,EAAc,QACdD,EAAY,GAAKA,GAAa,KAChCC,EAAc,gBAEZD,EAAY,IAAMA,GAAa,KACjCC,EAAc,kBAEZD,EAAY,IAAMA,GAAa,KACjCC,EAAc,cAEZD,GAAa,GAAKA,EAAY,IAChCC,EAAc,aAZF7I,SAASK,cAAc,UAe/BQ,UAAYgI,GA4QhBC,MAEJzH,IA1QkBrB,SAAS+I,eAAe,gBAChC9I,iBAAiB,iBAAiB,SAAU+I,GAClD,MAAMjD,EAAU7F,EAAS8I,EAAIC,cAAcC,aAAa,aACxD9I,EAAUmH,UAAYxB,EAAQ,sBAMhC/F,SAASK,cAAc,gBAAgBJ,iBAAiB,SAAS,WAC/DqB,OAAOC,QAAQC,YAAY,CACzBhB,QAAS,sBAIbR,SAASK,cAAc,iBAAiBJ,iBAAiB,SAAS,WAChEqB,OAAOkE,SAAS2D,0BAAwB,KACtC9H,UAQJC,OAAOC,QAAQ6H,UAAUC,aAAY,SAAUC,EAASC,EAAQC,GACvC,mBAAnBF,EAAQG,QACVlJ,EAAmB+I,EAAQ9I,QAAS8I,EAAQ1C,SA2IhDtF,OAAOC,QAAQC,YAAY,CACzBhB,QAAS","sources":["src/js/main.js"],"sourcesContent":["/* global chrome */\ndocument.addEventListener('DOMContentLoaded', () => {\n  let fullData\n  let userEmail\n  const modalBody = document.querySelector('.modal-body')\n  let city = ''\n\n  const buildPostsList = (postsList) => {\n    const listWrapper = document.querySelector('.posts__list')\n    const rowTemplate = document.querySelector('.post-template')\n    fullData = postsList\n\n    postsList.forEach((item, idx) => {\n      if (!item['content:encoded']) {\n        item['content:encoded'] = item.description\n      }\n      const clonedItem = rowTemplate.content.cloneNode(true)\n      clonedItem.querySelector('.post__title').innerText = item.title\n      clonedItem.querySelector('.post__provider').innerText = item.providerTitle\n      clonedItem.querySelector('.post__provider').setAttribute('href', item.providerURL)\n      clonedItem.querySelector('.posts__list-item').setAttribute('data-provider', item.providerTitle)\n      clonedItem.querySelector('.post__description').innerHTML = `${String(item.description).substring(0, 130)}...`\n      clonedItem.querySelector('.post__link').setAttribute('href', item.link)\n      clonedItem.querySelector('.btn-modal').setAttribute('data-idx', idx)\n      listWrapper.append(clonedItem)\n    })\n  }\n\n  const fetchResources = () => {\n    const rssFetch = new Request('https://resourcery.vercel.app/feed.json')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    fetch(rssFetch, options)\n      .then(response => response.json())\n      .then(data => {\n        buildPostsList(data)\n      })\n      .catch(console.error)\n  }\n\n  const getLocation = () => {\n    const location = new Request('https://geolocation-db.com/json/59e89620-db25-11eb-ad48-73c00c9b92a3')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    return fetch(location, options)\n      .then(response => response.json())\n      .then(data => {\n        city = data.city.toLowerCase()\n      })\n      .catch(console.error)\n  }\n\n  const fetchWeather = () => {\n    const endpointWeather = new Request(`https://resourcery.vercel.app/weather-${city}.json`)\n    const options = {\n      method: 'GET'\n    }\n    fetch(endpointWeather, options)\n      .then(response => response.json())\n      .then(data => {\n        const cityName = document.querySelector('.city-name')\n        const cityTemp = document.querySelector('.city-temp')\n        const citySky = document.querySelector('.city-sky')\n        const weatherIcon = document.querySelector('.icon-weather')\n        const weatherWrapper = document.querySelector('.weather-wrapper')\n        cityName.innerText = city\n        cityTemp.innerText = Math.round(data.main.feels_like)\n        citySky.innerText = data.weather[0].description\n        weatherIcon.setAttribute('src', `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`)\n        weatherWrapper.classList.remove('d-none')\n      })\n      .catch(console.error)\n  }\n\n  const setGreetings = () => {\n    const myDate = new Date()\n    const hourOfDay = myDate.getHours()\n    const greet = document.querySelector('.greet')\n    let greetString = 'Hello'\n    if (hourOfDay > 5 && hourOfDay <= 12) {\n      greetString = 'Good morning'\n    }\n    if (hourOfDay > 12 && hourOfDay <= 18) {\n      greetString = 'Good afternoon'\n    }\n    if (hourOfDay > 18 && hourOfDay <= 23) {\n      greetString = 'Good night'\n    }\n    if (hourOfDay >= 0 && hourOfDay < 5) {\n      greetString = 'It\\'s late'\n    }\n\n    greet.innerText = greetString\n  }\n\n  const initModal = () => {\n    const myModal = document.getElementById('contentModal')\n    myModal.addEventListener('show.bs.modal', function (evt) {\n      const element = fullData[evt.relatedTarget.getAttribute('data-idx')]\n      modalBody.innerHTML = element['content:encoded']\n    })\n  }\n\n  const addListeners = () => {\n    // calendarField.addEventListener('change', onCalendarChange)\n    document.querySelector('#oauthButton').addEventListener('click', function () {\n      chrome.runtime.sendMessage({\n        message: 'get_auth_token'\n      })\n    })\n\n    document.querySelector('#unauthButton').addEventListener('click', function () {\n      chrome.identity.clearAllCachedAuthTokens(() => {\n        isUserAuth()\n      })\n      // console.log('unauth')\n      // chrome.runtime.sendMessage({\n      //   message: 'sign_out'\n      // })\n    })\n\n    chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n      if (request.action === 'chrome-message') {\n        onGetChromeMessage(request.message, request.data)\n      }\n    })\n  }\n\n  const onGetChromeMessage = (message, objData) => {\n    switch (message) {\n      case 'user_token':\n        onUserToken(objData)\n        break\n      case 'user_profile':\n        // onUserProfile(objData)\n        break\n      case 'user_info': {\n        userEmail = objData.emailAddresses[0].value\n        const nameField = document.querySelector('.userName')\n        nameField.innerText = upperCaseNameFirstLetters(objData.names[0].displayName)\n        break\n      }\n      case 'user_calendar_events': {\n        buildCalendarEvents(objData)\n        break\n      }\n      case 'user_calendar_list': {\n        console.log('user calendar list', objData)\n        break\n      }\n    }\n    // console.log(message, objData)\n  }\n\n  const onUserToken = (token) => {\n    console.log('USER TOKEN IS', token)\n    isUserAuth()\n    chrome.runtime.sendMessage({\n      message: 'get_profile'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_user_information'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_list'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_by_id'\n    })\n  }\n\n  const buildCalendarEvents = (objData) => {\n    const calendarList = document.querySelector('.calendar-list')\n    const calendarEvent = document.querySelector('.calendar-event')\n    const eventList = filterEventList(objData)\n\n    eventList.forEach((event) => {\n      // console.log('>>>', event)\n      const clonedEvent = calendarEvent.content.cloneNode(true)\n      clonedEvent.querySelector('.event-summary').innerText = event.summary\n      if (event.hangoutLink) {\n        clonedEvent.querySelector('.event-hangout').setAttribute('href', event.hangoutLink)\n        clonedEvent.querySelector('.event-hangout').classList.remove('d-none')\n      }\n      clonedEvent.querySelector('.event-start-time').innerText = event.eventStartPretty\n      clonedEvent.querySelector('.event-duration').innerText = event.eventDuration\n      if (event.attendees) {\n        const attendeeStatus = getAtendeeResponseStatus(event.attendees)\n        clonedEvent.querySelector('.calendar-event-item').classList.add(attendeeStatus)\n      }\n      calendarList.append(clonedEvent)\n    })\n  }\n\n  // const getFormattedDate = (strDate) => {\n  //   return new Date(strDate)\n  // }\n\n  const getPrettyHourMinute = (strDate) => {\n    const tmpDate = new Date(strDate)\n    let prettyTime = `${tmpDate.getHours()}h`\n    if (tmpDate.getMinutes()) {\n      prettyTime = `${prettyTime}${tmpDate.getMinutes()}m`\n    }\n    return prettyTime\n  }\n\n  const getDateDiff = (eventStart, eventEnd) => {\n    const startDate = new Date(eventStart)\n    const endDate = new Date(eventEnd)\n    const diffDate = (endDate.getTime() - startDate.getTime()) / 60000\n    return diffDate\n  }\n\n  const getAtendeeResponseStatus = (attendees) => {\n    let attendeeStatus\n    attendees.forEach((attendee) => {\n      if (attendee.email === userEmail) {\n        attendeeStatus = attendee.responseStatus\n      }\n    })\n    return attendeeStatus\n  }\n\n  const filterEventList = (objData) => {\n    const filteredData = []\n    objData.items.forEach((event) => {\n      const eventStart = event.originalStartTime?.dateTime || event.start?.dateTime\n      // FIX this indexof is used to avoid event duplication, but I'm not really confident this is the best way\n      if (event.summary && eventStart && event.id.indexOf('_') === -1) {\n        event.eventStartPretty = getPrettyHourMinute(eventStart)\n        const eventEnd = event.end?.dateTime\n        event.eventDuration = `${getDateDiff(eventStart, eventEnd)}min`\n        filteredData.push(event)\n      }\n    })\n\n    filteredData.sort((a, b) => {\n      return new Date(b.originalStartTime?.dateTime || b.start?.dateTime) - new Date(a.originalStartTime?.dateTime || a.start?.dateTime)\n    })\n\n    return filteredData\n  }\n\n  const upperCaseNameFirstLetters = (name) => {\n    try {\n      const splitStr = name.toLowerCase().split(' ')\n\n      for (let i = 0; i < splitStr.length; i++) {\n        if (splitStr[i].length > 1) {\n          splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n        }\n      }\n\n      return splitStr.join(' ')\n    } catch (error) {\n      console.log(error)\n      return name\n    }\n  }\n\n  const checkUserProfile = () => {\n    chrome.runtime.sendMessage({\n      message: 'get_profile'\n    })\n  }\n\n  const isUserAuth = () => {\n    // token = ''\n    try {\n      chrome.identity.getAuthToken({ interactive: false }, (token) => {\n        // token = grantToken\n        const isAuth = token || false\n        resetUIAuthStatus()\n        const statusClass = (isAuth) ? '.userstatus-auth' : '.userstatus-unauth'\n        const statusElements = document.querySelectorAll(statusClass)\n        statusElements.forEach((element) => {\n          element.classList.add('d-block')\n        })\n        if (isAuth) {\n          document.querySelector('body').classList.add('is-auth')\n          getAuthInfo()\n        }\n      })\n    } catch (err) {\n      console.log('ERROR')\n    }\n  }\n\n  const resetUIAuthStatus = () => {\n    document.querySelector('.calendar-list').textContent = ''\n    document.querySelector('body').classList.remove('is-auth')\n    const authElements = document.querySelectorAll('.userstatus-auth')\n    const unauthElements = document.querySelectorAll('.userstatus-unauth')\n    authElements.forEach((element) => {\n      element.classList.remove('d-block')\n      element.classList.remove('d-none')\n    })\n    unauthElements.forEach((element) => {\n      element.classList.remove('d-block')\n      element.classList.remove('d-none')\n    })\n  }\n\n  const getAuthInfo = () => {\n    chrome.runtime.sendMessage({\n      message: 'get_user_information'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_list'\n    })\n    chrome.runtime.sendMessage({\n      message: 'get_calendar_by_id'\n    })\n  }\n\n  // const getUserPrefs = () => {\n  //   return chrome.storage.sync.get({\n  //     role: ''\n  //   }, function (items) {\n  //     return items\n  //   })\n  // }\n\n  // const getCalendar = () => {\n\n  // return calendar list\n  // need scope https://www.googleapis.com/auth/calendar.readonly\n  // GET https://www.googleapis.com/calendar/v3/users/me/calendarList\n\n  // get calendar with id\n  // GET https://www.googleapis.com/calendar/v3/calendars/calendarId\n  // }\n\n  // https://developers.google.com/identity/sign-in/web/sign-in\n  // const getBasicProfile = (googleUser) => {\n  //   const profile = googleUser.getBasicProfile()\n  //   console.log('ID: ' + profile.getId()) // Do not send to your backend! Use an ID token instead.\n  //   console.log('Name: ' + profile.getName())\n  //   console.log('Image URL: ' + profile.getImageUrl())\n  //   console.log('Email: ' + profile.getEmail()) // This is null if the 'email' scope is not present.\n  // }\n\n  // const handleCredentialResponse = () => {\n  //   console.log('111')\n  // }\n  // window.onload = function () {\n  //   google.accounts.id.initialize({\n  //     client_id: '85500286524-e912nst858563iib207gbhhmcg240fol.apps.googleusercontent.com',\n  //     callback: handleCredentialResponse\n  //   })\n  //   // google.accounts.id.prompt();\n  // }\n\n  // https://developer.chrome.com/docs/apps/app_identity/\n  // const userPrefs = getUserPrefs()\n  fetchResources()\n  getLocation()\n    .then(() => {\n      fetchWeather()\n      setGreetings()\n    })\n  isUserAuth()\n  initModal()\n  addListeners()\n  checkUserProfile()\n\n  // getCalendar()\n})\n"],"names":["document","addEventListener","fullData","userEmail","modalBody","querySelector","city","onGetChromeMessage","message","objData","onUserToken","emailAddresses","value","innerText","upperCaseNameFirstLetters","names","displayName","buildCalendarEvents","console","log","token","isUserAuth","chrome","runtime","sendMessage","calendarList","calendarEvent","filterEventList","forEach","event","clonedEvent","content","cloneNode","summary","hangoutLink","setAttribute","classList","remove","eventStartPretty","eventDuration","attendees","attendeeStatus","getAtendeeResponseStatus","add","append","attendee","email","responseStatus","filteredData","items","ref1","eventStart","ref","originalStartTime","dateTime","start","id","indexOf","strDate","tmpDate","Date","prettyTime","getHours","getMinutes","getPrettyHourMinute","eventEnd","end","startDate","getTime","getDateDiff","push","sort","a","b","ref6","ref7","ref8","name","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","error","identity","getAuthToken","interactive","isAuth","resetUIAuthStatus","statusClass","querySelectorAll","element","getAuthInfo","err","textContent","authElements","unauthElements","rssFetch","Request","fetch","method","then","response","json","data","postsList","listWrapper","rowTemplate","item","idx","description","clonedItem","title","providerTitle","providerURL","innerHTML","String","link","buildPostsList","catch","fetchResources","location","getLocation","endpointWeather","cityName","cityTemp","citySky","weatherIcon","weatherWrapper","Math","round","main","feels_like","weather","icon","fetchWeather","hourOfDay","greetString","setGreetings","getElementById","evt","relatedTarget","getAttribute","clearAllCachedAuthTokens","onMessage","addListener","request","sender","sendResponse","action"],"version":3,"file":"index.b7c77cf4.js.map","sourceRoot":"../"}