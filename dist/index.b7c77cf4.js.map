{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["/* global chrome, google */\ndocument.addEventListener('DOMContentLoaded', () => {\n  let fullData\n  const modalBody = document.querySelector('.modal-body')\n  let city = ''\n\n  const buildPostsList = (postsList) => {\n    const listWrapper = document.querySelector('.posts__list')\n    const rowTemplate = document.querySelector('.post-template')\n    fullData = postsList\n\n    postsList.forEach((item, idx) => {\n      if (!item['content:encoded']) {\n        item['content:encoded'] = item.description\n      }\n      const clonedItem = rowTemplate.content.cloneNode(true)\n      clonedItem.querySelector('.post__title').innerText = item.title\n      clonedItem.querySelector('.post__provider').innerText = item.providerTitle\n      clonedItem.querySelector('.post__provider').setAttribute('href', item.providerURL)\n      clonedItem.querySelector('.posts__list-item').setAttribute('data-provider', item.providerTitle)\n      clonedItem.querySelector('.post__description').innerHTML = `${String(item.description).substring(0, 130)}...`\n      clonedItem.querySelector('.post__link').setAttribute('href', item.link)\n      clonedItem.querySelector('.btn-modal').setAttribute('data-idx', idx)\n      listWrapper.append(clonedItem)\n    })\n  }\n\n  const fetchResources = () => {\n    console.log('>>>', userPrefs)\n    const rssFetch = new Request('https://resourcery.vercel.app/feed.json')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    fetch(rssFetch, options)\n      .then(response => response.json())\n      .then(data => {\n        buildPostsList(data)\n      })\n      .catch(console.error)\n  }\n\n  const getLocation = () => {\n    const location = new Request('https://geolocation-db.com/json/59e89620-db25-11eb-ad48-73c00c9b92a3')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    return fetch(location, options)\n      .then(response => response.json())\n      .then(data => {\n        city = data.city.toLowerCase()\n      })\n      .catch(console.error)\n  }\n\n  const fetchWeather = () => {\n    const endpointWeather = new Request(`https://resourcery.vercel.app/weather-${city}.json`)\n    const options = {\n      method: 'GET'\n    }\n    fetch(endpointWeather, options)\n      .then(response => response.json())\n      .then(data => {\n        const cityName = document.querySelector('.city-name')\n        const cityTemp = document.querySelector('.city-temp')\n        const citySky = document.querySelector('.city-sky')\n        const weatherIcon = document.querySelector('.icon-weather')\n        const weatherWrapper = document.querySelector('.weather-wrapper')\n        cityName.innerText = city\n        cityTemp.innerText = Math.round(data.main.feels_like)\n        citySky.innerText = data.weather[0].description\n        weatherIcon.setAttribute('src', `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`)\n        weatherWrapper.classList.remove('d-none')\n      })\n      .catch(console.error)\n  }\n\n  const setGreetings = () => {\n    const myDate = new Date()\n    const hourOfDay = myDate.getHours()\n    const greet = document.querySelector('.greet')\n    let greetString = 'Hello'\n    if (hourOfDay > 5 && hourOfDay <= 12) {\n      greetString = 'Good morning'\n    }\n    if (hourOfDay > 12 && hourOfDay <= 18) {\n      greetString = 'Good afternoon'\n    }\n    if (hourOfDay > 18 && hourOfDay <= 23) {\n      greetString = 'Good night'\n    }\n    if (hourOfDay >= 0 && hourOfDay < 5) {\n      greetString = 'It\\'s late'\n    }\n\n    greet.innerText = greetString\n  }\n\n  const initModal = () => {\n    const myModal = document.getElementById('contentModal')\n    myModal.addEventListener('show.bs.modal', function (evt) {\n      const element = fullData[evt.relatedTarget.getAttribute('data-idx')]\n      modalBody.innerHTML = element['content:encoded']\n    })\n  }\n\n  const addListeners = () => {\n    // calendarField.addEventListener('change', onCalendarChange)\n    document.querySelector('button#oauthButton').addEventListener('click', function () {\n      chrome.runtime.sendMessage({\n        message: 'get_auth_token'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_profile'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_user_information'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_calendar_list'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_calendar_by_id'\n      })\n    })\n    chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n      if (request.action === 'chrome-message') {\n        onGetChromeMessage(request.message, request.data)\n      }\n    })\n  }\n\n  const onGetChromeMessage = (message, objData) => {\n    switch (message) {\n      case 'user_profile':\n        break\n      case 'user_info': {\n        const nameField = document.querySelector('.userName')\n        nameField.innerText = upperCaseNameFirstLetters(objData.names[0].displayName)\n        break\n      }\n      case 'user_calendar_events': {\n        buildCalendarEvents(objData)\n        break\n      }\n    }\n    // console.log(message, objData)\n  }\n\n  const buildCalendarEvents = (objData) => {\n    const calendarList = document.querySelector('.calendar-list')\n    const calendarEvent = document.querySelector('.calendar-event')\n    const etags = []\n\n    objData.items.forEach((event) => {\n      const eventStart = event.originalStartTime?.dateTime || event.start?.dateTime\n      if (event.summary && eventStart && !etags.includes(event.etag)) {\n        console.log(event)\n        etags.push(event.etag);\n        const clonedEvent = calendarEvent.content.cloneNode(true)\n        clonedEvent.querySelector('.event-summary').innerText = event.summary\n        if (event.hangoutLink) {\n          clonedEvent.querySelector('.event-hangout').setAttribute('href', event.hangoutLink)\n        } else {\n          clonedEvent.querySelector('.event-hangout').classList.add('d-none')\n        }\n        clonedEvent.querySelector('.event-start-time').innerText = getPrettyHourMinute(eventStart);\n        const eventEnd = event.end?.dateTime\n        clonedEvent.querySelector('.event-duration').innerText = `${getDateDiff(eventStart, eventEnd)}min`\n        if (event.status === 'confirmed') {\n          console.log('!!!', clonedEvent)\n          clonedEvent.querySelector('.calendar-event-item').classList.add('statusConfirmed');\n        }\n        calendarList.append(clonedEvent)\n      }\n    })\n  }\n\n  const getFormattedDate = (strDate) => {\n    return new Date(strDate);\n  }\n\n  const getPrettyHourMinute = (strDate) => {\n    const tmpDate = new Date(strDate);\n    let prettyTime = `${tmpDate.getHours()}h`\n    if (tmpDate.getMinutes()) {\n      prettyTime = `${prettyTime}${tmpDate.getMinutes()}m`\n    }\n    return prettyTime;\n  }\n\n  const getDateDiff = (eventStart, eventEnd) => {\n    const startDate = new Date(eventStart);\n    const endDate = new Date(eventEnd);\n    const diffDate = (endDate.getTime() - startDate.getTime()) / 60000\n    return diffDate\n  }\n\n  const upperCaseNameFirstLetters = (name) => {\n    try {\n      const splitStr = name.toLowerCase().split(' ')\n\n      for (let i = 0; i < splitStr.length; i++) {\n        if (splitStr[i].length > 1) {\n          splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n        }\n      }\n\n      return splitStr.join(' ')\n    } catch (error) {\n      console.log(error)\n      return name\n    }\n  }\n\n  const getUserPrefs = () => {\n    return chrome.storage.sync.get({\n      role: ''\n    }, function (items) {\n      return items\n    })\n  }\n\n  const getCalendar = () => {\n\n    // return calendar list\n    // need scope https://www.googleapis.com/auth/calendar.readonly\n    // GET https://www.googleapis.com/calendar/v3/users/me/calendarList\n\n    // get calendar with id\n    // GET https://www.googleapis.com/calendar/v3/calendars/calendarId\n  }\n\n  // https://developers.google.com/identity/sign-in/web/sign-in\n  const getBasicProfile = (googleUser) => {\n    const profile = googleUser.getBasicProfile()\n    console.log('ID: ' + profile.getId()) // Do not send to your backend! Use an ID token instead.\n    console.log('Name: ' + profile.getName())\n    console.log('Image URL: ' + profile.getImageUrl())\n    console.log('Email: ' + profile.getEmail()) // This is null if the 'email' scope is not present.\n  }\n\n  const handleCredentialResponse = () => {\n    console.log('111')\n  }\n  window.onload = function () {\n    google.accounts.id.initialize({\n      client_id: '85500286524-e912nst858563iib207gbhhmcg240fol.apps.googleusercontent.com',\n      callback: handleCredentialResponse\n    })\n    // google.accounts.id.prompt();\n  }\n\n  // https://developer.chrome.com/docs/apps/app_identity/\n  const userPrefs = getUserPrefs()\n  fetchResources()\n  getLocation()\n    .then(() => {\n      fetchWeather()\n      setGreetings()\n    })\n  initModal()\n  addListeners()\n\n  // getCalendar()\n})\n"],"names":["document","addEventListener","fullData","modalBody","querySelector","city","onGetChromeMessage","message","objData","innerText","upperCaseNameFirstLetters","names","displayName","buildCalendarEvents","calendarList","calendarEvent","etags","items","forEach","event","ref1","eventStart","ref","originalStartTime","dateTime","start","summary","includes","etag","console","log","push","clonedEvent","content","cloneNode","hangoutLink","setAttribute","classList","add","getPrettyHourMinute","eventEnd","end","getDateDiff","status","append","strDate","tmpDate","Date","prettyTime","getHours","getMinutes","startDate","getTime","name","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","error","handleCredentialResponse","window","onload","google","accounts","id","initialize","client_id","callback","userPrefs","chrome","storage","sync","get","role","rssFetch","Request","fetch","method","then","response","json","data","postsList","listWrapper","rowTemplate","item","idx","description","clonedItem","title","providerTitle","providerURL","innerHTML","String","link","buildPostsList","catch","fetchResources","location","getLocation","endpointWeather","cityName","cityTemp","citySky","weatherIcon","weatherWrapper","Math","round","main","feels_like","weather","icon","remove","fetchWeather","hourOfDay","greetString","setGreetings","getElementById","evt","element","relatedTarget","getAttribute","runtime","sendMessage","onMessage","addListener","request","sender","sendResponse","action"],"version":3,"file":"index.b7c77cf4.js.map","sourceRoot":"../"}