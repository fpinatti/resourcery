{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["/* global chrome, google */\ndocument.addEventListener('DOMContentLoaded', () => {\n  let fullData\n  let userEmail\n  const modalBody = document.querySelector('.modal-body')\n  let city = ''\n\n  const buildPostsList = (postsList) => {\n    const listWrapper = document.querySelector('.posts__list')\n    const rowTemplate = document.querySelector('.post-template')\n    fullData = postsList\n\n    postsList.forEach((item, idx) => {\n      if (!item['content:encoded']) {\n        item['content:encoded'] = item.description\n      }\n      const clonedItem = rowTemplate.content.cloneNode(true)\n      clonedItem.querySelector('.post__title').innerText = item.title\n      clonedItem.querySelector('.post__provider').innerText = item.providerTitle\n      clonedItem.querySelector('.post__provider').setAttribute('href', item.providerURL)\n      clonedItem.querySelector('.posts__list-item').setAttribute('data-provider', item.providerTitle)\n      clonedItem.querySelector('.post__description').innerHTML = `${String(item.description).substring(0, 130)}...`\n      clonedItem.querySelector('.post__link').setAttribute('href', item.link)\n      clonedItem.querySelector('.btn-modal').setAttribute('data-idx', idx)\n      listWrapper.append(clonedItem)\n    })\n  }\n\n  const fetchResources = () => {\n    const rssFetch = new Request('https://resourcery.vercel.app/feed.json')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    fetch(rssFetch, options)\n      .then(response => response.json())\n      .then(data => {\n        buildPostsList(data)\n      })\n      .catch(console.error)\n  }\n\n  const getLocation = () => {\n    const location = new Request('https://geolocation-db.com/json/59e89620-db25-11eb-ad48-73c00c9b92a3')\n    // const headers = new Headers()\n    const options = {\n      method: 'GET'\n    }\n    return fetch(location, options)\n      .then(response => response.json())\n      .then(data => {\n        city = data.city.toLowerCase()\n      })\n      .catch(console.error)\n  }\n\n  const fetchWeather = () => {\n    const endpointWeather = new Request(`https://resourcery.vercel.app/weather-${city}.json`)\n    const options = {\n      method: 'GET'\n    }\n    fetch(endpointWeather, options)\n      .then(response => response.json())\n      .then(data => {\n        const cityName = document.querySelector('.city-name')\n        const cityTemp = document.querySelector('.city-temp')\n        const citySky = document.querySelector('.city-sky')\n        const weatherIcon = document.querySelector('.icon-weather')\n        const weatherWrapper = document.querySelector('.weather-wrapper')\n        cityName.innerText = city\n        cityTemp.innerText = Math.round(data.main.feels_like)\n        citySky.innerText = data.weather[0].description\n        weatherIcon.setAttribute('src', `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`)\n        weatherWrapper.classList.remove('d-none')\n      })\n      .catch(console.error)\n  }\n\n  const setGreetings = () => {\n    const myDate = new Date()\n    const hourOfDay = myDate.getHours()\n    const greet = document.querySelector('.greet')\n    let greetString = 'Hello'\n    if (hourOfDay > 5 && hourOfDay <= 12) {\n      greetString = 'Good morning'\n    }\n    if (hourOfDay > 12 && hourOfDay <= 18) {\n      greetString = 'Good afternoon'\n    }\n    if (hourOfDay > 18 && hourOfDay <= 23) {\n      greetString = 'Good night'\n    }\n    if (hourOfDay >= 0 && hourOfDay < 5) {\n      greetString = 'It\\'s late'\n    }\n\n    greet.innerText = greetString\n  }\n\n  const initModal = () => {\n    const myModal = document.getElementById('contentModal')\n    myModal.addEventListener('show.bs.modal', function (evt) {\n      const element = fullData[evt.relatedTarget.getAttribute('data-idx')]\n      modalBody.innerHTML = element['content:encoded']\n    })\n  }\n\n  const addListeners = () => {\n    // calendarField.addEventListener('change', onCalendarChange)\n    document.querySelector('button#oauthButton').addEventListener('click', function () {\n      chrome.runtime.sendMessage({\n        message: 'get_auth_token'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_profile'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_user_information'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_calendar_list'\n      })\n      chrome.runtime.sendMessage({\n        message: 'get_calendar_by_id'\n      })\n    })\n    chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n      if (request.action === 'chrome-message') {\n        onGetChromeMessage(request.message, request.data)\n      }\n    })\n  }\n\n  const onGetChromeMessage = (message, objData) => {\n    switch (message) {\n      case 'user_profile':\n        break\n      case 'user_info': {\n        userEmail = objData.emailAddresses[0].value\n        const nameField = document.querySelector('.userName')\n        nameField.innerText = upperCaseNameFirstLetters(objData.names[0].displayName)\n        break\n      }\n      case 'user_calendar_events': {\n        buildCalendarEvents(objData)\n        break\n      }\n      case 'user_calendar_list': {\n        console.log('user calendar list', objData)\n        break\n      }\n    }\n    // console.log(message, objData)\n  }\n\n  const buildCalendarEvents = (objData) => {\n    const calendarList = document.querySelector('.calendar-list')\n    const calendarEvent = document.querySelector('.calendar-event')\n    const eventList = filterEventList(objData)\n\n    eventList.forEach((event) => {\n      //console.log('>>>', event)\n      const clonedEvent = calendarEvent.content.cloneNode(true)\n      clonedEvent.querySelector('.event-summary').innerText = event.summary\n      if (event.hangoutLink) {\n        clonedEvent.querySelector('.event-hangout').setAttribute('href', event.hangoutLink)\n        clonedEvent.querySelector('.event-hangout').classList.remove('d-none')\n      }\n      clonedEvent.querySelector('.event-start-time').innerText = event.eventStartPretty\n      clonedEvent.querySelector('.event-duration').innerText = event.eventDuration\n      if (event.attendees) {\n        const attendeeStatus = getAtendeeResponseStatus(event.attendees)\n        clonedEvent.querySelector('.calendar-event-item').classList.add(attendeeStatus)\n      }\n      calendarList.append(clonedEvent)\n    })\n  }\n\n  // const getFormattedDate = (strDate) => {\n  //   return new Date(strDate)\n  // }\n\n  const getPrettyHourMinute = (strDate) => {\n    const tmpDate = new Date(strDate)\n    let prettyTime = `${tmpDate.getHours()}h`\n    if (tmpDate.getMinutes()) {\n      prettyTime = `${prettyTime}${tmpDate.getMinutes()}m`\n    }\n    return prettyTime\n  }\n\n  const getDateDiff = (eventStart, eventEnd) => {\n    const startDate = new Date(eventStart)\n    const endDate = new Date(eventEnd)\n    const diffDate = (endDate.getTime() - startDate.getTime()) / 60000\n    return diffDate\n  }\n\n  const getAtendeeResponseStatus = (attendees) => {\n    let attendeeStatus\n    attendees.forEach((attendee) => {\n      if (attendee.email === userEmail) {\n        attendeeStatus = attendee.responseStatus\n      }\n    })\n    return attendeeStatus\n  }\n\n  const filterEventList = (objData) => {\n    const filteredData = []\n    objData.items.forEach((event) => {\n      const eventStart = event.originalStartTime?.dateTime || event.start?.dateTime\n      if (event.summary && eventStart && event.id.indexOf('_') === -1) {\n        event.eventStartPretty = getPrettyHourMinute(eventStart)\n        const eventEnd = event.end?.dateTime\n        event.eventDuration = `${getDateDiff(eventStart, eventEnd)}min`\n        filteredData.push(event)\n      }\n    })\n\n    filteredData.sort((a, b) => {\n      return new Date(b.originalStartTime?.dateTime || b.start?.dateTime) - new Date(a.originalStartTime?.dateTime || a.start?.dateTime)\n    })\n\n    return filteredData\n  }\n\n  const upperCaseNameFirstLetters = (name) => {\n    try {\n      const splitStr = name.toLowerCase().split(' ')\n\n      for (let i = 0; i < splitStr.length; i++) {\n        if (splitStr[i].length > 1) {\n          splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n        }\n      }\n\n      return splitStr.join(' ')\n    } catch (error) {\n      console.log(error)\n      return name\n    }\n  }\n\n  const getUserPrefs = () => {\n    return chrome.storage.sync.get({\n      role: ''\n    }, function (items) {\n      return items\n    })\n  }\n\n  const getCalendar = () => {\n\n    // return calendar list\n    // need scope https://www.googleapis.com/auth/calendar.readonly\n    // GET https://www.googleapis.com/calendar/v3/users/me/calendarList\n\n    // get calendar with id\n    // GET https://www.googleapis.com/calendar/v3/calendars/calendarId\n  }\n\n  // https://developers.google.com/identity/sign-in/web/sign-in\n  const getBasicProfile = (googleUser) => {\n    const profile = googleUser.getBasicProfile()\n    console.log('ID: ' + profile.getId()) // Do not send to your backend! Use an ID token instead.\n    console.log('Name: ' + profile.getName())\n    console.log('Image URL: ' + profile.getImageUrl())\n    console.log('Email: ' + profile.getEmail()) // This is null if the 'email' scope is not present.\n  }\n\n  const handleCredentialResponse = () => {\n    console.log('111')\n  }\n  window.onload = function () {\n    google.accounts.id.initialize({\n      client_id: '85500286524-e912nst858563iib207gbhhmcg240fol.apps.googleusercontent.com',\n      callback: handleCredentialResponse\n    })\n    // google.accounts.id.prompt();\n  }\n\n  // https://developer.chrome.com/docs/apps/app_identity/\n  const userPrefs = getUserPrefs()\n  fetchResources()\n  getLocation()\n    .then(() => {\n      fetchWeather()\n      setGreetings()\n    })\n  initModal()\n  addListeners()\n\n  // getCalendar()\n})\n"],"names":["document","addEventListener","fullData","userEmail","modalBody","querySelector","city","onGetChromeMessage","message","objData","emailAddresses","value","innerText","upperCaseNameFirstLetters","names","displayName","buildCalendarEvents","console","log","calendarList","calendarEvent","filterEventList","forEach","event","clonedEvent","content","cloneNode","summary","hangoutLink","setAttribute","classList","remove","eventStartPretty","eventDuration","attendees","attendeeStatus","getAtendeeResponseStatus","add","append","attendee","email","responseStatus","filteredData","items","ref1","eventStart","ref","originalStartTime","dateTime","start","id","indexOf","strDate","tmpDate","Date","prettyTime","getHours","getMinutes","getPrettyHourMinute","eventEnd","end","startDate","getTime","getDateDiff","push","sort","a","b","ref6","ref7","ref8","name","splitStr","toLowerCase","split","i","length","charAt","toUpperCase","substring","join","error","handleCredentialResponse","window","onload","google","accounts","initialize","client_id","callback","chrome","storage","sync","get","role","rssFetch","Request","fetch","method","then","response","json","data","postsList","listWrapper","rowTemplate","item","idx","description","clonedItem","title","providerTitle","providerURL","innerHTML","String","link","buildPostsList","catch","fetchResources","location","getLocation","endpointWeather","cityName","cityTemp","citySky","weatherIcon","weatherWrapper","Math","round","main","feels_like","weather","icon","fetchWeather","hourOfDay","greetString","setGreetings","getElementById","evt","element","relatedTarget","getAttribute","runtime","sendMessage","onMessage","addListener","request","sender","sendResponse","action"],"version":3,"file":"index.b7c77cf4.js.map","sourceRoot":"../"}