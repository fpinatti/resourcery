{"mappings":"AAEA,MA6GMA,EAAcC,IAClB,MAAMC,EAAQ,IAAIC,KAEL,UAATF,EACFC,EAAME,YAAY,EAAG,EAAG,EAAG,GAE3BF,EAAME,YAAY,GAAI,GAAI,GAAI,KAIhC,OADkBF,EAAMG,eAQpBC,EAAY,CAAIC,EAAaC,KACjCC,OAAOC,KAAKC,MAAM,CAACC,QAAQ,EAAMC,eAAe,IAAO,SAASH,GAC9D,MAAMI,EAAYJ,EAAK,GACvBD,OAAOC,KAAKK,YAAYD,EAAUE,GAChC,CACEC,OAAQ,iBACRC,QAASX,EACTY,KAAMX,QAKdC,OAAOW,QAAQC,UAAUC,aAAW,CAAEC,EAASC,EAAQC,KAE7B,mBAApBF,EAAQL,QAzIZT,OAAOiB,SAASC,aAAa,CAAEC,aAAa,IAAQ,SAAUC,GAC5DC,QAAQC,IAAG,UAAWF,QAyIK,gBAApBN,EAAQL,QApIjBT,OAAOiB,SAASM,mBACd,CAAEC,cAAe,QACjB,SAAUC,GACR5B,EAAa,eAAgB4B,MAkIJ,yBAApBX,EAAQL,QA5HjBT,OAAOiB,SAASC,aAAa,CAAEC,aAAa,IAAQ,SAAUC,GAQ5DM,MAPc,2HACO,CACnBC,QAAS,CACPC,cAAa,UAAYR,OAK1BS,MAAMC,GAAQA,EAAIC,SAClBF,MAAMC,GAAQjC,EAAa,YAAaiC,QAmHhB,iBAApBhB,EAAQL,QA9GjBT,OAAOiB,SAASC,aAAa,CAAEC,aAAa,IAAQ,SAAUC,GAC5D,MACMY,EAAe,CACnBL,QAAS,CACPC,cAAa,UAAYR,MAI7BM,MAPc,+GAOEM,GACbH,MAAMC,GAAQA,EAAIC,SAClBF,MAAMC,IACL,GAAIA,EAAIG,YAAa,CACnB,MAAMC,EAAUJ,EAAIK,oBACpB,IAAIC,EAAoB,kHAExBF,EAAQG,SAASC,IACfF,GAAoB,kBAAsBG,mBACxCD,QAIJZ,MAAMU,EAAsBJ,GACzBH,MAAMC,GAAQA,EAAIC,SAClBF,MAAMC,GAAQjC,EAAa,gBAAiBiC,YAwF1B,sBAApBhB,EAAQL,QAjFjBT,OAAOiB,SAASC,aAAa,CAAEC,aAAa,IAAQ,SAAUC,GAU5DM,MATc,4GACO,CACnBc,OAAQ,MACRb,QAAS,CACPC,cAAa,UAAYR,IACzBqB,OAAQ,sBAKTZ,MAAMa,GAAaA,EAASX,SAC5BF,MAAK,SAAUnB,GACdb,EAAa,qBAAsBa,SAqEZ,uBAApBI,EAAQL,QA/DjBT,OAAOiB,SAASC,aAAa,CAAEC,aAAa,IAAQ,SAAUC,GAC5D,MAAMuB,EAAe,IAAIjD,KACnBkD,EAAa,IAAIlD,KAEvBiD,EAAahD,YAAY,EAAG,EAAG,EAAG,GAClCiD,EAAWjD,YAAY,GAAI,GAAI,GAAI,KAEnC,MAAMkD,EAAiBtD,EAAW,SAC5BuD,EAAevD,EAAW,OAWhCmC,MATc,2EAA8EmB,aAA0BC,gDACjG,CACnBN,OAAQ,MACRb,QAAS,CACPC,cAAa,UAAYR,IACzBqB,OAAQ,sBAKTZ,MAAMa,GAAaA,EAASX,SAC5BF,MAAK,SAAUnB,GACdb,EAAa,uBAAwBa,SAmB3CW,QAAQC,IAAI","sources":["src/js/background.js"],"sourcesContent":["/* global chrome */\n\nconst API_KEY = 'AIzaSyCACn68SfWwozQbzOXYPqCskkN-XKlgNug'\n\nconst getAuthToken = () => {\n  chrome.identity.getAuthToken({ interactive: true }, function (token) {\n    console.log(`Token: ${token}`)\n  })\n}\n\nconst getUserProfile = () => {\n  chrome.identity.getProfileUserInfo(\n    { accountStatus: 'ANY' },\n    function (userInfo) {\n      sendResponse('user_profile', userInfo)\n    }\n  )\n}\n\nconst getUserInformation = () => {\n  chrome.identity.getAuthToken({ interactive: true }, function (token) {\n    const fetchUrl = `https://people.googleapis.com/v1/people/me?personFields=names,emailAddresses&key=${API_KEY}`\n    const fetchOptions = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    fetch(fetchUrl, fetchOptions)\n      .then((res) => res.json())\n      .then((res) => sendResponse('user_info', res))\n  })\n}\n\nconst getUserContacts = () => {\n  chrome.identity.getAuthToken({ interactive: true }, function (token) {\n    const fetchUrl = `https://people.googleapis.com/v1/contactGroups/all?maxMembers=20&key=${API_KEY}`\n    const fetchOptions = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }\n\n    fetch(fetchUrl, fetchOptions)\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.memberCount) {\n          const members = res.memberResourceNames\n          let fetchPersonFieldsUrl = `https://people.googleapis.com/v1/people:batchGet?personFields=names&key=${API_KEY}`\n\n          members.forEach((member) => {\n            fetchPersonFieldsUrl += `&resourceNames=${encodeURIComponent(\n              member\n            )}`\n          })\n\n          fetch(fetchPersonFieldsUrl, fetchOptions)\n            .then((res) => res.json())\n            .then((res) => sendResponse('user_contacts', res))\n        }\n      })\n  })\n}\n\nconst getCalendarList = () => {\n  chrome.identity.getAuthToken({ interactive: true }, function (token) {\n    const fetchUrl = `https://www.googleapis.com/calendar/v3/users/me/calendarList?&key=${API_KEY}`\n    const fetchOptions = {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json'\n      }\n    }\n\n    fetch(fetchUrl, fetchOptions)\n      .then((response) => response.json())\n      .then(function (data) {\n        sendResponse('user_calendar_list', data)\n      })\n  })\n}\n\nconst getCalendarEvents = () => {\n  chrome.identity.getAuthToken({ interactive: true }, function (token) {\n    const startDayDate = new Date()\n    const endDayDate = new Date()\n\n    startDayDate.setUTCHours(0, 0, 0, 0)\n    endDayDate.setUTCHours(23, 59, 59, 999)\n\n    const dateToISOStart = getISODate('start')\n    const dateToISOEnd = getISODate('end')\n\n    const fetchUrl = `https://www.googleapis.com/calendar/v3/calendars/primary/events?timeMin=${dateToISOStart}&timeMax=${dateToISOEnd}&key=${API_KEY}`\n    const fetchOptions = {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json'\n      }\n    }\n\n    fetch(fetchUrl, fetchOptions)\n      .then((response) => response.json())\n      .then(function (data) {\n        sendResponse('user_calendar_events', data)\n      })\n  })\n}\n\nconst getISODate = (type) => {\n  const today = new Date()\n\n  if (type === 'start') {\n    today.setUTCHours(0, 0, 0, 0)\n  } else {\n    today.setUTCHours(23, 59, 59, 999)\n  }\n\n  const dateToISO = today.toISOString()\n  return dateToISO\n}\n\nconst defaultCallback = () => {\n  console.log('Command not found!')\n}\n\nconst sendResponse = (userMessage, objData) => {\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n    const activeTab = tabs[0];\n    chrome.tabs.sendMessage(activeTab.id,\n      {\n        action: 'chrome-message',\n        message: userMessage,\n        data: objData\n      })\n  })\n}\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  // TODO: Improve If logic\n  if (request.message === 'get_auth_token') getAuthToken()\n  else if (request.message === 'get_profile') getUserProfile()\n  else if (request.message === 'get_user_information') getUserInformation()\n  else if (request.message === 'get_contacts') getUserContacts()\n  else if (request.message === 'get_calendar_list') getCalendarList()\n  else if (request.message === 'get_calendar_by_id') getCalendarEvents()\n  else defaultCallback()\n})\n"],"names":["$b91cf73e25b80f1a$var$getISODate","type","today","Date","setUTCHours","toISOString","$b91cf73e25b80f1a$var$sendResponse","userMessage","objData","chrome","tabs","query","active","currentWindow","activeTab","sendMessage","id","action","message","data","runtime","onMessage","addListener","request","sender","sendResponse","identity","getAuthToken","interactive","token","console","log","getProfileUserInfo","accountStatus","userInfo","fetch","headers","Authorization","then","res","json","fetchOptions","memberCount","members","memberResourceNames","fetchPersonFieldsUrl","forEach","member","encodeURIComponent","method","Accept","response","startDayDate","endDayDate","dateToISOStart","dateToISOEnd"],"version":3,"file":"background.js.map","sourceRoot":"../../"}